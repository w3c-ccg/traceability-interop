{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "6132f161-c201-4ee1-ac43-ab3884b13dea",
        "name": "Clear Cache",
        "item": [
          {
            "id": "09f2fb23-12da-41e8-b6e5-0feec4535ba2",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73071857-2035-483a-af8e-a13a8918e153",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f6a8c50a-9860-4ba5-86e0-046d99841044"
                }
              }
            ]
          },
          {
            "id": "061877fa-fd6b-4211-b1be-15fe94c80f87",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "61853bd2-8c40-41da-a86c-76f8bdf5162a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f597fa31-098f-4666-ba21-b065dddde4fd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "6a03336b-dc5c-4905-b488-fc68b3b48aa8",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "b08719f8-8308-4a76-acb9-ac9ccaabe863",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4448d87f-7ea5-4e29-9e86-1c23f90a1805",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e35b2375-9f1e-4a66-8ab4-abaa26257ca5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "04c4cb07-05f3-4166-8509-819f1db6d005"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a9deaf37-a60b-411c-831c-ee7a8f600306",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93aca95e-7ca6-469f-b589-cce0b11ce4ca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "9e54e912-74e5-41a8-9708-1bfdf9369ec2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2d1931ca-a4a9-4251-b1d9-7ab3258330bd"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "aa1e225b-25ab-433e-b500-fbf008075420",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0afb59bf-09b2-4304-90ac-42b8fbea51ec"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ec4661ea-8754-4d93-9fa4-2b83d9b2892e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af258721-530e-4f86-a30b-52a7c240c3cf"
            }
          }
        ]
      },
      {
        "id": "b2bfd6ff-2a03-4954-937a-0456e11e0260",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "f9f29595-a966-4b97-9cbc-9c32e4a689c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f019a22a-0ed7-4a61-a1a1-58ab9695c138",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "caf02e8b-1134-42a4-8b3b-8f05df655128",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63e6480b-d90a-4214-96e5-7f2d5c141c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fe2bc1d7-008a-408f-ab32-66d31ff7ed3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "690b5834-d5f5-45e5-a6a6-141c38793cd5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21a3bd1d-a8a4-465f-833a-1119a2dce410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f552de65-8116-4695-bb53-3d89077dd10d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66365c5f-cb3c-49b6-ae4a-b152d5a10ad2",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62738ad6-f577-40c4-8e36-0dc9aea0a44f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95145f0e-0146-4a69-bbb5-34e769bfe86b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "646fec0d-673e-4c01-a0c0-7a2f29ee0c37",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f3b35184-e23c-4d28-b953-fb576c5fe168",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21930b6-45a7-434c-8fa0-2b88923a1c50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3e1f6cd3-b971-4fdb-9e99-5664f3d8e195"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27457f9d-a347-4b19-9b0b-1dae9b3f163c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90a17a2e-2aff-4b6c-bd31-c73abc4648c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc0b8ea-d044-4aa3-9d68-a1bb26858f6a",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af385bb8-b98c-4c2c-a377-6cefedab5886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "279226c5-2356-4162-ad03-89c5381ff0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77570d4f-7137-4faf-be41-edccbf530881",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "69bb6d52-d1ea-4a09-9f5c-0484eb8fc262"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "780002a8-b696-4685-a88c-62da4d341c0d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bae3f587-cc73-49ea-b6c9-d002ca7498b5",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "496db155-42ef-4c9e-8891-744c30fd0886",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cc517403-d95e-401e-bc73-847bb382260e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "487e5181-7ed0-4846-b058-6152ca6fce26",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "aea2de9b-5c7c-4dad-baca-a080d7c66600"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ad6c246c-e513-4bbf-a136-9b943e29c8bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0d6d0a0f-a299-4803-a1a0-7d0f64d4e304"
            }
          }
        ]
      },
      {
        "id": "be9f1fbc-3532-4272-81eb-5c27a0ffc8d3",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "e108d052-1078-434d-8a3e-e8be084dc62f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "51b111a8-b579-4216-b987-2016f6b354af",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "06461bfa-e53d-4645-8393-8c4e978052f9",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f31f9aa-f037-4d25-a394-99a7b878ac69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ccf6d7b-7bbf-4951-aafd-8b8e350e6a67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "523a02df-37d9-4c70-b399-082c1d755be6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0b35de9-c064-4a88-a8c5-98f4f58d2560"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3dbeb99-4e68-4940-8cad-f8ccc803121f",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc95581-b04a-4c5d-872d-58b224ed8ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff6622f2-907c-417a-a29b-29882697dc59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df6aef0-f00e-4dcb-b1be-6f3c0c4adf2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a5d4bf2-7012-4318-b0d2-a666688b575a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbec864b-7050-4963-b341-75983b9b5e5e",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43e4b69-ec80-4e7e-bee7-bf89363f6642",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5791164-0a6b-4084-b700-b05b6aaf43d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fca0986c-8477-41f1-9350-054ef666977e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62032ccf-77eb-416a-8565-e2c4a7562289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896b7f2e-160b-4f12-82fb-4a30eef41b8e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3a25d8-ad24-4b07-9037-5ddc80578da6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3d5a226-57c6-4f13-a928-8fc6f472af46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b2aacd5-8be7-459f-b4c9-1c009660f174",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c7d8a93c-26cb-467d-b4d6-2d4d9254c995"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7591a0-deaf-42a3-97de-26c7e0e78c75",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f22206-9ae0-41f4-b942-96ecd53d9e9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "266f0783-0c17-4239-94fa-62f9d882e113"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da7d35c2-a697-4f39-a568-9ac7a8688e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0e043ef3-854e-4a73-9607-9fe5e22b3f13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2dc84c9-6bac-436a-8435-c5a0ebbedf06",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fc093b8-da4b-4e90-9180-260b804c520c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0b71946-7a12-46f7-ab46-b8f43446f0da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "070bcd82-2f90-4b22-88c2-36aec1fa2d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9b63f202-fd91-4cd5-9e49-78df8fb7e04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8544a8ef-5b69-4cad-8b03-c7fc21dbdfcb",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51510869-4d87-47dc-a0f3-1caff969430f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51608a8c-6ff4-46b7-9594-19f8ed6a3c26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4b9287-7602-4dba-8dc7-c9926a12fe94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c1bd6a9-8bbd-49fa-abaa-a5fff262cb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f40be8f1-fc38-4944-b6a6-50a6f64786ba",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75479cc7-7de8-46a6-b3af-3a17ffcfc689",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2874be76-e7b1-4906-805c-50527e993bfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded02785-bd60-42dc-81e7-3e45ca655e40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c4148a9-8c2d-4e5d-ac1a-53c384a6146a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f926bd4-3c2c-4e27-983f-0be363c82f02",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "474f7604-8150-4284-9ae6-b13802b2683d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96bf6554-12e1-40a7-ade8-f77e3dce17d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3ff03c6-2e96-4266-bd98-e65b532cc0f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "72631489-5dbf-4af2-897b-6ad1b2617383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28bb5134-5087-4ba6-98b7-c65a9c97850d",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe25e915-0db1-47cb-8f9d-af5e6a7d0bdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f2e317-e6a4-40f0-9b80-5c26bf2fd096"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "123fa809-319f-4e97-a793-77e8bca00fb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ead220f4-aa81-427c-98e2-fa96a288e923"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed0840a0-738c-415a-a259-788303da3ee3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f69a4ad4-9481-412d-9beb-80dda1df4935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d4fa4f45-f138-43f7-8596-f1c024b91fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aaeb6a5-6e97-45d2-b510-a6d4e1d2ef78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f758fc13-4367-4186-8caf-881288ea6bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a101637e-869b-4118-88de-36a77698c6db",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d2c60f7-943b-4b12-894e-833a535953ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46ea5242-637d-431f-a882-79bef67c844b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6831cc60-a098-4886-aa6c-2e06f4079242",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6157b0c7-5ea6-44bd-a7d4-dd2728e90ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5acd4718-61af-44f2-af8d-86301cd21e2b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b2bb92d-9041-4206-b1b2-e22dae5e82f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ad886ca-8345-4fc1-b78e-918590b1e3ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09188f91-4468-4db2-9f7c-411e65564f01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9636f5f1-d16e-40f9-bb30-360480dd254d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0ca9bec-2e38-46e5-96f1-9b49531b3b78",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ef26318-b6f6-4659-bd34-6425f637719a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bc753e-c460-45f2-981e-0c1b7c3c1a28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9864f120-0e17-4f2f-9285-50d36e56ebe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "35189abd-7743-4d2a-8264-036c190c60fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359ae59f-248c-4191-af32-1a82d042dbfc",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2215360f-f5ef-4f08-9f81-abfd6fda2ebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "433087b0-ff6e-42dd-8845-0276e4520865"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12c9864-fa18-45b6-ab8b-bbfc22a17a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b21336bd-88f5-4bcf-aa62-3a3af06b5e94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15697015-2874-474e-8749-7447971c158a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91046a7-7b60-4eee-a5cc-b215ebbc17aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5d40843-a458-49cc-9608-af71247abe52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65340758-87f3-4f6b-bf3b-82c16be23fef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "edc1d342-8f46-48a8-a8d0-e4706a057312"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a4f6f6-d6b5-4e04-886c-9bbfa47299db",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ab4fa17-ad3f-45a8-aa13-da7194147673",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87b984fa-deff-4715-9733-0ee95154bbbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "152c4f10-a457-464f-ad5a-4b817cd90c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8940b39-5ff1-4347-baea-8039ebe7ca05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0808316e-09ea-441e-97d6-637083476da3",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45f926c-07e9-442a-952d-9e5318dcd32f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f184345b-e396-4569-88a4-48c8e516239a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e199e2fe-6b84-4fe4-9582-2564e98e1850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21969164-f0b9-43b3-b254-b7bc9fcc1fb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d708ef1-0db6-4ca2-aa6b-96413c03bcc5",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82fb0d28-5bc6-4646-98f9-1ca563c6833c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72d009cd-6ec3-4847-abeb-56365d8b46e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d518a0c8-b4fc-4f82-825d-51c6a51fcdda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c1d45f68-8440-4240-b34b-b43c72359efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a002f28-449a-47f9-ba39-85a1e5e43882",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f61a603a-947b-4a04-b5c9-2b98aa2a8ee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a337caa-7a41-48d9-aab7-c074c4e1f11d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ce1a2d2-5a79-48b8-90ac-de4b5d133143",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "147db3a8-6b40-4f1c-900d-06f16a0042ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfd3d14f-a0a2-4988-a184-227e697c52d2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd62519-bacb-4419-941e-84431959b72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1a9b3ee-9242-4339-90cf-63b3338a99c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46b1da85-145c-41a2-8571-767a058d37ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74add64a-d606-434d-8e96-4b66b1507ffa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9973a254-b64c-465c-82ae-136def861bf2",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e8e4b4e-7523-41d3-bb18-1637bb17e446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "097a0eaf-7385-4842-99bc-aa4cfa6f8b34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8bdc7b2-9e72-40f2-b871-a8f4c0699507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9fc991fe-5e3c-4963-a6bc-5e22928d1407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "675ad120-4e29-4639-9846-79ba7ef50541",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a5fe82-52ec-465d-a8f0-9cb5f6d5c430",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c520386-4316-45bc-8dcb-e3e0aad87e5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63ba3980-622a-478c-9fac-d187a8eef8a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "85bebfa7-0154-446b-9732-1941315079db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f63e92f2-c95a-49b0-be28-c66e449ee8ca",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad8d0798-45ec-43bc-89a5-5e0eccc80584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cba03a12-dff7-48ba-9dec-2580979cf850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586d0da0-471e-4394-b027-c4bd38d84989",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "df4f8e62-f7df-4b9c-94b4-43d223e73164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bfbfdcc-669c-49cf-94be-bb5134a32ccf",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c9fb0b-d124-4d7f-aaa9-cbbaf7ce8a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7432c2b-c45f-40f7-aaee-1dd1ad9476b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21a262fb-47f3-470f-8796-d89259ef4ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e3f0ff65-c7ef-449d-80c5-aac8e73225b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "747bbbe2-bbec-403e-a2ae-ba55a2afa0d1",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ff56b20-34ca-4a76-97a9-3909b28aea3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d89b82a-4c3d-4e28-9584-05a3303f2c17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15277398-b9f4-43c7-a54b-99e1f5270513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "92eeeda2-7ae9-4b05-be89-48837aae4acc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccdda34-b4c9-4e94-95a8-3630a06f1c2d",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "523b9b9f-6919-4752-adb1-bd233b5612b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39dc6428-126a-4a2c-94cf-4b25a13a37ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab4a0ec-329c-458b-a1df-1b9543825af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4852a2-572d-474c-8c9c-37f0009ed13f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b3ae2d-0335-467b-b66f-bede35777b9a",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a87fcad-1873-47d0-8783-a70b938b7d7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f098bc5b-d12a-4b49-b037-be164d83dffc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc44daf2-1eef-4e54-a13c-5234efdd16c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "463048fb-bef5-4dd5-b447-94e3f0978865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a757c94a-460c-4256-94b1-1c4f8c53feab",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "011ac712-be3f-405c-8cab-67f1837738c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d33c6788-ccee-4047-811a-3f7af709144d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "608d5baf-57b2-475d-95ba-17d433ee0f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b603dd1f-3ba9-4ce6-9501-e6e29d79e685"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8eef6718-0ef9-4e5b-9e9a-ebfc59cd1d22",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "254d1e2f-4a48-481c-8398-ceaba5164656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7de5e9-c84b-4bb1-8e00-735eb1572154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "097e0018-57c4-4c71-a21b-0fa0ea4dc658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "84078f3b-3f8c-4918-9ea5-89b9df19b89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "911c4658-57dd-4994-9a3d-a0a2d6525d60",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4cc8449-897f-4069-9942-f67d3cb5637b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fcf1065-7ea4-4f1a-85a7-88d51c81799c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420ae68c-de73-4267-a188-23f5a73d3741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e7bd35-058f-486a-a27c-60800e047029"
                        }
                      }
                    ]
                  },
                  {
                    "id": "615af977-cf21-49a0-a4c3-760834cbe8c4",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f122fba-3566-40e7-86af-a8504daa950e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4819100a-f3c2-4c31-ba25-ea8ca3a5384d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef9f47d4-7979-4a37-a45e-69ea73f448fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "1f9c7837-e3eb-446d-9a3e-b769ef34e260"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da0d3f05-6241-4cd6-89e2-10bb81dbd10e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "211c4d32-06dc-4974-9da9-eff3c982b220",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b8a0c77-fb87-4909-b93a-6b67f686c23a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05d6f426-1790-4209-941d-27741773d1cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "94b715ab-2733-4b26-93a2-5fec11f10a9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80f9ea4-9b85-4d9d-a988-8a48039f7643",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ceb28a9-c983-4710-bc2b-956df3801193",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84f23024-c099-4f2f-91a2-e2438f1d1732"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28a406fe-1d69-4fb3-93cd-13f278f07fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "44bd0d6a-30f5-4208-bbce-87d7bf15a6d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81748b1f-74fa-49eb-aac4-593ae09e780f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb4d691-4038-438c-9ada-e4dbdf5eb9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6c63df-0483-40ba-94c0-c742e68940d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "049fce68-29ef-4ce8-bfc7-9851eb61038a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a4ff298-03b4-478e-a0d2-6492c6f10549"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00ef31ad-809f-48a4-90e3-ef2fe9b91e06",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "900ab9e6-1e94-4a07-bc83-ea579e631992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85aef5db-4b00-45cb-b266-a060f50a9a05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d4fdbcd-f890-4039-909e-ed472f2e33d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "694c1347-eb4b-4365-8709-f9683a5e0831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12a226eb-7520-4aaf-8914-3b1d61a1ac88",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b795182-834f-4586-838b-dfa7ae2e49ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b35abb4-ac19-4130-8066-ec758bb3fa59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06186dbe-dc01-4a70-8303-97d5e99e7bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "f07f48eb-e41a-49d6-ab90-99cf9d80e49e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd28884-4db2-4d8a-b73f-ed9d203bb9a7",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2f54366-c7eb-49d9-8dd5-a563b33db49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "94f792ed-c9f8-4a81-8db5-a8bd8f99427c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1550d4fe-e60e-4431-bc17-37acf04c768c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9c38988e-3d3e-4f31-8d50-8b1ec9905860"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27097574-6fd5-4136-a381-8d61005103a2",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9352742d-80b1-4485-b3da-d005a3e4606b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fa918f6-e7a7-4814-9a80-a331280f98b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a31f897-26e3-43cb-ac1e-f07017b5c0ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8133eda-e3b6-4154-880b-c356ba786904"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7addcba6-6e1a-4235-a7ea-d543cc75237e",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eafa420e-d2c1-4ca7-afdf-fd1bf8599c35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48cf87a6-f19b-42ea-afed-24fbf3d0e765"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90201ef-2469-4c47-816d-c89a5e13100e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "4d24cbb5-ec5e-477f-81ff-0cce513596ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff43590-966f-44c1-b011-5c8949c537d5",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e290e04-4e30-4a0f-8421-7f2842a3d75f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae967d1-a432-4a70-9798-1c337bff0c93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ac76fc0-0585-40fb-9ab1-fbdf54e294cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "fb91db57-c36a-42e6-b4eb-b889f4a2e77d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeae7f50-9b2e-4b34-ab8a-0839713ed16b",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8644db28-91f1-4a6e-94dc-fa29b67f8391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46c60e1-8059-41b8-aca4-7397425c570f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6c29c6-62e2-4224-9503-cee37eb1dadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "02d7ca80-8761-4acc-85ad-25c2e865a625"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42bad252-9ed3-4b24-8cbb-bdcf899b4ba9",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1187b3f-6261-49ea-854e-e860a3db803c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93045381-237c-4d73-9510-5c9c7bfaa6e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52e752ab-700c-4709-9b44-6289de8e448c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "4508e73c-3de1-4f2f-bfe1-d74d81f5951a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47fecbdf-87ef-4399-bb32-2706927927c0",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d857392d-dce3-40bd-bd01-f327de0a8a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5de38249-01ca-4276-8127-b862f1e6b625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd4e9e6-6c98-4ad1-a161-8bce2468e816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "42b6b1fd-7bb4-4cf7-ac29-68fcec1fa95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12fe02d7-e753-4fd0-be75-4d32de6d7b60",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a918d543-3c4d-49b2-b637-a3662dac157b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa01b31-2ed4-4f75-b9f6-d22ecc6e943d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9fd758b-8c9c-4177-9af0-6223a266d3e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b37ef882-f740-40e8-a965-6cb502ddfa13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1184a804-69c2-4763-8d3b-418996c05948",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d07f83bc-53ce-43fe-b4a2-ad25349a6b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a11270ff-70cb-49a2-819c-e7a4d5261c00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0863e447-924e-4644-b798-48435e1e56fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "5504d12a-b543-4b1b-a469-d38021f6bb56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9323daeb-bdff-4291-a57a-aca1ec7eb30b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "750b1069-18d6-4768-93c4-0f47199f8540",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43e11ebc-1362-4c43-bc7d-03ddbf237d7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "303721f0-921c-4662-a56c-df98272b811e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e836004b-a36c-454a-b8dd-f26f382e3246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "593aa951-53aa-400e-a478-24400adbd9ad",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb1fec09-1a89-41a4-aa13-5fcd5deee15b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea1b4fae-1632-4fd1-810e-fa42d11bf2b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae2b37e3-88ee-4e7f-a179-ae2b1ce943d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "08325f53-b668-4eee-a863-f3e1857e0750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d4a4221-7cf1-430d-983c-0601639d06c0",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9084443f-3ce1-49c1-bf65-e94fcb5c20db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76eb50f6-1460-4338-bf11-f646b99f248f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df374444-095b-41b1-a429-a282f55c2ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2111f209-4783-42c4-b66f-84870f90adcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2999e95b-210a-4700-9947-2a92f863d4e8",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe3cffed-6b9c-4174-8bd7-d92011ce1ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afb20d63-20f5-4794-bb43-789cc4b81c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "316dcbc8-7876-48c3-b3e4-db01a5814bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bdc21c11-7553-499f-852a-6b08e01d588e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e96e5dba-e7c1-4c9d-88d6-df050a9d61d3",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "473abb29-62f4-4f8f-b05a-469050a6b30f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "665c9375-cf6e-4f64-a693-b7d68a2dc1bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e934efcc-4670-4018-a66d-0b9a2c2b1cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "25012282-34d7-4afb-a9ed-8572e38688cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dfc6a7f-5076-4813-a011-9b5bef24f3ae",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab6188f-b78d-4842-8b28-52fc0295b4ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "927786c4-5370-4cbc-bb79-f86c7c5bb39c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec87556-4f59-4a95-85d4-19cf8c09febf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf58ede3-62d2-4533-a1f5-210f19b64ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdac70c9-4cbf-4b13-8384-f48e2b0f796f",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "657c848a-2ca7-48a2-a1ac-8a9f0d9b3e8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62bcb8ea-5042-4b2e-bfec-05774d8223f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15cbe731-634b-4a55-9231-a50493ee2c31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b41e35-7f75-43c6-ae9a-7b2610955b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "038e91f7-1078-433d-997e-3bf682ddfc08",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "527de70b-2649-43a1-930f-5ec336337f0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f92382-e78a-4757-8985-07e07a2b536d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54ae56c5-8760-49b7-8e1a-983159e6a813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c432dfb2-5ef6-4d9f-a9e1-dd23e7e5db95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a27b7a0-6068-4641-aca2-57d19eeff141",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65424e54-7304-4545-be47-8982f4de7ef7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa18db1-a099-4319-a0ad-b733d0983134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0900610-e76f-4aef-83d7-4630fc5c049b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1dcb265d-ac57-431f-84ba-529f48ea627d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7a65fc3-e249-4009-829d-b81bbd742420",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5feaa1fe-55db-497c-a33c-443517b24475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b61a1a25-60cf-4cf7-870a-52a082f4d0d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcaa4cfc-91d3-4f37-99de-6a7b00d1dcf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b10a1b54-b558-49ba-8dd4-24bd54ffc902"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f13518a8-df78-47d8-a737-9b633dcfe43c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc1cfe2a-f6b5-42ab-89f0-09f71e1a9480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbf21122-f157-4e57-8102-30abc478505f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29e79e66-27fc-4f83-8d5d-28ae6045e725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "68b3815b-603f-4027-a0a8-b26a9894fcb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db3b5a0b-3d1f-4bc0-b0fc-ffad79d9f3db",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1692267f-f815-41b8-8e6b-b43e0d15d07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91bb9629-f389-4202-b6ae-6a3a5b6967af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "721eca9d-bd27-47b5-a56c-ce819c025a98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "4308a637-99b2-45d4-bbf1-4363162258cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df2c948b-6e9e-4ca1-87bb-ec8b8622e0b4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae5db3ca-692f-4344-8ff7-4e2ceac4ee38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe667a7e-ee54-4b70-a783-328c65f5fe8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239a5fce-0c77-4b0b-8e27-ec7744822842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e695932a-4e9c-45be-88eb-ec8456d37fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7ea01a-cecb-494e-aeae-b90165f9660b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8be645-742d-4ff7-90b3-d5924d30b81a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a49e418-5434-4b08-9a0e-c0cb7ddd9454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86df26bd-278b-4d86-86e4-b639d194b369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b0333049-66fa-4348-a03d-1331e32ee426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37fc573e-854c-49d3-be7c-ac27ed471cd8",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82d908e7-1836-4b17-af3f-b2480bc07b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf43d55b-eb74-4bd4-8f8c-49159688015b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9da893d7-eb0f-42ae-81e5-796330595d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f964b84f-0366-4a8a-9549-a480d46eadbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f60044-204d-446e-8af9-b26ce37b1e26",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46307b50-706f-45ab-9bc0-babed6633c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e48d5cb2-9b33-49ba-81c2-53d860eafe6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed0b782-ec34-4fa7-88a3-1f8e7f03a759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "22ac7b35-929b-46ba-bd7a-a07cb9884718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "430362dd-b2b4-4512-a7f7-b5b9407711fd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e714e3df-eebf-4404-aaa8-b7c21b47ad4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6e4d5c2-7012-4259-891e-6a90bbb8ef01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3959fb20-3118-49f8-8108-4c5a23c116b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a04d0a1f-0b93-4c9e-aa90-da06d81d727f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab44e3d9-18a1-4652-ac23-2c2ae58eb5c3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf0e3b01-f3b4-4787-b4c2-daeb13365faf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ddadc1e-e356-4d97-8b0c-ba3dd1ff2aa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed8d2107-e161-4f35-9cd9-80148beee558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "14d757d2-bc35-4c35-9bd6-0bd78a167ac0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e8702d2-2705-4389-974f-97dd2cdc09db",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e236cb80-da16-4b36-a387-f613b0d6e052",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f087e306-5eed-4d57-9080-4e8c177bf337"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3eb485-ca1a-4cf4-b5dc-e5f4d591b66e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "36593351-8bb2-48c8-ba45-538f2df19555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dea7eb5b-86d8-41d1-afca-8b3a0eb83a91",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb0c8ad6-a15c-4062-8ef3-3eb6df152030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4124b33-0d17-465c-b4d7-0499f4902d2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3741c1bd-48b5-431f-a54d-17423ae6c562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6faf6a-d2ff-4983-a9c1-a449df21f63b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8927411-5858-47de-8118-db68965e5763",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a8dd020-5538-4cfb-b2c5-9b7bce05dd17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41316005-c988-4c19-8864-1e016424fbf8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eccd7671-bbff-4d2b-a733-f5bf2681c638",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "613acdf7-64cb-4308-93c5-567a6cbf898f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6d2dc20-8289-4042-bec5-6c8f7248ec4d",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51957ffa-1178-4121-8511-f182adcd0edc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ca83929-358a-45a2-aeca-4e0f191b7fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d70fd7-b228-4acc-af53-fc26b13b3616",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc763fdf-fcdc-41c5-86bf-7484f8cce890"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7668fa52-5c8c-4997-9054-57f4bfdac260",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7367f80c-6b71-449d-bf25-ecdaba547590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d068dac-ac72-4aa3-ab88-dc51f85f39ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90bc29d8-69ca-4d32-ae5d-b068e50a1a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f851d419-4d55-416b-b01c-a1266673a288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9c23ca5-f421-4e95-a924-c96c02741063",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a3b954b-fe31-423e-8ff2-ad9c23f462e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cf0da59-bd26-4d2f-9d9a-f00b540f85e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02671c86-f9fe-407b-b07d-f1bd1c0ac126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a203331-913a-4cde-999c-c5786a9a9b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "741639e4-57b1-4205-9759-10e6e4c062dc",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9afd6b3-3661-4ab7-9953-9f2430eabfc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbb43ff0-4bda-42e9-ba4e-5740871e5554"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38b3c9cf-f42b-48c8-9292-fcee0061375c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b7c74a9e-f37a-4a86-9bbe-ccdde8dde8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "257b94dd-465d-4afe-ab57-66122a35a32b",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdf20111-69fd-4f00-a14b-b8d712bcf066",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4a6cf86-4761-4f6c-8fa7-f03fe60bc850"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d682eb8-2d10-4ae2-a5ca-9ec78453d669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "70ea8b76-dc68-4219-af7b-bc30a3c52780"
                        }
                      }
                    ]
                  },
                  {
                    "id": "251ba53a-ba54-4ff6-9d29-c0b8846afd14",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3980863b-089f-4136-83ba-35b3eca4b16c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac412592-00d6-4f9a-8c52-5f91af43c531"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acd07a4b-01b3-4edf-9e65-ef550d2d6b33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a1b776a-b9de-402f-8f4d-81c240a9c95c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2b2345-e0a8-44fb-a725-80e698efc98f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5d79b64-5193-46da-a276-3be4ccebef09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f77ea39-e09e-4759-b45b-88f76abfe14f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ea27ba9-c376-4b15-b3b4-7c7eb44ff0e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd45be06-9088-4ac0-a6a7-04070a7869e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd1f5e53-8bbf-4a5a-8a1d-af387e348b89",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72a98987-2005-4849-9914-90ba8fe4fd2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc6b9014-8f19-4328-8a99-5c950cdeb5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1222dbf0-d979-4324-b159-32da9bb69d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5f7ef708-f52b-448c-b68a-257cee83b189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e40cf17-2ae5-4499-bb1c-ade8f8047948",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8adbb0d-e8de-47d8-a42c-2cb2cb7f0753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4db5b546-e421-4bd3-bf2c-a7320946f934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8937cd8-e3aa-4484-b391-6f84e7878c56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da34d049-41ed-4cc4-8f7c-95b7c38919ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1246f08f-2097-493b-9ba8-255b542c5ff0",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b969847-c347-4d32-bb69-575dcd1d5a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96054a7d-6b73-44a0-8a58-c8a5396e97a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5d197a0-1ec1-40cf-a15c-0711b6d2c047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d84f6c70-3814-4714-8f6d-48e2d98df44c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b137e16-07b8-4481-81ac-4a8e506c5fb0",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a41ab1b-801d-4fc3-a3f9-1287a42b9f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52bfd4ba-e18c-43ce-a2e9-a3598b165dd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58a41525-7456-4125-abae-28e240a358f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a519c8b-3818-45c3-b4ad-89ead3af9215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c20861e-5e35-4a5b-848b-4223aa62d552",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f2ab382-1ecb-4299-85a6-1ad3a14e2244",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bc2259-9d92-4f07-af4b-1f8c59268f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "490a3c7c-ce16-40ca-8448-d6bdb955052e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee8acc9-4056-442e-aaec-a42914294f86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f846d2c3-5261-4c8a-910d-bf4b594f6b1f",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8857fd2-bd25-4e15-ad74-428d560b3b57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26f93ced-b113-45fd-b060-dee1a892dc7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2977d609-194b-4e6e-9143-03d4c6f86524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "293696ce-719a-47b3-9d0b-37b36730d05c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c645a1ab-1f07-4788-902e-182aea46fc20",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18aca260-af4d-4383-a412-0ba7bd82fd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58373382-5309-4704-8a33-53693b5dfcde"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1a5410b-f21e-4a4c-9edc-fa5b7b167593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6248593-2ef6-43bc-b769-f407c17bf2e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9352daf9-8d33-4e77-a982-829418116706",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d49d096-ef89-4edc-b33c-3a35ecf5eadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9c2523f-6340-4e7b-81f5-2b4b511e0670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8db0d48-af83-4096-b985-b5a8078d6e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d3268452-c071-4275-8b01-36500e751af1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e855cd5d-c113-4556-a805-c005db99fdc4",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70fd5d62-3e0a-43d9-8c2b-45a0717e2465",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d40d5a1-e367-44c7-b53b-efaf31dfda3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a7b0b50-612b-4740-a211-fba8d4aca108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4238980a-181f-4a20-81ea-7240b55d21d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "744fde4d-3d0a-4c79-82b6-e82ea2f1aa4e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d376eb5-c179-4f05-aea1-be473144e2ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ae0358c-dfb8-449d-a264-4ec3b5eeb2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3ff2984-47ec-4aba-8d7c-990fbd7196de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f485980c-c891-4f76-86c5-7a8bf93db9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898136dc-83f2-47ad-8660-e902912b2b2a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "217caa8d-45d1-48dc-aa7a-22c65c0adc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2016c7b6-112e-4b9d-9ef0-1d4241a8ba7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bd07497-3bc3-432e-98ff-bcd256319e21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b13eb4d-735a-4bf0-a03c-89ff33c640f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f6dd58-9adc-44d3-90d6-e64a42599983",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3723c639-0a5e-40f5-855e-4380457135c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddb81336-4e08-4cd3-a945-89163e22cc43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14905d69-c30f-4dd3-8ed0-9617dfd3f8f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d1436a3-e446-45fc-bf10-fb36fd4fb6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9f955e3-05fa-4a93-8a73-6aa530bc7659",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ef773c-f9f7-4975-8d7c-49c888246dcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc8af312-6b4b-4de1-8afa-a6d574d866a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91a641d-745d-499c-b02f-71690521f844",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8aa61435-73ae-4fdf-b7b3-f8f90f9028ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d952cc-2af0-4ff3-9ed8-2d16f641af2c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5e42c82-6f00-4778-b9ff-8af5edc1d046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f789b29-55ed-48f7-ab1d-461025989dc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bbe080-a490-4a3e-84f6-ceff145585bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0495884b-6a7d-4bc0-8d5b-e3e081919b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9182b65b-83bc-43fc-9857-8d6b67ed68b8",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e94021bc-a0ab-4d3a-b28b-fd0fd2a863a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16250fc1-2877-45ea-b38f-1a04dc41a68f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91e7523-a762-4537-8647-48da0696e309",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a12477ee-5046-466c-b514-f20d225c0766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80ce57d-b0bf-4c33-a03a-30448b39e7f1",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6278934-927c-4306-ab61-c2e60817f888",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65b67396-08c8-4626-a526-b971eaa8e3d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c8f86f-4d21-4d06-905f-76ef9f48ff60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "456693e3-62bf-4fa7-8f0b-6edcc8c8a635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5697d1aa-fd93-41d9-af93-359c6504dc75",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45bb2f3d-9bfb-4e59-8fe9-bf444e0d45f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d25dcac2-f19e-4af8-86df-5c634888b21f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "168a5fa2-d378-4687-91fd-cac6e6ca21ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8532269c-237f-4b02-8996-f819bd4aeac3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b127d14e-d948-4b52-9e80-8da38c0ca36e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52301e63-a676-4619-b757-538b6b8dcc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20d775dc-28dd-4ff3-beda-103b8c66b350"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4181c6e-8661-4e0b-ad28-1bb8e84ae180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "6144598d-6239-4889-aa58-de4d2b8c42d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f64036e2-fa64-41b1-a71d-1735a5e17c80",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bfc3119-ba34-4a75-95e1-bd0205341f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b25c510-6b96-47d4-a8d1-80789c803444"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b700362-ff0a-4e9d-b4ba-21abe27eb1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "26d30c23-bbd9-4383-821c-989d914c8dfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c9a331f-7280-47bf-b4fb-dea68d77b400",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce05a5c5-9067-45d6-b8a8-49ba0442df0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e4f45c8f-9663-489d-9706-54699a8abd1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a073b01-ca36-497d-9572-08eb9c97ab2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "62fda6be-208c-4865-85b3-7ee612054d8a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "21f9aa60-a86d-4587-afd0-fa84181044a5",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "25e2d4b8-fe48-466b-9b17-bcd42c727447",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9e17c43-af13-4342-a3e8-1f30e590b6e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a2737030-2f4d-45f7-8974-f951f0878518"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6095b45-aae9-4bea-871c-add85c7a107a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "d168798c-5b8b-4b19-8626-4b8831d9d766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5c73bd-d070-4ab0-93dd-44fdda7e9fea",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1231512b-5736-4b13-8ede-a5855b3dc320",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "be65ef3c-a6f0-41dd-baa0-f7f4e5de2117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c845666-536d-4d26-a3b1-2dbd933344ab",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "abee9277-fb3f-4f88-9a71-eed55c725dfe"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa837d97-d807-4201-b37c-74b388e6c45c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "cd43c8d3-0779-408c-bac7-c86a8447b4fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a678156-0047-4d48-950a-3f46929afa9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90c82d75-697e-4ac0-970f-65fb282be0e8"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0b3f1347-5d54-4925-8782-01a500a609f7",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ea259003-a83f-4b44-80d1-77f1e2d7bbc1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "06b4a509-7ed7-4618-bc2b-b6832b19ad25",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ef29fe53-ac7d-4489-831c-4c48c6b77650"
                }
              }
            ]
          },
          {
            "id": "d273a5c7-46c6-411e-8bb1-a92e04712a59",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4f88f829-2e7b-417a-8698-6190c21de2d2",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "68ee54fc-0753-4515-8ce4-1bcb3bc05fd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "57fa3a75-6f5c-41d4-bd1e-291ea43d1bc0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f8b432b3-161a-4707-a91a-9c23b47dd6fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1923746c-7e09-4f01-b2da-3e140479c1ac"
                    }
                  }
                ]
              },
              {
                "id": "c351dc44-bee0-4043-b62c-52e0fff607e9",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f06f1745-d075-4cf1-a911-0dfd2879eab8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "de60737c-28a8-481b-b955-b7bf5ad3ad92"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11ab86ce-7622-4e69-959b-8ed0ef26d559",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "945858d6-e0a6-44b6-b7e5-5af91ea9b6f5"
                    }
                  }
                ]
              },
              {
                "id": "d00b33dd-bd62-45b5-9755-7a82fe71305a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "895f182d-575a-4426-8380-2b8bc63e3f26",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c018a2ed-0569-43d8-9181-d81984c045f1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7a583882-8040-4319-acb1-6c5395fcca0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "472f58f8-78ad-4c46-9f18-1d6aff25d41d"
                    }
                  }
                ]
              },
              {
                "id": "03ac04ff-964a-4cd0-b061-5ebcb2649cc2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d845ebe-05ed-40d9-b3db-1ceb15df98a1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "31f6d754-6824-4013-a7fb-e590b7f6d50c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "36880064-cb25-4c93-87e1-3e7091df2be1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c56a8df6-6f89-4b01-9e34-ce8fcaa6b4e1"
                    }
                  }
                ]
              },
              {
                "id": "97625f50-d1ad-473f-8a43-ff7c5457d43a",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90093a64-1b1d-4630-bd00-ec8cac97aec0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "18c9cda3-65e3-4767-abd1-1adf285aec15"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "152a6948-b560-4724-a6a8-ad4550398ab7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e48ad228-334c-49a9-afa0-f66c8efe5107"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1c4420b9-ab9d-4056-ad53-4447c4422a09",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cdf45694-13d3-4fa9-80b4-875942bc56eb"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "121817b3-2ff3-4ebe-8598-980330ae984f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8dc91b85-407a-4e84-a3d5-dbefb9f3da04"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "712a8b09-3789-4ed1-9f8c-96ddca528292",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a88f136b-8803-4565-9072-1c12eeac5b73"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aa326126-79e8-4677-9109-309e40d447f9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f4f2b55d-31fa-43de-8930-e7c613078376"
            }
          }
        ]
      },
      {
        "id": "8678c8cd-cab9-4a80-a514-d5250e5484f2",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "410693a5-6113-4e42-8d2a-b22a2b69ac20",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1c3294b6-e2dd-4bce-acab-f608ddd45737",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "809e57d2-46b6-4d34-9495-14b25cf0db18",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d43efd2-4564-4530-bb17-011ae13bd1fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "573da288-fde1-43a9-8ea5-036f4bc35fcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47dd1de9-f5b7-48e0-9977-382e82f7af1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4462526-63df-46ee-be7a-90c7b99a6816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f1c3eed-3c0a-4d0f-8838-e0595917161c",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57bb547-7312-4b7d-803d-0e750d327347",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69411a8-e06a-4eec-8a56-8e548eff8b0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd7d9c3c-d44f-4644-b174-02398894c0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "7031afc5-0d90-44bf-88d7-307f807c94c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24553194-34b0-43a9-8408-cb3d1f9e698d",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fae939e-3bef-42ff-9e48-daf6d998c1e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfbc96ca-2b86-46f5-be19-e33e8aa1b9ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d8db05-b72b-4ae0-a086-1806a64cedbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3c7a68e-1eec-4fc0-813c-88dd6cd5b949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edc8ac98-a357-46af-a046-e08f4feec926",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794d45c1-5009-48ba-9985-4150168a0a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e84a3141-b777-4027-a450-ffb44c7db890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d113762-8246-440b-a688-7aaa7468c6e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9f4d1d2e-fcc3-4d01-99ed-89714ccca44d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86d34aae-7a33-4b37-9574-a1f422e2b7c5",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba140f99-151a-427e-b1aa-09f3a3080811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f241e504-8237-40cc-a0df-d6fcba27e268"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbfe6fbd-6c60-41de-87d4-1da0720ee69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dac3cec-aa8a-4d8e-b968-8e89a7e708b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04454d18-93c7-49ee-84d0-24748bb42ee5",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "192044d4-88be-444d-b447-7f7a73e3c791",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b0d7d4-353a-4ffe-96ad-08130eaf9632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "632fc2e7-2dee-415b-a82f-dd362a9acf55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3e957bd0-4bd2-4523-8c24-606493d51a0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de5b593-92ab-461b-bffb-a67881c4b2a0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e4fb7c3-a386-478c-94a6-f0caa2c06b56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee5dc952-896e-4736-863d-a73f1b742d25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a73fddf8-dbb3-4472-a70b-d8bde30e75c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fe7844a-fcb6-49d7-a725-a38ac7ff8088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf0b5a04-a1f3-4730-bc8b-45bd71a310c2",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5262fba5-bb24-40d6-8dfd-ca94ab1c2120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4da80e57-c9aa-4364-ab24-18355ac0d016"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b855f532-51b9-4a57-ba16-5ab5c97611b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e25bd837-3e0a-4269-bd26-c0ef2e1f7eb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed7e5f0-e56c-4b99-b53a-36b2333dbf55",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "557285aa-44c1-43ba-8247-1bfd151d9a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9525784a-c028-4ba3-a573-aed2bcc4b9b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b947ac1c-06eb-4596-acef-54d1a870671e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "32c724e6-5182-4689-923d-77ef791f47a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cbedd3e-0ee7-4bbd-98a5-23a3c0b945da",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba76221e-7ec5-448f-86e3-c35b673a82e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e0dcb9-98fc-4ebe-adf2-0771e47f1e74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b37efe-c0df-46dd-bca9-528da48c20fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce66d9e4-ca8e-4acb-a0e6-38b09dc75d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41d058f3-3ffe-4860-b78c-c2bd4264fa29",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d4baa8-2675-47f3-8f5e-ba50f8460adb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "730b660e-deb2-4d54-9a07-7ae9fc548837"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeb5a55b-b465-469e-b5de-a6aab62bf10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "66afd221-6622-44df-ad37-fa72cabaf587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e55bdbe4-67a1-46fc-b7d0-f4850ffc7317",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b625da7-236f-4ca3-9907-043a8b56a067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e1d627d-70e4-4ab5-b7f6-a3a611097104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f90c6451-0d02-41f4-9269-ee42cac7ce79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "26b88edc-1008-40b8-bee2-f53bb3c65dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9c8715-0603-4a60-8d03-955edc359d72",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe7be8b6-e7b2-46b5-acb2-afc87fa0d22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38759c2a-ee2a-479e-baab-e0a406f1875d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d56f8ee5-b36e-4e68-b1bb-48864358b891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5545001-1ace-468e-a494-aa437f9ff663"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49e2b25f-d2a4-4c9c-898a-8e5689aa6431",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d375fa3-d3e5-4e06-84d3-e67de5441290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e10cf6-f7ff-4d58-937e-e103f4b13d3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5934c65-3cd0-4e63-897a-a03ae4cf9a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2ef1ec47-646b-4884-b188-644202ec79a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8511c054-274a-446a-9403-8df34ae0db7f",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e622c955-127e-4c29-b0eb-49894d336386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd520150-e06f-40df-b040-a11bd406dcdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a7ad25-f58f-49fc-ab46-77ddc5c8d2d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f52f2b18-be59-4a7b-8564-4fb1f781d7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88d6978f-6546-4782-8983-12f5805aebaa",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f44393-263f-4d15-a091-c894079ca280",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cfe834ce-edda-4d51-b2f9-4e186bab6cfb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f43ddb1-7574-4249-aed1-900471c273ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a6e222c-7aa8-4056-9753-24b11f682e10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ee0037d-d221-49e3-ab2a-54a588310875",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52f6110-90b8-419b-bb6c-504c33046336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7f7ac7-d8d8-4cae-b481-160a9dfac6ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d55cc2d-293d-44ee-a06f-aa31b571165f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "c0b4004e-a7a7-4650-b338-71ca6c0bfb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fa6b87f-7674-4a28-80e3-a5e257525a02",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9253938b-6918-481c-a038-ea967682aa85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4280ae9-e2a5-4dcb-8df8-e3733ee373dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004be8a0-60d5-401d-b71f-f922e679eb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b96b601-2444-44e7-9f46-245a1366fa8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19aa12e9-78cb-4a48-9e66-079f37082728",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad677846-9f8d-4dfa-8f22-2524bb8abb7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "220da3af-0659-4051-9455-b796babee2a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a5794ae-de43-4b0f-949c-427474bba115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af8856ed-8985-4898-ab47-0b6fe5cbcd36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6609b4d4-0488-4256-887b-6b6ae648883e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "343def97-08e8-47f0-a1b4-99e1fa32ca69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f734b60-7f02-4a4e-88c6-27e51cd60b68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf040b3a-4874-44d8-92c9-d2a0733d3e0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "320b8830-00c9-447b-92ba-2e333a1f7be2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3d7269e-b446-4690-a396-1312ce979b8e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4605e33f-0fbc-4214-97da-a94873bca5c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a24ebeff-426e-4845-b476-595ca8fc0933"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ec782c-4ea3-48ef-a428-7d2b994100b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d70c34c-62a2-49c2-94cf-4d207139e6bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "030191d6-f107-4477-b70c-b0985208f904",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ea76fbb-67e7-4582-983c-c1ad78a6ba29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "276280fc-a8a5-4d45-9b49-3db50c2db109"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faab3873-2249-4b1d-b211-c695ab16cb02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "89726087-1441-4665-8d91-2f5b6bea605b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "668358e2-abef-4c2d-a556-cdbd89db6e2e",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d24ea10-072e-4794-85d7-a38ce05ab620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7211ee96-0c9d-4687-be96-0d0e94f8b008"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7273b51-694d-4869-98ad-a84f725018a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69b575ef-2faf-46f1-b780-013b19ed05eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c367ca92-7b62-4154-bd0f-5713f8c6efda",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7600a68-0e9b-443e-b5c4-3b642a1551bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7f1ace6-fb2a-4af8-b686-718d17ccddf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c6d3093-fe1b-4c85-8ea1-b5638a369f16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfd96204-9252-49fb-b249-6d1ee36d8c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e1bee5c-b207-45aa-89a7-e707edeedaf5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188bdf35-dfc6-4650-94d5-63f2c61b7890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff772b6f-3fe3-4a52-94e1-e8ac39541a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71a105f1-bc8b-4a95-aedb-d2f4b792c03d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d2030ae-ff76-4d2b-8573-5a229f8460d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e57ed4-850a-4894-8cdf-405b45947ec6",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bc3f4c-c9c8-4d5a-9e78-f3c381fd44d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "504aece5-033e-46f8-959c-78a75ab60860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193fae4c-af6c-4e46-8cf6-23b7d9027f2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b8882bf8-515b-40a9-8e4b-acfb405215d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5e48c6-647b-44f0-b77a-cd4a09325c1b",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "505574ea-7f86-4d6a-ace3-b583d24cabb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9765dce-d3b7-41a7-a8d9-997012232750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0184d78-d80b-4d4e-87a4-88a6d82dd7b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26c43781-95fb-49cb-bc78-4cd7ad8d685c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b4a440-4478-4987-a38c-985e9ba34bb7",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a794ed10-a0c1-4285-a718-b9532c89e07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14aefab7-03b8-4d97-bf03-b67c730bf64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4218629d-63cb-450d-9e25-20c0d4948d10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f524167d-10f7-40b8-bcca-6d36e3edc2e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36d89b19-7481-4841-9f2f-e41864cbd878",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19dbd553-7f11-4b2d-a019-df786729c5ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75adf6c6-791e-42f9-9fe4-668adb9c22c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1885c91c-ca21-4d88-b7eb-773a5c25a333",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c42bd276-7f55-43dd-8064-6a4889eaf3d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695dfa7a-91f7-43ee-ac0c-0db2bc601c61",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c04b56b0-3fb6-4cfb-b0d2-40733eeb275f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8debc023-b8a0-4967-98ed-23350ab7f2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a93c28-cdc7-44cc-860d-5d689d5af70a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "165dcdfd-8476-4af6-8388-8a9a8cdf47ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d71e3de-38fd-488e-8918-5fed76ca8aed",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c23d0bb-9ea8-4d65-9bbb-e2da7149a171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c8c4b54-5244-49d7-bc5e-816d413f62f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f9b98a4-c2b4-4dfd-b222-af2fd51d0a4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "18424f79-20e0-4f5b-ba86-d12970a50e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3125c6-d0b8-4026-a512-a8993b78cb2a",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9796cee9-c183-4c20-9f01-d3f9213ba222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cbfd2d8-83f1-4166-b573-38c20aab1c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07ec2bab-c44e-47e6-919d-a5a143cd82da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c80fd783-1c84-43b9-9b17-8bffcfdee8c0"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "140c9e1e-e6d6-466d-92ee-e2e49a5afd04",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bf90118f-ebcf-4d16-94fb-a531fa2ca90f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4418ee-301b-440a-a278-9ecd20e537be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b11459b9-3969-483b-97f5-810630387c9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c52a2191-843c-41e4-a722-ebf07576b724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dcfe46c7-7a99-4c60-99e6-5ae8057a3645"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bb0015f-f810-4799-9a10-c33547b68934",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3a2a79-1cf1-4fcd-9e0b-7df6cf169bc3",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "f6862e1e-cadd-453a-b025-056f5ca444e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "015883a4-6dcf-490a-a1bb-3e559161105a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b8ad423c-915f-471f-8812-0361a2da98c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ddbc342-f495-41e8-a074-12ea38e1fb4d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "424ea1f6-88a6-4101-b94e-070ba6acdefe"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c719aee2-8bcc-413d-b5a8-57e70ec85d5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a745d377-fb7a-47a7-bf3e-51539a2ccf04"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d879fd96-8384-45a7-940e-8daf545c724d",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "24500be8-5e07-402f-9cb8-e902f273febf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f8fd252e-e158-41cd-b031-e047f01ac86f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e40b428-9c6c-48d9-8257-4140e175de32"
            }
          }
        ]
      },
      {
        "id": "0ce9d0d9-a536-4040-907a-2d430f5ddf41",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "354d1c28-0ec3-44a1-8293-cfcdfe5a1750",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c5284789-0ad4-4caa-8d6f-e7a1ec7728ba",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c10d2dd9-33df-4bfe-984e-ea21b433dc93",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2553a16-8a15-47c4-bdb5-80ebe0c48845",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "365fb285-b25d-4c9a-a92f-fdb6e5ffdeec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cd0b3e8-924e-406e-a788-c6f797273d59",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfa72cc1-6669-411f-89f6-084987eb6a88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13ee6e16-7204-47ac-af89-56515b9fc4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a9ac80-fc5f-4246-bfa5-410d81835dca",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8148488-b216-4b0c-8238-b74f51013439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "144f444d-6468-47be-87b2-15b6a7e5e485"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16cfbb5e-18a5-4ba2-9822-ae1af5375163",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ffdf94-9b72-4c41-8021-a761640cdee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19d3fe3f-79fa-4670-8deb-16cf95898284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b73a51c-45c3-41e1-86e6-9848e4520cd7",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da7a96ee-009c-46a5-818e-b098ed76bb3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4a22bbc-5a69-4332-9411-eb1a6dfa8dfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c656d46-8da3-4817-8334-9f031e95f074",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a15fb8b-330f-4a6f-b6f6-231d28bb38af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3ebd2e-268e-471d-86f7-cebfe296064b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2edb7b26-46de-4d72-a98e-cc09abb12cbe",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224ed286-a7ea-4a22-b2a7-e0bbbb2bb1b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f1c8122-7e07-40ff-bfa4-6393ff103c0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5eae00b9-d637-4889-a454-d11c2636783e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3154885-5437-4ad6-9890-0090f064a1bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51ffdec8-4cd9-48cb-929c-b6cb75ad935d",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3d1b8cf-90ad-4b7a-aa15-dccae1eb6e46",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "830b35b4-145b-475d-b64c-2ca25c739ed6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dfdab3b-4b7f-4bdd-84ef-0cb576fb4af7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "902dcd04-b859-4357-b611-67c2fd602b51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00395fdb-b0a7-4be8-8eaf-d61a411819ed",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92bbb8f9-05a7-4d5f-a52a-24a6837338ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e1d619d-164b-453c-aec1-cb3cf62c91a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a61b22cb-7414-43f6-878f-77a335f49454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc3de108-cbb1-4d8d-b52d-f11cfd786a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e2a34f-88b0-44c0-a883-6c28789f39f5",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d4de28-65b1-413e-9498-057245100b41",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "acf866ec-5510-4750-baab-1c67f9f8714d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b76d693-5824-4db5-ae93-06e9237e1dc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b9510bf-5087-4364-93e4-3a034bedcf71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34012402-dc77-4e49-80fa-a996d62fd2c4",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ad515e-9c7c-4c8c-a22c-ab8d157a9262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd8893e-48de-476b-8284-ca686e1857bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3e39a4f-6f3c-4f99-8252-c1aa6b066462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f21fff1d-c308-42b1-a548-5ab2250038d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8463b5-6d0e-4c5e-9daa-3738b8f38ad1",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95b42117-cb35-4b10-a103-0919a7400bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3986ad57-8680-4fb3-b2c5-ded14c975aab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "531c7b70-084e-45cc-bd85-0763ff4022a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d6a65d-e8c0-4c36-819e-de8de357dbd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f9a3548-37c4-434a-a9da-a6c8fedd0534",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f0eb584-565b-4081-9592-a92615da4528",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be013b25-65e0-4c98-897b-69beaec98d09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "691695a1-f0c2-4989-8556-cc665dcf8772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "825efd3d-e31e-4fba-9542-e278d22bde2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c4fd1e1-df8a-4583-8d40-1ba49b9c91b7",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "707d2f74-833b-4e0b-b082-c5b42dbb69dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70ee58be-92a6-45a8-8381-6a4f3056f1c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48dce497-06a7-4c24-bd89-53e871899d7f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63b6b937-11bb-4a83-bed8-bc89de9d0ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd065919-1421-40cb-8fc2-d21a1664579e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "756062e5-dc13-4835-846f-3f1f9509d4e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b804e64c-ab59-42fd-bbb6-05d1d66f6319"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484f3681-4e81-4f84-a211-c663d4189fd1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43444ccb-6e31-4b3d-b6ae-e242929b71fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a91e8b4-c9fa-4bd6-a453-d3a62efef7e2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1bbdbb1-6209-4ac0-be33-d11a3019d77d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "480581c4-4a0f-4351-88aa-23b9c6214074"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "696ba515-60f7-4891-8e7d-ed78d90940a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d7ff6d4-e351-4e43-bbba-adf3e27c0918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20c3982-122b-4417-b9f8-a8023a890c99",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13abcc61-f921-469f-a357-dab49f89f440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470dcfff-5383-469e-b0ca-8ef6728a31e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c10e03-a0a7-41f5-97a9-2943e3bf0274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abed0923-e525-4b41-9778-c81d7f38aa45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17a767b4-c2c8-4b1d-b4e0-f60132fdd6aa",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d992c14c-7d97-4456-90a3-4def1858596d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f3057d6-cc7e-4d05-8e38-7c96a819952f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0804d2f-929f-4a82-abb3-50c3f65c6543",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb115348-0a87-4f7f-9546-b9f979ff5903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397fcae5-e703-4d73-bcb4-fc80c229a7c2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ecf6a3d-c010-4d53-aa78-1adada3baa0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acaac3ee-da6f-434b-88aa-b0d41cde7e00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6c654bf-a4ad-404d-a4dc-017df877e0bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c60d786d-8dba-4eeb-8a42-1e50a5fbf621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29de883b-d87c-4f7e-b0d9-7c1f5e21bb4e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96c37895-e03d-4fb0-9411-f1ee4b8423c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e933b3f2-35b0-4a39-bb8e-49c5d47778bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0d8d4d8-dd73-4c82-9431-01779c0d1f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a37fc99b-d5bd-4469-83a4-e90dc2056c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25d02058-a146-4088-8d4a-0ef081efc080",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0cbb7dc-4a5b-4203-adf3-b36490e8deee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae9bc50-689a-4fdc-9e4d-202b41bd8fbe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60655bd9-ef40-4655-b178-83e2dbd22769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "769af0dd-6803-482f-b5ff-0cbee84c5c6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4348c9f-2917-42af-939a-62f3dad3b775",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f5365cb-5adf-46e6-84a9-1fef58f6a4a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05f7e375-b48f-43a0-a416-53cb47a426da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c768dd60-e531-4715-9131-043ff216138e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559de190-5381-442e-af79-fc1b8bc6b0d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b59a53-cc50-4c9a-89b3-5d2eb21bff63",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a79700d-2d4d-4e48-919c-a1537ecab209",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "948133fd-fad7-4bd8-ae23-d1fac4c01f15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a3cb582-a5c3-4fed-a43c-853d6bc9ad9d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4531841d-506a-4590-86ba-edc19f07b793"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05c9a897-1b7c-491f-928d-f6317c8faadf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f373c3e-c460-45e8-aaa2-44724f1f3a2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0efd1d3b-be6a-41d9-8282-ba008532d013"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9cd93b4-074a-4867-970a-bbcb1bedbdf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31bc8c0f-a708-4f1a-bbd1-cab3bb894494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67a36b7e-5952-4c35-84b0-e0547cf7351f",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e4b526a-9d02-412a-a6f7-4fac9bcb71e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2fb7c7a-27fe-43ef-ae46-af5c0a7cfe76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60d0a59-52b0-4fb4-8ff5-70c1d1cd5860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c387a9b-29a4-479d-83e2-60e760705e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a43a24f4-e67a-4bca-875b-39285dcfd3a9",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e93699a2-957c-48f9-9e76-b24d682e92fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cce27250-5ea4-4782-a0a7-83cabf17433a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67e1e404-d766-49e4-8be1-32196ccb4c74",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cca3303c-e6db-45be-88ee-a13de8fc1b83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f590699-e110-4f1c-aecd-ce713093e6e6",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4940078-7efe-4bd6-8df5-945e3a4b435d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a8726d3-325d-43ff-a28c-99039dd18773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43388158-c1ba-4528-9af3-b13c3c208839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf09394-d632-4a46-8570-c026983ab1cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1d1e430-476c-46d2-ae8b-ab5181cfe705",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "304f5d2e-09fe-49c2-a140-309fe7d76350",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b8c494e-4bbd-46c9-a66a-bcd4df6138c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddc2c2a1-867c-49df-acf4-7c8137e8b4c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "499ecd07-9d5e-44f0-bb6a-3dac2fc02e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf15fd9-75d9-4ff8-961e-de0f7a2a2d23",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c5d38e-3371-4c08-8d2a-b924d4b2eda1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4b9aebe-9b9a-4cc2-8565-4790904f65d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aaf9f1f-ab4b-4303-bf6b-dc255a04b91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82c618c8-7733-41e6-ba5b-3049f88e65bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d30005a-2bcd-4eaa-9aa4-a574f0722656",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "343cd86f-9bd0-497e-a0f9-421a4e1f166c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "740d90f2-e0bf-44c9-9f30-82b3b680a3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "290c9363-6951-40d5-bb0d-9f3ba645d5f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8059e4c-9541-4458-8a0c-9203e905c002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "772e0cb4-9a69-4516-b8f8-b96dd8aa8fc9",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6323274c-ba5b-41f1-a545-880153fdca56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6eadb7c3-a4f1-4ba3-a4d3-193eab338d67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2083e9c2-6039-42fc-9ce9-2ff92d7111e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6af2bf26-bf87-4b68-ae79-00f31af8395f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca2c50bf-6b57-4235-9409-3abc9b6c3c00",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959aee3a-2302-49ba-ac91-2f6b760e6c1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92c960bc-e1c1-4e22-a758-a6f4bca03784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49665d5f-b2d1-4ae8-aa21-9f1ff305e35a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6231cb4-14a3-42b1-94c1-2ef195793d14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded3f14a-b4f9-4763-9dd3-7b22d76fe04e",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ac55abb-dd79-494d-b902-1f6d06b6f5ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "659e6be1-ded8-43ca-a80f-9e82092e56a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed3dc32f-2d9a-4bce-a12d-cd5e4ef97275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c27a91-a995-4cba-a639-c6baba0c02e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69b59e09-323b-4fc0-9ffb-0251a0580181",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e19f45e-12c2-4b7a-a7a9-1cee9f3d209f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5df1e43-1e6c-4987-bc84-776cd3b566e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f1b965-3e0e-4310-9d3e-a898225dac1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdca456d-e0c9-4018-a177-a1a2f8ce1590"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d6b423e-b1eb-4b02-af0d-87c82fd4e49f",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13a66e8-07c2-4e52-906c-47236c615000",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "347f8ac2-210d-4a61-9244-37e48f7f8dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e4e4199-8ef5-45cf-8fb2-59024725e4b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f2a190-3b77-44c3-b65e-369d6712203b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eb1069c-b703-48f3-843a-7e7cbd06f1bc",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2674a3d-2a86-4e3b-b3c1-fe35f10afc57",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d02def-a699-442f-a89a-581358fffec8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "253fa557-0ac9-468b-9dab-dbe159df2d2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1a480eb-ff5f-4593-9f8e-803b0f371d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a69d214-61e9-4cf8-a6f6-f1ff4f96aef2",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3119f651-aef0-4128-8786-e58590540484",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd8ac9bc-6c01-4370-be20-5fdcca1ef628"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57b8b5f-2f1a-413c-b842-34552dc2533b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31587287-3c78-4dbd-ac95-ad06d5ce7f89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f810b540-7db0-49fb-b430-3aa5f393f83e",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50b22a9a-52e2-4325-a261-d36ade3b1ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "697d15c9-ba5f-4203-b186-6e36ba3fcd8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f83c4fda-5cbf-4d8c-ade4-263dc8d84d73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7dd6015b-4218-4b69-8ec1-7ed71d1fc3aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "054bbf69-e0ef-4671-944b-ccea2d2ddacb",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321e3771-a357-4839-bc2b-a917dfe8dc1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225f9a70-5516-4196-806c-b51136627709"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e770b658-9554-4940-99c9-1074388a0d88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77bd38ec-bad1-4e24-b6e0-d2fe90cce4eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cdb5e2a-5c5b-4ee3-868b-b1e7d1682a3d",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95d8274-5578-4cff-9908-aa79668fdda2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e8e959c-790f-4240-9f59-b3edf02a1323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb0f2fc-4a11-4550-8b85-2044d281a5b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30dade72-1444-4cb5-b33b-6ca8f016ca2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe77398-e63a-4804-9c3d-2764987be18c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30faaae6-3298-4c14-b391-495df0712aec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41f4cb4d-a095-4b57-a9f8-dbca36db8752"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64dd9f59-b68d-4724-9fbe-77a04665a22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d522bcc-e1ea-4259-8be7-440c16b2445c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12be84dd-df86-4e88-9773-f0b6d227a0b8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea38d0c7-6c4a-4194-b63d-b92b722014f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d53c36ea-3a1c-43e5-b6bc-f0f5a875ecad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e2d24d-1bbd-4389-b986-206a60f19b67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9fdbcd-7af3-4007-be3b-13f707178e2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a91ed6-f9c1-413a-9085-9685bc159cbb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15f85d1c-62a4-4412-973a-e38fe6f8728c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5330c278-70fa-4042-8f72-ab9b45d454b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51fee2b-c3ec-4815-8390-5335b7445ee0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "556b1d8c-8137-437b-af18-88b09aa48193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d91e8812-1778-4c52-b8b8-daa4e282a13d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66fdd164-79c7-451a-86af-c357296cb286",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "315bf1a6-4150-435e-9cd4-90f108e0fe1a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "407a68d8-95de-4aca-9442-b32ca8888911",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04f4bed3-f5c8-46bb-a6d2-3f24030d3f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7e9da29-ad7e-40f4-8282-9b59665967c4",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ead0a3-69e3-4ca9-a2a8-d60ef4784f27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3464615-77f7-4903-9052-23f0759692c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b86bec56-8d04-4183-b498-607b76a5eaab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "366cf742-0afb-4b75-9312-387fcb1a4dc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b977cdc1-aa5b-45aa-ad30-f7393ab6e2c4",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce1cf1b-64b2-4701-9eef-b7da1043f110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4325107c-a62f-4370-996a-315c62c3589b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47d237c0-1f6c-4b56-af17-c58d389769e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68e73b04-e950-411d-a2bf-7b3617ab8b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0f260c6-0c33-41b7-b2e2-a29963f271c5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f4dc83-1f4f-421e-8a59-f40370b3b53e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb7eac8-3497-42d6-aaba-f3e5a172ab2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbd8f0e8-ff31-42bc-b8e4-9200c5b7b14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fa29fbb-cd02-4b2f-ba01-70d021949924"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3499af33-d73b-405a-95f2-36bdf8de9d41",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15127f80-217a-4f2e-9189-61624085d128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a819124-bb50-4ac9-800b-382708774a23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9af63313-a7e1-4528-adfb-4e2c0b843bdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f83bdcfd-262a-44f7-9331-05f6ea51f6b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da9a8377-eb2c-40a3-883d-3e9f02f56bb6",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3cf5b9c-08aa-49e8-8401-1eb8c67180bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83c80ec0-5ff3-4194-9fdf-3a4d0b88b297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fe75493-7599-4bdb-8d96-c3b2be351531",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "316d6ae0-a632-43fc-b133-0735d422f31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92eff59-1e27-481f-838c-f2a3c76875ac",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1fa9302-0a20-4167-981f-db72d1650cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe6d5cea-18f0-4259-9a08-fda1c659ac5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "856990b2-d4e2-40d1-ae26-bc119427730c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec1b4aa-5536-40e4-a64e-c1fb4d9deae9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8335194a-b548-457b-bf3d-22d5a04ee4a5",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "439c1490-a4ac-491b-ad3c-38fb5bf8fb70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e25f3cf-fed3-4b74-a5b6-52db0c5deb88"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "606ad5e6-48ab-4180-81be-fc2636ef1dd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69b5b036-59b2-478a-8c33-095d16367f1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3812e7c6-a371-499d-bd2f-b0972174a8c5",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6335d828-5d9a-4076-a336-b15cd29f28e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e263c225-87b2-4cee-91e4-56621ca119e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add8d232-aae5-4c56-94b7-c1d4f9e569ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "225c94b5-1274-4cf6-99e8-9f9a9a4c5803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a093e74-5911-45b9-820d-bea3eba53f1a",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04b96595-4650-43a7-89db-f8c32cb436ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69f065f2-5444-4a32-8121-09ed9962788e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ed6e7c5-1cb1-4db7-91c0-28a6a5fa46f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2e01967-575f-447d-bae6-1e6b879c29e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9de86aca-0f23-45da-8386-32c9c1fb70da",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b310747-d35d-4f46-acda-47e617290a38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3e93256-96d8-4f5b-8bdf-ca107a7af783"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9bcf740-2337-49de-9e95-3af6379ec750",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c123595f-3543-419d-953d-5daab330ce41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cefda87a-847c-49cb-88b3-866d846a6df1",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce97c51b-bede-41f9-b0ca-484527410f2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5da97dc8-20a5-41e7-b357-dd05cff6851d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "504a9a39-3ac7-45e0-ac2c-0b87126e3cc8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd5752cc-db18-483a-99a5-7995b371e227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8872e01a-4e05-4221-a277-8f5a30488074",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd9c1ec-6b94-45bf-af15-9abae32f81fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ed6a059-5dce-46b0-887f-f8d19a68eba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dde21eb7-795e-4a59-a04f-2fc4b94ec429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d72cc6-7d96-48e3-85d7-6b4a4c020e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96ae7639-77ea-48b9-acc2-7916ec462c0c",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da676146-b842-4e05-978f-e11933081903",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9918f794-b50f-4bb1-83f6-9aaddbac1af7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7445c884-6f70-4531-9e7b-acd109da2ac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7444d373-1064-4046-a260-a8f61a0f7a12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14716747-64fb-4868-bdc9-948a7a24ae5b",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ef93b44-e5ef-4d60-a443-065bba64bdbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba1aacce-541e-4e0a-95a0-dbb973d2316e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d079132-e023-4a0d-a8eb-eb5d69c6ccf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fff2b0a-5d0c-4a16-b367-95ae461f66cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f61df81-cfac-4750-8046-90f84ba74eaa",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e55f2b90-1f35-4398-9bda-40a0e2984906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "971eb7d3-fb76-4c2e-9038-b1b32ff9a4d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "adca8673-f7d9-472e-8deb-41b5ef8eef3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0fbc220-b06d-4a5a-abea-2d0c4d6f2418"
                        }
                      }
                    ]
                  },
                  {
                    "id": "305055e8-14c1-439a-b179-2391afde314e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c292af0-6fae-41ec-88d6-1fde4f6be37a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f43b285e-60a7-42da-9873-69a06c4edb05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afd6273-345d-4f7f-9674-1fa7e62697c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d333818-eb7b-4703-a13a-b4659a609246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91d453a-f0bb-4c3b-97b8-12b9d9b35f4b",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "735a760b-1517-4ab2-ab33-7b4f71ef1e64",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad6701fd-5d0a-40e5-8c98-e83a0b40f8bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2320b2ee-7088-4c78-a635-fdaa2e2d9586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f93a9766-9787-4500-a3e0-cd60004c7e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd12a5a2-c166-49ca-b00a-998d55ace090",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13e6fa9c-1e19-4d22-ae68-e5d8d6add2bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa6f292-ab8e-4769-aa87-e90c8f1cc404"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2eb5aa-8f2a-44fe-be6d-0fc8cc5fa7ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e232901-8644-4ab5-8e36-fce27247acdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bd9af86-447f-4b3d-a14c-8430c75165b7",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc81c98-284a-49df-8930-efdd6fa84f91",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1074f538-6af4-468e-b1ef-91ea023f6600"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2274275-4237-4b58-a2f8-cc50e31a5346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b907ec3-c8d5-4266-ad8d-57aa19db966b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b1cc3e-b01f-464f-9949-3032aacff419",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73be84c1-dec8-4d41-ac1f-06c676b03976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dbe6540-4738-4942-b84c-f8c533fed574"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91526b50-a378-4f34-880b-0d956c9517ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4ca5eea-0b58-4342-b4c0-aa8800bd7406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02bba7cf-1cb8-4d1f-8a50-d1a64131f9ce",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed11fd45-bff0-4e0f-90d3-cd498ff22e48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bcd16eb-e378-489f-91f9-5205f8fa188d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "718b41dc-f92f-4151-9900-733a64830006",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54769f42-952b-45eb-8f66-777e8dfce849"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91aa2f6c-76c8-4fb5-9d95-16821e03e059",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1322aae6-517b-4bf5-b809-01433cf93013",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d933c769-0dcf-49b4-8baf-ae9b877c29a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364a064a-8fd5-447e-b62a-ffebed9581a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c797f5-3467-4473-9150-db4cc5a94627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11da635-f30e-49fc-8aa0-bf6d9be6ff14",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f6f4379-1b95-438e-b0a6-8fedf8b8ee16",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28587867-3d9f-456f-9297-02c0ef375d0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07248efc-71e1-47f4-a352-1d2d7b1fc3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37dc7da2-c1be-4e39-a765-e41edf0f2a79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06c40ca7-4acb-4623-af03-cd3329d91a35",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec8f4eaa-bcf0-4b8c-a794-1084f4160841",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef6983eb-59ae-458d-ab36-48ee45c88416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf1443fd-9c46-4029-93ad-f86d209ee58b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00e836bc-a51e-4f9f-831f-107e236b7486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05473e21-7ddd-4f6f-b7d9-07fa0a712659",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6be18d-c590-4a6e-a2b2-d602d023b986",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6507a8e2-887d-42ce-a145-19be7790d435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a38c5678-7509-4c6c-84ea-1bff7068cae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9062c4f-96be-4eeb-908a-dfe824251aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b082c436-e972-4817-be8b-0ac72d3e2cd1",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7207e38-076d-4c70-a660-d2d4270234b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00486dab-da1e-433d-8a88-2795f4ea3a09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac3d3f02-c669-493c-966e-19f6bb7feb45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51e7cf44-286e-43a3-bc90-709cb4f7d226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9ab610-c20d-4e08-8eff-7935cadca36f",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f43b52e3-366e-4d9c-833d-ef82eed6f38c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4de3f441-1250-4285-95c0-00729c2cdb4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d08375d1-435d-4858-9625-edd0cdc81427",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b3d13ad-3b1e-4d2d-991a-fdc9c3e5fc66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21823ad5-dcd5-4032-b836-85af847be701",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87cf6e17-a69c-48f2-a259-8829b73ea929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38d222c7-9193-4326-a524-ef168a1e44ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "287d1504-a685-4be3-a870-f4414608d657",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf369b98-ed15-4c97-b3b4-3ff14b11aee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b529495-1ef1-4719-a339-69487280a35d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737503ba-da70-4be7-a989-78474078f9ba",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0036ce8b-e56b-4ac4-904d-a03e47b0f032"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cda5055-1c64-41fe-9e25-4d694790d8f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8bc875-a25e-4fc1-a85d-05647a715b49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f9e3d1b-8ba5-4bd8-91f1-280909e0999b",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5159d5-c86c-449d-9096-ddc1674a5797",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67bc0a76-0942-429e-bb3f-9950f1c0a5f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf15752-320b-460d-b53c-9ca06837f924",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adee4e2d-f52a-470d-a675-59c56abc1757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de7ccfe-0c09-4c89-b41c-0291385fce30",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9c75283-eb53-4f67-aa35-3772f35ea4dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "895ebfe8-b156-4680-85a5-7eeb24ae98ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4099dca-7e5d-47e5-8eff-55af7fd9f31b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c1bae97-7daa-40d7-9513-c9dd12668741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "751f328d-481c-41d7-99c6-8e97c0eb2cde",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0289552a-5d4e-4920-9f96-6ccab38b4671",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d3a288e-2650-4ca3-a948-6f774a71498e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63d78833-4866-4d28-8bb0-578feeb12cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef2ea8a-969a-4ee2-a2a8-5345bf0f1839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f15bca5-1e4a-485d-9d6e-7c306541e496",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55cc374d-e422-4d28-a8e2-2bc9eb3ca357",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "943ac054-2f2a-48d1-8f8e-750991b3fcdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8499e00-97b6-4552-9561-13f33f01e99c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae26fd6-5249-4316-8163-95aa0e463953"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113dfb19-a130-432d-af47-6f02ee048c72",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "184cb5a4-474a-4ee6-a329-291488995adb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b00d7a89-43ab-454d-88d5-54a6732a0801"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7e892af-fe11-4d81-9bdd-19ba3da591cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251e6412-bb01-492f-b310-124127676bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4b7908-eace-4ae1-88c2-eaa2d446e1b9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f582582-430f-4e67-976a-0f66541bb691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4677fe1-2f4f-461a-bec3-82f515c4a64e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "115c3d39-157a-4f3d-b323-f5778ded292c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d668add-ddd2-4720-aa87-846979e5e6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff77f8b3-0736-4332-9119-67535db09a96",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58c54dd6-3920-4f9f-a930-f6379124b5b4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4351f4ef-2485-4896-9dde-3e1ca4d69ee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44422550-4750-4722-8ae4-f78bad8ce534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d4b73c1-63a4-421a-bbad-56e8cc8cadd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc3866b-db69-4353-82ff-3a24de9a5e8b",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2caf4450-63eb-4fce-8012-e1e23fc1878e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68e66922-d459-4238-9eeb-a5c11b03e0c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffc641c9-d7e1-4ea8-a200-7742e44b54f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c5ac321-b4e0-48aa-9b3b-03f108b48d0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "177a3e27-92e4-4d46-ac46-d8f4ad530d5b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5349bee8-2f5f-400b-a023-0403e6da8aca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2aeb1f70-0e35-4ef1-8ac3-6a5da85428f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "710b7730-7938-452e-a88a-d63b7fff32b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09971989-3f2b-4cd7-a414-a406c763dd8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ad8b4c-7a21-4eeb-b376-1f56bd35de54",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73a9c881-1d63-451c-ae8b-d171c6d8ba69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5085200d-3292-4fba-aa28-a57ca310dfa4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "249de23e-2217-4ba8-b9ae-1c31c9de5698",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86b9daab-8954-4dc6-944a-69ddf2dc3438"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eee5903-65f8-4a7a-b748-934f98169f63",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51ff55c7-a717-47d2-86f5-8c9279ac3632",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6cbbe9b7-801a-40f0-974b-072287a16621"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8748807-1f94-436a-b323-10c28be12177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc44941f-6930-43aa-b4b5-46bfd20d8ea2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c089efb-5dbd-4fd1-98fa-07adabc05c4a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81fefa88-3864-4f1b-9eca-749d9db6a8e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95af2fc8-d8d6-4e76-a12e-92f5b8f8ec14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6ccee8-cec7-4dc8-b8a7-e4c5984c7ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6929eec8-f5af-4f2e-99fa-9f7dca6ca0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f22ef1-7d6f-465b-abcb-9daffdd901f2",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8da8399-6f0b-4163-8326-20c7bcd0adab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a2c6bba-f763-4a28-b58f-072cdb4df03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8c13b86-6113-461c-8a51-0823f62b4aac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e3f897c-7b0f-4b65-b423-a204a0ee097a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a6b08a7-cdc5-4bb9-b314-ed14e94f65d5",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37242ce2-62b1-4815-b30f-2e7389cf2417",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b489543b-cc62-4aae-8d8c-013942fe2102"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b8a8e9-1745-4142-8456-1456a5241375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eaa9ec4e-9bac-4b52-8b0d-9d78e5fc87b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1800a1af-46ce-434b-84a2-75391df382ba",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "981d5aa6-9988-4a9c-969b-aee809f93e01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3c1f448-bab2-4db9-adf0-2d310f7fdba3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17aabf3e-f6fd-4e2e-b3b7-ad84bbcf3a5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9678deab-e3c5-4656-9376-09fddb89d1d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ed7b6cb-156b-4f2a-8a54-697a6511ddeb",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8d27da8-3161-403a-9b4e-16a312398478",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62e9c62d-5810-4d02-bbcc-df798a517ec7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "830d9e10-22b2-40fb-85e7-1f236d26f8f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6a76ddc-80f8-4fd6-9c29-a135a2e88c00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e454f86-07af-4bf2-af4f-b0f619b53431",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e0c74be-9df6-4484-b100-ca5311bea958",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "17dff7ff-c241-4966-a793-bd5eb179dc01"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e7e272e-5d6a-49b0-ab0b-1b752da862dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "110dd30f-2167-4913-b044-55ce92a287ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b29a75f-aa2b-49b9-96bf-af8c9af03f4d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d09364a4-72d9-49b3-b88a-8e9ca2560c6f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "037c92fe-1f9f-46d2-9c91-1b4c1cdfe221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6145b1e1-13d7-4ee6-8e27-80e6928de52e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f74db94e-32f6-4d73-945f-3b5b43b64ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04bb6f38-3d21-4e24-ad71-37683a972b17",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8471e313-85d6-4cb8-8b28-2828cd55437b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d431bbaa-0a7f-4252-b500-78c5f3e4a6c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f42072f8-07e7-4955-99f9-ea17a16d458d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d96c615-9804-4a6b-a7ab-284189ff4297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72a64106-1369-4314-9906-c960d740bc7f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "583b16c0-12f1-4a6d-b140-80dccfbfb6bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5a6c85d-4584-4355-aa6a-20abdd4ddc87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5db19f6b-04f1-477a-840c-6c5f160d3fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08ead225-f611-4152-98e3-7e2c4cbbb915"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7712c7c9-a1ee-46ac-88ad-da11e21a2e9a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8a5b6e6-31a8-44e9-b65a-da04aea338f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f186200a-5599-4dcf-9f87-87c88b6b42c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "600256a6-e228-4e85-a928-c94c70bb25b6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8015911-cb67-4f72-b3de-0782cfe2b951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7b91816-202c-4a7b-81b0-a6bd7afc58ec",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9b22fe6-d680-4a08-9013-f825124a5d20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56294a09-e4e4-40d1-a769-5d08f013e84e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d82220b-b121-4b37-bb0c-10de5fa3b4da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d1531d1-51b4-43a9-a5bd-ac4a1c5c783b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb06fdfb-f020-4593-b54d-99a720c22251",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f87fb43-27b8-40e1-9217-46b479f24a71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0fac4f0-687a-403e-a52d-2b0898b1676d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13aa0bbc-6e2d-4690-8958-4f2173488bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93b25389-98ff-4bf8-89b4-821596ffeb3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "657d1434-f3d6-4803-b6d5-de13b5699b88",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4247920c-66b3-43fc-a02e-7b19d92a53ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04645065-0f17-4bac-8ccc-77568999e1df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd81d8c4-b2e8-411f-986f-134025e7a620",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bf98663-b802-403a-8e1e-acebedde7cd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d135ae1-0e83-445b-bb21-4b30c5e696ed",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a750757-c970-4e7c-8f93-06f33a3f7f7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da9f7e12-8196-4f98-b853-5bda3956800a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efddffda-fa9f-46a9-8ddc-a5a65b4249d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d8c6051-27e9-40c0-8443-a56179d32e64"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f76eda80-f667-4f20-b031-7e3a8f080039",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "86b64e39-a862-4cd7-8857-d112553db80c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f22b941c-f5f4-4a66-b72c-4661ffeb3118",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b7ecff89-be43-4172-963a-1b9bd3b3d2b3"
                    }
                  }
                ]
              },
              {
                "id": "058b920a-6986-4806-b2ab-4f8db6e629c6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "df7f5767-5059-41f5-b572-330fc421ffb7",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beea464b-2d62-4a83-b2d1-7882188f7089",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "214a97c3-5113-4cd7-a0ea-34ec70265639"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49952405-c905-47ea-81ec-e64cda4079e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e307a72d-51a3-44bb-a569-fbbd468fd243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5917ca9b-b269-4dfc-a77b-2d39d2f66ca7",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e98832e8-f996-442d-bb6d-2357a2a9f556",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "f402b00f-a345-4c15-9d2d-7141dfa56879"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f818cad-bd0f-4cce-acaa-281794dc3784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9ed0f8e0-2bf4-48da-8119-25cc9e682f7e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "da7aafbb-f1d8-46d2-9166-018913ecdd49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "36245b2a-19ce-40a5-9787-5486c77b1c0a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "87998390-b870-4794-9697-8e4824a374d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62b01f4b-eaf8-48af-9c83-f98776749583"
                    }
                  }
                ]
              },
              {
                "id": "074ae7d6-b8a3-4fc3-9395-e310adb28c34",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "710deb07-8603-4c24-bcdf-4b9f8f02181c",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1b8cef-ed4a-444b-a664-5f2563d000f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "c6be5eb6-9437-4c13-a2bc-4450c716deaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8e43a71-3448-4649-8a45-ca86eada8790",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94303e67-e262-48fd-a65d-f01782aa10af"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dd6ee171-d373-432a-9a5c-449f69e7ed07",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0763e44f-7bd1-4999-9a6a-818ead4b2f05",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b48535cf-c04f-4851-9f88-2cbe09c03191",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "ce6414db-be52-4fb1-89bc-2bc608f34bf3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3de6cf0e-b893-454f-8a01-abdda7cb1d0f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6820ccb-2e21-44ef-9c1e-e6447c917132"
                    }
                  }
                ]
              },
              {
                "id": "b95172b0-c838-404d-bf72-d6d6bc894a3e",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a9278c94-f093-474b-94ba-e084bc83efb4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "65dcd84a-253f-44ef-8d94-1ad09d6b25a2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "40df3144-b696-4c06-8e5e-5cc3546c1715",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f68215e4-d8b8-43e9-99ad-0dd65c91daae"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3950b171-218a-41f9-a2ba-8b1158046d6c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bb88dad3-3e87-44ba-b78e-150ab7e11bd2"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4b4cd81-4fb8-402e-8f92-84f8c43288ec",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dcc1f68b-317d-4f01-8691-2c3335971fb2"
            }
          }
        ]
      },
      {
        "id": "709344ae-7f44-436b-9992-cdc9d9c9c469",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "d151df47-f8aa-4aec-8fff-42879d6367dd",
            "name": "Negative Testing",
            "item": [
              {
                "id": "466b77e7-bf75-4dfb-9c69-f3e824d69bdb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2a1a332d-bd50-4f76-b3c2-af3fbf3a465e",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a212422e-36a7-420d-9af7-54ac833163db",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "4b478b7f-d640-45a1-8475-1a4671cea258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde8172e-97f3-4104-8fb0-7a68218a8551",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0a411df0-0fe8-4de6-b113-6e8177c46ac9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f321b7e-30bc-4651-bbd8-07872b6de4d4",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc0b6303-adae-44b7-b10c-1ec7107e4327",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "567ac09d-9bd1-40b9-8013-cdd8c1ccb902"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1984584-a4bb-4aa7-b01d-003da7df6fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7ec2760d-cc29-41f7-826a-dfb82028fcc5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0ee45bb9-fc6d-47b4-8189-9b96508b95d1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b822322-dcc6-48ea-bec4-580f7d737ad6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9cfb31e5-6a28-4e33-8559-807945022480",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d2317cc-be72-4321-a781-19a18030505c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a932f752-f231-4e95-bdc9-00d8831c7c3f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "b6d53342-3477-40b7-ac7e-e818fa2bef1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f7465579-4340-4ec3-9d1d-058d28603f52",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a100fe6b-5f0b-43d9-97dc-fbd5e4a25ce4"
            }
          }
        ]
      },
      {
        "id": "3465d2f2-9308-4caa-a672-b9a9b441ab69",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "266419a3-2b7e-48e7-a785-78b4a66359ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dd8e7aa8-0e65-4697-95df-88100a3ade89",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "456d629b-5494-44f6-b392-eb7969d7aae7",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e39ebb4e-0f7f-4498-9438-e3dcf98bdc1f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3b9bf5de-5431-4e24-b8c4-5106ac0fca8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "70a97c0a-2492-42a4-a477-809c607130ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c92a8783-e7d4-455a-997d-27b70cfe24f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc8778aa-6fb5-49af-8484-9fa088411bae",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e63281d-5d71-4ce3-bb7e-0f1d012cad25",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "29399f19-412c-44c8-88ad-01197f73c82a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a1772fc-94ed-46a5-9fb7-e6bf4c5f90fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "128a5884-4d8e-4b88-bd5e-c98d80b3bd48"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "79bee97d-b838-4acd-b3f2-09492c42f1fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8d61e979-1103-434a-8519-58c6b65f0f84"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ccafccd0-2443-4119-a3fc-25ce08e60a3a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "899c14f6-96d8-44a5-b1b0-b3f9d08e8d8c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ff078688-697c-4885-94e9-aa0a50a31c3a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "945a84e8-5a6d-4cf0-92df-a498d18d35c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "66cc23c5-8698-47d5-85e8-3b9516e59f11",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "06335916-03be-4c6a-9bba-475c7c373a39"
            }
          }
        ]
      },
      {
        "id": "0b03186c-e4a2-4a0d-bc64-c42868c9656b",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d5e7d10b-b239-4abf-b519-3ad09e34f5d7",
            "name": "Negative Testing",
            "item": [
              {
                "id": "fbe373e0-ccbb-400a-b371-b5f695bac144",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "81af01e5-abfe-480a-a594-11c8087b693c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39abaa33-fb92-477b-81a3-653261e47938",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b45637ad-309a-4f60-80d3-2e4f57c9d325"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c871d464-2964-40ba-9649-527866ad4272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2214cb8c-cecf-4c4a-9b65-916d3073732b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a2ea2e9-bd74-4fe2-bf9d-5c4850203a05",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18fc5efd-0bc2-4d96-9206-c583583c6941",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0351a33a-8aae-4f01-8939-1cddd7517c81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7223b48-1b30-45ac-a9ef-8e5f7379b98b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ec8ae3ef-7cf3-4d53-a11d-80ee80d5d578"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f602f511-33ad-4d4a-83cb-b48db8bbe20b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "dd308844-789e-4453-9aa1-7720c455075c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8d8f8d1f-b618-43cd-a4a7-2998d3782a38",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0d4f489f-8c6d-4575-a337-8a09045ff8ad"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7a8f2dae-1224-48b9-b8ce-b9789f347cda",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "dc439590-dba7-4c8e-a6f9-a70588274db8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "55489bee-fe3d-4b7a-8145-9c8f7adda99d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0ba7dec9-d7b1-4dff-b40b-39c8a965e5e4"
            }
          }
        ]
      },
      {
        "id": "1d1fe983-f05e-4a64-90c8-7467abc16c19",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4b96bf10-262b-4c3a-8d40-a1217db74356",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f4351735-8e2e-4e17-a878-b52bb62a58fe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e5d0c186-7dfc-46cf-bf7e-5f6e1576349d",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3b3b52bc-1910-4de6-b35e-945712d6cfe1",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a514edbc-af8a-4b27-a050-f32ef7a00fda",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 444
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 599.5783038085233,
      "responseMin": 7,
      "responseMax": 11222,
      "responseSd": 1817.7813734935844,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675730421355,
      "completed": 1675730674699
    },
    "executions": [
      {
        "id": "09f2fb23-12da-41e8-b6e5-0feec4535ba2",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e9839af9-dc3e-41eb-a387-b4e72d03b787",
          "httpRequestId": "86f874a1-fa4e-4e61-bbd5-95690e4ea2ef"
        },
        "item": {
          "id": "09f2fb23-12da-41e8-b6e5-0feec4535ba2",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "92acfcc4-d76c-486a-a0d2-a1eb2b2dd00f",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "061877fa-fd6b-4211-b1be-15fe94c80f87",
        "cursor": {
          "ref": "76e62142-6d83-49c9-84db-e9d75732c218",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "95867830-0f1a-4ebc-a518-3d6c7ee5b4ef"
        },
        "item": {
          "id": "061877fa-fd6b-4211-b1be-15fe94c80f87",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0fc83b9c-e0ee-4696-88d8-109d5896f316",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "4448d87f-7ea5-4e29-9e86-1c23f90a1805",
        "cursor": {
          "ref": "55bbfdd8-3a81-48bd-9cfa-5abfcdfbe29b",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1ab07632-fb0a-4557-915b-8443febe29b1"
        },
        "item": {
          "id": "4448d87f-7ea5-4e29-9e86-1c23f90a1805",
          "name": "did_json"
        },
        "response": {
          "id": "415c1248-7d29-46f6-9781-18c74571e841",
          "status": "OK",
          "code": 200,
          "responseTime": 397,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf02e8b-1134-42a4-8b3b-8f05df655128",
        "cursor": {
          "ref": "7a8a9318-39ea-47b1-b0a7-2b6a93932ef3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae82bae6-225e-46f0-8844-eec88f1abf24"
        },
        "item": {
          "id": "caf02e8b-1134-42a4-8b3b-8f05df655128",
          "name": "did:invalid"
        },
        "response": {
          "id": "ed203403-b12a-4397-9bba-7c6d43f4046f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf02e8b-1134-42a4-8b3b-8f05df655128",
        "cursor": {
          "ref": "7a8a9318-39ea-47b1-b0a7-2b6a93932ef3",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ae82bae6-225e-46f0-8844-eec88f1abf24"
        },
        "item": {
          "id": "caf02e8b-1134-42a4-8b3b-8f05df655128",
          "name": "did:invalid"
        },
        "response": {
          "id": "ed203403-b12a-4397-9bba-7c6d43f4046f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "690b5834-d5f5-45e5-a6a6-141c38793cd5",
        "cursor": {
          "ref": "f7bf38c2-cfc3-4e66-b223-5e1feb9c6ef2",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0ad76fb4-0de3-4988-8e72-927ae2c8622c"
        },
        "item": {
          "id": "690b5834-d5f5-45e5-a6a6-141c38793cd5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3b09017d-13e8-42a0-8603-e52223c49be7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 203,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66365c5f-cb3c-49b6-ae4a-b152d5a10ad2",
        "cursor": {
          "ref": "f4b2c933-300a-4b13-bc6a-2bfaa11b4f73",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6ba4a424-8e31-4da3-9889-3a0a71db70cb"
        },
        "item": {
          "id": "66365c5f-cb3c-49b6-ae4a-b152d5a10ad2",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "30742a71-0e5c-4913-a0c0-7563a0e4daf4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 86,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3b35184-e23c-4d28-b953-fb576c5fe168",
        "cursor": {
          "ref": "2098060e-faa2-431b-aa5e-83bfe47e521b",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "10d06e2f-312c-444d-aa1b-7d679d1380b0"
        },
        "item": {
          "id": "f3b35184-e23c-4d28-b953-fb576c5fe168",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "0fb73abe-748d-4c99-ab04-c9c2e41c2d98",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc0b8ea-d044-4aa3-9d68-a1bb26858f6a",
        "cursor": {
          "ref": "f74dfc4f-1cb8-4e23-807c-066e952243a0",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7d8e12b6-2779-4e0b-a8f2-6373f11f3035"
        },
        "item": {
          "id": "fdc0b8ea-d044-4aa3-9d68-a1bb26858f6a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6f2fbce2-4245-4345-afa9-8facb0af9ed2",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "fdc0b8ea-d044-4aa3-9d68-a1bb26858f6a",
        "cursor": {
          "ref": "f74dfc4f-1cb8-4e23-807c-066e952243a0",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7d8e12b6-2779-4e0b-a8f2-6373f11f3035"
        },
        "item": {
          "id": "fdc0b8ea-d044-4aa3-9d68-a1bb26858f6a",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6f2fbce2-4245-4345-afa9-8facb0af9ed2",
          "status": "OK",
          "code": 200,
          "responseTime": 160,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "bae3f587-cc73-49ea-b6c9-d002ca7498b5",
        "cursor": {
          "ref": "0746363d-5c7f-4af5-b5b9-70fecb33f52e",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9d32edad-42c7-4ab5-9de9-b5bc7d5a9cc6"
        },
        "item": {
          "id": "bae3f587-cc73-49ea-b6c9-d002ca7498b5",
          "name": "identifiers"
        },
        "response": {
          "id": "08859afc-d422-4a4f-8a67-2e8c494ead9c",
          "status": "OK",
          "code": 200,
          "responseTime": 113,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06461bfa-e53d-4645-8393-8c4e978052f9",
        "cursor": {
          "ref": "91186ffd-71df-475c-8eaa-7465f756cb16",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6e931b09-d689-40d5-b857-02825930ecb1"
        },
        "item": {
          "id": "06461bfa-e53d-4645-8393-8c4e978052f9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ee00777c-ea6c-44d2-8b8a-751cf20724c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "06461bfa-e53d-4645-8393-8c4e978052f9",
        "cursor": {
          "ref": "91186ffd-71df-475c-8eaa-7465f756cb16",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "6e931b09-d689-40d5-b857-02825930ecb1"
        },
        "item": {
          "id": "06461bfa-e53d-4645-8393-8c4e978052f9",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "ee00777c-ea6c-44d2-8b8a-751cf20724c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "e3dbeb99-4e68-4940-8cad-f8ccc803121f",
        "cursor": {
          "ref": "d557ab87-7f90-446a-8d44-9fd72413a3a0",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "2d178aeb-7fcd-4637-aa65-cd46920ec40f"
        },
        "item": {
          "id": "e3dbeb99-4e68-4940-8cad-f8ccc803121f",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8c6c9685-e692-4d13-9220-9678a2e08de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "dbec864b-7050-4963-b341-75983b9b5e5e",
        "cursor": {
          "ref": "57981866-a9b2-4aa4-94ce-2d407795555e",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "07373812-fc7c-43b8-834c-bf027f5108b6"
        },
        "item": {
          "id": "dbec864b-7050-4963-b341-75983b9b5e5e",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "f33c1ee2-7d87-4a4e-a4c8-71d0c1f26b7f",
          "status": "Created",
          "code": 201,
          "responseTime": 171,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "896b7f2e-160b-4f12-82fb-4a30eef41b8e",
        "cursor": {
          "ref": "86001cb9-90db-42b4-b55f-b9c11828d3ba",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "b61236cb-6af4-4bdd-a788-1996b99d405a"
        },
        "item": {
          "id": "896b7f2e-160b-4f12-82fb-4a30eef41b8e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "505b2cf9-50cc-49b7-a44f-af81fc3945b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "0c7591a0-deaf-42a3-97de-26c7e0e78c75",
        "cursor": {
          "ref": "2fbd4932-046d-4286-8b02-2f49f2e4ca34",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "fe5a191b-9aa2-4a9d-aadf-2fe0bc2b5ae4"
        },
        "item": {
          "id": "0c7591a0-deaf-42a3-97de-26c7e0e78c75",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "8180ab28-2d78-4336-88b7-239c70540d0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "a2dc84c9-6bac-436a-8435-c5a0ebbedf06",
        "cursor": {
          "ref": "30821efb-2ec6-4f62-add2-897746168c86",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3a1fcf40-f6d3-4cf2-a305-ff46a0598131"
        },
        "item": {
          "id": "a2dc84c9-6bac-436a-8435-c5a0ebbedf06",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1bf57a17-7c75-49bd-a94f-514736732d59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "8544a8ef-5b69-4cad-8b03-c7fc21dbdfcb",
        "cursor": {
          "ref": "075de22a-c824-4d4c-b15b-ae97f5c6c9c4",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "9ed2cf4b-87c1-409b-aa39-afbdbc9963e1"
        },
        "item": {
          "id": "8544a8ef-5b69-4cad-8b03-c7fc21dbdfcb",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "3f847dd4-2542-497a-b860-ed2990536a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "f40be8f1-fc38-4944-b6a6-50a6f64786ba",
        "cursor": {
          "ref": "f7e5992f-2acb-437d-92a6-700ef5370e9f",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "49616061-fc85-43c5-b1e4-dcb4c0c7cdb3"
        },
        "item": {
          "id": "f40be8f1-fc38-4944-b6a6-50a6f64786ba",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ae0d5453-e9e6-4485-85b6-6963ca6d3193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "5f926bd4-3c2c-4e27-983f-0be363c82f02",
        "cursor": {
          "ref": "918c8359-a68a-4bfa-b86c-91af35520113",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6bc81443-ee45-4c3f-a9f0-ff4d83d61f3c"
        },
        "item": {
          "id": "5f926bd4-3c2c-4e27-983f-0be363c82f02",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "331fdcf3-c3d8-4525-bc7e-cf7b66f1c6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "28bb5134-5087-4ba6-98b7-c65a9c97850d",
        "cursor": {
          "ref": "52b5c90d-6974-423b-a44e-d52d39f9c45a",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e7e3c8b5-0dc3-4808-82f5-38dddf9ea99b"
        },
        "item": {
          "id": "28bb5134-5087-4ba6-98b7-c65a9c97850d",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "928d03d6-0b66-41eb-a858-0a57f85f1ec1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ed0840a0-738c-415a-a259-788303da3ee3",
        "cursor": {
          "ref": "fb84056b-df6a-431d-9efa-be91d4d6faa0",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "223fe071-650b-404d-8b08-5c62acb35d76"
        },
        "item": {
          "id": "ed0840a0-738c-415a-a259-788303da3ee3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "f5a0eb5b-80f2-409c-988c-81a2dc656385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "a101637e-869b-4118-88de-36a77698c6db",
        "cursor": {
          "ref": "791fc940-b775-4868-a8e3-d97245b01cfb",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "c28a248d-8be5-448b-bc51-2b336d499b1f"
        },
        "item": {
          "id": "a101637e-869b-4118-88de-36a77698c6db",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a4337d71-63d7-4eea-a33e-46d8090bdd14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "5acd4718-61af-44f2-af8d-86301cd21e2b",
        "cursor": {
          "ref": "6747b10d-4938-45be-b7f3-93b9ab8daa64",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3e4d04f8-a365-4aa4-95f3-50a30eb04470"
        },
        "item": {
          "id": "5acd4718-61af-44f2-af8d-86301cd21e2b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8ad6d82d-ba62-4eca-b0be-402f9288cdde",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "c0ca9bec-2e38-46e5-96f1-9b49531b3b78",
        "cursor": {
          "ref": "09136d9b-9dbb-47e1-9062-ced1b3c1585c",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "2d8e2443-11d0-4049-8e6f-c8c34df6fc28"
        },
        "item": {
          "id": "c0ca9bec-2e38-46e5-96f1-9b49531b3b78",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "6a613f27-8fd3-4696-b5ed-d4182ef093f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "359ae59f-248c-4191-af32-1a82d042dbfc",
        "cursor": {
          "ref": "071223b4-ec66-4bbb-aec8-cd4f08f49b96",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a9b17311-f419-4da2-b4b3-22dfe298f860"
        },
        "item": {
          "id": "359ae59f-248c-4191-af32-1a82d042dbfc",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3a579101-5fc3-47ef-8281-c8e1932df48a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "15697015-2874-474e-8749-7447971c158a",
        "cursor": {
          "ref": "e67738e8-a9cd-4a03-a854-5ae7410bcd92",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "96bf64a4-98ce-4dfe-a144-0755264fb584"
        },
        "item": {
          "id": "15697015-2874-474e-8749-7447971c158a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "13c62be9-e3df-4ca9-9473-6c42b714bfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "40a4f6f6-d6b5-4e04-886c-9bbfa47299db",
        "cursor": {
          "ref": "f5167cd6-e813-4a0c-ab7d-e83a2d6b1511",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "a4395930-0e73-4a1e-a198-a5fb2d74397b"
        },
        "item": {
          "id": "40a4f6f6-d6b5-4e04-886c-9bbfa47299db",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "fa245ae8-0251-4075-84a3-d19e6cd10db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "0808316e-09ea-441e-97d6-637083476da3",
        "cursor": {
          "ref": "2b48c6ce-5372-4f35-a28b-3b3658f70a3a",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "7dbc8b9a-e0d1-4cab-9902-cb0ae55373cf"
        },
        "item": {
          "id": "0808316e-09ea-441e-97d6-637083476da3",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f5d987a3-47fe-4e1f-a676-2465dae6ee50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "7d708ef1-0db6-4ca2-aa6b-96413c03bcc5",
        "cursor": {
          "ref": "a15f4d44-8b52-424a-b93a-e099acd70148",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "896534c3-5ed2-4d5c-a90a-976c132d8582"
        },
        "item": {
          "id": "7d708ef1-0db6-4ca2-aa6b-96413c03bcc5",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "66cf8438-5579-44e8-8176-9f9a9fb3e2be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "0a002f28-449a-47f9-ba39-85a1e5e43882",
        "cursor": {
          "ref": "a27799d7-8b4b-43f1-8b68-086fdbc24f5f",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c4612eb5-5bc5-4d60-bfd5-95a76f230ea6"
        },
        "item": {
          "id": "0a002f28-449a-47f9-ba39-85a1e5e43882",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "64646ba4-ae2c-4ef4-a2e7-47a7f3fb5a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "bfd3d14f-a0a2-4988-a184-227e697c52d2",
        "cursor": {
          "ref": "a0bb6171-bf61-45cc-babb-e3cd4807e0a4",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "12ff8c13-a9e5-4fae-9e34-4ecd397743f9"
        },
        "item": {
          "id": "bfd3d14f-a0a2-4988-a184-227e697c52d2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "ceaff287-14cb-49ef-a689-1568701653ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "9973a254-b64c-465c-82ae-136def861bf2",
        "cursor": {
          "ref": "36a954a7-b092-45a4-8903-5bb1a5d2a206",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "56b06f75-1a6a-434b-932f-e6009f93ee95"
        },
        "item": {
          "id": "9973a254-b64c-465c-82ae-136def861bf2",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "40c93670-f913-4d31-ba5f-a2b9f64d489a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "675ad120-4e29-4639-9846-79ba7ef50541",
        "cursor": {
          "ref": "333d9978-7488-45f0-806f-a8c7a1e4b665",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "28a388d6-3d5a-404e-b48c-56c4c726db39"
        },
        "item": {
          "id": "675ad120-4e29-4639-9846-79ba7ef50541",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "79be8f02-9290-4f59-aab0-591cc60d8841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "f63e92f2-c95a-49b0-be28-c66e449ee8ca",
        "cursor": {
          "ref": "455f6e1f-c64f-4046-af72-032a17449b6b",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "7eb55edd-2042-4943-a8f9-9e1bf6d5db70"
        },
        "item": {
          "id": "f63e92f2-c95a-49b0-be28-c66e449ee8ca",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2fd711a4-b738-4944-9cc2-255f28f1f1c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "7bfbfdcc-669c-49cf-94be-bb5134a32ccf",
        "cursor": {
          "ref": "63c726dd-34af-462c-bd1d-eda07454a198",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "bc8fad59-b900-4d9a-9dd7-527233dc4e15"
        },
        "item": {
          "id": "7bfbfdcc-669c-49cf-94be-bb5134a32ccf",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "d0394832-37ce-47ca-bef3-c6c00c373b36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "747bbbe2-bbec-403e-a2ae-ba55a2afa0d1",
        "cursor": {
          "ref": "2a9baa08-5e71-478e-9fd1-00ad825791a7",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "5e1e0fbf-59b5-4984-9566-7c733882fe44"
        },
        "item": {
          "id": "747bbbe2-bbec-403e-a2ae-ba55a2afa0d1",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "e9e2950b-5704-40cd-aa13-e70c6e8adca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "bccdda34-b4c9-4e94-95a8-3630a06f1c2d",
        "cursor": {
          "ref": "9297ebb8-832d-409f-a99d-ca214e083d2e",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "bf0cb00b-e9a6-49c2-a862-ae49450bcb75"
        },
        "item": {
          "id": "bccdda34-b4c9-4e94-95a8-3630a06f1c2d",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "33e113db-2a17-4992-8ef0-b4962c8091a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7458,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "d8b3ae2d-0335-467b-b66f-bede35777b9a",
        "cursor": {
          "ref": "a2fdcb78-863f-4e6b-9df9-ad2fb2b941d1",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "401adb63-6d33-4685-94f7-0d6d10583e97"
        },
        "item": {
          "id": "d8b3ae2d-0335-467b-b66f-bede35777b9a",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "2d45a943-5cfe-4532-a8a8-f52bf699f2dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6031,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "a757c94a-460c-4256-94b1-1c4f8c53feab",
        "cursor": {
          "ref": "f07abe04-8f17-488f-b6c7-86c75d4efd24",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "31f7b339-8d73-4b5c-8c54-7df3591d579b"
        },
        "item": {
          "id": "a757c94a-460c-4256-94b1-1c4f8c53feab",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "bbefa34f-5c1a-450a-b32f-722d7f4e61a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6144,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "8eef6718-0ef9-4e5b-9e9a-ebfc59cd1d22",
        "cursor": {
          "ref": "2dac3e26-b188-4f15-bc28-0a2233f2c4ec",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "c904beb5-e899-48f6-8893-dd7ba3208ecb"
        },
        "item": {
          "id": "8eef6718-0ef9-4e5b-9e9a-ebfc59cd1d22",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4be0b08d-b734-4643-802c-944818e9031d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5528,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "911c4658-57dd-4994-9a3d-a0a2d6525d60",
        "cursor": {
          "ref": "5c87fccd-7d96-42e5-83a9-7da867a96507",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3f700b96-c0b7-4f94-a0fd-d8618b373657"
        },
        "item": {
          "id": "911c4658-57dd-4994-9a3d-a0a2d6525d60",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "5f848477-c62d-424b-9dcc-818037fff4b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6130,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "615af977-cf21-49a0-a4c3-760834cbe8c4",
        "cursor": {
          "ref": "2ea6c604-02d1-45f2-b520-bccdbc90fb3e",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "02b39835-b0d5-4bfc-84b1-365863066f3f"
        },
        "item": {
          "id": "615af977-cf21-49a0-a4c3-760834cbe8c4",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "31b20404-57d8-43e7-ac60-43189c373739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "da0d3f05-6241-4cd6-89e2-10bb81dbd10e",
        "cursor": {
          "ref": "a7abe972-20f3-4255-bcc0-8fff50b03d64",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7809115d-e6a8-43f9-a096-488c2d1ef374"
        },
        "item": {
          "id": "da0d3f05-6241-4cd6-89e2-10bb81dbd10e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "80c51986-f81d-45ef-bf17-0d7a0e5a5e37",
          "status": "Created",
          "code": 201,
          "responseTime": 5374,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "d80f9ea4-9b85-4d9d-a988-8a48039f7643",
        "cursor": {
          "ref": "1b1448b4-37a8-49be-ac32-23411789dbfc",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b8ca381e-e986-4b1f-b778-bfbef05e4591"
        },
        "item": {
          "id": "d80f9ea4-9b85-4d9d-a988-8a48039f7643",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "27ae381f-a8bb-45f3-a7b6-6603120fb101",
          "status": "Created",
          "code": 201,
          "responseTime": 6337,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "81748b1f-74fa-49eb-aac4-593ae09e780f",
        "cursor": {
          "ref": "2a3ad691-bc05-4b18-9870-70c3b2a9a96c",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "c4c89eb0-2f7a-4a6c-846c-7f90e7c99659"
        },
        "item": {
          "id": "81748b1f-74fa-49eb-aac4-593ae09e780f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "94ddd5bd-2e0c-4dd7-bc5f-fad6a79c19c6",
          "status": "Created",
          "code": 201,
          "responseTime": 5814,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "00ef31ad-809f-48a4-90e3-ef2fe9b91e06",
        "cursor": {
          "ref": "22c3d120-2aff-43bf-9184-dfbc9d7937f1",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f64c03b5-035b-462d-9f2d-f1b85dab686a"
        },
        "item": {
          "id": "00ef31ad-809f-48a4-90e3-ef2fe9b91e06",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "64a223f1-e5a1-4613-80f3-e2c67f9126b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 428,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "12a226eb-7520-4aaf-8914-3b1d61a1ac88",
        "cursor": {
          "ref": "698df2ab-7e30-477b-9162-7b0b1e388031",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "a6f8b1d8-5cbd-453c-97e9-1384e44c86d7"
        },
        "item": {
          "id": "12a226eb-7520-4aaf-8914-3b1d61a1ac88",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d83028f9-fe86-4f5d-9cd2-963f4327f8d8",
          "status": "Created",
          "code": 201,
          "responseTime": 5140,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "4dd28884-4db2-4d8a-b73f-ed9d203bb9a7",
        "cursor": {
          "ref": "1deb3aed-4db0-4813-8173-fb565171fc1d",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8e05b96c-1791-4416-b417-6a5e46fdc853"
        },
        "item": {
          "id": "4dd28884-4db2-4d8a-b73f-ed9d203bb9a7",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "82017667-59ed-4c93-9bf9-a072a9542c88",
          "status": "Created",
          "code": 201,
          "responseTime": 5806,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "27097574-6fd5-4136-a381-8d61005103a2",
        "cursor": {
          "ref": "49844805-fce8-4a39-89e4-5207fb046231",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "60ee108c-ad73-4c0d-8708-55e41a248071"
        },
        "item": {
          "id": "27097574-6fd5-4136-a381-8d61005103a2",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "6903a336-c7df-4e69-abf5-5a27b083a04a",
          "status": "Created",
          "code": 201,
          "responseTime": 5572,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "7addcba6-6e1a-4235-a7ea-d543cc75237e",
        "cursor": {
          "ref": "7c0f8e60-40a4-4819-babb-6cec6ab7c49a",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "859a71c8-2d6e-4d71-ac33-dc6a59d7e2eb"
        },
        "item": {
          "id": "7addcba6-6e1a-4235-a7ea-d543cc75237e",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "b6a147e2-ceab-4c0c-ac52-a31eb04200f8",
          "status": "Created",
          "code": 201,
          "responseTime": 5991,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "fff43590-966f-44c1-b011-5c8949c537d5",
        "cursor": {
          "ref": "11892720-4a22-42c1-84d2-7fbe3417820d",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "96bdde97-d94e-4f4a-8368-85a5023f4190"
        },
        "item": {
          "id": "fff43590-966f-44c1-b011-5c8949c537d5",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "1c2f864f-87b8-4676-b5ee-1428e81c093a",
          "status": "Created",
          "code": 201,
          "responseTime": 5426,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "eeae7f50-9b2e-4b34-ab8a-0839713ed16b",
        "cursor": {
          "ref": "d9211124-8a36-4e26-ae90-71e334bcd3b6",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "dd1a3e00-1ed5-4e7e-bfb2-f252ed328aff"
        },
        "item": {
          "id": "eeae7f50-9b2e-4b34-ab8a-0839713ed16b",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "438f87ad-6224-46e2-94f3-e2730d387d54",
          "status": "Created",
          "code": 201,
          "responseTime": 6288,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "42bad252-9ed3-4b24-8cbb-bdcf899b4ba9",
        "cursor": {
          "ref": "6b0f574a-da43-429f-a77a-f959d9e9f79c",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "05417df9-23cd-4fde-b052-aa846b1d6839"
        },
        "item": {
          "id": "42bad252-9ed3-4b24-8cbb-bdcf899b4ba9",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "69245c14-6697-45d0-aed1-644a7fa83169",
          "status": "Created",
          "code": 201,
          "responseTime": 5158,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "47fecbdf-87ef-4399-bb32-2706927927c0",
        "cursor": {
          "ref": "5ad8a6b7-08ec-406e-9583-95263c4c98ae",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8c0a36d1-40e4-46b6-96e6-5fd85cc9c267"
        },
        "item": {
          "id": "47fecbdf-87ef-4399-bb32-2706927927c0",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "625c606d-89db-464f-9b9a-d6bc88209ecf",
          "status": "Created",
          "code": 201,
          "responseTime": 6507,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "12fe02d7-e753-4fd0-be75-4d32de6d7b60",
        "cursor": {
          "ref": "9d1167c6-5f8f-4ce2-a32f-0755813af4ea",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "19b9abb8-4400-46e5-b7ef-80659bcd469c"
        },
        "item": {
          "id": "12fe02d7-e753-4fd0-be75-4d32de6d7b60",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c7157517-3d00-45d3-94d8-5646f2961c6b",
          "status": "Created",
          "code": 201,
          "responseTime": 5080,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "1184a804-69c2-4763-8d3b-418996c05948",
        "cursor": {
          "ref": "0973d129-6507-4ade-a4b3-063c8f8a9452",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "c0dd8a68-c8d1-4b31-bd56-376d09f9cdc8"
        },
        "item": {
          "id": "1184a804-69c2-4763-8d3b-418996c05948",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "fb86b898-2594-4199-83c7-fd5d03a24a11",
          "status": "Created",
          "code": 201,
          "responseTime": 6587,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "9323daeb-bdff-4291-a57a-aca1ec7eb30b",
        "cursor": {
          "ref": "931295df-5371-414b-b20a-8a9b4e880535",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5a09a9e7-e099-4bd7-b47e-3a776245fa8d"
        },
        "item": {
          "id": "9323daeb-bdff-4291-a57a-aca1ec7eb30b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "efd6ebdc-2a03-43d4-8e0d-0a3742686772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "593aa951-53aa-400e-a478-24400adbd9ad",
        "cursor": {
          "ref": "f5dc575c-7925-41d0-8a9a-fbe0b3b04c29",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5949caaf-4152-4d66-b06b-85c3e8392d65"
        },
        "item": {
          "id": "593aa951-53aa-400e-a478-24400adbd9ad",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a618a7f3-2200-4bd0-a3d1-532e821e79e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "8d4a4221-7cf1-430d-983c-0601639d06c0",
        "cursor": {
          "ref": "bab801bd-b1a8-4d0f-b4f1-6f22e45001ba",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7cba3d7a-5c7b-4a88-a4e6-d2fdb9432c43"
        },
        "item": {
          "id": "8d4a4221-7cf1-430d-983c-0601639d06c0",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c0948609-1b43-418b-b66c-d9f0b39be44b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "2999e95b-210a-4700-9947-2a92f863d4e8",
        "cursor": {
          "ref": "cbd60dd0-933d-4de5-8b7c-4a1fd0500304",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "ff7a4adf-a8e5-4bdf-acbd-f5a064ca935c"
        },
        "item": {
          "id": "2999e95b-210a-4700-9947-2a92f863d4e8",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "cb8d9e73-148d-42b7-acf9-49e28872cd76",
          "status": "Created",
          "code": 201,
          "responseTime": 4783,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "e96e5dba-e7c1-4c9d-88d6-df050a9d61d3",
        "cursor": {
          "ref": "ec60a746-1d3d-4a4d-861e-7bb864ffcd83",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "68572ce7-166c-4954-afe7-b53300ac146d"
        },
        "item": {
          "id": "e96e5dba-e7c1-4c9d-88d6-df050a9d61d3",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "57cd34eb-fee1-419c-a45c-638e8adf3e10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "4dfc6a7f-5076-4813-a011-9b5bef24f3ae",
        "cursor": {
          "ref": "dd4837c9-e78c-4f7b-9f26-3216a668d2b9",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "948c26ab-8293-4912-9ec5-b8cba59bd474"
        },
        "item": {
          "id": "4dfc6a7f-5076-4813-a011-9b5bef24f3ae",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f5d5c9a5-9aca-4080-9a11-d23cc724d6a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "cdac70c9-4cbf-4b13-8384-f48e2b0f796f",
        "cursor": {
          "ref": "84b7f67f-714b-4eeb-95ec-7cf5bfdaba83",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "7e7d6881-fdfd-4bc3-be3a-fa5b749c2201"
        },
        "item": {
          "id": "cdac70c9-4cbf-4b13-8384-f48e2b0f796f",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "0476308f-f22c-4d81-b2f7-92ad26397ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "038e91f7-1078-433d-997e-3bf682ddfc08",
        "cursor": {
          "ref": "c87e0835-46d4-4509-af8e-b5fb1fd55550",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "23263cf0-6dd0-42a6-a0f5-057183820646"
        },
        "item": {
          "id": "038e91f7-1078-433d-997e-3bf682ddfc08",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c500b58d-7bf2-4e59-bbaa-54210a0b2248",
          "status": "Created",
          "code": 201,
          "responseTime": 6628,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "9a27b7a0-6068-4641-aca2-57d19eeff141",
        "cursor": {
          "ref": "0fa25b53-c17c-40cd-b181-94595ff07c90",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "0f3b66ef-f239-4054-a861-e0b15ab05a3b"
        },
        "item": {
          "id": "9a27b7a0-6068-4641-aca2-57d19eeff141",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "7517c2d3-fe8b-4016-b891-992c111342b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "c7a65fc3-e249-4009-829d-b81bbd742420",
        "cursor": {
          "ref": "696d0c61-f414-432c-a3c4-87e9332339f8",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "bfd81579-2987-4b07-8a23-0b2ed122ee84"
        },
        "item": {
          "id": "c7a65fc3-e249-4009-829d-b81bbd742420",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "d8091979-9b29-40a6-a121-b888b3d3ba79",
          "status": "Created",
          "code": 201,
          "responseTime": 4680,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "f13518a8-df78-47d8-a737-9b633dcfe43c",
        "cursor": {
          "ref": "202330d1-a516-4712-b703-0ddc679ebe75",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "1d2636be-0c28-4a17-9b3d-1a5909db987d"
        },
        "item": {
          "id": "f13518a8-df78-47d8-a737-9b633dcfe43c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "32428708-aae3-4270-98db-c245f5344f12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "db3b5a0b-3d1f-4bc0-b0fc-ffad79d9f3db",
        "cursor": {
          "ref": "f32e515c-2d12-4a28-b6f2-41d39b764f2c",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "57ce75f8-8a89-416e-b0fc-601ede1e9111"
        },
        "item": {
          "id": "db3b5a0b-3d1f-4bc0-b0fc-ffad79d9f3db",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a258e76d-7f41-4412-bbda-aa4f95511f5f",
          "status": "Created",
          "code": 201,
          "responseTime": 6575,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "df2c948b-6e9e-4ca1-87bb-ec8b8622e0b4",
        "cursor": {
          "ref": "e4a4c875-d8fa-44d5-93e4-84d78e6cb6ab",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f5b2508d-6800-471f-af1f-7fd5217c8737"
        },
        "item": {
          "id": "df2c948b-6e9e-4ca1-87bb-ec8b8622e0b4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "084bfa59-8be1-4fa0-b26f-61a7d8e45022",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4615,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "3f7ea01a-cecb-494e-aeae-b90165f9660b",
        "cursor": {
          "ref": "16236319-8940-49b8-bb35-1241c9d43330",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f0008259-3786-4ba1-8912-1e19cc6e82f1"
        },
        "item": {
          "id": "3f7ea01a-cecb-494e-aeae-b90165f9660b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "917a8c5f-a356-4ef8-a3dc-a6821dd2556e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6330,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "37fc573e-854c-49d3-be7c-ac27ed471cd8",
        "cursor": {
          "ref": "e99ab67f-54d3-40ee-8bc3-33e6c203c62b",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f59f122a-6110-45af-9b5c-d650d96a4ea2"
        },
        "item": {
          "id": "37fc573e-854c-49d3-be7c-ac27ed471cd8",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "ffcdc02a-46c2-46ed-8af0-b4028d3eb23a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 136,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "80f60044-204d-446e-8af9-b26ce37b1e26",
        "cursor": {
          "ref": "0b377b60-51d5-4072-95f4-24e3a77d56a4",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7821434f-bbb9-4f83-af0d-5acca2ef9440"
        },
        "item": {
          "id": "80f60044-204d-446e-8af9-b26ce37b1e26",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "86b98be7-3dbc-46aa-8051-b90cc849f886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4748,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "430362dd-b2b4-4512-a7f7-b5b9407711fd",
        "cursor": {
          "ref": "6bfeff8c-b77d-4ee3-823c-bf272b59f43e",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "39345cf0-c9ee-40c8-aa5b-1eb60698a3bc"
        },
        "item": {
          "id": "430362dd-b2b4-4512-a7f7-b5b9407711fd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "70450fbc-67f7-4516-84f6-306fd299e116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "ab44e3d9-18a1-4652-ac23-2c2ae58eb5c3",
        "cursor": {
          "ref": "a0edaf1a-dcb6-44ce-bb5d-72b0aabef34e",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "39838b7f-188d-48ee-95d0-44f5a6d9bf8e"
        },
        "item": {
          "id": "ab44e3d9-18a1-4652-ac23-2c2ae58eb5c3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8a13a289-b2a2-4f8d-ae96-0bc421282305",
          "status": "Created",
          "code": 201,
          "responseTime": 8470,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "5e8702d2-2705-4389-974f-97dd2cdc09db",
        "cursor": {
          "ref": "1fa5af23-d767-4bec-8c28-61692cd6d84f",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "08edf934-a4ec-41d6-8d95-b89e7f8cdde7"
        },
        "item": {
          "id": "5e8702d2-2705-4389-974f-97dd2cdc09db",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "5d2bef15-e47c-4803-91d5-a82b4b4bde10",
          "status": "Created",
          "code": 201,
          "responseTime": 9180,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "dea7eb5b-86d8-41d1-afca-8b3a0eb83a91",
        "cursor": {
          "ref": "a29f6f0d-69b1-4a67-abf4-bd1371f44cb9",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "4ea8d81b-74b7-42ab-a68d-b59c675b6077"
        },
        "item": {
          "id": "dea7eb5b-86d8-41d1-afca-8b3a0eb83a91",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "70f9097b-9266-4781-9102-2bc0bc496998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "e8927411-5858-47de-8118-db68965e5763",
        "cursor": {
          "ref": "65f67ec3-b99d-4e16-a93c-d42811b7e9b7",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "eb1eb2b0-4765-44fd-85ac-ddb690036040"
        },
        "item": {
          "id": "e8927411-5858-47de-8118-db68965e5763",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "06173347-521f-4d13-913c-547c2d829384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "d6d2dc20-8289-4042-bec5-6c8f7248ec4d",
        "cursor": {
          "ref": "793e242e-5004-4bcb-812c-f144da1f7c85",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "fd8315a4-19de-4ba5-92cc-a9d4560a3a8b"
        },
        "item": {
          "id": "d6d2dc20-8289-4042-bec5-6c8f7248ec4d",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fb619202-f93d-4b43-9623-86568f7ab9bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "7668fa52-5c8c-4997-9054-57f4bfdac260",
        "cursor": {
          "ref": "8ac9e74d-6c64-4deb-b6a7-b050084575e2",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "80e9152e-fae8-4803-a690-b9ae05b94e17"
        },
        "item": {
          "id": "7668fa52-5c8c-4997-9054-57f4bfdac260",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "dc7fc9a8-c1bd-4300-856f-d70271519ca1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "b9c23ca5-f421-4e95-a924-c96c02741063",
        "cursor": {
          "ref": "c3b78d36-ec46-4ef6-8108-76de8667422e",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "3b8a8fbf-f715-49b1-879b-e4d75a4c0b65"
        },
        "item": {
          "id": "b9c23ca5-f421-4e95-a924-c96c02741063",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "e10c6c87-1631-4a56-81fe-99d5530efe14",
          "status": "Created",
          "code": 201,
          "responseTime": 8231,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "741639e4-57b1-4205-9759-10e6e4c062dc",
        "cursor": {
          "ref": "9f83f9fc-06b1-4527-be68-d0b1b2a47ff2",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8d7f2b89-35c0-4134-ab5d-691a31a5d6a7"
        },
        "item": {
          "id": "741639e4-57b1-4205-9759-10e6e4c062dc",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "736258b5-eb83-4b12-a6f8-ba4f681b3b2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "257b94dd-465d-4afe-ab57-66122a35a32b",
        "cursor": {
          "ref": "13fe7741-1a58-4f24-a645-94e63a161025",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d4acff3c-78be-4299-b225-d3224740a2d9"
        },
        "item": {
          "id": "257b94dd-465d-4afe-ab57-66122a35a32b",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "77c6efba-b35c-4591-90a4-c504f2e2a251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "251ba53a-ba54-4ff6-9d29-c0b8846afd14",
        "cursor": {
          "ref": "5c373330-01c8-4708-8ceb-50acbf8e8f21",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "966b5638-19ac-47cc-9063-d0edf4c1c867"
        },
        "item": {
          "id": "251ba53a-ba54-4ff6-9d29-c0b8846afd14",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "38711433-f6d9-481b-903b-4cb7d3e272d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "0f2b2345-e0a8-44fb-a725-80e698efc98f",
        "cursor": {
          "ref": "3bb8b0d4-cae3-43b6-84c9-8688c4618f4e",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "aa7f82f0-9ddc-4395-a509-e1c53dc46c95"
        },
        "item": {
          "id": "0f2b2345-e0a8-44fb-a725-80e698efc98f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "25cab3cb-eb8c-4867-96d2-9aa34dd0886d",
          "status": "Created",
          "code": 201,
          "responseTime": 11222,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "fd1f5e53-8bbf-4a5a-8a1d-af387e348b89",
        "cursor": {
          "ref": "49748e4d-e8ea-48e7-a5a2-f250c94267fa",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f7e576c9-0385-477c-9a9b-c3f9e14ae389"
        },
        "item": {
          "id": "fd1f5e53-8bbf-4a5a-8a1d-af387e348b89",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1d3953db-07ef-4184-bdfc-0ac14d755eca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "5e40cf17-2ae5-4499-bb1c-ade8f8047948",
        "cursor": {
          "ref": "66f335df-3710-496c-bfb7-005a9ef86e62",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9643fbdf-03e2-4fa9-8839-15a78918bac1"
        },
        "item": {
          "id": "5e40cf17-2ae5-4499-bb1c-ade8f8047948",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dc723a5a-ecfc-472d-b875-14dd65a7ea61",
          "status": "Created",
          "code": 201,
          "responseTime": 8698,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "1246f08f-2097-493b-9ba8-255b542c5ff0",
        "cursor": {
          "ref": "017b47e4-8f41-4048-ba8c-0098b05680c1",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "a0fd4ba8-612d-4f1a-8abe-edc5816f4c43"
        },
        "item": {
          "id": "1246f08f-2097-493b-9ba8-255b542c5ff0",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "df283398-fa42-40df-8f28-a7fa65462873",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "1b137e16-07b8-4481-81ac-4a8e506c5fb0",
        "cursor": {
          "ref": "20c0ddfa-6ac4-452f-94dc-7157f5b94894",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7b4eed4f-8a0b-4863-b11f-39e582fe9b6d"
        },
        "item": {
          "id": "1b137e16-07b8-4481-81ac-4a8e506c5fb0",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "d4fbca9a-8da6-4695-bae0-ff07baa7cdc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "8c20861e-5e35-4a5b-848b-4223aa62d552",
        "cursor": {
          "ref": "f1832696-b7e4-483e-acb3-33618908ae6e",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "b11eab18-dc22-436d-b92e-a10833274b44"
        },
        "item": {
          "id": "8c20861e-5e35-4a5b-848b-4223aa62d552",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "89113c90-3844-44ee-ae7d-e0b9af352748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "f846d2c3-5261-4c8a-910d-bf4b594f6b1f",
        "cursor": {
          "ref": "0fa5b2b7-6585-44fd-9b40-f42831ea9151",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "b2d9527b-d4f2-4304-8331-4399ab51ba55"
        },
        "item": {
          "id": "f846d2c3-5261-4c8a-910d-bf4b594f6b1f",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "9f105d3b-e58f-4db8-a5c2-dc54519d9a8c",
          "status": "Created",
          "code": 201,
          "responseTime": 7962,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "c645a1ab-1f07-4788-902e-182aea46fc20",
        "cursor": {
          "ref": "73eece13-0de4-4e43-aac5-61c03eb91a06",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "3206f074-609a-4c7a-bb0d-d61f806eee04"
        },
        "item": {
          "id": "c645a1ab-1f07-4788-902e-182aea46fc20",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "55792d29-ba21-4fb8-be19-b22bb6b09704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "9352daf9-8d33-4e77-a982-829418116706",
        "cursor": {
          "ref": "7aaf1806-e60d-4af9-99f3-fc486b47dd84",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a859b4e0-9058-4a90-9099-fb41df2cb505"
        },
        "item": {
          "id": "9352daf9-8d33-4e77-a982-829418116706",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "5c8dcc6a-8afb-4478-8f79-86b9c7eda855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "e855cd5d-c113-4556-a805-c005db99fdc4",
        "cursor": {
          "ref": "9b6769fd-96e2-46d1-8ab7-734b02a03e1a",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "e7a86091-736b-4652-b175-c4e0bd265577"
        },
        "item": {
          "id": "e855cd5d-c113-4556-a805-c005db99fdc4",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "c173c612-2dea-4457-bcda-cdf476141045",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "744fde4d-3d0a-4c79-82b6-e82ea2f1aa4e",
        "cursor": {
          "ref": "6e14dc0a-9dbe-408b-9cbe-ec208589a952",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "8d54ec5e-a2fa-4608-92af-9d7b3d9ffaaa"
        },
        "item": {
          "id": "744fde4d-3d0a-4c79-82b6-e82ea2f1aa4e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "6ae04020-33db-4730-987d-af5229502c6f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "898136dc-83f2-47ad-8660-e902912b2b2a",
        "cursor": {
          "ref": "295fd39d-0fc5-4e59-97fd-0f87b399bccb",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6338d88a-8695-4fe6-b3b7-4f7086844fcc"
        },
        "item": {
          "id": "898136dc-83f2-47ad-8660-e902912b2b2a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "8c108ea4-941f-43b8-95e9-4cf10e9dd8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "b3f6dd58-9adc-44d3-90d6-e64a42599983",
        "cursor": {
          "ref": "54727b6c-fc6d-410d-ab9d-0e1e13b2de94",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "a326d677-8c80-479d-92be-d25a96a09c7e"
        },
        "item": {
          "id": "b3f6dd58-9adc-44d3-90d6-e64a42599983",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "d16bb199-4318-4ee8-8b18-28ad0f04992b",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 10920,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 502",
              "stack": "AssertionError: expected response to have status code 400 but got 502\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "b9f955e3-05fa-4a93-8a73-6aa530bc7659",
        "cursor": {
          "ref": "83188bd5-9ca6-4779-9bc0-afe2f2238e9e",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "d3cab84d-fa42-45bd-831d-36f53430a0bc"
        },
        "item": {
          "id": "b9f955e3-05fa-4a93-8a73-6aa530bc7659",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c397afc6-cda4-456b-bf86-6e9765159cce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:96)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "03d952cc-2af0-4ff3-9ed8-2d16f641af2c",
        "cursor": {
          "ref": "dae73896-21ca-4984-9535-afc52a637d31",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f44db2ed-5aa6-43e3-954f-d2bb762ec197"
        },
        "item": {
          "id": "03d952cc-2af0-4ff3-9ed8-2d16f641af2c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d1f2d780-56f9-4cfd-b08b-9150754ac2fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:97)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "9182b65b-83bc-43fc-9857-8d6b67ed68b8",
        "cursor": {
          "ref": "6a4b7919-2bd8-4789-8124-ec240e0ca85e",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "4049a530-abb4-440b-8e1c-7d771af15b5f"
        },
        "item": {
          "id": "9182b65b-83bc-43fc-9857-8d6b67ed68b8",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b63f2aff-a001-4979-b7ab-c18a7026b688",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:98)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "e80ce57d-b0bf-4c33-a03a-30448b39e7f1",
        "cursor": {
          "ref": "6f2021ff-acf7-49b3-a664-d5c560a1be8b",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "49907404-8673-4e33-a557-be08d9421c7d"
        },
        "item": {
          "id": "e80ce57d-b0bf-4c33-a03a-30448b39e7f1",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f1168c44-d05d-4361-8e81-ae77ea289971",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:99)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "5697d1aa-fd93-41d9-af93-359c6504dc75",
        "cursor": {
          "ref": "6c8fbfcb-71b9-4d23-9517-830df30eb188",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "be4c456e-8a52-468e-b8fb-72cbeaf84819"
        },
        "item": {
          "id": "5697d1aa-fd93-41d9-af93-359c6504dc75",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cc69d71c-9ca9-4304-9c8d-cd80c9b1994e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:100)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "b127d14e-d948-4b52-9e80-8da38c0ca36e",
        "cursor": {
          "ref": "a45a7151-654d-4b6d-bfff-0c91a944abd9",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "28ed397e-3122-47f9-bcfa-adef9f0ad009"
        },
        "item": {
          "id": "b127d14e-d948-4b52-9e80-8da38c0ca36e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "82c9e0c8-46e1-412f-ad35-dfa17d09d676",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:101)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "f64036e2-fa64-41b1-a71d-1735a5e17c80",
        "cursor": {
          "ref": "e4829e9d-608e-4fc9-8bb2-91d017d6c766",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "1453a56e-3931-40a0-8b62-bb44a35b4fa9"
        },
        "item": {
          "id": "f64036e2-fa64-41b1-a71d-1735a5e17c80",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2a201879-a810-4472-9b09-e898cbac5253",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "3c9a331f-7280-47bf-b4fb-dea68d77b400",
        "cursor": {
          "ref": "b4be253c-639a-451d-a073-0a67ff342505",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d3611598-ba35-4586-9067-363c0f4d1bdb"
        },
        "item": {
          "id": "3c9a331f-7280-47bf-b4fb-dea68d77b400",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "c248af5d-102c-47fd-9332-48e41b4f4c0d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "25e2d4b8-fe48-466b-9b17-bcd42c727447",
        "cursor": {
          "ref": "8eb4d03a-d674-4504-b3c4-fafd8048bdd5",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "3a027aa8-43dc-4994-90a0-c63c29145696"
        },
        "item": {
          "id": "25e2d4b8-fe48-466b-9b17-bcd42c727447",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "be468063-7f76-444f-84de-e2d07d1d934a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "cf5c73bd-d070-4ab0-93dd-44fdda7e9fea",
        "cursor": {
          "ref": "dac3c875-b873-4f03-9f8a-c23a3e2bf9e5",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "08531398-84bd-4e37-9b4b-fea3b045b079"
        },
        "item": {
          "id": "cf5c73bd-d070-4ab0-93dd-44fdda7e9fea",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b1b5198b-b732-42fe-81c3-2fae07011ca1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "4f88f829-2e7b-417a-8698-6190c21de2d2",
        "cursor": {
          "ref": "79af97e4-df9f-4145-99e8-d49b4f16e8d6",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "f629ae1e-ba49-4a80-a9ff-06c110a552b0"
        },
        "item": {
          "id": "4f88f829-2e7b-417a-8698-6190c21de2d2",
          "name": "credentials_issue"
        },
        "response": {
          "id": "3b89cf9a-772e-42c8-aae8-2e645f07ec6b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "c351dc44-bee0-4043-b62c-52e0fff607e9",
        "cursor": {
          "ref": "528680a8-dfd5-4d27-8e21-a26d24726db7",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "34c35dc9-cbba-485e-ad35-499a20b0df55"
        },
        "item": {
          "id": "c351dc44-bee0-4043-b62c-52e0fff607e9",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "15db1142-20e4-4b77-a340-dabd1f132980",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "d00b33dd-bd62-45b5-9755-7a82fe71305a",
        "cursor": {
          "ref": "60013bbc-a637-4560-83ad-4e7af9c640e4",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "56655aa3-651c-4ec9-943d-74c1af31ed94"
        },
        "item": {
          "id": "d00b33dd-bd62-45b5-9755-7a82fe71305a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "d326c341-7fd7-4ce3-a070-367b463137a6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 88,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "03ac04ff-964a-4cd0-b061-5ebcb2649cc2",
        "cursor": {
          "ref": "c3284e4a-b43e-43b4-ad88-1a3c5734d524",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "0cf47b4b-7ac2-44fa-ab5e-d32767f01042"
        },
        "item": {
          "id": "03ac04ff-964a-4cd0-b061-5ebcb2649cc2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "ad776e06-3bbc-4810-83bd-e8f34f9a3c6c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "97625f50-d1ad-473f-8a43-ff7c5457d43a",
        "cursor": {
          "ref": "6ddea2fe-c4de-448d-bdc8-1ffc3024e898",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "a2ad9d9e-3ac2-4377-8bc7-9de21a321e2b"
        },
        "item": {
          "id": "97625f50-d1ad-473f-8a43-ff7c5457d43a",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "2b40a711-f568-4238-bd53-018beaca67b0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "809e57d2-46b6-4d34-9495-14b25cf0db18",
        "cursor": {
          "ref": "309cc24c-11af-4cf2-bf12-f64b52f17b35",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7731681a-5b3b-4720-a0ae-136277cabadb"
        },
        "item": {
          "id": "809e57d2-46b6-4d34-9495-14b25cf0db18",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "41f45740-d1b0-446a-a4b6-20c901e42d44",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "809e57d2-46b6-4d34-9495-14b25cf0db18",
        "cursor": {
          "ref": "309cc24c-11af-4cf2-bf12-f64b52f17b35",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "7731681a-5b3b-4720-a0ae-136277cabadb"
        },
        "item": {
          "id": "809e57d2-46b6-4d34-9495-14b25cf0db18",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "41f45740-d1b0-446a-a4b6-20c901e42d44",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "6f1c3eed-3c0a-4d0f-8838-e0595917161c",
        "cursor": {
          "ref": "564251b6-d0f6-4264-82c1-0e807b355694",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2fe289db-5d45-400d-831b-7e7c2e0592af"
        },
        "item": {
          "id": "6f1c3eed-3c0a-4d0f-8838-e0595917161c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b2a23457-f7ed-4d50-8751-c919617b552a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "6f1c3eed-3c0a-4d0f-8838-e0595917161c",
        "cursor": {
          "ref": "564251b6-d0f6-4264-82c1-0e807b355694",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "2fe289db-5d45-400d-831b-7e7c2e0592af"
        },
        "item": {
          "id": "6f1c3eed-3c0a-4d0f-8838-e0595917161c",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "b2a23457-f7ed-4d50-8751-c919617b552a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "24553194-34b0-43a9-8408-cb3d1f9e698d",
        "cursor": {
          "ref": "94252c20-d928-44f5-950d-21131dca21e4",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ed42baf2-83ac-4f6e-be8f-d2f16e6b1464"
        },
        "item": {
          "id": "24553194-34b0-43a9-8408-cb3d1f9e698d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a9d2ffb4-21c7-4afe-975a-99724a165343",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "24553194-34b0-43a9-8408-cb3d1f9e698d",
        "cursor": {
          "ref": "94252c20-d928-44f5-950d-21131dca21e4",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ed42baf2-83ac-4f6e-be8f-d2f16e6b1464"
        },
        "item": {
          "id": "24553194-34b0-43a9-8408-cb3d1f9e698d",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a9d2ffb4-21c7-4afe-975a-99724a165343",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "edc8ac98-a357-46af-a046-e08f4feec926",
        "cursor": {
          "ref": "8e4961d7-25c3-48e7-99ca-3c97fe6cba81",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "459772a9-78a8-4062-828a-beb7aa7264eb"
        },
        "item": {
          "id": "edc8ac98-a357-46af-a046-e08f4feec926",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c556d56c-d2e5-4099-bdfd-d736e42edb9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "edc8ac98-a357-46af-a046-e08f4feec926",
        "cursor": {
          "ref": "8e4961d7-25c3-48e7-99ca-3c97fe6cba81",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "459772a9-78a8-4062-828a-beb7aa7264eb"
        },
        "item": {
          "id": "edc8ac98-a357-46af-a046-e08f4feec926",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "c556d56c-d2e5-4099-bdfd-d736e42edb9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "86d34aae-7a33-4b37-9574-a1f422e2b7c5",
        "cursor": {
          "ref": "f947a21f-f81b-47a8-b3bd-221ef28be9b7",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bb1c5b9f-b612-405f-b324-7c6719c9b702"
        },
        "item": {
          "id": "86d34aae-7a33-4b37-9574-a1f422e2b7c5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2443cf93-eb86-4f78-8117-c48e3024be17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "86d34aae-7a33-4b37-9574-a1f422e2b7c5",
        "cursor": {
          "ref": "f947a21f-f81b-47a8-b3bd-221ef28be9b7",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "bb1c5b9f-b612-405f-b324-7c6719c9b702"
        },
        "item": {
          "id": "86d34aae-7a33-4b37-9574-a1f422e2b7c5",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2443cf93-eb86-4f78-8117-c48e3024be17",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "04454d18-93c7-49ee-84d0-24748bb42ee5",
        "cursor": {
          "ref": "bdd7f010-9980-4cf3-8cfa-c14742189d12",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5f2b6354-812d-44c1-82a5-4a5350ccf579"
        },
        "item": {
          "id": "04454d18-93c7-49ee-84d0-24748bb42ee5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5796c568-a663-4171-ad6a-8f9d4a2f014d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "04454d18-93c7-49ee-84d0-24748bb42ee5",
        "cursor": {
          "ref": "bdd7f010-9980-4cf3-8cfa-c14742189d12",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "5f2b6354-812d-44c1-82a5-4a5350ccf579"
        },
        "item": {
          "id": "04454d18-93c7-49ee-84d0-24748bb42ee5",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5796c568-a663-4171-ad6a-8f9d4a2f014d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "6de5b593-92ab-461b-bffb-a67881c4b2a0",
        "cursor": {
          "ref": "a14f4c7c-6211-47ae-b2ac-3baaac2cfa1f",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "afe74f32-6dc4-446b-b10e-e9e3d58861f3"
        },
        "item": {
          "id": "6de5b593-92ab-461b-bffb-a67881c4b2a0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "186d17ee-7468-4996-b883-8255ccc1730e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "6de5b593-92ab-461b-bffb-a67881c4b2a0",
        "cursor": {
          "ref": "a14f4c7c-6211-47ae-b2ac-3baaac2cfa1f",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "afe74f32-6dc4-446b-b10e-e9e3d58861f3"
        },
        "item": {
          "id": "6de5b593-92ab-461b-bffb-a67881c4b2a0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "186d17ee-7468-4996-b883-8255ccc1730e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "cf0b5a04-a1f3-4730-bc8b-45bd71a310c2",
        "cursor": {
          "ref": "83393ca5-e461-4650-a2c9-3213a4d42172",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b6290e33-9ffb-4182-962c-411221a42eec"
        },
        "item": {
          "id": "cf0b5a04-a1f3-4730-bc8b-45bd71a310c2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e5d47981-4a23-4ff7-b760-5e2cc99ba5ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "cf0b5a04-a1f3-4730-bc8b-45bd71a310c2",
        "cursor": {
          "ref": "83393ca5-e461-4650-a2c9-3213a4d42172",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "b6290e33-9ffb-4182-962c-411221a42eec"
        },
        "item": {
          "id": "cf0b5a04-a1f3-4730-bc8b-45bd71a310c2",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e5d47981-4a23-4ff7-b760-5e2cc99ba5ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "8ed7e5f0-e56c-4b99-b53a-36b2333dbf55",
        "cursor": {
          "ref": "c053a420-ce94-42a3-b959-cd56e0d25449",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "864619f0-455e-4c9f-9ec1-f3c2fe2bc485"
        },
        "item": {
          "id": "8ed7e5f0-e56c-4b99-b53a-36b2333dbf55",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "db5656ed-867d-4b08-a6c6-413ee6f02805",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "8ed7e5f0-e56c-4b99-b53a-36b2333dbf55",
        "cursor": {
          "ref": "c053a420-ce94-42a3-b959-cd56e0d25449",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "864619f0-455e-4c9f-9ec1-f3c2fe2bc485"
        },
        "item": {
          "id": "8ed7e5f0-e56c-4b99-b53a-36b2333dbf55",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "db5656ed-867d-4b08-a6c6-413ee6f02805",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "3cbedd3e-0ee7-4bbd-98a5-23a3c0b945da",
        "cursor": {
          "ref": "a8f4ea1b-0c7c-4c47-b45b-f55b5111790e",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a270a112-2a06-4de1-8163-27557e993798"
        },
        "item": {
          "id": "3cbedd3e-0ee7-4bbd-98a5-23a3c0b945da",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "12524be4-be05-4b2c-87d9-4d124d3a5d7a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "3cbedd3e-0ee7-4bbd-98a5-23a3c0b945da",
        "cursor": {
          "ref": "a8f4ea1b-0c7c-4c47-b45b-f55b5111790e",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "a270a112-2a06-4de1-8163-27557e993798"
        },
        "item": {
          "id": "3cbedd3e-0ee7-4bbd-98a5-23a3c0b945da",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "12524be4-be05-4b2c-87d9-4d124d3a5d7a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "41d058f3-3ffe-4860-b78c-c2bd4264fa29",
        "cursor": {
          "ref": "4afe5c5e-47b1-4719-8cda-143b5764e765",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d183a20f-6016-4552-8895-0b445297657c"
        },
        "item": {
          "id": "41d058f3-3ffe-4860-b78c-c2bd4264fa29",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3eb46a04-6e25-4bfd-b0b1-308e83f6953e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "41d058f3-3ffe-4860-b78c-c2bd4264fa29",
        "cursor": {
          "ref": "4afe5c5e-47b1-4719-8cda-143b5764e765",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d183a20f-6016-4552-8895-0b445297657c"
        },
        "item": {
          "id": "41d058f3-3ffe-4860-b78c-c2bd4264fa29",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3eb46a04-6e25-4bfd-b0b1-308e83f6953e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e55bdbe4-67a1-46fc-b7d0-f4850ffc7317",
        "cursor": {
          "ref": "8cca2bef-723e-47da-92d5-c9811ca6cfbb",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "45677302-cdfe-4a0e-aaca-fba02af924f6"
        },
        "item": {
          "id": "e55bdbe4-67a1-46fc-b7d0-f4850ffc7317",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d08691f5-a3fb-4d21-96de-c6af6ba06150",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e55bdbe4-67a1-46fc-b7d0-f4850ffc7317",
        "cursor": {
          "ref": "8cca2bef-723e-47da-92d5-c9811ca6cfbb",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "45677302-cdfe-4a0e-aaca-fba02af924f6"
        },
        "item": {
          "id": "e55bdbe4-67a1-46fc-b7d0-f4850ffc7317",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d08691f5-a3fb-4d21-96de-c6af6ba06150",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "3e9c8715-0603-4a60-8d03-955edc359d72",
        "cursor": {
          "ref": "9557e9da-e825-4a1d-9d76-98d9b70211cf",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "21918ea4-5cc9-4425-abbd-0627d7aad2ed"
        },
        "item": {
          "id": "3e9c8715-0603-4a60-8d03-955edc359d72",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d7614468-b302-452e-aa98-16a5f8366ab9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "3e9c8715-0603-4a60-8d03-955edc359d72",
        "cursor": {
          "ref": "9557e9da-e825-4a1d-9d76-98d9b70211cf",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "21918ea4-5cc9-4425-abbd-0627d7aad2ed"
        },
        "item": {
          "id": "3e9c8715-0603-4a60-8d03-955edc359d72",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d7614468-b302-452e-aa98-16a5f8366ab9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "49e2b25f-d2a4-4c9c-898a-8e5689aa6431",
        "cursor": {
          "ref": "8223c18a-0566-40ca-ace5-1b5fdb032a29",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "dd777fd3-fd86-4693-b4bd-c99e6f325c34"
        },
        "item": {
          "id": "49e2b25f-d2a4-4c9c-898a-8e5689aa6431",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ccf2d05f-4acf-489f-a8ac-0b3a624c2186",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "49e2b25f-d2a4-4c9c-898a-8e5689aa6431",
        "cursor": {
          "ref": "8223c18a-0566-40ca-ace5-1b5fdb032a29",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "dd777fd3-fd86-4693-b4bd-c99e6f325c34"
        },
        "item": {
          "id": "49e2b25f-d2a4-4c9c-898a-8e5689aa6431",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ccf2d05f-4acf-489f-a8ac-0b3a624c2186",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "8511c054-274a-446a-9403-8df34ae0db7f",
        "cursor": {
          "ref": "96d26d80-802d-43db-b50e-5e81bb875213",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "763068e5-c547-47e6-83ae-60c346fb56f1"
        },
        "item": {
          "id": "8511c054-274a-446a-9403-8df34ae0db7f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "918ed860-c619-42d7-81f8-bf7966b350a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "8511c054-274a-446a-9403-8df34ae0db7f",
        "cursor": {
          "ref": "96d26d80-802d-43db-b50e-5e81bb875213",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "763068e5-c547-47e6-83ae-60c346fb56f1"
        },
        "item": {
          "id": "8511c054-274a-446a-9403-8df34ae0db7f",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "918ed860-c619-42d7-81f8-bf7966b350a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "88d6978f-6546-4782-8983-12f5805aebaa",
        "cursor": {
          "ref": "928ce750-68ea-42dd-9eed-4295ef9a72f4",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "902be036-e5b0-4f70-915f-80bd280914d0"
        },
        "item": {
          "id": "88d6978f-6546-4782-8983-12f5805aebaa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "04d0490f-37b1-49b2-b283-2a854252b274",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "88d6978f-6546-4782-8983-12f5805aebaa",
        "cursor": {
          "ref": "928ce750-68ea-42dd-9eed-4295ef9a72f4",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "902be036-e5b0-4f70-915f-80bd280914d0"
        },
        "item": {
          "id": "88d6978f-6546-4782-8983-12f5805aebaa",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "04d0490f-37b1-49b2-b283-2a854252b274",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "3ee0037d-d221-49e3-ab2a-54a588310875",
        "cursor": {
          "ref": "dc08067b-416e-4d7a-8b03-ffed9c34c72f",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2258a66d-56ac-4461-9792-c60884324dd7"
        },
        "item": {
          "id": "3ee0037d-d221-49e3-ab2a-54a588310875",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3393c88e-3566-4e82-9dab-c22d34821226",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "3ee0037d-d221-49e3-ab2a-54a588310875",
        "cursor": {
          "ref": "dc08067b-416e-4d7a-8b03-ffed9c34c72f",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2258a66d-56ac-4461-9792-c60884324dd7"
        },
        "item": {
          "id": "3ee0037d-d221-49e3-ab2a-54a588310875",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "3393c88e-3566-4e82-9dab-c22d34821226",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "8fa6b87f-7674-4a28-80e3-a5e257525a02",
        "cursor": {
          "ref": "1a5a7acf-4579-4b31-aa94-a458dd30772e",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ea252ac9-4bc5-4e40-98ca-357cb937b7aa"
        },
        "item": {
          "id": "8fa6b87f-7674-4a28-80e3-a5e257525a02",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9e08cd0c-ab44-4f3c-8711-d039e6048140",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "8fa6b87f-7674-4a28-80e3-a5e257525a02",
        "cursor": {
          "ref": "1a5a7acf-4579-4b31-aa94-a458dd30772e",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ea252ac9-4bc5-4e40-98ca-357cb937b7aa"
        },
        "item": {
          "id": "8fa6b87f-7674-4a28-80e3-a5e257525a02",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9e08cd0c-ab44-4f3c-8711-d039e6048140",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "19aa12e9-78cb-4a48-9e66-079f37082728",
        "cursor": {
          "ref": "cd9f21cd-44fe-40ad-b69c-522d2aaebdaf",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "73687900-5364-40f1-992a-905198527b17"
        },
        "item": {
          "id": "19aa12e9-78cb-4a48-9e66-079f37082728",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cc0fd15e-31af-4002-9a2a-2bbf099631c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "19aa12e9-78cb-4a48-9e66-079f37082728",
        "cursor": {
          "ref": "cd9f21cd-44fe-40ad-b69c-522d2aaebdaf",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "73687900-5364-40f1-992a-905198527b17"
        },
        "item": {
          "id": "19aa12e9-78cb-4a48-9e66-079f37082728",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "cc0fd15e-31af-4002-9a2a-2bbf099631c6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "6609b4d4-0488-4256-887b-6b6ae648883e",
        "cursor": {
          "ref": "e9b5d26a-ff9e-4590-935e-73824c064d6b",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "40167af0-82d2-4307-a677-042eee8afde1"
        },
        "item": {
          "id": "6609b4d4-0488-4256-887b-6b6ae648883e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e36952a4-fba4-4429-af05-2039f2a35cab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "6609b4d4-0488-4256-887b-6b6ae648883e",
        "cursor": {
          "ref": "e9b5d26a-ff9e-4590-935e-73824c064d6b",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "40167af0-82d2-4307-a677-042eee8afde1"
        },
        "item": {
          "id": "6609b4d4-0488-4256-887b-6b6ae648883e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "e36952a4-fba4-4429-af05-2039f2a35cab",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "e3d7269e-b446-4690-a396-1312ce979b8e",
        "cursor": {
          "ref": "f4782672-1e8e-49b1-8208-dc0c8695a5e5",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d2af939c-b8c4-44c3-867a-c9e495bb83f1"
        },
        "item": {
          "id": "e3d7269e-b446-4690-a396-1312ce979b8e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "63ff7323-5265-4d1d-b039-0851fdbf8668",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "e3d7269e-b446-4690-a396-1312ce979b8e",
        "cursor": {
          "ref": "f4782672-1e8e-49b1-8208-dc0c8695a5e5",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "d2af939c-b8c4-44c3-867a-c9e495bb83f1"
        },
        "item": {
          "id": "e3d7269e-b446-4690-a396-1312ce979b8e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "63ff7323-5265-4d1d-b039-0851fdbf8668",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "030191d6-f107-4477-b70c-b0985208f904",
        "cursor": {
          "ref": "3ab11e00-3196-4def-ae14-0610c73ffbe1",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e8b75a06-6a4a-4d7b-bf31-8712f74b2c41"
        },
        "item": {
          "id": "030191d6-f107-4477-b70c-b0985208f904",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "48196e68-f2dd-4d83-82da-2dc047b60319",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "030191d6-f107-4477-b70c-b0985208f904",
        "cursor": {
          "ref": "3ab11e00-3196-4def-ae14-0610c73ffbe1",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e8b75a06-6a4a-4d7b-bf31-8712f74b2c41"
        },
        "item": {
          "id": "030191d6-f107-4477-b70c-b0985208f904",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "48196e68-f2dd-4d83-82da-2dc047b60319",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "668358e2-abef-4c2d-a556-cdbd89db6e2e",
        "cursor": {
          "ref": "f68f62bb-c68c-43c2-9791-01f60261dead",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4ee35c05-4e6b-42e1-abb4-8cb133e9ed04"
        },
        "item": {
          "id": "668358e2-abef-4c2d-a556-cdbd89db6e2e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e3f0c0b2-2b33-4341-aedc-a6623702c690",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "668358e2-abef-4c2d-a556-cdbd89db6e2e",
        "cursor": {
          "ref": "f68f62bb-c68c-43c2-9791-01f60261dead",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "4ee35c05-4e6b-42e1-abb4-8cb133e9ed04"
        },
        "item": {
          "id": "668358e2-abef-4c2d-a556-cdbd89db6e2e",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "e3f0c0b2-2b33-4341-aedc-a6623702c690",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "c367ca92-7b62-4154-bd0f-5713f8c6efda",
        "cursor": {
          "ref": "ca1931c1-2ba8-4bc4-86a6-4195e759a427",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e3d22a66-2f91-48da-bf75-6a46bae367bd"
        },
        "item": {
          "id": "c367ca92-7b62-4154-bd0f-5713f8c6efda",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1ff46874-a9b3-460a-8996-af3ce6849c49",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "c367ca92-7b62-4154-bd0f-5713f8c6efda",
        "cursor": {
          "ref": "ca1931c1-2ba8-4bc4-86a6-4195e759a427",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e3d22a66-2f91-48da-bf75-6a46bae367bd"
        },
        "item": {
          "id": "c367ca92-7b62-4154-bd0f-5713f8c6efda",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1ff46874-a9b3-460a-8996-af3ce6849c49",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "2e1bee5c-b207-45aa-89a7-e707edeedaf5",
        "cursor": {
          "ref": "3f7ef66e-6721-4811-af4d-ebadb24b37b5",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "52a9d299-0ae9-4a4d-a6a8-061fe6752939"
        },
        "item": {
          "id": "2e1bee5c-b207-45aa-89a7-e707edeedaf5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5ef1cc17-916e-485f-837f-124bc9881295",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "2e1bee5c-b207-45aa-89a7-e707edeedaf5",
        "cursor": {
          "ref": "3f7ef66e-6721-4811-af4d-ebadb24b37b5",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "52a9d299-0ae9-4a4d-a6a8-061fe6752939"
        },
        "item": {
          "id": "2e1bee5c-b207-45aa-89a7-e707edeedaf5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5ef1cc17-916e-485f-837f-124bc9881295",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "a9e57ed4-850a-4894-8cdf-405b45947ec6",
        "cursor": {
          "ref": "6cf9b647-6e32-49aa-8aa4-4dd0a1ed390d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7c76c717-8618-4d9d-a268-92c223f7b274"
        },
        "item": {
          "id": "a9e57ed4-850a-4894-8cdf-405b45947ec6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b9629e39-8e22-48e0-93e7-790e94c0fc9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "a9e57ed4-850a-4894-8cdf-405b45947ec6",
        "cursor": {
          "ref": "6cf9b647-6e32-49aa-8aa4-4dd0a1ed390d",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "7c76c717-8618-4d9d-a268-92c223f7b274"
        },
        "item": {
          "id": "a9e57ed4-850a-4894-8cdf-405b45947ec6",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b9629e39-8e22-48e0-93e7-790e94c0fc9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "af5e48c6-647b-44f0-b77a-cd4a09325c1b",
        "cursor": {
          "ref": "d0ef02d9-66d9-4e04-af49-a86b6cc374d6",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2d45c110-1b38-4754-bd8a-0859a675c1d5"
        },
        "item": {
          "id": "af5e48c6-647b-44f0-b77a-cd4a09325c1b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8f8205ab-da0f-448b-bf65-a903ba5da3a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "af5e48c6-647b-44f0-b77a-cd4a09325c1b",
        "cursor": {
          "ref": "d0ef02d9-66d9-4e04-af49-a86b6cc374d6",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "2d45c110-1b38-4754-bd8a-0859a675c1d5"
        },
        "item": {
          "id": "af5e48c6-647b-44f0-b77a-cd4a09325c1b",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8f8205ab-da0f-448b-bf65-a903ba5da3a8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "29b4a440-4478-4987-a38c-985e9ba34bb7",
        "cursor": {
          "ref": "6a14c407-d381-42db-85f3-0b439da0de5f",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "976209d4-b440-4590-a0c4-fc7f756edba4"
        },
        "item": {
          "id": "29b4a440-4478-4987-a38c-985e9ba34bb7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "26811f9e-34fe-4ac5-a7c0-ee3c1ad21838",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "29b4a440-4478-4987-a38c-985e9ba34bb7",
        "cursor": {
          "ref": "6a14c407-d381-42db-85f3-0b439da0de5f",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "976209d4-b440-4590-a0c4-fc7f756edba4"
        },
        "item": {
          "id": "29b4a440-4478-4987-a38c-985e9ba34bb7",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "26811f9e-34fe-4ac5-a7c0-ee3c1ad21838",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "36d89b19-7481-4841-9f2f-e41864cbd878",
        "cursor": {
          "ref": "6cde1c54-0012-4563-b962-b0b00873e27b",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "489c09d8-942a-4330-963d-dce82cad7a18"
        },
        "item": {
          "id": "36d89b19-7481-4841-9f2f-e41864cbd878",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "70377ef2-7b4c-45de-9688-1539292d343b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "36d89b19-7481-4841-9f2f-e41864cbd878",
        "cursor": {
          "ref": "6cde1c54-0012-4563-b962-b0b00873e27b",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "489c09d8-942a-4330-963d-dce82cad7a18"
        },
        "item": {
          "id": "36d89b19-7481-4841-9f2f-e41864cbd878",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "70377ef2-7b4c-45de-9688-1539292d343b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "695dfa7a-91f7-43ee-ac0c-0db2bc601c61",
        "cursor": {
          "ref": "a57635a5-f4a9-42d1-8b99-c46e63df57cf",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e5f18b34-1f77-4ad7-ba6c-759f5e9f7843"
        },
        "item": {
          "id": "695dfa7a-91f7-43ee-ac0c-0db2bc601c61",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c1568ebf-c56f-4225-9166-15d4c61b8a29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "695dfa7a-91f7-43ee-ac0c-0db2bc601c61",
        "cursor": {
          "ref": "a57635a5-f4a9-42d1-8b99-c46e63df57cf",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e5f18b34-1f77-4ad7-ba6c-759f5e9f7843"
        },
        "item": {
          "id": "695dfa7a-91f7-43ee-ac0c-0db2bc601c61",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c1568ebf-c56f-4225-9166-15d4c61b8a29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "2d71e3de-38fd-488e-8918-5fed76ca8aed",
        "cursor": {
          "ref": "6187e4d2-157a-4250-bea1-1693ab617c9c",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "505235ad-03b0-4690-a3c8-74be89bbe883"
        },
        "item": {
          "id": "2d71e3de-38fd-488e-8918-5fed76ca8aed",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "90a7f096-6efd-4773-857e-64aa02fd1f5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "2d71e3de-38fd-488e-8918-5fed76ca8aed",
        "cursor": {
          "ref": "6187e4d2-157a-4250-bea1-1693ab617c9c",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "505235ad-03b0-4690-a3c8-74be89bbe883"
        },
        "item": {
          "id": "2d71e3de-38fd-488e-8918-5fed76ca8aed",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "90a7f096-6efd-4773-857e-64aa02fd1f5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "1c3125c6-d0b8-4026-a512-a8993b78cb2a",
        "cursor": {
          "ref": "2c594779-d6db-4f8a-a74b-b0842ce87a66",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5d7ee445-8003-4c60-96dc-02cf4802b915"
        },
        "item": {
          "id": "1c3125c6-d0b8-4026-a512-a8993b78cb2a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3b2279df-c634-4443-b301-e8ea65fca85b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1c3125c6-d0b8-4026-a512-a8993b78cb2a",
        "cursor": {
          "ref": "2c594779-d6db-4f8a-a74b-b0842ce87a66",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "5d7ee445-8003-4c60-96dc-02cf4802b915"
        },
        "item": {
          "id": "1c3125c6-d0b8-4026-a512-a8993b78cb2a",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "3b2279df-c634-4443-b301-e8ea65fca85b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "bf90118f-ebcf-4d16-94fb-a531fa2ca90f",
        "cursor": {
          "ref": "34dd6411-69e0-4a06-ace4-b9f71d77d4c3",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fe87dd0f-adf2-44cf-aa69-a6cca34a2d78"
        },
        "item": {
          "id": "bf90118f-ebcf-4d16-94fb-a531fa2ca90f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e57077e0-e0cc-4058-bbd1-9c8cb58c7576",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "bf90118f-ebcf-4d16-94fb-a531fa2ca90f",
        "cursor": {
          "ref": "34dd6411-69e0-4a06-ace4-b9f71d77d4c3",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "fe87dd0f-adf2-44cf-aa69-a6cca34a2d78"
        },
        "item": {
          "id": "bf90118f-ebcf-4d16-94fb-a531fa2ca90f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e57077e0-e0cc-4058-bbd1-9c8cb58c7576",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9bb0015f-f810-4799-9a10-c33547b68934",
        "cursor": {
          "ref": "8ac7e8e7-aac0-4d30-ac83-21be4988498c",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7a149684-3bbd-4342-aa60-45382cd9340a"
        },
        "item": {
          "id": "9bb0015f-f810-4799-9a10-c33547b68934",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a1344ddb-9341-4e34-8185-381cf1a97f6f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "9bb0015f-f810-4799-9a10-c33547b68934",
        "cursor": {
          "ref": "8ac7e8e7-aac0-4d30-ac83-21be4988498c",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7a149684-3bbd-4342-aa60-45382cd9340a"
        },
        "item": {
          "id": "9bb0015f-f810-4799-9a10-c33547b68934",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "a1344ddb-9341-4e34-8185-381cf1a97f6f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "c10d2dd9-33df-4bfe-984e-ea21b433dc93",
        "cursor": {
          "ref": "1d1b445d-785e-426d-bb08-c6062fb6c5f5",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8f2eb242-04f7-4f31-88ca-2bdde5333745"
        },
        "item": {
          "id": "c10d2dd9-33df-4bfe-984e-ea21b433dc93",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4575305a-cd8f-43b1-9e2d-028f3171aac7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "c10d2dd9-33df-4bfe-984e-ea21b433dc93",
        "cursor": {
          "ref": "1d1b445d-785e-426d-bb08-c6062fb6c5f5",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8f2eb242-04f7-4f31-88ca-2bdde5333745"
        },
        "item": {
          "id": "c10d2dd9-33df-4bfe-984e-ea21b433dc93",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "4575305a-cd8f-43b1-9e2d-028f3171aac7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "7cd0b3e8-924e-406e-a788-c6f797273d59",
        "cursor": {
          "ref": "5eabb958-3f21-463a-8daf-b36ec136cd90",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dcc597cc-5191-4c58-b308-4cef29a99890"
        },
        "item": {
          "id": "7cd0b3e8-924e-406e-a788-c6f797273d59",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0dda8d95-b6e1-4de2-9e09-f0762809b78b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "7cd0b3e8-924e-406e-a788-c6f797273d59",
        "cursor": {
          "ref": "5eabb958-3f21-463a-8daf-b36ec136cd90",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dcc597cc-5191-4c58-b308-4cef29a99890"
        },
        "item": {
          "id": "7cd0b3e8-924e-406e-a788-c6f797273d59",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "0dda8d95-b6e1-4de2-9e09-f0762809b78b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "03a9ac80-fc5f-4246-bfa5-410d81835dca",
        "cursor": {
          "ref": "a5cd7695-afd2-4305-a9de-5c39c77fa139",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c7eb4f63-41c0-4a7e-94dd-86e34d135e9d"
        },
        "item": {
          "id": "03a9ac80-fc5f-4246-bfa5-410d81835dca",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9a1019b0-545b-4c93-9c6a-d388bac64d33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "03a9ac80-fc5f-4246-bfa5-410d81835dca",
        "cursor": {
          "ref": "a5cd7695-afd2-4305-a9de-5c39c77fa139",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c7eb4f63-41c0-4a7e-94dd-86e34d135e9d"
        },
        "item": {
          "id": "03a9ac80-fc5f-4246-bfa5-410d81835dca",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9a1019b0-545b-4c93-9c6a-d388bac64d33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "16cfbb5e-18a5-4ba2-9822-ae1af5375163",
        "cursor": {
          "ref": "094c5bc4-1551-4e3d-a00a-7b3960bbb2fc",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bdc3b369-b25c-4d3b-89ce-a0879140df4b"
        },
        "item": {
          "id": "16cfbb5e-18a5-4ba2-9822-ae1af5375163",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "984e329d-3c19-4eff-bf8f-ba8485b75740",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "16cfbb5e-18a5-4ba2-9822-ae1af5375163",
        "cursor": {
          "ref": "094c5bc4-1551-4e3d-a00a-7b3960bbb2fc",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "bdc3b369-b25c-4d3b-89ce-a0879140df4b"
        },
        "item": {
          "id": "16cfbb5e-18a5-4ba2-9822-ae1af5375163",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "984e329d-3c19-4eff-bf8f-ba8485b75740",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "8b73a51c-45c3-41e1-86e6-9848e4520cd7",
        "cursor": {
          "ref": "2b262058-3b63-4f7b-b438-3af8b4a3b286",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "adf66aa0-df72-4c4f-bf95-f40cfe7d7163"
        },
        "item": {
          "id": "8b73a51c-45c3-41e1-86e6-9848e4520cd7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7ec2142f-0b9e-4f8b-99d7-b50deddca86d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "8b73a51c-45c3-41e1-86e6-9848e4520cd7",
        "cursor": {
          "ref": "2b262058-3b63-4f7b-b438-3af8b4a3b286",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "adf66aa0-df72-4c4f-bf95-f40cfe7d7163"
        },
        "item": {
          "id": "8b73a51c-45c3-41e1-86e6-9848e4520cd7",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "7ec2142f-0b9e-4f8b-99d7-b50deddca86d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "7c656d46-8da3-4817-8334-9f031e95f074",
        "cursor": {
          "ref": "725d242b-8a8c-4502-a3bc-695e4f19af6c",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "76c58b34-1ac1-48a0-846d-d9148bde5517"
        },
        "item": {
          "id": "7c656d46-8da3-4817-8334-9f031e95f074",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "29fa7399-1131-4b38-86d1-21cef8bcbc42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "7c656d46-8da3-4817-8334-9f031e95f074",
        "cursor": {
          "ref": "725d242b-8a8c-4502-a3bc-695e4f19af6c",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "76c58b34-1ac1-48a0-846d-d9148bde5517"
        },
        "item": {
          "id": "7c656d46-8da3-4817-8334-9f031e95f074",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "29fa7399-1131-4b38-86d1-21cef8bcbc42",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "2edb7b26-46de-4d72-a98e-cc09abb12cbe",
        "cursor": {
          "ref": "6c8fa796-be84-4dc5-b860-1513602e467e",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9c1156d9-975e-47ea-a3a1-b688e545e12b"
        },
        "item": {
          "id": "2edb7b26-46de-4d72-a98e-cc09abb12cbe",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3aa83767-d8a0-409d-9968-128024cce25e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "2edb7b26-46de-4d72-a98e-cc09abb12cbe",
        "cursor": {
          "ref": "6c8fa796-be84-4dc5-b860-1513602e467e",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "9c1156d9-975e-47ea-a3a1-b688e545e12b"
        },
        "item": {
          "id": "2edb7b26-46de-4d72-a98e-cc09abb12cbe",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "3aa83767-d8a0-409d-9968-128024cce25e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "51ffdec8-4cd9-48cb-929c-b6cb75ad935d",
        "cursor": {
          "ref": "40708431-ae39-48c3-ab10-306e9eea1d72",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "911dbcf7-03ae-4fb5-90de-23a40814b0bc"
        },
        "item": {
          "id": "51ffdec8-4cd9-48cb-929c-b6cb75ad935d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "867a7b7f-5431-4856-8212-a19db292c338",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "51ffdec8-4cd9-48cb-929c-b6cb75ad935d",
        "cursor": {
          "ref": "40708431-ae39-48c3-ab10-306e9eea1d72",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "911dbcf7-03ae-4fb5-90de-23a40814b0bc"
        },
        "item": {
          "id": "51ffdec8-4cd9-48cb-929c-b6cb75ad935d",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "867a7b7f-5431-4856-8212-a19db292c338",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "00395fdb-b0a7-4be8-8eaf-d61a411819ed",
        "cursor": {
          "ref": "fb8430d0-ca19-4900-aeba-1f49171b4933",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f16cbc98-abc6-443c-966e-4aa8938c2368"
        },
        "item": {
          "id": "00395fdb-b0a7-4be8-8eaf-d61a411819ed",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "08aa3cda-2d7e-45af-b573-c69399e3e18c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "00395fdb-b0a7-4be8-8eaf-d61a411819ed",
        "cursor": {
          "ref": "fb8430d0-ca19-4900-aeba-1f49171b4933",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "f16cbc98-abc6-443c-966e-4aa8938c2368"
        },
        "item": {
          "id": "00395fdb-b0a7-4be8-8eaf-d61a411819ed",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "08aa3cda-2d7e-45af-b573-c69399e3e18c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "25e2a34f-88b0-44c0-a883-6c28789f39f5",
        "cursor": {
          "ref": "76f70503-8ed0-471d-afde-f0dd0d5c48e3",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "687463fa-6374-4238-b4b6-943c46a4dc2d"
        },
        "item": {
          "id": "25e2a34f-88b0-44c0-a883-6c28789f39f5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "761a793e-8782-489c-862e-d65d5a6b8d6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "25e2a34f-88b0-44c0-a883-6c28789f39f5",
        "cursor": {
          "ref": "76f70503-8ed0-471d-afde-f0dd0d5c48e3",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "687463fa-6374-4238-b4b6-943c46a4dc2d"
        },
        "item": {
          "id": "25e2a34f-88b0-44c0-a883-6c28789f39f5",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "761a793e-8782-489c-862e-d65d5a6b8d6a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "34012402-dc77-4e49-80fa-a996d62fd2c4",
        "cursor": {
          "ref": "3202d067-7606-4c18-9dc6-bacc0ffc667b",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "93a6253c-aad1-42d2-9da6-1d160a7c9009"
        },
        "item": {
          "id": "34012402-dc77-4e49-80fa-a996d62fd2c4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d6773a4a-04eb-4cef-8def-b7846fff8aaa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "34012402-dc77-4e49-80fa-a996d62fd2c4",
        "cursor": {
          "ref": "3202d067-7606-4c18-9dc6-bacc0ffc667b",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "93a6253c-aad1-42d2-9da6-1d160a7c9009"
        },
        "item": {
          "id": "34012402-dc77-4e49-80fa-a996d62fd2c4",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "d6773a4a-04eb-4cef-8def-b7846fff8aaa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "8a8463b5-6d0e-4c5e-9daa-3738b8f38ad1",
        "cursor": {
          "ref": "6849feba-54f5-4792-8a23-6037a3e3451d",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d2dab66f-6bc6-417e-a69f-1eadf1e35f2c"
        },
        "item": {
          "id": "8a8463b5-6d0e-4c5e-9daa-3738b8f38ad1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c993428f-75b2-4c70-9e65-c60408e25b89",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "8a8463b5-6d0e-4c5e-9daa-3738b8f38ad1",
        "cursor": {
          "ref": "6849feba-54f5-4792-8a23-6037a3e3451d",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d2dab66f-6bc6-417e-a69f-1eadf1e35f2c"
        },
        "item": {
          "id": "8a8463b5-6d0e-4c5e-9daa-3738b8f38ad1",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "c993428f-75b2-4c70-9e65-c60408e25b89",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1f9a3548-37c4-434a-a9da-a6c8fedd0534",
        "cursor": {
          "ref": "dcc564d8-0c19-4c82-acfb-3d376d9444c3",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "02a5d234-53b2-49a0-9bb4-1ca20a9fd098"
        },
        "item": {
          "id": "1f9a3548-37c4-434a-a9da-a6c8fedd0534",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2613cd19-6cd0-4f50-8f36-961355547690",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "1f9a3548-37c4-434a-a9da-a6c8fedd0534",
        "cursor": {
          "ref": "dcc564d8-0c19-4c82-acfb-3d376d9444c3",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "02a5d234-53b2-49a0-9bb4-1ca20a9fd098"
        },
        "item": {
          "id": "1f9a3548-37c4-434a-a9da-a6c8fedd0534",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2613cd19-6cd0-4f50-8f36-961355547690",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "0c4fd1e1-df8a-4583-8d40-1ba49b9c91b7",
        "cursor": {
          "ref": "74270f07-031c-4f53-b258-ebad1ae2e97b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "11d577b0-ff7b-407b-acc3-5e87aacb28f0"
        },
        "item": {
          "id": "0c4fd1e1-df8a-4583-8d40-1ba49b9c91b7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1816ca49-a604-460e-b06e-5064c125db31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "0c4fd1e1-df8a-4583-8d40-1ba49b9c91b7",
        "cursor": {
          "ref": "74270f07-031c-4f53-b258-ebad1ae2e97b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "11d577b0-ff7b-407b-acc3-5e87aacb28f0"
        },
        "item": {
          "id": "0c4fd1e1-df8a-4583-8d40-1ba49b9c91b7",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "1816ca49-a604-460e-b06e-5064c125db31",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "dd065919-1421-40cb-8fc2-d21a1664579e",
        "cursor": {
          "ref": "c8945bb2-c325-487e-ba85-ff72d4da4de2",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c04893a1-f455-4a78-9f7f-9fa35076d7e6"
        },
        "item": {
          "id": "dd065919-1421-40cb-8fc2-d21a1664579e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "69f789a1-1107-48c5-9d75-3dd485085191",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "dd065919-1421-40cb-8fc2-d21a1664579e",
        "cursor": {
          "ref": "c8945bb2-c325-487e-ba85-ff72d4da4de2",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "c04893a1-f455-4a78-9f7f-9fa35076d7e6"
        },
        "item": {
          "id": "dd065919-1421-40cb-8fc2-d21a1664579e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "69f789a1-1107-48c5-9d75-3dd485085191",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "7a91e8b4-c9fa-4bd6-a453-d3a62efef7e2",
        "cursor": {
          "ref": "1153f4a4-068f-4a55-9106-da04018e48c6",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9bc6d115-56af-4edf-9895-4c2aa074097d"
        },
        "item": {
          "id": "7a91e8b4-c9fa-4bd6-a453-d3a62efef7e2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "62976a8f-1ccc-438b-b0db-f2e355a53acc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "7a91e8b4-c9fa-4bd6-a453-d3a62efef7e2",
        "cursor": {
          "ref": "1153f4a4-068f-4a55-9106-da04018e48c6",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "9bc6d115-56af-4edf-9895-4c2aa074097d"
        },
        "item": {
          "id": "7a91e8b4-c9fa-4bd6-a453-d3a62efef7e2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "62976a8f-1ccc-438b-b0db-f2e355a53acc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "f20c3982-122b-4417-b9f8-a8023a890c99",
        "cursor": {
          "ref": "6ed4e14b-bcc3-493b-8374-11aca54829a2",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b2a51ce4-af3d-4248-b0cd-1d0e67032f75"
        },
        "item": {
          "id": "f20c3982-122b-4417-b9f8-a8023a890c99",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6999cfab-066f-4b20-bf35-53b5886e92e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "f20c3982-122b-4417-b9f8-a8023a890c99",
        "cursor": {
          "ref": "6ed4e14b-bcc3-493b-8374-11aca54829a2",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "b2a51ce4-af3d-4248-b0cd-1d0e67032f75"
        },
        "item": {
          "id": "f20c3982-122b-4417-b9f8-a8023a890c99",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "6999cfab-066f-4b20-bf35-53b5886e92e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "17a767b4-c2c8-4b1d-b4e0-f60132fdd6aa",
        "cursor": {
          "ref": "8afbb0df-5add-487e-959b-ecd20e70d545",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "293a7e71-402c-46cb-9973-8353ed5a17b6"
        },
        "item": {
          "id": "17a767b4-c2c8-4b1d-b4e0-f60132fdd6aa",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "23d2576e-2bdd-43e6-b208-1c4a2f261445",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 71,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "17a767b4-c2c8-4b1d-b4e0-f60132fdd6aa",
        "cursor": {
          "ref": "8afbb0df-5add-487e-959b-ecd20e70d545",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "293a7e71-402c-46cb-9973-8353ed5a17b6"
        },
        "item": {
          "id": "17a767b4-c2c8-4b1d-b4e0-f60132fdd6aa",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "23d2576e-2bdd-43e6-b208-1c4a2f261445",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 71,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "397fcae5-e703-4d73-bcb4-fc80c229a7c2",
        "cursor": {
          "ref": "ef59bfaa-7ae0-4cd1-8249-20224e73d5a3",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "155e59aa-d815-4b3d-846f-e7f31c02f108"
        },
        "item": {
          "id": "397fcae5-e703-4d73-bcb4-fc80c229a7c2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a91dbfc3-1628-4c9b-9945-fe98f1107f28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "397fcae5-e703-4d73-bcb4-fc80c229a7c2",
        "cursor": {
          "ref": "ef59bfaa-7ae0-4cd1-8249-20224e73d5a3",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "155e59aa-d815-4b3d-846f-e7f31c02f108"
        },
        "item": {
          "id": "397fcae5-e703-4d73-bcb4-fc80c229a7c2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "a91dbfc3-1628-4c9b-9945-fe98f1107f28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "29de883b-d87c-4f7e-b0d9-7c1f5e21bb4e",
        "cursor": {
          "ref": "713e8ca0-0527-4823-bcf7-05e938bfe8ad",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9b4e2175-4b38-4241-b668-cb6eaf9a9f57"
        },
        "item": {
          "id": "29de883b-d87c-4f7e-b0d9-7c1f5e21bb4e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6d3f74b0-7f59-4e92-b2c4-4f08fc0ce192",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "29de883b-d87c-4f7e-b0d9-7c1f5e21bb4e",
        "cursor": {
          "ref": "713e8ca0-0527-4823-bcf7-05e938bfe8ad",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "9b4e2175-4b38-4241-b668-cb6eaf9a9f57"
        },
        "item": {
          "id": "29de883b-d87c-4f7e-b0d9-7c1f5e21bb4e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6d3f74b0-7f59-4e92-b2c4-4f08fc0ce192",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "25d02058-a146-4088-8d4a-0ef081efc080",
        "cursor": {
          "ref": "0ec31f89-5e69-4269-9497-a7925b4f1d30",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3abda540-2a0f-4313-bb1c-bf7d38299c14"
        },
        "item": {
          "id": "25d02058-a146-4088-8d4a-0ef081efc080",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5ace41f2-c93f-42a9-a21c-c34774091332",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "25d02058-a146-4088-8d4a-0ef081efc080",
        "cursor": {
          "ref": "0ec31f89-5e69-4269-9497-a7925b4f1d30",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "3abda540-2a0f-4313-bb1c-bf7d38299c14"
        },
        "item": {
          "id": "25d02058-a146-4088-8d4a-0ef081efc080",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5ace41f2-c93f-42a9-a21c-c34774091332",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "a4348c9f-2917-42af-939a-62f3dad3b775",
        "cursor": {
          "ref": "f1ffa459-1e5a-4935-a7ab-bd8192a0d00b",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "73c9b084-ef40-45ce-bb6d-141b6e882172"
        },
        "item": {
          "id": "a4348c9f-2917-42af-939a-62f3dad3b775",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0b2e30fb-6ab9-4003-91ee-4559738ee982",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "a4348c9f-2917-42af-939a-62f3dad3b775",
        "cursor": {
          "ref": "f1ffa459-1e5a-4935-a7ab-bd8192a0d00b",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "73c9b084-ef40-45ce-bb6d-141b6e882172"
        },
        "item": {
          "id": "a4348c9f-2917-42af-939a-62f3dad3b775",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "0b2e30fb-6ab9-4003-91ee-4559738ee982",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "11b59a53-cc50-4c9a-89b3-5d2eb21bff63",
        "cursor": {
          "ref": "fdd9ec5f-7391-4d9f-9bd7-9e7ac9571606",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "956f3c76-5aa1-4f83-b2d4-3853f437eab9"
        },
        "item": {
          "id": "11b59a53-cc50-4c9a-89b3-5d2eb21bff63",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "72d370a8-e1d2-44a5-a1e5-e3eb6ded21d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "11b59a53-cc50-4c9a-89b3-5d2eb21bff63",
        "cursor": {
          "ref": "fdd9ec5f-7391-4d9f-9bd7-9e7ac9571606",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "956f3c76-5aa1-4f83-b2d4-3853f437eab9"
        },
        "item": {
          "id": "11b59a53-cc50-4c9a-89b3-5d2eb21bff63",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "72d370a8-e1d2-44a5-a1e5-e3eb6ded21d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "05c9a897-1b7c-491f-928d-f6317c8faadf",
        "cursor": {
          "ref": "bfd47e09-9905-4663-8207-f19dea4aeb37",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5b3e6d86-506b-4b5d-8061-710f3bd62be1"
        },
        "item": {
          "id": "05c9a897-1b7c-491f-928d-f6317c8faadf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0bd82255-28a9-431a-a552-581392184a04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "05c9a897-1b7c-491f-928d-f6317c8faadf",
        "cursor": {
          "ref": "bfd47e09-9905-4663-8207-f19dea4aeb37",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "5b3e6d86-506b-4b5d-8061-710f3bd62be1"
        },
        "item": {
          "id": "05c9a897-1b7c-491f-928d-f6317c8faadf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "0bd82255-28a9-431a-a552-581392184a04",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "67a36b7e-5952-4c35-84b0-e0547cf7351f",
        "cursor": {
          "ref": "5b696538-1b0f-4348-80f4-2751006dfb08",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7c42dcca-f927-48cb-925a-a40c0f016ea4"
        },
        "item": {
          "id": "67a36b7e-5952-4c35-84b0-e0547cf7351f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1f5fd885-7473-44f2-90c7-ec23a6f29927",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "67a36b7e-5952-4c35-84b0-e0547cf7351f",
        "cursor": {
          "ref": "5b696538-1b0f-4348-80f4-2751006dfb08",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7c42dcca-f927-48cb-925a-a40c0f016ea4"
        },
        "item": {
          "id": "67a36b7e-5952-4c35-84b0-e0547cf7351f",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1f5fd885-7473-44f2-90c7-ec23a6f29927",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "a43a24f4-e67a-4bca-875b-39285dcfd3a9",
        "cursor": {
          "ref": "021934a8-aaf2-4786-9c1d-c5ec3fef62e6",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ed751519-34a3-42b9-a7c9-45f5420a4781"
        },
        "item": {
          "id": "a43a24f4-e67a-4bca-875b-39285dcfd3a9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fdc5cdc5-5797-4e57-b967-98182134cafe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "a43a24f4-e67a-4bca-875b-39285dcfd3a9",
        "cursor": {
          "ref": "021934a8-aaf2-4786-9c1d-c5ec3fef62e6",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "ed751519-34a3-42b9-a7c9-45f5420a4781"
        },
        "item": {
          "id": "a43a24f4-e67a-4bca-875b-39285dcfd3a9",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "fdc5cdc5-5797-4e57-b967-98182134cafe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "6f590699-e110-4f1c-aecd-ce713093e6e6",
        "cursor": {
          "ref": "e356493a-960a-4025-8ce3-913bd89aaf56",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4635fdce-3cbb-4974-a8c0-2f445276d6d3"
        },
        "item": {
          "id": "6f590699-e110-4f1c-aecd-ce713093e6e6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d03b71e8-3a2c-4359-997c-e1a6b075548d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "6f590699-e110-4f1c-aecd-ce713093e6e6",
        "cursor": {
          "ref": "e356493a-960a-4025-8ce3-913bd89aaf56",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "4635fdce-3cbb-4974-a8c0-2f445276d6d3"
        },
        "item": {
          "id": "6f590699-e110-4f1c-aecd-ce713093e6e6",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "d03b71e8-3a2c-4359-997c-e1a6b075548d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "f1d1e430-476c-46d2-ae8b-ab5181cfe705",
        "cursor": {
          "ref": "4308f552-40ac-494e-9ad1-da0522c7e9e8",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "98880884-bd9e-424b-99a3-e100899738ca"
        },
        "item": {
          "id": "f1d1e430-476c-46d2-ae8b-ab5181cfe705",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1a83df94-b995-4ca4-b2c6-e04eb0fcbba4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "f1d1e430-476c-46d2-ae8b-ab5181cfe705",
        "cursor": {
          "ref": "4308f552-40ac-494e-9ad1-da0522c7e9e8",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "98880884-bd9e-424b-99a3-e100899738ca"
        },
        "item": {
          "id": "f1d1e430-476c-46d2-ae8b-ab5181cfe705",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "1a83df94-b995-4ca4-b2c6-e04eb0fcbba4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "eaf15fd9-75d9-4ff8-961e-de0f7a2a2d23",
        "cursor": {
          "ref": "88671c61-99b2-47f2-8764-821a4d67a48f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a4a0f46a-3803-4b0c-bb63-13c78a09b893"
        },
        "item": {
          "id": "eaf15fd9-75d9-4ff8-961e-de0f7a2a2d23",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "55b91c74-410b-4a6b-bca6-dc0e0ecb4274",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "eaf15fd9-75d9-4ff8-961e-de0f7a2a2d23",
        "cursor": {
          "ref": "88671c61-99b2-47f2-8764-821a4d67a48f",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a4a0f46a-3803-4b0c-bb63-13c78a09b893"
        },
        "item": {
          "id": "eaf15fd9-75d9-4ff8-961e-de0f7a2a2d23",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "55b91c74-410b-4a6b-bca6-dc0e0ecb4274",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "4d30005a-2bcd-4eaa-9aa4-a574f0722656",
        "cursor": {
          "ref": "de5d375c-9a86-4210-9160-73b7923fba87",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0284d7b2-546d-446a-846b-f01b00bec312"
        },
        "item": {
          "id": "4d30005a-2bcd-4eaa-9aa4-a574f0722656",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "748b49d1-590f-400d-9a4c-a1a50e602aba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "4d30005a-2bcd-4eaa-9aa4-a574f0722656",
        "cursor": {
          "ref": "de5d375c-9a86-4210-9160-73b7923fba87",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0284d7b2-546d-446a-846b-f01b00bec312"
        },
        "item": {
          "id": "4d30005a-2bcd-4eaa-9aa4-a574f0722656",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "748b49d1-590f-400d-9a4c-a1a50e602aba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "772e0cb4-9a69-4516-b8f8-b96dd8aa8fc9",
        "cursor": {
          "ref": "32a51e91-f8f4-4247-889f-ffd4336553b3",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f3c45ee9-8cbf-4042-9fb9-bae2f1e5eb48"
        },
        "item": {
          "id": "772e0cb4-9a69-4516-b8f8-b96dd8aa8fc9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "30d4eb46-2e89-469f-9e9a-0eca59213568",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "772e0cb4-9a69-4516-b8f8-b96dd8aa8fc9",
        "cursor": {
          "ref": "32a51e91-f8f4-4247-889f-ffd4336553b3",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "f3c45ee9-8cbf-4042-9fb9-bae2f1e5eb48"
        },
        "item": {
          "id": "772e0cb4-9a69-4516-b8f8-b96dd8aa8fc9",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "30d4eb46-2e89-469f-9e9a-0eca59213568",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "ca2c50bf-6b57-4235-9409-3abc9b6c3c00",
        "cursor": {
          "ref": "c208a203-d5de-4704-8496-6bc6681e3600",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b9556088-23fa-4019-94a8-ecfe5a85b40e"
        },
        "item": {
          "id": "ca2c50bf-6b57-4235-9409-3abc9b6c3c00",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b6edafc4-87b6-4eb3-b535-1e665f3a7a82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "ca2c50bf-6b57-4235-9409-3abc9b6c3c00",
        "cursor": {
          "ref": "c208a203-d5de-4704-8496-6bc6681e3600",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "b9556088-23fa-4019-94a8-ecfe5a85b40e"
        },
        "item": {
          "id": "ca2c50bf-6b57-4235-9409-3abc9b6c3c00",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "b6edafc4-87b6-4eb3-b535-1e665f3a7a82",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "ded3f14a-b4f9-4763-9dd3-7b22d76fe04e",
        "cursor": {
          "ref": "d5c8257b-5a01-44a2-afbd-ab9bbc3fb6db",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "756bee8e-a089-45b8-8375-4108067d3180"
        },
        "item": {
          "id": "ded3f14a-b4f9-4763-9dd3-7b22d76fe04e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "91857ab2-8044-4d3a-bc63-a4c25fbcfcb3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "ded3f14a-b4f9-4763-9dd3-7b22d76fe04e",
        "cursor": {
          "ref": "d5c8257b-5a01-44a2-afbd-ab9bbc3fb6db",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "756bee8e-a089-45b8-8375-4108067d3180"
        },
        "item": {
          "id": "ded3f14a-b4f9-4763-9dd3-7b22d76fe04e",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "91857ab2-8044-4d3a-bc63-a4c25fbcfcb3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "69b59e09-323b-4fc0-9ffb-0251a0580181",
        "cursor": {
          "ref": "4d83eb35-fc04-4e8e-bf70-f7403c36c815",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "adbe7a2b-bf04-44ab-be08-c4b7df175215"
        },
        "item": {
          "id": "69b59e09-323b-4fc0-9ffb-0251a0580181",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9ea6a401-2cab-4c48-abc3-3564390bb928",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "69b59e09-323b-4fc0-9ffb-0251a0580181",
        "cursor": {
          "ref": "4d83eb35-fc04-4e8e-bf70-f7403c36c815",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "adbe7a2b-bf04-44ab-be08-c4b7df175215"
        },
        "item": {
          "id": "69b59e09-323b-4fc0-9ffb-0251a0580181",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9ea6a401-2cab-4c48-abc3-3564390bb928",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "7d6b423e-b1eb-4b02-af0d-87c82fd4e49f",
        "cursor": {
          "ref": "4241ecd8-25a8-4a4c-8521-7bb590580bbd",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "168ce31b-28ed-4852-a31a-02827ada887f"
        },
        "item": {
          "id": "7d6b423e-b1eb-4b02-af0d-87c82fd4e49f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5149c300-e48e-4723-9d8e-cdf4c2171ce0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "7d6b423e-b1eb-4b02-af0d-87c82fd4e49f",
        "cursor": {
          "ref": "4241ecd8-25a8-4a4c-8521-7bb590580bbd",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "168ce31b-28ed-4852-a31a-02827ada887f"
        },
        "item": {
          "id": "7d6b423e-b1eb-4b02-af0d-87c82fd4e49f",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "5149c300-e48e-4723-9d8e-cdf4c2171ce0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "3eb1069c-b703-48f3-843a-7e7cbd06f1bc",
        "cursor": {
          "ref": "a40005ac-10d0-4dae-8b4b-baf162e059e0",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2b2f324c-3f8f-4a8d-abd9-631b15f4b772"
        },
        "item": {
          "id": "3eb1069c-b703-48f3-843a-7e7cbd06f1bc",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "469e4802-afec-4110-b5d2-a9e220dd2269",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "3eb1069c-b703-48f3-843a-7e7cbd06f1bc",
        "cursor": {
          "ref": "a40005ac-10d0-4dae-8b4b-baf162e059e0",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2b2f324c-3f8f-4a8d-abd9-631b15f4b772"
        },
        "item": {
          "id": "3eb1069c-b703-48f3-843a-7e7cbd06f1bc",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "469e4802-afec-4110-b5d2-a9e220dd2269",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "3a69d214-61e9-4cf8-a6f6-f1ff4f96aef2",
        "cursor": {
          "ref": "8652f60a-6f61-4065-8e31-24eced490b40",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8ce9a374-f8f7-430b-b54b-0f8c97145ff2"
        },
        "item": {
          "id": "3a69d214-61e9-4cf8-a6f6-f1ff4f96aef2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e7871990-44bd-4203-86d0-25819745a722",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "3a69d214-61e9-4cf8-a6f6-f1ff4f96aef2",
        "cursor": {
          "ref": "8652f60a-6f61-4065-8e31-24eced490b40",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8ce9a374-f8f7-430b-b54b-0f8c97145ff2"
        },
        "item": {
          "id": "3a69d214-61e9-4cf8-a6f6-f1ff4f96aef2",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "e7871990-44bd-4203-86d0-25819745a722",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "f810b540-7db0-49fb-b430-3aa5f393f83e",
        "cursor": {
          "ref": "7cb54141-b26b-45a3-873e-0c944f9e6f6b",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3a86c6c2-aa24-4afc-a981-d898c898d4f2"
        },
        "item": {
          "id": "f810b540-7db0-49fb-b430-3aa5f393f83e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fc8c7e6a-4107-41a9-ab5d-8dcb804b763c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "f810b540-7db0-49fb-b430-3aa5f393f83e",
        "cursor": {
          "ref": "7cb54141-b26b-45a3-873e-0c944f9e6f6b",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "3a86c6c2-aa24-4afc-a981-d898c898d4f2"
        },
        "item": {
          "id": "f810b540-7db0-49fb-b430-3aa5f393f83e",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fc8c7e6a-4107-41a9-ab5d-8dcb804b763c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "054bbf69-e0ef-4671-944b-ccea2d2ddacb",
        "cursor": {
          "ref": "650f6044-6147-445a-8449-79b90e3130f2",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "af3961b9-8323-4b34-bf52-e6babac0c9c9"
        },
        "item": {
          "id": "054bbf69-e0ef-4671-944b-ccea2d2ddacb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8e267281-bd65-42cc-bacb-16d750415632",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "054bbf69-e0ef-4671-944b-ccea2d2ddacb",
        "cursor": {
          "ref": "650f6044-6147-445a-8449-79b90e3130f2",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "af3961b9-8323-4b34-bf52-e6babac0c9c9"
        },
        "item": {
          "id": "054bbf69-e0ef-4671-944b-ccea2d2ddacb",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8e267281-bd65-42cc-bacb-16d750415632",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "6cdb5e2a-5c5b-4ee3-868b-b1e7d1682a3d",
        "cursor": {
          "ref": "50f7561c-2642-4200-823b-00c2bbd1013e",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d4ead866-d3e5-4976-8fc2-e35a6d618e28"
        },
        "item": {
          "id": "6cdb5e2a-5c5b-4ee3-868b-b1e7d1682a3d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5a739dc8-fa3f-49f3-a807-f53236919a49",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6cdb5e2a-5c5b-4ee3-868b-b1e7d1682a3d",
        "cursor": {
          "ref": "50f7561c-2642-4200-823b-00c2bbd1013e",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d4ead866-d3e5-4976-8fc2-e35a6d618e28"
        },
        "item": {
          "id": "6cdb5e2a-5c5b-4ee3-868b-b1e7d1682a3d",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5a739dc8-fa3f-49f3-a807-f53236919a49",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "dfe77398-e63a-4804-9c3d-2764987be18c",
        "cursor": {
          "ref": "0d07cb77-9392-4a81-9f1c-f0e5910c32bc",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "330dbf25-df7c-44c8-aba1-06f516ec68a1"
        },
        "item": {
          "id": "dfe77398-e63a-4804-9c3d-2764987be18c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8abf5ca3-2c50-4d21-b588-329f6261cf26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "dfe77398-e63a-4804-9c3d-2764987be18c",
        "cursor": {
          "ref": "0d07cb77-9392-4a81-9f1c-f0e5910c32bc",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "330dbf25-df7c-44c8-aba1-06f516ec68a1"
        },
        "item": {
          "id": "dfe77398-e63a-4804-9c3d-2764987be18c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "8abf5ca3-2c50-4d21-b588-329f6261cf26",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "12be84dd-df86-4e88-9773-f0b6d227a0b8",
        "cursor": {
          "ref": "7a0b2ac3-ebfa-469b-be3a-7b35e544686c",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a21c15eb-21d3-46d0-b776-f39122d4a36c"
        },
        "item": {
          "id": "12be84dd-df86-4e88-9773-f0b6d227a0b8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6fab761c-3671-46b1-a343-343ac18f7143",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "12be84dd-df86-4e88-9773-f0b6d227a0b8",
        "cursor": {
          "ref": "7a0b2ac3-ebfa-469b-be3a-7b35e544686c",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "a21c15eb-21d3-46d0-b776-f39122d4a36c"
        },
        "item": {
          "id": "12be84dd-df86-4e88-9773-f0b6d227a0b8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "6fab761c-3671-46b1-a343-343ac18f7143",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "81a91ed6-f9c1-413a-9085-9685bc159cbb",
        "cursor": {
          "ref": "f26856f4-5cc3-423c-941b-b81f0f244de6",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2cc5501c-e902-4bb3-8dc8-c0295f10cc35"
        },
        "item": {
          "id": "81a91ed6-f9c1-413a-9085-9685bc159cbb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ca9fb5f6-121b-4b8b-bcf3-07ca00c080e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "81a91ed6-f9c1-413a-9085-9685bc159cbb",
        "cursor": {
          "ref": "f26856f4-5cc3-423c-941b-b81f0f244de6",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2cc5501c-e902-4bb3-8dc8-c0295f10cc35"
        },
        "item": {
          "id": "81a91ed6-f9c1-413a-9085-9685bc159cbb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "ca9fb5f6-121b-4b8b-bcf3-07ca00c080e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "d91e8812-1778-4c52-b8b8-daa4e282a13d",
        "cursor": {
          "ref": "5581a9b8-638e-4b6f-841e-c7ab7a62fb94",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "09e8c2d3-0281-4fac-ac2f-643a88e76f00"
        },
        "item": {
          "id": "d91e8812-1778-4c52-b8b8-daa4e282a13d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "829d081d-39ba-4b33-a42e-50e6956f1d6c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "d91e8812-1778-4c52-b8b8-daa4e282a13d",
        "cursor": {
          "ref": "5581a9b8-638e-4b6f-841e-c7ab7a62fb94",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "09e8c2d3-0281-4fac-ac2f-643a88e76f00"
        },
        "item": {
          "id": "d91e8812-1778-4c52-b8b8-daa4e282a13d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "829d081d-39ba-4b33-a42e-50e6956f1d6c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "e7e9da29-ad7e-40f4-8282-9b59665967c4",
        "cursor": {
          "ref": "6f5a7bb5-ddb7-49b2-a2a4-e5bb13f75d9f",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f154c55a-4ee8-4419-98bc-662ec2c40530"
        },
        "item": {
          "id": "e7e9da29-ad7e-40f4-8282-9b59665967c4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7a9dbda1-4127-4ec4-b3a3-b43ed2ccf6f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "e7e9da29-ad7e-40f4-8282-9b59665967c4",
        "cursor": {
          "ref": "6f5a7bb5-ddb7-49b2-a2a4-e5bb13f75d9f",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f154c55a-4ee8-4419-98bc-662ec2c40530"
        },
        "item": {
          "id": "e7e9da29-ad7e-40f4-8282-9b59665967c4",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "7a9dbda1-4127-4ec4-b3a3-b43ed2ccf6f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "b977cdc1-aa5b-45aa-ad30-f7393ab6e2c4",
        "cursor": {
          "ref": "2020f8b8-6803-41a5-a57a-6bade786d7d7",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "87db0548-65a9-41d1-8659-f383ee7684a8"
        },
        "item": {
          "id": "b977cdc1-aa5b-45aa-ad30-f7393ab6e2c4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e16d34ad-a143-4d2a-bd6b-42d84f847b9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b977cdc1-aa5b-45aa-ad30-f7393ab6e2c4",
        "cursor": {
          "ref": "2020f8b8-6803-41a5-a57a-6bade786d7d7",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "87db0548-65a9-41d1-8659-f383ee7684a8"
        },
        "item": {
          "id": "b977cdc1-aa5b-45aa-ad30-f7393ab6e2c4",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e16d34ad-a143-4d2a-bd6b-42d84f847b9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "b0f260c6-0c33-41b7-b2e2-a29963f271c5",
        "cursor": {
          "ref": "c4a5d100-1c78-490f-83b0-35c03274124a",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9749bba6-a91d-429f-817e-38006e958a91"
        },
        "item": {
          "id": "b0f260c6-0c33-41b7-b2e2-a29963f271c5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9f352332-d181-4d0d-be34-f9d722e12fcb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "b0f260c6-0c33-41b7-b2e2-a29963f271c5",
        "cursor": {
          "ref": "c4a5d100-1c78-490f-83b0-35c03274124a",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9749bba6-a91d-429f-817e-38006e958a91"
        },
        "item": {
          "id": "b0f260c6-0c33-41b7-b2e2-a29963f271c5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "9f352332-d181-4d0d-be34-f9d722e12fcb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3499af33-d73b-405a-95f2-36bdf8de9d41",
        "cursor": {
          "ref": "a9eff8e3-3877-4627-82ad-3f3f448f4269",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52ef933c-9987-4845-a09e-78f4b8703016"
        },
        "item": {
          "id": "3499af33-d73b-405a-95f2-36bdf8de9d41",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b74842b7-e696-40a9-add0-1826885ed2fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "3499af33-d73b-405a-95f2-36bdf8de9d41",
        "cursor": {
          "ref": "a9eff8e3-3877-4627-82ad-3f3f448f4269",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "52ef933c-9987-4845-a09e-78f4b8703016"
        },
        "item": {
          "id": "3499af33-d73b-405a-95f2-36bdf8de9d41",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "b74842b7-e696-40a9-add0-1826885ed2fe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "da9a8377-eb2c-40a3-883d-3e9f02f56bb6",
        "cursor": {
          "ref": "0a3bb61e-5919-41e4-82b9-9c76e50b4750",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "078ccc63-2f47-4c87-b2d2-a2390d9b0927"
        },
        "item": {
          "id": "da9a8377-eb2c-40a3-883d-3e9f02f56bb6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "996b5aa9-fcf7-495e-86f0-8da7fd34ba29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "da9a8377-eb2c-40a3-883d-3e9f02f56bb6",
        "cursor": {
          "ref": "0a3bb61e-5919-41e4-82b9-9c76e50b4750",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "078ccc63-2f47-4c87-b2d2-a2390d9b0927"
        },
        "item": {
          "id": "da9a8377-eb2c-40a3-883d-3e9f02f56bb6",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "996b5aa9-fcf7-495e-86f0-8da7fd34ba29",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "e92eff59-1e27-481f-838c-f2a3c76875ac",
        "cursor": {
          "ref": "ab8c39e1-9d41-4c23-b78f-ea163800b665",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8f07bd00-cec3-4c8d-acdb-fae8b71cbb6d"
        },
        "item": {
          "id": "e92eff59-1e27-481f-838c-f2a3c76875ac",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "abb07563-f97a-4718-930c-f3450aa499e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 82,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "e92eff59-1e27-481f-838c-f2a3c76875ac",
        "cursor": {
          "ref": "ab8c39e1-9d41-4c23-b78f-ea163800b665",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8f07bd00-cec3-4c8d-acdb-fae8b71cbb6d"
        },
        "item": {
          "id": "e92eff59-1e27-481f-838c-f2a3c76875ac",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "abb07563-f97a-4718-930c-f3450aa499e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 82,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "8335194a-b548-457b-bf3d-22d5a04ee4a5",
        "cursor": {
          "ref": "a9b19a99-b808-4d5f-bce8-00acd620465a",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f004e59e-4967-4413-ac74-6e355941eea6"
        },
        "item": {
          "id": "8335194a-b548-457b-bf3d-22d5a04ee4a5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a7d1207c-4505-477a-8e7c-9aa2adcd1d0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "8335194a-b548-457b-bf3d-22d5a04ee4a5",
        "cursor": {
          "ref": "a9b19a99-b808-4d5f-bce8-00acd620465a",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "f004e59e-4967-4413-ac74-6e355941eea6"
        },
        "item": {
          "id": "8335194a-b548-457b-bf3d-22d5a04ee4a5",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "a7d1207c-4505-477a-8e7c-9aa2adcd1d0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "3812e7c6-a371-499d-bd2f-b0972174a8c5",
        "cursor": {
          "ref": "01527046-513c-4387-8d1b-4fcfcf93298d",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "397c6347-2407-4745-a128-b2832a51c040"
        },
        "item": {
          "id": "3812e7c6-a371-499d-bd2f-b0972174a8c5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "89d964d5-d380-42a4-914d-66194313daf0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "3812e7c6-a371-499d-bd2f-b0972174a8c5",
        "cursor": {
          "ref": "01527046-513c-4387-8d1b-4fcfcf93298d",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "397c6347-2407-4745-a128-b2832a51c040"
        },
        "item": {
          "id": "3812e7c6-a371-499d-bd2f-b0972174a8c5",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "89d964d5-d380-42a4-914d-66194313daf0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "3a093e74-5911-45b9-820d-bea3eba53f1a",
        "cursor": {
          "ref": "47a3b42f-8567-4d74-8180-3679ed174fb6",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "487f1732-34ab-4693-8cbe-6379c78f1bd8"
        },
        "item": {
          "id": "3a093e74-5911-45b9-820d-bea3eba53f1a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ef1039dc-86ce-406b-8fe3-47eeea9b796c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "3a093e74-5911-45b9-820d-bea3eba53f1a",
        "cursor": {
          "ref": "47a3b42f-8567-4d74-8180-3679ed174fb6",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "487f1732-34ab-4693-8cbe-6379c78f1bd8"
        },
        "item": {
          "id": "3a093e74-5911-45b9-820d-bea3eba53f1a",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ef1039dc-86ce-406b-8fe3-47eeea9b796c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "9de86aca-0f23-45da-8386-32c9c1fb70da",
        "cursor": {
          "ref": "9a2e2374-82a2-455c-9cdf-6ea878b2aa18",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e5133688-dc0e-407b-bdbb-26b79ffb0684"
        },
        "item": {
          "id": "9de86aca-0f23-45da-8386-32c9c1fb70da",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f46616d3-9f86-4a5f-ba6a-7c9865a6b034",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "9de86aca-0f23-45da-8386-32c9c1fb70da",
        "cursor": {
          "ref": "9a2e2374-82a2-455c-9cdf-6ea878b2aa18",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e5133688-dc0e-407b-bdbb-26b79ffb0684"
        },
        "item": {
          "id": "9de86aca-0f23-45da-8386-32c9c1fb70da",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "f46616d3-9f86-4a5f-ba6a-7c9865a6b034",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "cefda87a-847c-49cb-88b3-866d846a6df1",
        "cursor": {
          "ref": "08c31176-a488-45ff-8e15-67eef343c3ca",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8fe63c0b-c419-4de5-8070-c5426b1ecf4e"
        },
        "item": {
          "id": "cefda87a-847c-49cb-88b3-866d846a6df1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0919c70d-e5ef-4299-8a3a-2800fbb2552a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "cefda87a-847c-49cb-88b3-866d846a6df1",
        "cursor": {
          "ref": "08c31176-a488-45ff-8e15-67eef343c3ca",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "8fe63c0b-c419-4de5-8070-c5426b1ecf4e"
        },
        "item": {
          "id": "cefda87a-847c-49cb-88b3-866d846a6df1",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "0919c70d-e5ef-4299-8a3a-2800fbb2552a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "8872e01a-4e05-4221-a277-8f5a30488074",
        "cursor": {
          "ref": "2e18eaaf-e630-403c-9ffc-e73ca009d905",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e89929dc-c722-401f-957b-19ba15475cc8"
        },
        "item": {
          "id": "8872e01a-4e05-4221-a277-8f5a30488074",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5083f285-e969-495e-a514-6ce5a6690795",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "8872e01a-4e05-4221-a277-8f5a30488074",
        "cursor": {
          "ref": "2e18eaaf-e630-403c-9ffc-e73ca009d905",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "e89929dc-c722-401f-957b-19ba15475cc8"
        },
        "item": {
          "id": "8872e01a-4e05-4221-a277-8f5a30488074",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5083f285-e969-495e-a514-6ce5a6690795",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "96ae7639-77ea-48b9-acc2-7916ec462c0c",
        "cursor": {
          "ref": "4a39d63d-9558-46a3-976f-1fba54de39fb",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "348ec3af-b834-4f14-a6b5-dbf86c23cc24"
        },
        "item": {
          "id": "96ae7639-77ea-48b9-acc2-7916ec462c0c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f24bc8f1-cccc-469f-929d-5b469252dd0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "96ae7639-77ea-48b9-acc2-7916ec462c0c",
        "cursor": {
          "ref": "4a39d63d-9558-46a3-976f-1fba54de39fb",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "348ec3af-b834-4f14-a6b5-dbf86c23cc24"
        },
        "item": {
          "id": "96ae7639-77ea-48b9-acc2-7916ec462c0c",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f24bc8f1-cccc-469f-929d-5b469252dd0c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "14716747-64fb-4868-bdc9-948a7a24ae5b",
        "cursor": {
          "ref": "bfd04378-0e7a-4d44-a771-519f73a0f5dd",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ae879503-c375-4c20-bb99-4d3409621727"
        },
        "item": {
          "id": "14716747-64fb-4868-bdc9-948a7a24ae5b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "71402b62-c04c-430e-86c3-0f225b8197fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "14716747-64fb-4868-bdc9-948a7a24ae5b",
        "cursor": {
          "ref": "bfd04378-0e7a-4d44-a771-519f73a0f5dd",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ae879503-c375-4c20-bb99-4d3409621727"
        },
        "item": {
          "id": "14716747-64fb-4868-bdc9-948a7a24ae5b",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "71402b62-c04c-430e-86c3-0f225b8197fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "7f61df81-cfac-4750-8046-90f84ba74eaa",
        "cursor": {
          "ref": "6a32316b-d12a-4109-8460-93f6c33f8f5d",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "04b0da92-2d17-43c1-8b4e-2e7cf3abcd91"
        },
        "item": {
          "id": "7f61df81-cfac-4750-8046-90f84ba74eaa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "15afe510-0092-468e-958e-6b955b4db4c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "7f61df81-cfac-4750-8046-90f84ba74eaa",
        "cursor": {
          "ref": "6a32316b-d12a-4109-8460-93f6c33f8f5d",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "04b0da92-2d17-43c1-8b4e-2e7cf3abcd91"
        },
        "item": {
          "id": "7f61df81-cfac-4750-8046-90f84ba74eaa",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "15afe510-0092-468e-958e-6b955b4db4c3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "305055e8-14c1-439a-b179-2391afde314e",
        "cursor": {
          "ref": "c8f39405-94e9-4fe0-b9fc-8703178b2034",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b01cf66d-47c1-45d2-bc5f-0f21c938d00c"
        },
        "item": {
          "id": "305055e8-14c1-439a-b179-2391afde314e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8185d773-1a7b-434b-84f2-9406be719b80",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "305055e8-14c1-439a-b179-2391afde314e",
        "cursor": {
          "ref": "c8f39405-94e9-4fe0-b9fc-8703178b2034",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b01cf66d-47c1-45d2-bc5f-0f21c938d00c"
        },
        "item": {
          "id": "305055e8-14c1-439a-b179-2391afde314e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "8185d773-1a7b-434b-84f2-9406be719b80",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "c91d453a-f0bb-4c3b-97b8-12b9d9b35f4b",
        "cursor": {
          "ref": "4887bc9b-5228-4301-9ecd-32c87e9d40fe",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9b0df960-dc5a-4ccc-8751-6f7e7f471c90"
        },
        "item": {
          "id": "c91d453a-f0bb-4c3b-97b8-12b9d9b35f4b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d91518ec-022b-4f0e-8abe-2c137093e2c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "c91d453a-f0bb-4c3b-97b8-12b9d9b35f4b",
        "cursor": {
          "ref": "4887bc9b-5228-4301-9ecd-32c87e9d40fe",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9b0df960-dc5a-4ccc-8751-6f7e7f471c90"
        },
        "item": {
          "id": "c91d453a-f0bb-4c3b-97b8-12b9d9b35f4b",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "d91518ec-022b-4f0e-8abe-2c137093e2c1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "cd12a5a2-c166-49ca-b00a-998d55ace090",
        "cursor": {
          "ref": "112b1153-e9a7-4027-ac72-f08878cddea5",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "86a10bcd-616c-464d-bbe2-40423f3754d4"
        },
        "item": {
          "id": "cd12a5a2-c166-49ca-b00a-998d55ace090",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b49937f5-1e38-4cf4-9939-e618ca9f5b1b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "cd12a5a2-c166-49ca-b00a-998d55ace090",
        "cursor": {
          "ref": "112b1153-e9a7-4027-ac72-f08878cddea5",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "86a10bcd-616c-464d-bbe2-40423f3754d4"
        },
        "item": {
          "id": "cd12a5a2-c166-49ca-b00a-998d55ace090",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b49937f5-1e38-4cf4-9939-e618ca9f5b1b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "7bd9af86-447f-4b3d-a14c-8430c75165b7",
        "cursor": {
          "ref": "5e9bfc8d-85b5-4e8d-b555-8fe39f74c158",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0ae9f07f-c637-4fbb-9c61-d5f1360ff142"
        },
        "item": {
          "id": "7bd9af86-447f-4b3d-a14c-8430c75165b7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "51b7627f-67c4-48bb-a64e-823aad59b2c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "7bd9af86-447f-4b3d-a14c-8430c75165b7",
        "cursor": {
          "ref": "5e9bfc8d-85b5-4e8d-b555-8fe39f74c158",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "0ae9f07f-c637-4fbb-9c61-d5f1360ff142"
        },
        "item": {
          "id": "7bd9af86-447f-4b3d-a14c-8430c75165b7",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "51b7627f-67c4-48bb-a64e-823aad59b2c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "55b1cc3e-b01f-464f-9949-3032aacff419",
        "cursor": {
          "ref": "505106f0-4136-444d-8222-b3fdfb26169a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "33b201e7-111d-4486-85b7-3a1dcb4445c1"
        },
        "item": {
          "id": "55b1cc3e-b01f-464f-9949-3032aacff419",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0f42deed-0962-4d82-a9f7-22ded5108937",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "55b1cc3e-b01f-464f-9949-3032aacff419",
        "cursor": {
          "ref": "505106f0-4136-444d-8222-b3fdfb26169a",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "33b201e7-111d-4486-85b7-3a1dcb4445c1"
        },
        "item": {
          "id": "55b1cc3e-b01f-464f-9949-3032aacff419",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "0f42deed-0962-4d82-a9f7-22ded5108937",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "02bba7cf-1cb8-4d1f-8a50-d1a64131f9ce",
        "cursor": {
          "ref": "437a5bb5-e14e-4d56-9f73-69a568e21efa",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cc1dbd47-e000-4988-a26f-a70d4a197f81"
        },
        "item": {
          "id": "02bba7cf-1cb8-4d1f-8a50-d1a64131f9ce",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "719c61e8-2daa-4c47-abe2-43983dc4bd6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "02bba7cf-1cb8-4d1f-8a50-d1a64131f9ce",
        "cursor": {
          "ref": "437a5bb5-e14e-4d56-9f73-69a568e21efa",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "cc1dbd47-e000-4988-a26f-a70d4a197f81"
        },
        "item": {
          "id": "02bba7cf-1cb8-4d1f-8a50-d1a64131f9ce",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "719c61e8-2daa-4c47-abe2-43983dc4bd6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "91aa2f6c-76c8-4fb5-9d95-16821e03e059",
        "cursor": {
          "ref": "18269ef5-0c53-428b-b23b-73bdf053bbe8",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "efc6b1b2-05c1-4292-88cb-6546fbb6c32f"
        },
        "item": {
          "id": "91aa2f6c-76c8-4fb5-9d95-16821e03e059",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3c86750d-deb0-46f2-b212-4fbb37028994",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "91aa2f6c-76c8-4fb5-9d95-16821e03e059",
        "cursor": {
          "ref": "18269ef5-0c53-428b-b23b-73bdf053bbe8",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "efc6b1b2-05c1-4292-88cb-6546fbb6c32f"
        },
        "item": {
          "id": "91aa2f6c-76c8-4fb5-9d95-16821e03e059",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3c86750d-deb0-46f2-b212-4fbb37028994",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "f11da635-f30e-49fc-8aa0-bf6d9be6ff14",
        "cursor": {
          "ref": "24d71a21-8f00-4627-9510-dbd07bf2675e",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "88b89cdd-cebb-48fd-8161-bc23f95607e8"
        },
        "item": {
          "id": "f11da635-f30e-49fc-8aa0-bf6d9be6ff14",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ab4eb3f5-03b6-4b7b-be9f-fabf47c8b1ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "f11da635-f30e-49fc-8aa0-bf6d9be6ff14",
        "cursor": {
          "ref": "24d71a21-8f00-4627-9510-dbd07bf2675e",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "88b89cdd-cebb-48fd-8161-bc23f95607e8"
        },
        "item": {
          "id": "f11da635-f30e-49fc-8aa0-bf6d9be6ff14",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "ab4eb3f5-03b6-4b7b-be9f-fabf47c8b1ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "06c40ca7-4acb-4623-af03-cd3329d91a35",
        "cursor": {
          "ref": "410e0cb2-5bf5-4265-89e5-903edb9e7890",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "20857087-110e-4819-bd8d-c51fd1e12fcf"
        },
        "item": {
          "id": "06c40ca7-4acb-4623-af03-cd3329d91a35",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fe3390c5-9de0-4d08-a62f-05ee365e0c01",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "06c40ca7-4acb-4623-af03-cd3329d91a35",
        "cursor": {
          "ref": "410e0cb2-5bf5-4265-89e5-903edb9e7890",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "20857087-110e-4819-bd8d-c51fd1e12fcf"
        },
        "item": {
          "id": "06c40ca7-4acb-4623-af03-cd3329d91a35",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "fe3390c5-9de0-4d08-a62f-05ee365e0c01",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "05473e21-7ddd-4f6f-b7d9-07fa0a712659",
        "cursor": {
          "ref": "7260527c-94dc-409a-bbb9-3a2cadc96a8c",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "faaf48d4-e8f3-463c-885d-cebb34b3b769"
        },
        "item": {
          "id": "05473e21-7ddd-4f6f-b7d9-07fa0a712659",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ff14a7c5-083f-4b0d-968a-5d7536130923",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "05473e21-7ddd-4f6f-b7d9-07fa0a712659",
        "cursor": {
          "ref": "7260527c-94dc-409a-bbb9-3a2cadc96a8c",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "faaf48d4-e8f3-463c-885d-cebb34b3b769"
        },
        "item": {
          "id": "05473e21-7ddd-4f6f-b7d9-07fa0a712659",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ff14a7c5-083f-4b0d-968a-5d7536130923",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "b082c436-e972-4817-be8b-0ac72d3e2cd1",
        "cursor": {
          "ref": "cc450fcc-826d-45fc-9475-faea01f81e4e",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c2ffdb3c-2077-4380-8305-801782f3b6d0"
        },
        "item": {
          "id": "b082c436-e972-4817-be8b-0ac72d3e2cd1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e6a11361-0509-4688-97a7-1765f3d49fd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "b082c436-e972-4817-be8b-0ac72d3e2cd1",
        "cursor": {
          "ref": "cc450fcc-826d-45fc-9475-faea01f81e4e",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "c2ffdb3c-2077-4380-8305-801782f3b6d0"
        },
        "item": {
          "id": "b082c436-e972-4817-be8b-0ac72d3e2cd1",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "e6a11361-0509-4688-97a7-1765f3d49fd7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "6a9ab610-c20d-4e08-8eff-7935cadca36f",
        "cursor": {
          "ref": "410500d3-7c8f-4550-a84a-efe25d827f83",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fc4b9be7-571a-48b8-9a02-95a16c55f8e7"
        },
        "item": {
          "id": "6a9ab610-c20d-4e08-8eff-7935cadca36f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "24ff9ba9-d048-49e5-8b82-1c62230c78a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "6a9ab610-c20d-4e08-8eff-7935cadca36f",
        "cursor": {
          "ref": "410500d3-7c8f-4550-a84a-efe25d827f83",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "fc4b9be7-571a-48b8-9a02-95a16c55f8e7"
        },
        "item": {
          "id": "6a9ab610-c20d-4e08-8eff-7935cadca36f",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "24ff9ba9-d048-49e5-8b82-1c62230c78a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "21823ad5-dcd5-4032-b836-85af847be701",
        "cursor": {
          "ref": "623956f8-11d4-4ff5-87a1-9a6a5d5c0b25",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9dd129bf-307b-4dd2-aacb-6948013e9d7c"
        },
        "item": {
          "id": "21823ad5-dcd5-4032-b836-85af847be701",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "125331db-d623-4d07-8a3d-ed31b0a178b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "21823ad5-dcd5-4032-b836-85af847be701",
        "cursor": {
          "ref": "623956f8-11d4-4ff5-87a1-9a6a5d5c0b25",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "9dd129bf-307b-4dd2-aacb-6948013e9d7c"
        },
        "item": {
          "id": "21823ad5-dcd5-4032-b836-85af847be701",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "125331db-d623-4d07-8a3d-ed31b0a178b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "9b529495-1ef1-4719-a339-69487280a35d",
        "cursor": {
          "ref": "ccccf8e2-1700-424e-8e42-54870c870ae4",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "df588bed-771d-415b-9b0e-b8ed1e2c0289"
        },
        "item": {
          "id": "9b529495-1ef1-4719-a339-69487280a35d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5f3748b1-56b4-4a70-b89f-f5f29e1ea451",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "9b529495-1ef1-4719-a339-69487280a35d",
        "cursor": {
          "ref": "ccccf8e2-1700-424e-8e42-54870c870ae4",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "df588bed-771d-415b-9b0e-b8ed1e2c0289"
        },
        "item": {
          "id": "9b529495-1ef1-4719-a339-69487280a35d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "5f3748b1-56b4-4a70-b89f-f5f29e1ea451",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2f9e3d1b-8ba5-4bd8-91f1-280909e0999b",
        "cursor": {
          "ref": "25c147f6-2724-4ef2-9e8c-18a4d9682e81",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1eeb0247-2923-4bfa-8aa0-49f091633817"
        },
        "item": {
          "id": "2f9e3d1b-8ba5-4bd8-91f1-280909e0999b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "69ecf826-32df-4b85-b600-8aa8c4b799cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "2f9e3d1b-8ba5-4bd8-91f1-280909e0999b",
        "cursor": {
          "ref": "25c147f6-2724-4ef2-9e8c-18a4d9682e81",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1eeb0247-2923-4bfa-8aa0-49f091633817"
        },
        "item": {
          "id": "2f9e3d1b-8ba5-4bd8-91f1-280909e0999b",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "69ecf826-32df-4b85-b600-8aa8c4b799cf",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "3de7ccfe-0c09-4c89-b41c-0291385fce30",
        "cursor": {
          "ref": "dba147e7-a674-4081-a0cf-dc154fb6c3e0",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "773b1347-647a-4dc5-ac01-8fbf0d08249e"
        },
        "item": {
          "id": "3de7ccfe-0c09-4c89-b41c-0291385fce30",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3337fdf3-cee2-4a7c-9abe-c5987f89a5fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "3de7ccfe-0c09-4c89-b41c-0291385fce30",
        "cursor": {
          "ref": "dba147e7-a674-4081-a0cf-dc154fb6c3e0",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "773b1347-647a-4dc5-ac01-8fbf0d08249e"
        },
        "item": {
          "id": "3de7ccfe-0c09-4c89-b41c-0291385fce30",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "3337fdf3-cee2-4a7c-9abe-c5987f89a5fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "751f328d-481c-41d7-99c6-8e97c0eb2cde",
        "cursor": {
          "ref": "376a5aae-4a54-491c-8f3b-fbe12b6df3f0",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c73fe64e-32a3-4758-a7d7-c173a83e18b8"
        },
        "item": {
          "id": "751f328d-481c-41d7-99c6-8e97c0eb2cde",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1eebcbfe-1cda-4794-96d1-97cc58f2edaa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "751f328d-481c-41d7-99c6-8e97c0eb2cde",
        "cursor": {
          "ref": "376a5aae-4a54-491c-8f3b-fbe12b6df3f0",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c73fe64e-32a3-4758-a7d7-c173a83e18b8"
        },
        "item": {
          "id": "751f328d-481c-41d7-99c6-8e97c0eb2cde",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "1eebcbfe-1cda-4794-96d1-97cc58f2edaa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2f15bca5-1e4a-485d-9d6e-7c306541e496",
        "cursor": {
          "ref": "86740265-ce93-4070-9f8a-c72717a37f66",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "12846c3e-419b-4f7f-a813-7dc4c87da36a"
        },
        "item": {
          "id": "2f15bca5-1e4a-485d-9d6e-7c306541e496",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0115c3e6-9573-4e62-905d-6f7854797efe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "2f15bca5-1e4a-485d-9d6e-7c306541e496",
        "cursor": {
          "ref": "86740265-ce93-4070-9f8a-c72717a37f66",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "12846c3e-419b-4f7f-a813-7dc4c87da36a"
        },
        "item": {
          "id": "2f15bca5-1e4a-485d-9d6e-7c306541e496",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "0115c3e6-9573-4e62-905d-6f7854797efe",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 77,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "113dfb19-a130-432d-af47-6f02ee048c72",
        "cursor": {
          "ref": "e7de3850-e1b7-4b97-95a3-aba295803626",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "db5bd2c5-16dc-4f29-890a-5cbf80ac1c45"
        },
        "item": {
          "id": "113dfb19-a130-432d-af47-6f02ee048c72",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3c4b9e5d-2d32-4e22-b8e3-9e5a6714849b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "113dfb19-a130-432d-af47-6f02ee048c72",
        "cursor": {
          "ref": "e7de3850-e1b7-4b97-95a3-aba295803626",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "db5bd2c5-16dc-4f29-890a-5cbf80ac1c45"
        },
        "item": {
          "id": "113dfb19-a130-432d-af47-6f02ee048c72",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "3c4b9e5d-2d32-4e22-b8e3-9e5a6714849b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "cf4b7908-eace-4ae1-88c2-eaa2d446e1b9",
        "cursor": {
          "ref": "5eb29624-4b88-483b-b3b7-b4b0755fc881",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "80e72c48-6559-42af-ba20-f7b0cd22f53c"
        },
        "item": {
          "id": "cf4b7908-eace-4ae1-88c2-eaa2d446e1b9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "97ce5b77-6e35-4a36-89ff-f8d8d2f704aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "cf4b7908-eace-4ae1-88c2-eaa2d446e1b9",
        "cursor": {
          "ref": "5eb29624-4b88-483b-b3b7-b4b0755fc881",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "80e72c48-6559-42af-ba20-f7b0cd22f53c"
        },
        "item": {
          "id": "cf4b7908-eace-4ae1-88c2-eaa2d446e1b9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "97ce5b77-6e35-4a36-89ff-f8d8d2f704aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "ff77f8b3-0736-4332-9119-67535db09a96",
        "cursor": {
          "ref": "38801b65-2633-4242-b345-8efeaabb160e",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b8dc28d8-ea33-43c6-8530-d6d5bc304e53"
        },
        "item": {
          "id": "ff77f8b3-0736-4332-9119-67535db09a96",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "946c9837-7eef-4e96-b0f2-c112fd44c820",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ff77f8b3-0736-4332-9119-67535db09a96",
        "cursor": {
          "ref": "38801b65-2633-4242-b345-8efeaabb160e",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "b8dc28d8-ea33-43c6-8530-d6d5bc304e53"
        },
        "item": {
          "id": "ff77f8b3-0736-4332-9119-67535db09a96",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "946c9837-7eef-4e96-b0f2-c112fd44c820",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "cbc3866b-db69-4353-82ff-3a24de9a5e8b",
        "cursor": {
          "ref": "a58d920c-9220-41a5-9d04-2ce776371645",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9355184a-903b-43b1-88c3-38061fb79723"
        },
        "item": {
          "id": "cbc3866b-db69-4353-82ff-3a24de9a5e8b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "beee306e-014c-4412-a4b7-adb9ec91554f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "cbc3866b-db69-4353-82ff-3a24de9a5e8b",
        "cursor": {
          "ref": "a58d920c-9220-41a5-9d04-2ce776371645",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "9355184a-903b-43b1-88c3-38061fb79723"
        },
        "item": {
          "id": "cbc3866b-db69-4353-82ff-3a24de9a5e8b",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "beee306e-014c-4412-a4b7-adb9ec91554f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "177a3e27-92e4-4d46-ac46-d8f4ad530d5b",
        "cursor": {
          "ref": "172ba011-6e83-43fd-b231-875dc2eb7da0",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0d34f0b8-0661-472d-affa-d3ea6e6d0f05"
        },
        "item": {
          "id": "177a3e27-92e4-4d46-ac46-d8f4ad530d5b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6d1c5420-35a3-44c3-a427-94512797c01b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "177a3e27-92e4-4d46-ac46-d8f4ad530d5b",
        "cursor": {
          "ref": "172ba011-6e83-43fd-b231-875dc2eb7da0",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "0d34f0b8-0661-472d-affa-d3ea6e6d0f05"
        },
        "item": {
          "id": "177a3e27-92e4-4d46-ac46-d8f4ad530d5b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6d1c5420-35a3-44c3-a427-94512797c01b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "18ad8b4c-7a21-4eeb-b376-1f56bd35de54",
        "cursor": {
          "ref": "648f3170-9bd1-4a1a-97e2-ff219abc82a2",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0a860399-baa1-408b-be21-28e9b1768ab5"
        },
        "item": {
          "id": "18ad8b4c-7a21-4eeb-b376-1f56bd35de54",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7dd26cb2-795f-48dc-bb72-ea5acf2c73fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "18ad8b4c-7a21-4eeb-b376-1f56bd35de54",
        "cursor": {
          "ref": "648f3170-9bd1-4a1a-97e2-ff219abc82a2",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0a860399-baa1-408b-be21-28e9b1768ab5"
        },
        "item": {
          "id": "18ad8b4c-7a21-4eeb-b376-1f56bd35de54",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "7dd26cb2-795f-48dc-bb72-ea5acf2c73fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "5eee5903-65f8-4a7a-b748-934f98169f63",
        "cursor": {
          "ref": "2ba017aa-eeca-44a6-8a54-f95b08e2c47d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cbab9596-0fad-4a13-85a6-1210e62b25ac"
        },
        "item": {
          "id": "5eee5903-65f8-4a7a-b748-934f98169f63",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2c9de8b4-ebd5-46b2-b211-6ce46a64e0fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "5eee5903-65f8-4a7a-b748-934f98169f63",
        "cursor": {
          "ref": "2ba017aa-eeca-44a6-8a54-f95b08e2c47d",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "cbab9596-0fad-4a13-85a6-1210e62b25ac"
        },
        "item": {
          "id": "5eee5903-65f8-4a7a-b748-934f98169f63",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "2c9de8b4-ebd5-46b2-b211-6ce46a64e0fb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "6c089efb-5dbd-4fd1-98fa-07adabc05c4a",
        "cursor": {
          "ref": "5eb83de9-bde0-4edf-ac3a-be29d7517f60",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f7a7fd61-7233-481e-99ad-515e431692c7"
        },
        "item": {
          "id": "6c089efb-5dbd-4fd1-98fa-07adabc05c4a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9932c601-fa51-48fd-9b28-b1f49802ef11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "6c089efb-5dbd-4fd1-98fa-07adabc05c4a",
        "cursor": {
          "ref": "5eb83de9-bde0-4edf-ac3a-be29d7517f60",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f7a7fd61-7233-481e-99ad-515e431692c7"
        },
        "item": {
          "id": "6c089efb-5dbd-4fd1-98fa-07adabc05c4a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "9932c601-fa51-48fd-9b28-b1f49802ef11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "55f22ef1-7d6f-465b-abcb-9daffdd901f2",
        "cursor": {
          "ref": "9013b6c5-b1cf-4957-b3ba-f4c58b4cdf84",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c9aaba22-7f2b-4e28-ac46-cbe980c79ebd"
        },
        "item": {
          "id": "55f22ef1-7d6f-465b-abcb-9daffdd901f2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a9102af3-b086-4836-9a2b-a13ae4e605f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "55f22ef1-7d6f-465b-abcb-9daffdd901f2",
        "cursor": {
          "ref": "9013b6c5-b1cf-4957-b3ba-f4c58b4cdf84",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c9aaba22-7f2b-4e28-ac46-cbe980c79ebd"
        },
        "item": {
          "id": "55f22ef1-7d6f-465b-abcb-9daffdd901f2",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a9102af3-b086-4836-9a2b-a13ae4e605f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "1a6b08a7-cdc5-4bb9-b314-ed14e94f65d5",
        "cursor": {
          "ref": "c01069a4-fbae-47ae-8858-15e231f0d529",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "51d2c16c-33c1-4e21-b976-a1f22e0815c1"
        },
        "item": {
          "id": "1a6b08a7-cdc5-4bb9-b314-ed14e94f65d5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3b95ce00-0144-4dae-b07f-0eb7db3b1eac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "1a6b08a7-cdc5-4bb9-b314-ed14e94f65d5",
        "cursor": {
          "ref": "c01069a4-fbae-47ae-8858-15e231f0d529",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "51d2c16c-33c1-4e21-b976-a1f22e0815c1"
        },
        "item": {
          "id": "1a6b08a7-cdc5-4bb9-b314-ed14e94f65d5",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3b95ce00-0144-4dae-b07f-0eb7db3b1eac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "1800a1af-46ce-434b-84a2-75391df382ba",
        "cursor": {
          "ref": "be515f80-3657-4f3b-b79a-a83cc7491575",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "16925bd1-9854-4e19-96f4-97aa669411ee"
        },
        "item": {
          "id": "1800a1af-46ce-434b-84a2-75391df382ba",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c99b9086-be80-4aed-9ba8-c6b722800102",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "1800a1af-46ce-434b-84a2-75391df382ba",
        "cursor": {
          "ref": "be515f80-3657-4f3b-b79a-a83cc7491575",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "16925bd1-9854-4e19-96f4-97aa669411ee"
        },
        "item": {
          "id": "1800a1af-46ce-434b-84a2-75391df382ba",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c99b9086-be80-4aed-9ba8-c6b722800102",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "1ed7b6cb-156b-4f2a-8a54-697a6511ddeb",
        "cursor": {
          "ref": "e32f423b-f9bd-4f02-b2df-e98c3149aa84",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c159bba6-c32a-4a49-bd61-1c60920e32cb"
        },
        "item": {
          "id": "1ed7b6cb-156b-4f2a-8a54-697a6511ddeb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "75f3b309-6ade-4215-b5ef-6871b6064f0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "1ed7b6cb-156b-4f2a-8a54-697a6511ddeb",
        "cursor": {
          "ref": "e32f423b-f9bd-4f02-b2df-e98c3149aa84",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "c159bba6-c32a-4a49-bd61-1c60920e32cb"
        },
        "item": {
          "id": "1ed7b6cb-156b-4f2a-8a54-697a6511ddeb",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "75f3b309-6ade-4215-b5ef-6871b6064f0b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "0e454f86-07af-4bf2-af4f-b0f619b53431",
        "cursor": {
          "ref": "e4368aac-0ed3-4cfa-96f9-ea25bc511093",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4b294297-a7e1-4634-b960-d96ec6c11ac9"
        },
        "item": {
          "id": "0e454f86-07af-4bf2-af4f-b0f619b53431",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e828a438-4c0b-45d8-8893-043110ebb0e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "0e454f86-07af-4bf2-af4f-b0f619b53431",
        "cursor": {
          "ref": "e4368aac-0ed3-4cfa-96f9-ea25bc511093",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4b294297-a7e1-4634-b960-d96ec6c11ac9"
        },
        "item": {
          "id": "0e454f86-07af-4bf2-af4f-b0f619b53431",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e828a438-4c0b-45d8-8893-043110ebb0e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "0b29a75f-aa2b-49b9-96bf-af8c9af03f4d",
        "cursor": {
          "ref": "58ff1484-4548-49a4-bd06-b6bbe6849741",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e2a0f5df-31b7-4381-9690-a9efb6795746"
        },
        "item": {
          "id": "0b29a75f-aa2b-49b9-96bf-af8c9af03f4d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2b74cf9f-4afb-450e-9565-2aed7cb3df1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "0b29a75f-aa2b-49b9-96bf-af8c9af03f4d",
        "cursor": {
          "ref": "58ff1484-4548-49a4-bd06-b6bbe6849741",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "e2a0f5df-31b7-4381-9690-a9efb6795746"
        },
        "item": {
          "id": "0b29a75f-aa2b-49b9-96bf-af8c9af03f4d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "2b74cf9f-4afb-450e-9565-2aed7cb3df1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "04bb6f38-3d21-4e24-ad71-37683a972b17",
        "cursor": {
          "ref": "e1a05692-1bf1-4bd3-a034-aebd61d01527",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ed004c6b-d568-4262-9873-a330c6c2c8f1"
        },
        "item": {
          "id": "04bb6f38-3d21-4e24-ad71-37683a972b17",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2eb73b10-0115-4e38-9236-537e1b403da7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "04bb6f38-3d21-4e24-ad71-37683a972b17",
        "cursor": {
          "ref": "e1a05692-1bf1-4bd3-a034-aebd61d01527",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "ed004c6b-d568-4262-9873-a330c6c2c8f1"
        },
        "item": {
          "id": "04bb6f38-3d21-4e24-ad71-37683a972b17",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "2eb73b10-0115-4e38-9236-537e1b403da7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "72a64106-1369-4314-9906-c960d740bc7f",
        "cursor": {
          "ref": "0dfed71f-d521-4b86-9d32-3e460f66a954",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2dea4164-91d1-4840-9ffd-88edceb34c82"
        },
        "item": {
          "id": "72a64106-1369-4314-9906-c960d740bc7f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1ac8ef11-77d3-4c18-8bdf-18ce6868ee75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "72a64106-1369-4314-9906-c960d740bc7f",
        "cursor": {
          "ref": "0dfed71f-d521-4b86-9d32-3e460f66a954",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "2dea4164-91d1-4840-9ffd-88edceb34c82"
        },
        "item": {
          "id": "72a64106-1369-4314-9906-c960d740bc7f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1ac8ef11-77d3-4c18-8bdf-18ce6868ee75",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "7712c7c9-a1ee-46ac-88ad-da11e21a2e9a",
        "cursor": {
          "ref": "936379bc-4f77-49a3-9d16-cc2948ca554a",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e90d81e4-2f17-4e20-873c-511a2698c212"
        },
        "item": {
          "id": "7712c7c9-a1ee-46ac-88ad-da11e21a2e9a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7afd99c9-abec-432e-9361-da6c79c7e0ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "7712c7c9-a1ee-46ac-88ad-da11e21a2e9a",
        "cursor": {
          "ref": "936379bc-4f77-49a3-9d16-cc2948ca554a",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e90d81e4-2f17-4e20-873c-511a2698c212"
        },
        "item": {
          "id": "7712c7c9-a1ee-46ac-88ad-da11e21a2e9a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7afd99c9-abec-432e-9361-da6c79c7e0ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "a7b91816-202c-4a7b-81b0-a6bd7afc58ec",
        "cursor": {
          "ref": "0fc1b1ef-9c54-48bc-9ac2-3f9fc0566b0a",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "605d6629-8b09-4094-b49e-4139103f0d83"
        },
        "item": {
          "id": "a7b91816-202c-4a7b-81b0-a6bd7afc58ec",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9dbd42bd-b4f6-4b79-a533-97d639ac2d5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a7b91816-202c-4a7b-81b0-a6bd7afc58ec",
        "cursor": {
          "ref": "0fc1b1ef-9c54-48bc-9ac2-3f9fc0566b0a",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "605d6629-8b09-4094-b49e-4139103f0d83"
        },
        "item": {
          "id": "a7b91816-202c-4a7b-81b0-a6bd7afc58ec",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "9dbd42bd-b4f6-4b79-a533-97d639ac2d5a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "bb06fdfb-f020-4593-b54d-99a720c22251",
        "cursor": {
          "ref": "1ccc61e1-c16e-44ef-98d2-d3c1e89ddba3",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a49ef44b-64df-4084-8933-848c570263d7"
        },
        "item": {
          "id": "bb06fdfb-f020-4593-b54d-99a720c22251",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d2bc9087-eb4c-4408-954b-2ff0b717e7fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 87,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "bb06fdfb-f020-4593-b54d-99a720c22251",
        "cursor": {
          "ref": "1ccc61e1-c16e-44ef-98d2-d3c1e89ddba3",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "a49ef44b-64df-4084-8933-848c570263d7"
        },
        "item": {
          "id": "bb06fdfb-f020-4593-b54d-99a720c22251",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "d2bc9087-eb4c-4408-954b-2ff0b717e7fc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 87,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "657d1434-f3d6-4803-b6d5-de13b5699b88",
        "cursor": {
          "ref": "7d390768-43d9-4a45-bada-2dc66772e861",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b8be805d-8b18-4f71-974c-6f1ccf52ef06"
        },
        "item": {
          "id": "657d1434-f3d6-4803-b6d5-de13b5699b88",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0859a95b-6e93-433e-ab3e-5aa3dcd94ec0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "657d1434-f3d6-4803-b6d5-de13b5699b88",
        "cursor": {
          "ref": "7d390768-43d9-4a45-bada-2dc66772e861",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b8be805d-8b18-4f71-974c-6f1ccf52ef06"
        },
        "item": {
          "id": "657d1434-f3d6-4803-b6d5-de13b5699b88",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "0859a95b-6e93-433e-ab3e-5aa3dcd94ec0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "7d135ae1-0e83-445b-bb21-4b30c5e696ed",
        "cursor": {
          "ref": "8504b4c6-3c49-4de0-878d-a0c04974c35e",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e2ff0956-8c02-4201-8c5b-5430a430b534"
        },
        "item": {
          "id": "7d135ae1-0e83-445b-bb21-4b30c5e696ed",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "719fa035-2e39-411f-bf1c-690fdaa4fb51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "7d135ae1-0e83-445b-bb21-4b30c5e696ed",
        "cursor": {
          "ref": "8504b4c6-3c49-4de0-878d-a0c04974c35e",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "e2ff0956-8c02-4201-8c5b-5430a430b534"
        },
        "item": {
          "id": "7d135ae1-0e83-445b-bb21-4b30c5e696ed",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "719fa035-2e39-411f-bf1c-690fdaa4fb51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "df7f5767-5059-41f5-b572-330fc421ffb7",
        "cursor": {
          "ref": "1f84893c-6836-46c3-922c-98592153d91f",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "80216a11-1d85-454c-ac9b-c11839fe4005"
        },
        "item": {
          "id": "df7f5767-5059-41f5-b572-330fc421ffb7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b5526814-3c44-4297-8a1b-c7cd1d1b2064",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "df7f5767-5059-41f5-b572-330fc421ffb7",
        "cursor": {
          "ref": "1f84893c-6836-46c3-922c-98592153d91f",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "80216a11-1d85-454c-ac9b-c11839fe4005"
        },
        "item": {
          "id": "df7f5767-5059-41f5-b572-330fc421ffb7",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b5526814-3c44-4297-8a1b-c7cd1d1b2064",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "5917ca9b-b269-4dfc-a77b-2d39d2f66ca7",
        "cursor": {
          "ref": "a11c30eb-fb00-4d7d-9425-ce4796e9a017",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "52133230-fa97-4db4-9c69-b998d77ac15e"
        },
        "item": {
          "id": "5917ca9b-b269-4dfc-a77b-2d39d2f66ca7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f5d6c567-3d6a-4639-be23-a33323a84463",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "5917ca9b-b269-4dfc-a77b-2d39d2f66ca7",
        "cursor": {
          "ref": "a11c30eb-fb00-4d7d-9425-ce4796e9a017",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "52133230-fa97-4db4-9c69-b998d77ac15e"
        },
        "item": {
          "id": "5917ca9b-b269-4dfc-a77b-2d39d2f66ca7",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "f5d6c567-3d6a-4639-be23-a33323a84463",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "710deb07-8603-4c24-bcdf-4b9f8f02181c",
        "cursor": {
          "ref": "908bcaf9-962e-470b-bfe0-b5d340e91285",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "82968058-12eb-4545-be14-316915b33aa0"
        },
        "item": {
          "id": "710deb07-8603-4c24-bcdf-4b9f8f02181c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cac17452-d346-4c7e-b93d-3896bf73345e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "710deb07-8603-4c24-bcdf-4b9f8f02181c",
        "cursor": {
          "ref": "908bcaf9-962e-470b-bfe0-b5d340e91285",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "82968058-12eb-4545-be14-316915b33aa0"
        },
        "item": {
          "id": "710deb07-8603-4c24-bcdf-4b9f8f02181c",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "cac17452-d346-4c7e-b93d-3896bf73345e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "0763e44f-7bd1-4999-9a6a-818ead4b2f05",
        "cursor": {
          "ref": "07199f12-e141-4708-838b-36fd40ba1ad9",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "49b03926-7e07-4d39-8c41-d26e1e18ef66"
        },
        "item": {
          "id": "0763e44f-7bd1-4999-9a6a-818ead4b2f05",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7efb668d-0b16-49d8-ada6-a0becd9e249a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "0763e44f-7bd1-4999-9a6a-818ead4b2f05",
        "cursor": {
          "ref": "07199f12-e141-4708-838b-36fd40ba1ad9",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "49b03926-7e07-4d39-8c41-d26e1e18ef66"
        },
        "item": {
          "id": "0763e44f-7bd1-4999-9a6a-818ead4b2f05",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7efb668d-0b16-49d8-ada6-a0becd9e249a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "b95172b0-c838-404d-bf72-d6d6bc894a3e",
        "cursor": {
          "ref": "0e0127fd-87e7-49aa-aaa6-b7f90a5b24c2",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ad8a2bd9-4715-4f72-867a-8821b2b0f15d"
        },
        "item": {
          "id": "b95172b0-c838-404d-bf72-d6d6bc894a3e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d10223e7-c9d1-48c5-af3a-46fafd1f92b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "b95172b0-c838-404d-bf72-d6d6bc894a3e",
        "cursor": {
          "ref": "0e0127fd-87e7-49aa-aaa6-b7f90a5b24c2",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ad8a2bd9-4715-4f72-867a-8821b2b0f15d"
        },
        "item": {
          "id": "b95172b0-c838-404d-bf72-d6d6bc894a3e",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d10223e7-c9d1-48c5-af3a-46fafd1f92b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "2a1a332d-bd50-4f76-b3c2-af3fbf3a465e",
        "cursor": {
          "ref": "a08e90d3-204b-4f69-a0f2-5f622f9abb64",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d348c64-0785-4452-a145-44be10bac169"
        },
        "item": {
          "id": "2a1a332d-bd50-4f76-b3c2-af3fbf3a465e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2a1a332d-bd50-4f76-b3c2-af3fbf3a465e",
        "cursor": {
          "ref": "a08e90d3-204b-4f69-a0f2-5f622f9abb64",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d348c64-0785-4452-a145-44be10bac169"
        },
        "item": {
          "id": "2a1a332d-bd50-4f76-b3c2-af3fbf3a465e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "2a1a332d-bd50-4f76-b3c2-af3fbf3a465e",
        "cursor": {
          "ref": "a08e90d3-204b-4f69-a0f2-5f622f9abb64",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4d348c64-0785-4452-a145-44be10bac169"
        },
        "item": {
          "id": "2a1a332d-bd50-4f76-b3c2-af3fbf3a465e",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "1f321b7e-30bc-4651-bbd8-07872b6de4d4",
        "cursor": {
          "ref": "d9aa8a21-d0e6-46d6-942a-140044dbeb8a",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "52b349fe-233e-462b-a565-e26323ab2543"
        },
        "item": {
          "id": "1f321b7e-30bc-4651-bbd8-07872b6de4d4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1f321b7e-30bc-4651-bbd8-07872b6de4d4",
        "cursor": {
          "ref": "d9aa8a21-d0e6-46d6-942a-140044dbeb8a",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "52b349fe-233e-462b-a565-e26323ab2543"
        },
        "item": {
          "id": "1f321b7e-30bc-4651-bbd8-07872b6de4d4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1f321b7e-30bc-4651-bbd8-07872b6de4d4",
        "cursor": {
          "ref": "d9aa8a21-d0e6-46d6-942a-140044dbeb8a",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "52b349fe-233e-462b-a565-e26323ab2543"
        },
        "item": {
          "id": "1f321b7e-30bc-4651-bbd8-07872b6de4d4",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "456d629b-5494-44f6-b392-eb7969d7aae7",
        "cursor": {
          "ref": "596e1235-c291-4cbc-a0c2-6558c2c5d0e0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2346215a-dfc9-4042-a538-f7ecacbf96cb"
        },
        "item": {
          "id": "456d629b-5494-44f6-b392-eb7969d7aae7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "456d629b-5494-44f6-b392-eb7969d7aae7",
        "cursor": {
          "ref": "596e1235-c291-4cbc-a0c2-6558c2c5d0e0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2346215a-dfc9-4042-a538-f7ecacbf96cb"
        },
        "item": {
          "id": "456d629b-5494-44f6-b392-eb7969d7aae7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "456d629b-5494-44f6-b392-eb7969d7aae7",
        "cursor": {
          "ref": "596e1235-c291-4cbc-a0c2-6558c2c5d0e0",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "2346215a-dfc9-4042-a538-f7ecacbf96cb"
        },
        "item": {
          "id": "456d629b-5494-44f6-b392-eb7969d7aae7",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "bc8778aa-6fb5-49af-8484-9fa088411bae",
        "cursor": {
          "ref": "4babafa4-62e8-4fbb-9e8b-d11d4b4c06d4",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "84868af9-af40-4919-890e-c3897d890f0f"
        },
        "item": {
          "id": "bc8778aa-6fb5-49af-8484-9fa088411bae",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "bc8778aa-6fb5-49af-8484-9fa088411bae",
        "cursor": {
          "ref": "4babafa4-62e8-4fbb-9e8b-d11d4b4c06d4",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "84868af9-af40-4919-890e-c3897d890f0f"
        },
        "item": {
          "id": "bc8778aa-6fb5-49af-8484-9fa088411bae",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "bc8778aa-6fb5-49af-8484-9fa088411bae",
        "cursor": {
          "ref": "4babafa4-62e8-4fbb-9e8b-d11d4b4c06d4",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "84868af9-af40-4919-890e-c3897d890f0f"
        },
        "item": {
          "id": "bc8778aa-6fb5-49af-8484-9fa088411bae",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "81af01e5-abfe-480a-a594-11c8087b693c",
        "cursor": {
          "ref": "2bf4a747-822a-4311-bf13-ddc78fb75173",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "92d15898-b712-466d-9b28-bdcb4f92b9d7"
        },
        "item": {
          "id": "81af01e5-abfe-480a-a594-11c8087b693c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "81af01e5-abfe-480a-a594-11c8087b693c",
        "cursor": {
          "ref": "2bf4a747-822a-4311-bf13-ddc78fb75173",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "92d15898-b712-466d-9b28-bdcb4f92b9d7"
        },
        "item": {
          "id": "81af01e5-abfe-480a-a594-11c8087b693c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "81af01e5-abfe-480a-a594-11c8087b693c",
        "cursor": {
          "ref": "2bf4a747-822a-4311-bf13-ddc78fb75173",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "92d15898-b712-466d-9b28-bdcb4f92b9d7"
        },
        "item": {
          "id": "81af01e5-abfe-480a-a594-11c8087b693c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "1a2ea2e9-bd74-4fe2-bf9d-5c4850203a05",
        "cursor": {
          "ref": "892e6b8d-60f5-4c18-a7c3-ac5c393a604c",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "473847fd-4c7e-4861-bc4a-672050729dda"
        },
        "item": {
          "id": "1a2ea2e9-bd74-4fe2-bf9d-5c4850203a05",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "1a2ea2e9-bd74-4fe2-bf9d-5c4850203a05",
        "cursor": {
          "ref": "892e6b8d-60f5-4c18-a7c3-ac5c393a604c",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "473847fd-4c7e-4861-bc4a-672050729dda"
        },
        "item": {
          "id": "1a2ea2e9-bd74-4fe2-bf9d-5c4850203a05",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "1a2ea2e9-bd74-4fe2-bf9d-5c4850203a05",
        "cursor": {
          "ref": "892e6b8d-60f5-4c18-a7c3-ac5c393a604c",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "473847fd-4c7e-4861-bc4a-672050729dda"
        },
        "item": {
          "id": "1a2ea2e9-bd74-4fe2-bf9d-5c4850203a05",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}