{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "444aa5ed-affa-4125-8965-56fdbac145f5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "fc8ff0ed-7cc0-4b9f-a2fb-f0fada07e326",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4377d018-f632-4d1c-a24c-13865c628bb5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "5b44aef1-34ca-4575-8e6d-84248a71dc8c"
                }
              }
            ]
          },
          {
            "id": "d90fe6df-b816-4e2d-87e0-27b60cb8e4a7",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "10269509-d1fa-43ae-9ffc-f32dbf784631",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "52fd8497-2496-4686-aa7a-6332d475adbd"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "82b2dd4a-2561-4376-82f1-28e1fa305171",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "7a66af42-70e0-4526-a718-6b4908713010",
            "name": "Positive Testing",
            "item": [
              {
                "id": "605c9c6d-4750-4ea3-b03c-9f59f723517d",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "93355173-661b-4077-acc8-5b858da6a1e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e44db829-f2dd-47bc-aa20-1847b8c6245f"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f851609a-5023-48c3-8282-d622a3f63114",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93aa1eb9-f5cc-4d74-9b01-2b91f196cb07"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5499205c-2e03-4d49-92a5-c069f9652d82",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "352cfcbb-29bb-4afd-9b43-57bf604e8538"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f373b19b-0c2b-4825-b8cb-a66da5f5b45b",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0cc6babe-37d6-42eb-aee5-08e38de29bea"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a8ec2e65-148e-4346-ae06-d36b61b4bd20",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "09348e3b-91ad-4b47-9323-d32c9286b72a"
            }
          }
        ]
      },
      {
        "id": "e6b2af66-7f87-4337-8b50-2cbcd5fefb4f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "affd10e6-2d19-4a69-a224-05d70cab5a17",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ce58d05-8434-4965-be16-9d106a94fbab",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0674e51f-0fd1-4b9a-8137-da387d9ba4f2",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "080e96fc-2322-4d6c-a293-91afc61df7e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bd71672e-58a6-4120-89ec-5a721ac396d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94ed1610-6ddd-4862-ad7d-14f0c834af9c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b97c7e-5ce8-4a55-b64d-e023a09c2dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "374ea882-8e5d-4cce-972b-42be64c03931"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e824d07-2eaf-499a-8244-cd24d4f34abf",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7160dc05-29ba-4097-aca3-1a0355fa8869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cb0e6dbe-3b57-4595-9b1d-bcb4785aba1d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b9a9af2-717c-4020-9020-fe326b2ba5d6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8013ec31-97a1-4deb-8603-7161bfcc3c52",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3415aaab-6045-4771-90be-045065318145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4b21fe4-8b49-43f6-b63d-6e922d62bdd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67305e3f-ef0f-4bd8-9548-5c1e4d3aa261",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59933e40-8271-4f36-be99-d1f746298747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f47c0f7-adb9-4038-8b4b-aeef24faf0ed",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e5d627-f503-41fd-b2a6-d4956cc74769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3be8701-a314-4c32-bf9d-19dd097054c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1dea12-204a-4bf9-b831-a1b0300a3ac4",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "da706f0b-fd82-4e91-8422-5bec273bee60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "af4f4330-fe67-4dcd-91e1-43ed167f7ede",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d227dba5-cca5-48c0-96b6-41a6d755c4c1",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09dff055-e8ba-448b-8629-57194f341753",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "526fab27-577a-4b8e-84be-c5d66287bf54"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c9c3120d-8f33-4b4c-825a-a96d17d35287",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "6fea25f1-f799-4e3e-8c52-663b17ebd4d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "913360c6-84ec-413e-add8-af661bcd557f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e15a95d7-e7ad-4e23-afc5-db5dce311949"
            }
          }
        ]
      },
      {
        "id": "81aaf59f-8696-4237-8a8c-b330ea32698b",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "0e576174-8206-44de-bd64-2424b01e3b83",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0b605254-d616-42db-a6f7-f900d702b588",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "8bd8dfd4-f433-4bd4-945b-4dd7b2f1d583",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bff1271c-70b3-4da0-94cc-bff71e3ed98e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e533b21e-4083-44ed-9f82-1d44ec7ccb50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868d056c-2345-47a4-ae91-65a806f4f752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df849b8c-b56f-4f18-8359-8aee2100ab61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f6b3edc-4241-47e3-a74e-0b857e9fabfa",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7a0dbbc-2f94-486f-bcf4-4fe672a00cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5b4fe6e-a059-4fe6-8857-8c5273edbfe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ee05e11-00d4-47a0-a959-a800f8a17279",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1f610645-8584-4c65-b8a1-1cb81b02ebbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03cf6111-0199-4a9d-b56b-0d70827bf4f0",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "100a569f-af6d-48b1-bc02-4890a066431e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b287b0e-1193-490e-a7d3-87b1e103b8fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ab02e3-62cc-4d67-b5e1-13a5d28c1be4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0797885-50eb-4a93-b8c0-edee8ab5e481"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94e9e8ee-a8b3-414e-aeb4-b9c655ecf9d2",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0eb07013-d814-4590-a15f-d31cf110646f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5caea9f-f70f-45b2-a1d0-f3e6b56b456b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c831e0ee-a6bb-457a-bcd2-030952d474f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "556fcefc-cf1e-4a76-ae73-77b7e09d513e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "069c43cf-a7c0-4e77-9148-a3fbf3a648e5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b6e2a4d-991e-47ff-bdc9-507585e37784",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dc56049-3a66-463b-a918-74b8740be246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45a97501-165d-409a-8bda-242029fa8e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4731951b-4915-4414-9644-0e41db26db2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "567aef0e-f472-44e9-9ca4-cd8d0a3e2278",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05dd165-5fb6-4c29-9ce8-db5ce3aa5019",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe67b080-80f4-4e9f-9d01-a31a2ea76da2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2f8c43-f5a2-4962-a5c9-58293f2caf4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c82d541-739c-41d8-bc8d-a52aa5e4ec45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b366b5b2-92d5-40de-9149-ab811780557f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a51a45a-abcc-4842-98bb-0934374d764e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de35dfa-1687-46bb-a1a5-0129dc39b5d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f35f4cf2-e691-4a5b-9fb0-b4ba35ff9d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "967a5901-bd1c-4496-9dc3-71b91d873658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48717c04-b786-407d-a385-663993d4ba85",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f7fb806-dcff-4d5b-8f8c-e7a686b4ac6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d3ef0c5-e2de-4899-9abf-936e80e40260"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "642c935d-2119-4212-8bcd-8441fc954f25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e27f5f74-c644-46ba-a9c2-217872838fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b428f310-d760-40dc-ad96-b16c536995d9",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71098a8-e604-4506-88a3-23aedfb752a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "480f8d46-f664-4c8c-896f-9ce12d7a0378"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cab65165-f500-4a70-909a-ac9fdcfddb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c0a531e4-89b9-466a-93eb-0910b4e9b644"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce732cbf-b0c2-4b47-b1fd-66692797a40c",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f566417e-f705-4622-9d9f-20b4d601da93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9a526e-ea58-4191-9903-6b2d801afc37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da4012e3-67d1-4c0f-af3e-1cb70b524dc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "74388b57-fc49-4453-8b1d-76e564d509cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481ef5a0-f669-4c54-989c-99583047da30",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2876c91c-6ec7-4087-8e6c-d416cc8ab1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12018909-d8e2-4a53-9838-ec2c1875373e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f75e5c0-d134-4f5e-82b5-36ae6cffe595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6f0adbe1-81e8-4c38-bc8d-ff3e1ba0ff41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b752870-98a5-453a-9a23-88e42038ac4b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "512ea204-e3bc-4431-a7a2-fbdfc0eb1f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a75292c-242b-40e9-a151-442953859c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b3497a8-e7c4-4d75-8381-1ea8230c928d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "62fa0b9d-dfb3-4f07-8554-d50fe5341cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1986c594-c883-418a-8d73-c1292fc30fb5",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d3e0a0a-f44b-499d-9d61-cab18e206d8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ff7888b-d77e-4cda-9892-62e19bc8501f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f446fa01-de35-4590-aac9-c36b1a8c6600",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20252f24-8ab2-4791-9878-ca3ffe2d4044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ea820b5-4790-4e9f-8767-9ac654dd23ba",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7970d1df-065c-44af-90e2-345df09d4d86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e20b278-fff3-4293-bb05-2fe20e151833"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67af4522-dfc8-4f97-ab8f-3f40ad13cc1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "538adced-4696-4c93-9698-165d6cf823e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5146449-b34f-49b4-b4cf-0d142dbd16a8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d96bdbe5-d752-4948-ba2d-5637502b5952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a1676b-35d0-425d-9162-3902b43c1dd6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423ef867-c3f8-4517-8efb-ae1b2035b68b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "caa67bc6-690e-415a-8867-f0d2c4704047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd1ff9f-28f8-4ef8-9cea-10ed089ed9ff",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039a1473-8b3d-4738-999a-81bcdf7ac86e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7488fa2-36d3-43ad-9de5-0f5d1affc2eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ececc133-7e4c-45a6-92c8-1c7844f3212b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d08f681a-3411-4215-bc68-86f657605810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1b2c57-9060-4a9e-a82c-fbdd0d7fc484",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9caf777-c8e6-415d-bf6f-b1e7d66d9057",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b1da56-509b-4aed-98b3-525f7c9abc6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa196b74-d6c1-44b7-a9c2-36b9e9f4502e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5e3542d9-6b5d-48f5-9e3f-6ed8d6aa67af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af82f3b-48cd-4637-a47c-33876df1cfa8",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c99e09f3-e9df-43e5-a32c-1cc29209cd2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17f37169-1cc7-46a8-be3e-5169617177e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d6c3c3-9648-4a7e-bbab-c8014c1d32d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c113f5ef-3092-40a4-93a8-2f3321671b22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed87078a-4e45-44da-b8fb-f285471b1ad6",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2dfb179-2cdb-47b8-8710-d2599004e874",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f632addb-0142-460d-a61e-2f058e0707bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59a5c87f-9d7a-4e64-bc52-d41832f835d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41658bf6-c010-4196-9ba4-50cc40ab92b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561e2ac2-e87c-4f46-847b-f4d1fb8903c2",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1987d1be-2a58-471e-a9bf-c1cf60c1390a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcfb185c-0f72-406f-b0d0-6f96491f9457"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6733b5c-19f5-4dbd-977e-a3f7b546c99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "6543689c-7337-4012-a1db-da175a614655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ed673c2-080e-48eb-9f5c-a6a497cac6ba",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b56623c-f912-4e50-a598-4b31916f775a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ba6bbc-e9eb-42f7-8ea8-a03710bac191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7178ce03-551d-43d4-ad09-a2ad2785cb4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fdce8167-5a5d-4026-93c9-eb6358c06f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "123d850f-80a8-40b7-b0c7-7ac27ca11f01",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76804eba-e160-4468-b9b7-33778cd88a83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0069dda5-b4d8-4981-8988-513dc64b81e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27d6c95f-854e-4a1f-8a50-dff7cc0e252c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be5f199a-b991-4ab4-a313-31e91471e21b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6bbbce-b53f-475b-afd3-de119970069e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85d713cb-eb53-4ee1-a8ea-8d93257e8f0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "923ff907-673f-4a3c-b1ac-c914ca4499bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd077822-79b9-48b1-868e-8a0966001800",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5a73d98-a20f-4985-a997-96ae7e13c193"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8e42398-14f1-41d3-95b2-2c7526a7966e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "608f00a9-2d14-42d0-9932-c236ced7e9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a31de5e-85ca-4a41-b483-d7155e3167f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b378871-5025-421c-b467-1707823e7ade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "86fb8f7b-e750-4104-bda7-67d827e8ce0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4b7696-a004-4b1c-b09f-de75196dd7b4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92177e90-aa12-43ab-9310-b64229ebfadb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04878db7-eba6-46b8-9a6f-79cea076ad33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ff7692d-8f52-43ac-b40d-702c7fb923fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a3ef9fb2-bfd7-4845-ba41-0705c501c538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e93447a-8674-4a1b-a429-20ec9df9992b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52087f32-8692-4a74-bcf3-ec16092bb7ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56e87f18-38ca-4878-b284-7242aac9a3d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "734d97e5-8446-4fc8-aa6d-7052169bf002",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3d9eec6e-1d61-42a9-b3d0-017b5a318b14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89c21725-6214-4725-8cb6-d65c84a117fe",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d040e1c2-7b06-430c-a676-dbc4b093273c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c72f0f5-5cf6-46db-8e27-3561e763dd95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bdcb7f-ddce-4f87-980e-4e631a1b4d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a7a0d42-c251-4565-a887-c9682248f00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6962932-afe8-41fe-a7a1-4e1199746221",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2718e8ec-8418-40d2-9e5e-7c4056cc47ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b7ceb77-d6a6-4bff-aa15-695980e37bd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d036f78f-dbfb-485b-bd74-221826d2dd7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7c1d63e7-ccf7-4ea3-a0cc-36797190b0e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "608b64d7-32e2-4eb9-9962-96fa75b4b242",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "827ef722-62f5-4d65-9eaf-e7377bf9b1f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53b22b4-1fcb-496b-af35-2a2f48120b4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb5ed5b-687d-44c6-a4c5-7a0915532204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1bb4afcd-2af8-4acf-923c-a62d0d059784"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac3f2e14-6640-4fb8-93c4-4076970a7dde",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3eca4805-9997-4fdd-9f01-c4a48accdb36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19ca9015-ea85-4931-b0f2-27cd05930ff0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d529f7fc-7f1f-43c1-9116-fa2bcfc3d8bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd871102-eeff-4881-8368-cf66999f3547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6638bb2f-b382-4f88-af46-4ef3a231299b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "237859bd-d8b8-4e8e-bea7-32fa7522d4e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d44778c-e95c-456b-be1e-0d18a595a400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d32dbde6-b4b6-4f93-9dc1-98571e0aad04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f6383a-51e4-4bb3-bb92-62ef866a9d5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ff1119-950a-4c8d-922d-5e4eff939e97",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece8d596-b4b5-4085-8f7b-fa22cfe494bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb9ea568-32f3-40a4-bfe0-7e666c67b37c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cc6529c-3e98-4ef8-b531-3b96a44fadcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e6ff40f-07f2-4160-8969-9a3c550ae5f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32633ebe-ca3e-4936-97e7-ba6a8668a35b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372c319a-6889-496a-affb-0ce48e24bdf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f7a4110-33c5-448f-b503-59a0728857a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267b50cd-dde4-4b1d-b7dd-7ffcf6a5cc8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "df8a41b9-f0d7-4c1b-b899-ac28a813fe14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0ecda20-0299-494e-9910-750c33379fb3",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45d6d03-cb3c-4548-bcfc-459a0f5a8256",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e96678-8246-42c4-8c03-12ba3c972cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b19f801-50ac-4ca6-bfd8-d7bdc6beba64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bc7273d-e19e-4ce0-964b-9e1c25ad2f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "134670eb-f2df-474d-afc5-edc55a148134",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f5380e9-519e-4bf7-8d94-20acf0aaa19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65fcf560-018a-4da4-bac8-3fe800a5ad68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0581a4ad-17b9-4403-a867-75d4977a41e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c1eb167-31d2-4575-9a40-e7deb508c35d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89bd5a63-d8d0-40a4-8498-8059cf545f90",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95f8d039-dd24-4904-b585-bcaa868ea300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb907c2-eef7-4ae6-8147-2e58701b8d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bf9bb69-abaa-442c-954f-d9defa48f779",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "789b833b-6496-4881-ae8f-ed389d03a89e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d834c49-7a58-4dff-9e62-02140c3f0c8f",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72ac8cb-5870-4f7f-af5d-be94b2d69fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89db955a-2af4-4fcb-8bed-656b1c2e0c12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26dba014-0bbb-4fc3-8f90-25c81fd56981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "78734cfa-f45b-44ed-b5ba-ab9a4b598d9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87e8a00d-ef08-425e-a358-4583b30b2531",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ed4a54-b852-4f1c-bf24-51fd3218c3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d9bc6620-b09b-4b7a-82f3-f9ca2a4f1500"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b18a53f-b1b0-4ce6-866e-ef4c79c9a73e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f7fd4528-884b-427e-9abe-98cbb44221bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cb76cfb-50e7-4055-98db-aea613edb516",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed87d20-a9ab-49f2-8e2d-3066779e6cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "477d79cf-a7c4-4183-99a0-8c4a045539cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70587692-9042-4259-93dc-4a4e9d64396d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e850616-1caf-4466-8460-ae29875ab607"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7491060b-4268-4e38-b1c2-8ddf13c98078",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a1562b-4725-4e5b-bf5d-e777daf22e8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40dfac52-f80c-4bde-80b4-c9efb447bda6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb643a2e-a48b-4f93-bc75-b7610194f2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad71c670-7d7b-444a-974e-cdce1c86eaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1441f2a-fd60-4271-aace-43523e6ef778",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4367781-79fa-415f-b2c1-53868a4acc2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c10068c8-cb96-40eb-963d-6afbcde9eb32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5fe109b-5f8e-48f6-8774-d9c82d82ba8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f8f06aec-3b8e-47c3-947b-33352d7d1d22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c66362f-864c-4c34-bdc3-2ead06546cd3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83caa591-6099-4db3-b9b7-308c3a2740cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6f81ec4-370b-4bc3-96bb-d6ce5c6c6c18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22032220-adf8-4a23-942a-a0ed1a6d47a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "02247dec-1421-4baa-8f6a-852f77328282"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0def3bb-2b0f-46c4-b98d-832f3b78f5b5",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9d8da0-7c3a-45f5-b60b-1e30d59037ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ca0bb3-cf6c-41b9-b7f4-426e979585ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03b5b64-2c3b-4968-a066-2b74e84ac776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bac01712-3d45-42c5-8026-c6149130754d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad1b745d-e86c-4fd4-adb0-0fb986ad3739",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c15fd8-c75d-423e-970c-e50f4567f11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af03a44c-2a82-4f1b-b1a6-745e4034499a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f5bd6b-2b23-42e6-abe5-17365d08cd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "1c32cd86-1b39-43c6-8fd7-bcbbf33f4e61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24c2c07-092b-4592-b7bd-fbc671031525",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62929d5d-fc6e-451d-8dad-07a9f02477b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e633b5c-35ee-4721-863d-9e525d061152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c8b732-8c4f-4bf1-9f51-b6e615ba254e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "1065f84a-5298-4fd9-ad41-4798b215fb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "619cc236-687f-45d6-a35f-9823bd941ec5",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "863dddbe-186c-4dcb-ba54-780637d96876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "688887f4-a2d7-452e-b622-549fcbef330a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c920c8bc-510d-4dff-a520-1b5d6ce2db3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef48b6a6-d7ab-4ce3-8207-1b8f77b85395"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7844baec-6829-4f5b-95ad-e946e13c6898",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b63b580e-5253-4300-997c-03020a73316b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72ce9876-7042-4f9d-8511-00d9c43dca54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ce5ef9-c2bd-4970-bcda-a132b3f7edc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "db6c2e97-7669-4616-bd15-e8a622dfb7f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d25c5567-cd1b-483b-af5c-f46613579bdc",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf3e56ba-ff30-41a6-b995-60b87aff8e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bfd13b6-d636-4389-bf1d-2bc7c92891a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f640ba2-8039-4322-b628-46bcbba74c9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6cc24077-5316-4e85-86d4-00b56ab6afde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b980499-64d7-4944-9eaa-6ab1c70ede7d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7ad39ea-bd76-411c-8cc7-bbede2a861f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1bea68-c33a-4306-a653-657ac02bb636"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5910c78-5c38-4fd9-b4a4-db2b023c26ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9edddf6d-9504-4efe-a5d6-07e8ce735408"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1620ff1-9bef-467e-840a-ba7b88e562d3",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f586d0-d97e-4c3e-8cf5-8525cc34a097",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "670bcc8c-4d9d-43b5-b1d4-b742c8fe0617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14a0e576-69c2-49d7-aa39-a7b6e6defcd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0b56b24-aa4e-4f30-af16-e52e3268ed3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9c5e6b-dc2b-415a-bc9e-f488a27eaa37",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e726e959-a2ee-423c-a192-3b68df743892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "660a2f78-39a3-4dc4-8d6c-eaf55b84a080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "863a7159-9377-4245-ab85-22cef2749fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "11bd7780-849c-4046-a942-34b77993bff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fa9233c-a7b3-496f-83d1-e63fde721275",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac57f958-daae-49a6-ab9e-6031c59bf31a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51ecdcb8-f51a-4c8e-bd0e-6f26959fae6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1d70481-b084-474d-8359-142f432c5aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd115d7-b28f-4fd3-ad20-4c5017a364c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b92f6bdd-e2f2-4f1c-be5c-7692560f2f67",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6770911-f325-4406-82c1-f2a25a8649aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18919095-1a3e-4aab-9dc7-2459ddc17b17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b345a6-afdb-4af3-a5e0-d863e2627cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "a98c783a-5a7d-4d26-8337-e01d64e8312f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfa2492-6f5b-435c-b9e8-b04d7ca96b4a",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42797346-e732-4123-9e4c-b335d1cc3395",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "704b33a4-207e-4455-b097-87b20a997578"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c51c2c3e-24a6-4542-8fe4-fa1eed68c537",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a872d673-ff70-4637-b54e-6fbe733f97a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a24493a-a58f-4d36-8c79-b8f3d6768b20",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cc5a330-0e47-4710-b7bc-970d903ee513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dac44e9-e80e-40ff-bede-23a97d50ad7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6115be2a-3664-4654-971d-40af86dc6e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a8b8d3d3-5bdd-4719-85ad-b7ec662c33b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c75e541-33a0-4e4d-9325-772f4473800a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8031b33-ae1e-4390-9c66-77c826ae428e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c99527c1-aa33-43c3-a3c9-a4146b2078ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a50883e-f4f5-4d8f-b0a8-3c89f72a66de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1de5a348-5d12-4547-bdf1-21741291a876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b30bd663-ca34-4b6b-a1f3-81d9c9b970a7",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "633a9769-fa9e-4d1b-86d4-95e5563a2db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "770f69d0-67fc-4fed-8bfc-d6f4c18a9eb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d4b6abb-2075-4830-bd87-87398e292754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c8d40d5f-b3a1-46eb-9ea4-403492c6a4c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db13af06-8497-46d0-9e20-ceba4939ab2b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ff7a4c-60a1-488f-b136-2427ef5a0e0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "288b2e2b-dfc6-4669-942d-2d6d6a1dd747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76e27ac8-4050-4918-9eea-910c5c3f7c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b0441e-0ef5-44aa-934a-5e156e690f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "595d385b-0378-466e-8d7f-de688ee94e4e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "462fe0b4-24db-4b97-b14e-49eefc2d8672",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d972623-be7d-4a36-b1d7-be1d6351ddab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01fb601c-9f9e-4481-9e38-e38fdc708868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "428bd372-e37a-47a6-aeee-4382197e603d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3285b75-b928-4850-ba3b-8723ae236d2c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845e91d7-9d64-4696-8da5-1a466120dfe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ae0529a-934c-4893-b774-1deed0381f16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d0878fb-d9ff-43d9-8da9-414eb4ebc29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2c4a3962-c5e5-4e9e-a159-b5ca7a5d0243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0757f2fd-76c5-49e0-acdf-1786696554c2",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bba13fd3-0cc5-437f-a5d0-59300629a1e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc1aa217-60b6-429c-813a-07a0b7f42668"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1ab306-a84b-49c5-b25c-90ad53f52001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbe9d8be-2547-446f-bde5-013625afa165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61c20cd6-4497-4818-98c4-3431dfc82fc4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a3a337-f395-45be-8850-905c8c775d0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d51fcb48-bad8-4e0c-a282-0a56e80572b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58ff3347-1de6-4994-8aaf-5e7aea3d7ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "a36ab216-f03d-4a13-b6f2-c99ee623c761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2adb3c-15e1-4d2b-88fb-ed0b68925aa5",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e06a889-a96a-4830-a0b3-e279721d8f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4a8e052-c598-4591-a8b5-985d1dec54d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9ffcd61-db2e-4f87-9c02-05c3232581a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "76f81d48-e55d-4dbd-b281-bbd9b181dfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161cdc21-0ea5-48a5-9942-1d647b198e22",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "345eaef7-7d98-41a0-a14f-edc497df8239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1ef5043-55d8-468a-9fd1-dc57f5dab81b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78acf643-5c0a-4ddd-acbc-08637109a453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "1681163d-6fbe-4adc-acb9-3c2bf284e465"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7deb1e3c-5378-48f1-9489-e5143d04fc75",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b93fbdf6-24d7-444a-83ea-311b304eaffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aa7b142-e3f3-4bba-a71e-4015fe9efe1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2336e6d-d6a8-4f38-940b-106342a07335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a062ce6f-8180-4691-9a60-a2080882c7bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0916bd8-ff08-4a77-8911-c3e40c68b215",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f08b4d-0cd2-41a4-b9aa-5a099db66f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f94b26e9-9f94-4ac1-8743-9bec99db739a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a354764-4e5d-4c24-af53-28ee46b4fe3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b01a5fae-0512-46eb-87a9-16a59d0c2e16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5caca292-06e9-448d-8cdc-588179e9c484",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b2b4197-6d5e-4aaf-b798-85b13638d317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e1c42a1-040a-40ce-8bf3-4648d9ffe4e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a04d1170-b895-4418-a525-90893f1cff6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c32fabab-b187-494f-8355-3073050d093b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a03a8966-32f4-4d46-b547-02d5d4e2a347",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25abce35-bd03-44d7-8b58-a5129c624b6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a5584ce-74fe-4ca9-93fd-1ec776018a10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee1205cd-026c-4c4b-b61c-484d21be62cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cca3ffea-f15f-4859-aaa9-104042f4424c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cd2c3e5-3d16-443f-97ce-f41017d0aeb6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578a0584-4324-4fc0-902c-792fbb3cb358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2db14b2-fbd2-4e65-9366-058387a56866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b8c4ba-caa5-492d-8303-d0cf28a942e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1b42f68a-6a7b-4b01-a0bf-6cc283efa732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fe10878-3e3e-4a2b-b141-f4e4040fc065",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0025cd0-1b6a-429e-90f7-9be71ba35ee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74d52c4d-07a1-4a06-be7d-9c70ea40f329"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e0e9975-f894-4a40-b78e-a75e945cbe4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "30257c10-ed1e-4179-91b8-fc41f4b3b342"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00fe8e51-85be-4924-884d-b9e2c7ac8acf",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d91aea4-0d1b-4eb1-b143-e353a9121817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e07840-26ec-478f-a291-edaa11b52b65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4616381-2fdc-4cf4-928c-ee511cd070ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba9e04ea-7936-4d6b-b600-b2578e1aa757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e43966a-8d69-4697-9b34-be32ad57ab89",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01958f6c-bd61-4816-aae5-604b7958b660",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b38dcd17-5680-4539-8671-e28da48b30cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8adb84-41a1-490c-9fb6-c56228e05af0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2fd4fe-e757-44ae-83af-69162c6cd061"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66edc710-7220-47a8-8fde-a7cba1a142f2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c77832da-1b43-4889-9df3-43edfff35326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1764936a-64ea-456b-ad2a-9532be01dcfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08773dc8-a957-4ead-9574-f8085ff983cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "010b321f-6b51-45a4-92dc-bd24ebe4c36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b30176-28b7-43a2-9602-a59f8eaeb661",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47acdf36-52b4-47c8-9522-80d3acf1d6d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f656d32-2d38-4485-a562-4e5ddb494ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61a78028-8508-4b21-b835-ab5611545b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfacf81b-2968-4e5b-a257-a290a252dc78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dd2f9b9-e6e8-4db0-a897-7ae621fc570a",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fdf494b-8108-4f01-888d-aea4ce04f034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06735e67-75f7-4785-8cd3-bf291e43fbb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5456959-e47a-436b-9241-0d4ce06a79d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1be6e0c5-c63b-47fb-bfde-38d572d3853b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f315d1c-4803-4648-bc68-d344e765e805",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5268ce08-386f-4242-a904-d56cf4d9b755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5547697-7232-4a94-a136-844b5db6399b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f28bbb4c-93d1-442a-85c2-4f901bbc7f17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4da2271d-be93-46d9-ba40-3796ef5401be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98952419-ece3-4843-8441-61cb73825615",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ee55ba-d45b-486f-803d-08e3215d249c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ab5b4d-be60-451d-ace1-b8b848baafa7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2058e78-f232-4f5b-9843-9a565e4e2928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5e866b-ca26-4857-98f4-6973012a9a88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c329d3c-f6fd-417d-9157-c4106f2b02d1",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c7ad8d-72da-4e99-a069-59fc4da5236e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef5aa36-7269-48e6-845e-92e6da6790ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1892bf5c-31ce-4e15-9962-4cec43ec957c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "816fa61e-a225-4bac-bb66-8f92be79450f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05eaf108-17ea-4f35-9063-e36b4b3ba677",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e48a8fa-d0fd-42fd-9c27-53516313ceb9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00f56388-c9b9-441d-828c-8dc1d5c84e6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d6cada-ba88-4ef0-a045-eacf0caf5f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "734ec1cc-3dfb-45a2-b067-acc6b16e3172"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab9acb6f-b388-402c-8120-21ddd4d9d985",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba134db-0ab0-4a7d-b3ae-0aefc809361b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeb61538-ce3a-4df4-b909-a971485bd330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ec60b75-cf22-42c6-93d2-48abca5afe13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2d648f67-5fa9-440c-9183-556e6a9fbc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24724cfe-2bfb-491b-b490-0d3ac19f3883",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31b65c7c-3b90-417c-b415-871a55bf0500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570399b4-9062-4b25-8951-ab525ca81ecb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d44b3dbb-d2de-4cc9-9183-ee2ee3880e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1945455b-5516-424f-8829-581ece2d3cc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "953dd552-4e7e-46fa-b49f-046738b0a601",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3b80ed-6860-4602-a7d8-77cdf537c2cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9f5beb-9440-404f-bbea-4e72598fcc96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701983f1-4484-4860-80db-0ef1b861d4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c1b87021-311f-4ea9-bfd1-b723a9d84865"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced82e67-ff1b-407e-8aab-f859c76a4f76",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1c191a4-0a1d-4e62-b8e8-3697dde5a274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e519f75-e8a2-4c24-be68-fea1e54cd140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49698e7c-bbb2-48d0-a217-4f0355dd6977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "aa924c90-cdbf-4b76-b435-4b71ccc79c3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4377a7-ab18-42d9-a47a-b3880792cbb6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f80357-229f-46f5-b985-466e4480604a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83d6e826-cc63-4393-bb1a-4cbe5c5362b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86725dcc-5ee9-4bcf-b992-65ac1a8a1e60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffcdce05-7db7-4cbe-a546-6d31f85e0039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18db909e-d326-42f5-9a32-b21bb970ac27",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e0b4663f-f518-429a-82e3-2e3d2281c4c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41f5c47-1346-44c1-b786-b41d64b89aad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6219e6-7606-4adf-8580-5f8bc89c21a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "31907b8d-cd30-482b-9677-74b98d28907e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ac056bb-239d-4b5b-87b4-685535162bc5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9615d47b-64ad-49ac-b474-a5dbee0b9dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e30e2cc-2c29-4ae2-9b72-86a116acab15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4244e6-9935-4ffb-b812-9e10413077cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f54773be-086c-450d-9c63-733a2cdd0ddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2bc9547-d098-4d03-a16f-77f176c09910",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08329cd8-fa30-41af-b870-cd8082b1fa84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abd2fe45-11ef-47cb-a82d-665461b61b5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3160134-ef79-42cd-aedc-60e1335586b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "cab0a4ed-00d7-4329-b8b0-cb62767e22a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "796e4900-05a0-487d-adc6-b8ab32684979",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16905c9f-f1cf-4231-8100-1f75d92e967f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9997bdc4-b8ed-4247-9739-f290feb430bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e281e6e-d82f-44bd-8685-d2fafdf61dda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "f6d3a898-eb44-44f5-bb7b-1f92228d5f61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31545938-dae5-4edb-8a52-5c014c000676",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "784cce4a-b1fd-4465-bce5-a21b57604990",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b190a3d-d028-4eb7-b13b-9ebdbc18aeb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fdab02d-b4cb-4c25-b58a-87d21d08f0c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccef0c73-7631-4066-a101-ec4f8cb30621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "422f95e5-a2cf-41f0-8b3d-912154b8bf98",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e0fcda-0b07-4512-98bf-a0eed75d6fdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b259671e-8c88-4c70-b9de-ec7ab8528344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62281750-25c8-47ac-bdef-d915ac4bffa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3a845fa-99c5-4c64-8c95-33e0d1549b55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eb84c50-7b48-47f8-9bcd-fdecbd64f9e3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6104ccb5-8993-4647-8979-b3901a0efbd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72caddc0-8b88-4a4c-b44b-72f2739333f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ffe98e4-c432-40ba-a064-174be3455b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7fd2df95-b974-462a-9f78-53950c3f4b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9133070f-7254-4895-a548-219cb3e2b38d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a026b37-dd2a-46d8-a7ef-fca73c600b04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3adcedd1-b129-48c6-a2b5-8825e983dfdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89a6d147-7cc5-4ea8-be5d-5a95c16be80d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b173313-8846-4a06-92b7-7b86e0dea48a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e394678d-2168-4ca8-894b-bd5144f9142b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "881419de-fe8f-48c4-8574-65222e5b2c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4fc7e94-8ffd-477e-84d9-e1b2b901e5b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6181123e-8d4f-492d-bc68-2d6b6e608a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "213e93cc-c111-4577-b9e3-9398ff99aaa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4925fc3a-e8d6-4425-a6a7-7465788d703b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bbc2dc-8c4a-4575-ad51-ff3b4d1b1274",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "57d3c16d-e304-49fa-a671-d5c6110feb85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78316ae3-0a6b-4e99-ae5b-547a810ea1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ed803a7-a064-4aa5-9633-4fab3e1f5622"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3a140646-dd8c-4477-8e13-00b73063caf2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0213d491-3b31-4428-ac90-6473a6cbd8c3",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1088fe2-de40-493a-ac3a-27fefcda9766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "40880071-0ff4-4131-b24a-391bfbc3bc86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45fdc9b8-dbad-4fa2-9947-7e617b554228",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "3bfb3fe9-467b-4d44-b709-1434400a427e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dcc0aab-dbb6-42b1-98cd-4c9f18617f65",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ebd1d8c-9e2b-423b-903e-5922b26ea5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8021e22-1978-4ce5-b002-a4882a82cbcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9286bfea-0f82-4a1d-b8ca-2a916312064a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "b33f91b8-59e0-42d7-8e55-50e01e11e6b6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "831810ad-609b-4527-a407-8db42afe5ff7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1479b23-eee2-4b4d-957b-956c0c15573d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5af314b4-1a82-4bdf-a223-ad0c2a3b983e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "daba956e-9acd-4546-a717-4ba5819848db"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27e36898-aa3f-4f44-bee8-277471eba1df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2b59589f-42b9-4bd3-b0fb-516863edfc69"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "35c68ce6-b9af-41fe-b7a8-22d047ae23c0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a538e66f-838b-40d7-990e-40072d480a80"
                }
              }
            ]
          },
          {
            "id": "edbea55f-8cbd-463f-ba0f-3cbe89f27dc9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3cc03d4d-a285-4fcd-a5e2-c5432981e173",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5bb4cf6f-3846-41e1-b650-511880535475",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a83e3d70-5727-4c2c-826d-11664205f71b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8e0d651f-4cf5-438a-819d-52ca3b4741e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "928ebc12-4391-4295-9603-9b6b5648e045"
                    }
                  }
                ]
              },
              {
                "id": "50c90b61-88e8-4355-ae2f-09917bfeba1f",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9f5bcf79-95c5-4a9c-bf6f-ff5583032866",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67724b4a-6d43-4b0f-901d-21d1fb9c6997"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2e377e45-ff67-4b16-81f9-f2517e1b62ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "64b74d8a-9af1-424b-9741-7bcd2398def7"
                    }
                  }
                ]
              },
              {
                "id": "9bcbc776-d9c1-4660-870e-86ea743e2f19",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f018e564-79cb-4958-b6e5-79850f4fa4f4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cc89e85a-821e-48ab-a71c-ddc5a33489ea"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a25e907a-03c2-488f-909c-13d8cbaafe3a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d41560d8-0f47-40cd-bccd-3f2fef9a02ae"
                    }
                  }
                ]
              },
              {
                "id": "7f3f64ac-2055-4781-8d28-67171964ce8b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9fdcb561-54a0-47de-ad7b-c8470a31d618",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "67057726-12ca-4edf-a4fe-82e7ae0d454a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a4fbb585-194d-4e9e-8b41-72bdda5e30b2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "7ed70fc3-6e7e-4fa2-9469-4e1460b08163"
                    }
                  }
                ]
              },
              {
                "id": "2ece5354-9d48-49a4-8a09-06dafa492e01",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ee902e8b-2eac-48f6-952b-b421964185e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0fec9acb-6f67-4fa9-ba63-f2559d9df2de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f83bb014-dc92-4875-a684-609022c438e0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "21dc8c8a-8c2b-4da4-9ddb-cde264337d66"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4d7f82aa-fd14-4b3d-9134-68a98a3d15c3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "41f74731-13e1-4bf6-815c-4b3bd28fad9f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d8426cc7-1de1-41cc-a23e-903368482398",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c61feafb-b7e7-4e64-a761-63a25499e9a9"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a909d81-5b85-461c-b04b-144a6f544fed",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "804f6333-fb38-491a-b408-3e60d5feaa94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3e9d3d4a-1b37-4485-be59-3a7a66644f93",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5dd4620a-d82a-49e6-94ec-684c4e1d6a19"
            }
          }
        ]
      },
      {
        "id": "84960875-2beb-453f-af2a-dae0e50c0c6e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "9dec13e8-0ef3-4ba0-8f12-9c36aaef7fc4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d1df5194-e076-4746-95c7-f24a2418d6dd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "84474978-33d0-41ea-9276-2926b474633d",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1184f21d-d71b-4a62-bd9a-be4210553cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6d8083-9dbb-4649-aa86-9dbc24fcb60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f908444-8c3d-4725-b671-cb4e100d86d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "dfacac45-4d93-4d79-832d-d72ac07f5e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "617a2d5c-df3f-4b76-97b4-f7f45960cf0d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7accf4ce-7bb3-4886-ada9-1f4e86d34313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c03b2ac0-8615-4775-879f-e5b861d6db87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72438e12-441a-43b5-bc50-21c5da09a012",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c855b3b2-bc9a-4dfd-bd5d-70c136eac98f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8db71e60-d92f-44cd-9859-8b889806840b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e810ed0-3b75-43f0-b27b-026d17e8fec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9241272-de4d-4912-b8c4-e7ef962ec899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6ddb97-e031-4d95-b3ca-ddcea3f82f34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ea5ffb1-b65b-435b-af8e-b6f74d584d62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2942e3f0-2ba7-4a6a-8981-818821f29244",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69dbe48-f118-4fed-ba77-abda6a0fab58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60d4549f-c26f-46ed-bcde-e19126693193"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc98220a-9e3f-49ba-9d9b-0be5ac1890d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d4bcff6-0f98-4e5b-bdf1-8e881afbd06c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6205fb9-2ee4-40cb-9273-8ddc23bc9e8f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a678e19-150c-4f7a-a730-1226bb5a9a79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfb965d-d177-4ae1-9cec-bf9c482f2961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f7f59c7-2197-4d10-9be7-d8a89ec5f42b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "abc6d865-7a8a-466b-8f3f-0cfa0916ab91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "097f407b-9cd8-41bc-827e-a6e7d0c6bb1a",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ded1c03-5cfd-4bc1-8ac5-6c250d86c687",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd8655c3-8c2f-442e-a144-f552e7d4b4ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39d69cb7-631b-4fee-bd92-dd8e1128ccea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd3651f-5cf0-4f17-82bc-1055ad8648d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd34d42-6e01-4051-addd-80c4bb6096aa",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8b7648-ba21-4e36-ae1f-e4fbdca7e95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09de2d7c-e1be-48b7-911f-f8a513e4319a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a36c0e4e-1a59-4f69-ae34-5c947c36d3e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa9f0608-a968-4d3d-b5af-fbbd82162ea3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1608c0-c01e-46d9-9eca-5567c6267ccc",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc8a0c4-d6a1-4b8a-ad8d-3d0ba311ebd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c890075-576e-4923-ac68-6cc0746a4e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "171f18a3-4340-4147-a65b-b0012c514a5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "32bf09cd-4e32-4a7d-9419-061de715df13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38cc4d73-024d-484e-b5af-4d1c92cfb1e3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e53c83c4-4639-4d5a-96c3-e2c0fceafbb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61fff6df-9985-4655-b84e-7ec5d6bca797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3eb15b-0707-4375-9caf-e6cbe055cd88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bae68516-715e-4cc5-b01d-02de945b8e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68a91abe-4a74-48fe-959b-76d8dced901d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58732260-25d1-4cca-a313-6950c19c08cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44292801-5a22-4ec3-9efd-6bd84225b774"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b45debdd-c724-46ee-8ed4-c8480112a2e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c2cce47d-4781-4f96-9271-c9c08567187d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67191a8-0a70-442e-b201-c7cf123276fd",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57d8fe0c-e7ae-40c1-ae32-c69614ea063d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09fd7cca-551c-416f-b649-6efac2249284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d2aa06b-a0b1-4ded-9902-1facf7248253",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5e0ed8-e8ae-455d-bfdf-1950c67f2845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ff0b1d-f60f-459d-ba59-024e5f0602f2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "554074ae-82c8-449b-a602-db8906f1c80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdd62709-eb81-4773-977d-ac083441fcc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b34de2cc-e35c-41d0-bd8d-0335c0e3524c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3eda1a2d-a469-4d18-98c3-c5f22fdbf622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44b87a05-98e4-4101-b944-266a0365cf7e",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73b5d9d0-604a-4f2f-9038-17f652053aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64fda027-42f7-4af8-8096-2ef33c5dbfc2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76568aea-0a24-4438-a9b1-52998f59387d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46893846-c956-490e-87da-6d5b4bae4b23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1410cfed-fe4d-431f-983a-bcca87f451c3",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c78be17-2caf-4c3f-92ff-0d5b4f92ae7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d1b96e8-c6b3-41b7-93c8-c50028ac7fa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50bebbe2-c341-4f01-b1f8-b919391c340c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "e386306f-a2f0-4d4e-8e4e-923d1c61e684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2b036e6-6090-4de4-b7e5-d13c10e50f25",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb6443ca-6613-4335-9493-76203d6acdd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef371dac-49d2-4bf9-84d5-e26557fdfa93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98454450-4744-4978-b428-d753b6561ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6837c43-52a9-42cc-8b9a-b74453d01429"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96dae846-538b-410c-8a93-64a440912e0a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e180b88-1783-45cb-ae07-670db8e4e8c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f003379-551f-40fc-a3af-2fdb372a3f7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e649da9-1d98-48c5-b1eb-2d69f397235c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c0cc8ad-2a97-4a90-a1a8-5e68aef7c25c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a0e402e-21ee-4e77-acce-a3b23eb18790",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3f79893-b3b0-4c6b-955c-553a197f1998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c38c3f52-cc96-4220-aa54-606e14040bc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a43136f-bae4-498c-b784-d9f5a9789315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "048d566d-2da3-493b-947b-ac9801a4c6f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bb54512-c0ad-48a5-b7b8-ae93d358855c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73081c10-cbdd-4b2c-9659-88b82dc3f005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66aa2b59-0d30-4d62-94f4-1c1761b99492"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac282db-9197-4899-b448-737f7a737b52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "87016280-15da-4e4f-adfa-ce9d9c3b36d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b25a03dc-26b9-483e-979b-6ededed5d2ca",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03cf1a3a-b6cd-4f62-811a-debdae965b80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7de4bfff-008d-4ab2-ab0d-0e02e4301b95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb554fd-cd71-4b46-a105-8174202df3f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7da22894-58d2-4b60-a9cd-302abf6fd191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd10af1b-d37c-402c-968e-ef94fe7233bf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f630c70-7c15-421d-96bf-2a83fdcdfd66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bae4525-2d01-4421-a8df-7c6602d68376"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f466df27-4976-43c8-826e-72f7ab452ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ee997abd-63eb-4db4-8d0d-49aa89ee46e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f016be8d-9e5c-454a-a9d6-7c1b8be776d2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82cba44a-ae7c-4122-9b7c-568d128c1b06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f71caba-69e5-4ef6-8290-6cb2df3971d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49f3049e-b115-4e4e-870b-a81bfa73378c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "05eec218-adec-4a72-a735-e985d4f06fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423a686d-eb80-402d-897b-8253e026a6a5",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ceb2d1c-6b61-4de8-85cd-8109512a3cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd17940a-cc61-439b-95b3-f89829717b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8219af70-4956-41b4-b6a4-0b7dc5729f7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b20eee54-2a26-468b-a17f-b4d9483940c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c46e661-c85f-4c96-9def-0703e7a6f4f7",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d3a943-db16-4598-ba02-cc3b4453767a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2681275-9295-4720-a262-7e1d47c10d0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1ac5363-9f1e-4bef-a0fb-546051364957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "396902b7-c3c3-4579-ad06-68efb062ab3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a9538bc-2052-4468-ab35-301e5793ec27",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1adac951-add7-44b2-90b4-ecb04b511517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429acfa1-3daa-4934-9f61-8643334bf966"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee327ad8-66b2-4ee7-b17b-a210eeb16cb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7bd7d5c-959e-4f18-828d-fe12524d516d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50085dbc-2890-4ed4-bc81-1ed2f258d8df",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48586d9f-1866-4c69-bbb5-b760970dcc1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "66490348-d1e4-4490-a295-9e22a09ffe4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57bb4c76-19c9-482b-967d-a3c9864cdf13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f59c756-0b4c-41c8-bf2a-c5f9d4dd86c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b89472d9-d95e-46de-aee1-0149e5318f27",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ec7742-f041-47cb-96e9-f186310ef699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6ca8c5d-d285-43e9-8f2c-832dae407225"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3bb8c33-e3be-4388-9e1b-cc46d16c629e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fad9f1e1-9c70-449a-90ac-75bd99e0aaa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04d75f37-284c-4c43-b15b-12613a27bacf",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1818c6fc-63d8-4d54-a3ee-6f5740298346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "186e6e96-b647-4521-9255-9a77195d42e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3209e760-da32-4cfe-bfff-14b08dee4362",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1c2763-f6ad-4f1d-8016-7bb9fdc6d3cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "807b292e-b1e1-4c86-84bb-dc481d276071",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09ca5cdb-9764-467a-8a79-51e757143950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a3b93a1-a430-488d-8474-3464a4778e7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3e3e209-5f2e-45e6-bddf-448b7557f943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "22505f9b-735c-4c4a-9d5a-f7b8df12bd29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8246504b-47b9-4c7e-b54e-2e72cb272ebd",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e00def7-d88f-4f49-b880-4944a484b153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f3064f-16ae-41d1-972c-a2e486251647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9be13ac-0171-4558-9bf3-aa79cfa716f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ae857e6-a52c-4121-a521-9e7a9ca3a357"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f120c8e6-cd9d-40a6-9040-71ccef1fe630",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9ad0c1-d907-4629-a5ab-edf1fe251b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8be5e9c4-5c8e-4e0d-a0ba-bd3ad8b0409f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89b5dd4a-c068-4013-8048-2c5e8a154e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "db07a429-6a65-4d4b-8290-12f34b958284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd41d058-a5f5-44f5-835d-cc5827b452c3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e3f2b67-43b4-4c05-830d-05d685716788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e3b600d-9c9b-473e-8951-15098194097f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e2e7859-b86b-4b15-8e3e-73f6d28e0cf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c14ac791-8cbb-4fbf-9888-621b37bdac6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faab3ae4-716f-4ca0-bf03-abbff3613347",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2c70473-497f-4afe-ba77-e719100b8341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7423ac-89e5-4eb8-ad5b-a7acbaa1b1ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70d08e22-c952-4431-9c14-9adbb3e9b051",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1377e935-4eda-44b0-b727-595b2612d258"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9f861d4c-94df-46b9-af4c-67b05d3e6329",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ee326eec-1678-479f-943e-e280bbe07967",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d8a500-3b7a-447d-aae9-b0c6fba78294",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455d3ad4-a62f-47c4-8240-3c9973a041f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "414737bf-219a-455b-8161-c6ff07456577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1cf935ca-1f28-4ef8-96b9-0814d9c70b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eb78aa5-4239-4bf7-8123-84b58b2bb932",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367e8b24-c490-4b75-b8d5-0d552c5c4504",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "2649257d-61a0-4a4c-bfd5-41b222853b6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b6b520-502c-4b7e-9d6b-c154531d9582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7321b8c7-00c3-4877-bb49-1ee3355b5884"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "905cd9c8-5b8a-4ea7-ade1-7fa5374c8894",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "143e0e8a-145b-4a69-96a2-cd1568f8a002"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9771e095-36b1-4164-82af-34d3a1c0eb66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ecb9772-cb4f-4501-ba75-1015d84dfeb9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6550f770-029c-4f61-8a3e-1d6d86a54d3f",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4a6f1a03-b8ec-4115-a62d-a697a967feb0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "05f5bc72-40f2-4179-b24a-2af92618f9ff",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "96a6934f-2d86-45d1-b5b0-11aabe749387"
            }
          }
        ]
      },
      {
        "id": "52183853-990a-4360-9ccf-a34fb46eaf61",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d8f96bf5-4d05-4360-b8d8-beab105cbdaf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dec18583-e7fc-410c-87b8-5a04d1d42c28",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "e3107f85-2764-48dc-811d-cf6dc4281113",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e4789b-a606-4980-a8e3-f288690973bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "672516d7-05e1-4169-bac7-db9c8bd23303"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a179d48f-135b-438a-a179-ddb99f1cf9c6",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3418f828-614a-4c25-9bff-3c8a6ba8ae61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501921bb-5b42-4893-8cd7-57e3ecd3b863"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec8d025d-cfad-4552-9797-94af011a32f4",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b315d478-8f9b-4e36-a194-a0127cd8e1c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dfc5cb4-467b-4b8a-bca1-462b165597b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c850c2-f7da-4c25-a8cd-09038796f394",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0322135d-9b15-4ee8-9e05-fca7d78933e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a46c48c3-1ac3-4ec6-9020-53f2c5af6b5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "110f0164-3256-40fb-93cd-352af55563ca",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ddfd4c3-7367-4285-a9a8-12c28fb86a3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bf82083-3fd3-441d-b6ac-68b98892b8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1448380-eaad-451e-896b-b64809411fdb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f33ebfb3-c94b-49e1-885f-6e3493f105a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e807b6bb-d06c-43e0-b9a1-78b074b2bcd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e4c058-c8b7-43de-a524-01ca80e80fb9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827bd01a-dabc-471d-bad9-5d33747f8783",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd2832f-d474-49ca-bfcc-ae715f24651a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbf43031-f4e2-4be9-bf39-baf52ada1f4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9a82f8-c62d-4427-b4a5-90a6a8fe6939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d24095f-3ea3-4dbe-9f99-802704f9fcb4",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f53061e8-8e45-43a9-8b68-694d544760ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5d9e04e7-e292-4b4a-a88c-24dcc32c8741"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131caa48-8acb-4eac-b147-d6f09f64328f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c79d36-d0d6-4e89-9558-710550c1dab1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f4ea36-73b9-48b1-8842-750c421f1d1e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "482bf25e-dd28-4003-bdb2-4b2d7750bd67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "611cb9fe-e1f7-4e41-8764-99ca761c9da3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75f52f0-8bc7-4107-a3cf-b203b2c9354f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c478d1a8-6796-4d3f-9e4e-10fee68db8b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c4168f4-b659-40f5-8d35-dbabc1910e3e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74dd80e8-99d3-4f54-88e5-ca2d488dc375",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f6ecb17-453a-48bb-aebe-f198990dffed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1db6e2d8-3547-4f46-91ba-1eaa9e44959c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "128e75c5-3156-4fc0-8961-74afa9a23654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b72e5184-c1ae-45dd-9bff-8610cc6ae1a9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49afaa9-8c82-4987-8328-4034493683f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696972f2-6759-497a-92f6-c8025324187a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f51f990a-6652-43d9-8ab5-eb0654db6573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2badb50f-0f4d-42d3-898b-19c211b98bed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365a64dd-294c-4475-ab11-a4cc438d6fb4",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9e5ac12-7176-46a8-91a1-3bc0e727b495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4542f07-1bd9-46a1-94a7-eabc18848356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcfaaa3c-ac5f-4d4b-8e5f-ce4f757ccba4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c40b4e3d-b0eb-4480-9e25-784260b3a695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea432668-b852-4737-bf47-8e94df1f1f02",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9f8c1b-64f6-4d82-8516-49715250128b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4d54974-afa0-4127-9755-217e74eb6c61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9274cd-289e-4d0a-8e49-fdc56a978e03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be7fa4f8-e305-4d49-9f4b-767eb8b6264c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2fbac91-c69f-4848-82ee-6f539f9c8da2",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5847b80f-c8a6-4a37-b587-15fc8c751041",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "046ad3ad-8d1e-4694-a9df-411a1a8ea3ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea762d0-04cf-49ab-91e0-5081fc307acc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8efba251-602f-4c49-a3da-2e107452d3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac8d9b84-7fe0-432a-8cdf-4b91302182cd",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df90fbaf-63b4-43c9-8a8b-8952e09fd586",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dbfd857-5766-4a95-a3d4-c8e71db94fb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "560da5fe-994e-46be-a31a-49dc2a8a3546",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96aaec6f-5217-4c0d-b771-ad759bd8345a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf20e131-57fb-466c-8b90-84e1c1905376",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6269538-3cce-4bec-b389-4d2ea43764e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f40dafb-36f7-42b6-a3be-a4d0f04aaea7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d52b3a7-2dd4-4f74-abae-50a4c1c3aa6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace65969-8af4-4839-9fdf-c7d7e358a559"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3187f76c-2c2f-4c5a-b8cd-710d062a6334",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36673774-472d-4255-855e-c6b3b9010c47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1a194d3-417e-488f-863a-55b277ee791f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3a3f37-ccd1-49d1-a44b-fb709c790993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1190572-d66e-4c7d-abec-356311a782be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee03e862-b39d-449d-8789-db237469272e",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4c1e146-24bb-4158-800f-48acfde2d9b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe549c9c-bf44-469a-baf5-357f5ebd5ae7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1b37d40-c212-4511-b735-138e22708b2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9802ae66-54df-4acd-b0ca-218eaa3642e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9323144d-8c91-4c22-b3c1-52c311dff33a",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffb85ed2-7d39-4938-8dca-091bef7f887c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c558f8c4-a09c-4377-83cb-df7a74053c05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30748a44-bf8f-4403-9298-a748818b2d4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71b6dbdb-2bd3-44ee-8167-a0a81d84f543"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f14b0c8a-67fe-48e3-a632-1a517db4a861",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ecb2cc-0af9-43ba-88c3-cdef4a146c59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d983cb0c-f7f1-471d-96f4-1ec92177e50a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92743b06-2c76-4d4f-bb4c-75458abd324b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efbefd3e-1cea-4357-97c1-016dd84c9c1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94085218-0859-4788-b318-a5fea9c2ad32",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d662f5f-cc24-4a1c-95d6-8efcc56d5f0c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69af7a8b-cda4-4a05-a631-7883fdfb9009"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26542ef6-04e2-4db7-969e-3824e0c53813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "099ce1b3-3703-4dc7-8fb2-e7784d3581ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "569adba6-ba28-4355-b2f8-3e734c044237",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d79a7883-bcde-4c20-afc2-cde6058c126c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67328591-e575-4bdf-bb70-b8bede4bc5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af161766-b97c-4c94-94dd-35bb2b36de82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a2d2237-2624-4d8a-bec5-b96dbd6fc527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f087f9cf-162e-41f3-b07e-490486fcaf60",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "602af249-e8dd-4698-ac4a-23669a234e1a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05c21e2-6e1a-4d9e-b39a-15fc05e2c51b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2223a4a0-1a85-4681-a502-4e999506189b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd66843-ca6f-4c91-bd7a-4173b6d69fc4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9d51b95-1dbe-406b-ab6f-b06db12f1ddf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a813aeeb-da63-4798-97bd-9af8f57c7e9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4db22a6-9e49-497a-a368-07984f12024e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bdcc2be-6891-44f8-9e99-9f6393e48076",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d246990-e8d2-42ee-8457-53e15bd6ce60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d71f15a4-5a15-4c0c-9175-4273e6a115fc",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec133f93-dfeb-4957-9c50-adc291e0a2d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "492740cc-d06e-4253-9ac1-ac3df7766cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e929794a-4aa5-435a-a0f0-ba9c30e5249d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "655e9bde-8608-4d33-8989-ab4a51d88d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70d11fca-60d4-4fef-9afe-e24f6e499863",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a02f9044-c726-4011-9387-39850737b41a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63b731cd-6be7-4707-a546-b644ed0cd784"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95e923c9-7b96-4838-9928-5ce9ffc9d821",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fad36bee-ef2b-4da6-bdf6-97b0ad5ec3a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f63e1e-cfbc-406f-8b34-444fb5f65fda",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a63b211-bea6-4088-944d-1d3934ac1e21",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1f3214b-3c27-4a38-82f1-ea6032a896ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada1c7c0-adbf-4f7f-bbf6-6d29f64bd78c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3656ba64-f6c9-4083-af20-fd9b1b70c1e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a884bac7-1b31-4688-a222-c9ad1c95b255",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94d5a297-bea5-44ea-84a6-ea69a93d985d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08f37d4f-130b-4b2c-9f1d-e4eebd861508"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9817c88-abd9-40bc-840e-cf3d5772d3c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa49d842-c221-4237-8a8d-7a096b23cc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb630928-ae1b-4049-b499-1d1430c541dd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6513d3f7-1aa6-4241-a5bd-11d4a66ef2f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1b380c-44c8-42e0-aa7c-0f3ac27e77ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c4ad5c3-e14e-439b-aacc-1e7b3fa210e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5045c21-a7a9-4954-93a6-575ca7eae3a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800603e4-d29b-44c3-aed5-8dff9563686b",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a34e8da-a6f9-4a15-9bf5-fb3947cc9687",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4e478ac0-8e36-444e-bda5-65dd7865deb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b36aab-d39c-4ae3-8e7d-a224c0ee3266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32524931-a43f-4667-98a5-5f4927f9f5a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "824eee56-653c-4423-90d4-a9b902172639",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d85741fc-2711-4ccf-a604-4dffb7562b72",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdda29b2-3403-4383-accd-ba79e530ef79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "074ce3e8-8f2d-4e8d-b850-2465ce3c6c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a29f2b6-46c7-44b1-abd2-a3c1eedb5d93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07538609-c7e7-433f-9e61-902f13131d99",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "907e4372-9c1e-40f1-99a0-09a5d2eff50f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f95fe0a2-7a4d-4986-9f88-276781f9be98"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea3dc595-5b58-4e6c-a2fc-8491bd12c1a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22df64d2-6fba-4ef8-83f4-b9e6c0c42498"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0cf1db7-8154-4dfc-81c0-62caea06ce00",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b28dd63d-2bde-48ea-acd8-650e5e16b252",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c49eef89-0256-481f-9f15-556571ce0694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44f905bb-a9d0-47a4-ba63-7ae1d7b860e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0627e3e-e702-4b1f-bc57-ebb7e2c8c435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d10ed347-c518-4a7a-975f-db6a9541cb6d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49163276-837b-40ff-b03f-435bd8691b73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4cdf3dd9-68c0-47bc-8603-d28010715ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e514044b-444b-477e-9618-26bfc2667a32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "619909fe-4353-4999-b4bf-2e46e102a108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9788c468-cb11-43f8-aa06-395a76212104",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "542ebac2-ecb2-4d48-885c-9831985fb5e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bb7168a-684e-4627-befd-8f2b6bd026ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e82ac82-b0f0-427e-b543-fdcc41872005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92153b10-e96b-4a36-89e9-bab4bb0f3d17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c341f42-6dee-4a72-8744-60bca4486f66",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb11536c-e568-4e5a-ba69-6769d49f10b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70c0d7f9-b4fb-4efc-a302-a4426b1d853b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73be9819-d681-4475-9c6e-fb02e68cf5e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dcf6a84e-0256-402f-b1e5-8b94ff9387c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604bde6a-6ddb-44e0-a593-4b30baade008",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3494f565-6a34-4c92-9e05-21027729f6fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b7d1268-8bdb-4a7b-b4ef-b1aabdfdf0ca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "326fa3cd-2140-46d0-a355-be15d874b201",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "607ed578-7527-4d0d-8776-13a04a994279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152ac19f-4af3-4503-bd8d-690fdf119c16",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a92091f-6534-40ad-a8df-8444aa9c7a4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "896d5d62-4ce2-4fbe-a706-cdf49016b00b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f210b6-d52f-4cad-a538-c449c56d5409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d50e92ef-5288-41c6-9357-c9920fc743e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f9139b-8e70-40f1-a6a5-aa402d035d70",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cac45c2-c515-47d3-aa71-54d0ce914e84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68e1328-035c-4094-9bdc-723dc0ee2d7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5cc11d6-6d42-4e22-9a9f-9b9370feeca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86c0f00a-e2f3-43a2-987e-7a6548df1be9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ce9b8ca-fa77-4a47-9606-6560876dcde3",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a815bbe2-8093-42cf-b3d9-4168e146d906",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5849326-54f6-449e-9a0b-34f3d58f93e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07edb67e-21b9-4d74-a3f9-33f608631c01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a217b70-6665-48dc-9537-d0151f4384cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b989683b-8a19-4076-8cb9-4b0f85e2a857",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "950392f5-ab5a-4271-9c7f-86c87b9fb5cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b639e49-27ac-4e42-a9a9-fced458739f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acfc4805-412d-4973-bdb2-8d3cfbde15b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efcd5f81-448f-4153-bda0-2ea5174b5661"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5398099a-f85d-4e2b-955c-05563b4e2533",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d867e9b-3436-4e0a-8795-bfaf1ec42330",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bae1dd1e-8361-454a-b26c-efe84a933885"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2c92c7d-af57-49a6-9f11-5eaded83c166",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4da717de-8209-4bfc-967a-afaeb2b0d53b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57453a58-ef99-480a-8e1c-9e14f9cef9fa",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8e6c35-7a3b-414f-99fb-fc6b0fb1f3c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b2516ba-1aa0-456a-b0f0-d6871189d7e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "375f87da-7d11-469e-ac9a-59c7c9788206",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "952727d9-9e49-428d-a393-a3642944cd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71ec4d8c-4d1c-4181-9632-358c7b6698aa",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "662b430b-2596-4012-b6b9-6c6926773005",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22136f5-3774-4389-9841-6cf945ae5f2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bf34764-01af-4fa4-beb5-b14af4f572cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c03fb3f8-e9d6-44f2-8a83-2fad4aa968a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4013d0b-0ed9-4c6e-aec7-94b8358174a0",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "348b78df-712e-4c67-8f68-b688ad59c51b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "048909a3-7385-41f8-912c-9114621212df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ad3add0-65ee-4ab4-99d4-df868d259a53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17f427ff-95bc-44f4-a36b-9ff67ec0bd3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa14ad8c-7ed8-493b-b284-23c8e362915d",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41b0c4a8-ede0-431a-a325-36ec7bc90736",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5acebc8c-ffe9-4492-9411-239c3023e782"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2187d3b-65ac-4f6f-b111-7335afa26cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e01a779-6d13-40ec-a94d-f749daf5a4f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b86741dd-35ce-4569-bd57-afc67e808ab6",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c5700a-e509-4cfa-9e98-8248bd7afea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a068d500-75ff-4a2f-a17c-fa9837686b3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfe25e48-c5ae-472c-b2e9-d617180b75e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76003ae7-a841-4b4e-8535-7bd192f523b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "648546f7-4956-4444-b771-b87a7cd1d451",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd75c46d-a0be-4b12-84d2-5f6ac9f406e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf4d5f2e-8876-4f4f-9cc9-4ebe245f85e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d15e91a8-c6d8-43e9-9bae-6a83f74cf70f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1028ebd-91f8-412d-b2cd-957a2e12401c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22bd8ec5-078d-4c5f-b077-7bdc2640df0f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38c9b361-737a-4420-bdc2-f056a4b746df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0b06f3-b1a3-4383-8ad7-6d0a26adc2e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79733498-cf1b-4d59-bdc7-aecf2cc8505e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e31a07-d1f6-4965-be21-4446a3007773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e0be216-0a9a-4b87-a9f9-5544f790a17e",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8271fc28-8faa-42db-ae58-e105a2c347ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c7d236e-349a-41aa-adfd-c5e0a0217935"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28eea17f-2ca8-46bc-94a0-ff46334fa14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34f24609-53ab-45a9-8713-1f71242a4094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42933935-e806-4277-b192-3f174646be07",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae719f8c-2094-4802-b3ad-4ab14d87a2e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5226d9b-518d-4835-b82b-486718c7ace4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca553cfc-6815-4fa0-bba1-6f1bd0b1c8e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0acad193-c8ae-45cf-af12-2fc826cc7515"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483d14ee-3bb8-458b-bbc0-666690bc2458",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "696149d1-f22a-4734-a281-f87520b917e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34a1239-e9d3-431e-926e-fbc2a1a24bd5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b51e1f6-e50e-4803-8f64-60a162acc0b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7602e0ce-05b1-4d49-a891-d65d81c9268f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ffe665e-53f3-4426-8c14-c4b0c7fbc16d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ac1df3b-9f5d-4c2c-9b89-310410bd3f84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "501f227a-27c3-4284-b543-002b5d40dfaa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc253756-5937-4c6c-a7b6-8f727cf19dee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2280385a-9519-43ad-ae58-fac952e1d5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa465f7-9995-4e76-8da5-6fdc6f461c0f",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63315c12-c07f-48ed-8606-4f164fb8ed6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa2fc51-030b-43ff-9fb2-52be377124ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bad94874-8ec7-4453-ba06-0f8d0417bed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fb1440e-a776-44b3-b00f-3c7933f95f27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f2f6d7-372b-4363-9573-9ecdddd6dfbf",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c700d34-1696-46c1-b359-650efccc0993",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e71c05e5-fdec-48e7-a305-64fea068a791"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b0bb65-1e4a-4119-b82a-873124f2221f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "797e5bb7-801d-4c95-846a-7231d79ad406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78e584c2-d694-43e2-bc96-af678284687e",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b213c7a5-b5d5-4122-9a52-3feb0edab0ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2a9c6d6-aede-49e6-b7d2-83c6d728baf9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36c63fea-abe1-4793-8a4d-9d115291bfc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b0b871-1977-4401-b9a3-1e7da78f4871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfaec399-f4dd-4df8-9ecf-a6e7871cf02e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "398c8282-e257-4b5f-8009-0d7cb22771f9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd7769a8-4fca-4fbb-82f9-fee3c1be6c8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232cab0b-342e-49bb-9da7-68c1f00901eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "febac8ba-11bc-4007-805c-21bc19c7d6a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b862ea8-b7da-4beb-98cb-a2cd30ee855e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "661d2331-7b45-4198-8cb7-7d7660a52b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85427124-4c9a-48af-8c25-a01c908cf2fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d1811a-9f75-4582-b8b9-9fa86591766b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f492499-fcf5-401e-8502-559a9aab0bf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb2bda82-0e49-40f4-877c-987def1208ee",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47351c6c-961e-4df6-84a9-430eb86659c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de9e1346-e8bd-47c8-9d94-6cb5a38b39b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c5d77b-d358-4f2b-a903-796b9adffdae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55ea5b47-78fd-4ba6-9530-d4b3c28d5dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e572dc51-b395-4ceb-9761-14881349fb89",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758bfdc4-3c98-4eab-b5f3-6e405c6d5e04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90fa76d9-3251-40ef-bb92-fdc1746d4e4f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fe528c7-0df6-49e7-bdeb-4a35886165ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d35fec24-9574-4fa0-acd5-1e41ee3b6eef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d965f08-df7b-4df9-8e90-436752873ee6",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a651a242-881d-4a24-b90c-081e356a17ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a8c80550-e665-4c02-b1f8-c23f35ac2ddd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c3bf66-97c7-46ca-8355-38b70d32a938",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ac333f5-641f-49a4-b47e-34ec02d594b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9a3705-52da-46ec-bc72-ce997dff0e16",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b541171d-4138-4d56-b4e8-0a1666f098f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "037d9cf7-f9f3-40ff-948f-30b36041e05f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cefbd16b-de81-411e-ad3a-900b9aeff352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7af4b5fa-03ad-43db-bb6f-6a51fa21bb59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc06d98f-185f-44b3-86c1-d9475985a467",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e662e480-abb1-4d1b-8f2b-5e242402e969",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ade22375-b53f-4f84-8ddc-d2da70f625e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b010e75b-f3a5-4ed1-b867-bb6af05daa76",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de079e0c-e103-45cd-963d-ae72865ebbed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5032736b-a479-42fa-8ca3-fbb3ca557403",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd81837-4e77-405d-99a8-b21a6bcce52c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e9dab78-6cc6-49a7-9eaf-5309b898de8b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b97b543d-87f3-45da-81e0-1159abc5f581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127e08d4-1936-41b9-b01c-2e6f35f0aad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409a1a0f-720c-4b7f-b870-bc41ede6a807",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d1c66f-b27f-4479-9794-9ee1dab51a9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1540927d-b4ed-4c6c-b09e-4fff3de1ac7e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94c0667a-5a5d-4e6b-b758-e11e262d85c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3e1eb5-c3de-4947-b0c7-c194be412f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609e4a34-e40b-44b3-951b-a8a64aaf4a6c",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2e82553-7fd0-4305-b102-08e4cfdc772b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b9eb1c2-eaef-45dc-922b-954b693415ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75674847-7fc2-434e-b4d8-f219addebe5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1279ea9-49ca-428d-81b5-a95ad9d799df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a82e5f-cabf-4e6a-94d0-b572125fa562",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb8b8617-188f-44d3-88d4-27e2e51098c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96229dca-53c2-4810-aa0a-59e13032bf82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "225650fe-b106-472d-894c-425484361e96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08050674-6887-48c4-9c36-384e8c7af352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f88f433-922d-4c39-9863-5a1608bbeca2",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e02b1a-6bfa-4bb0-a720-2c00f0ceed87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fe240c43-4e0d-4c06-9b9a-f2a38bbe2f38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a179e94d-f19b-499e-8dce-a8795a5199a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cfe5c59-f27b-4751-b0b3-5ddfbe5741db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33cb4861-664e-4860-bc69-4121fd7ff2b9",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d7960c2-6e20-42d3-984a-84003ffcfd43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d730bdd8-5a57-43f4-bb78-2fe699e23943"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3486c167-f076-4030-9b19-ceb8140d9359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ce51525-aaba-4939-b390-cb669fb84ecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbfdf19a-07d0-483b-ab26-eadb72e25b66",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f148603-c4f5-46ea-bc28-c81dbfa9c6ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7390be82-6144-4722-bd64-69a0e7b13fe3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3481aa66-0c27-46f7-acfb-17fbd1573fb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "702c8bae-909e-4a27-83a8-9a094fd6642c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb30edbe-7ab4-45b9-a691-083bf82a07c7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8277df1-49d6-4479-b162-d04def26ddc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f47430fe-105b-41f3-adbf-6a623fb68b13"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f975bae3-69c7-4a5e-b4e4-a562e23489d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c09167df-d0c3-4d1b-8d65-16e5730a4853"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d94d6bff-dab9-4fc4-a8fa-bdcde39822fe",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58929d36-e882-4d7a-974c-9ff2a5148222",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f39dfab6-adc5-48f3-ab4a-fe64cd4a1777"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c380a70-81ad-4346-8fd2-aea99361b105",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626a00a8-c30e-4d81-bfbd-e85571370fbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20cbcf2-a015-4caa-ae4c-db364bf66d7c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdb0167-f4f1-4b1d-8095-3638025e9517",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d901f048-7772-4dab-a1c1-4ee7fe9d5144"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35e9bf5d-26ef-49cc-a604-90703f2dbb17",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20f8818d-c1ef-43b7-81c4-c57d859428b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ea2747b-bc91-43af-9633-8d4eba9d4f90",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d3e83d-ce58-4bc4-aa19-3aeed1fb14ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d22b0bf5-1a7d-4478-a83e-f3a21eef8435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dad29def-adf4-4838-81b0-f1913ec85816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21f35cc5-b910-470e-844a-0ebfa56846cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d245284e-9b49-4ef2-91e6-b493031cf963",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6687f28-2953-48eb-9fb0-04970c6e218d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a96bc208-966b-40e1-b904-6fce91ed8297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "837d296a-8080-464d-bfef-aec5cdf26e5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ef966d2-8824-4f9f-849b-a6186ae97547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af2f272e-d02e-475a-ac99-a83a2968dcf5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b368412-b45a-48c4-9bf0-56861cd8a460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3dd9b082-fa96-47d1-a532-489463d71ab3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61af47db-1512-400b-aefe-29d24e52b16e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd5f8d64-5a7f-4602-b7b0-067c4c2696e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b792e3a7-2f87-4dcb-92e7-4c54b3d853d5",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e69b4e92-7474-4a91-9916-16bf36052054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62e7d28a-11b9-4c83-b367-a16d3eeb6b6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fbcb3e0-ce13-4144-a994-ab6b2632ee46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89e11580-1bc8-406b-b027-0257a565f27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69cdcb08-db5a-41f8-b46c-0e968186413f",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e110c9c-a201-4bc9-867e-76fb368d3949",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "15009418-fa9a-4441-b4a4-9b75df70b0db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da05d3e9-4fb1-4fad-9506-113c2509a936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "379dd24c-84d9-47bf-86d8-6f1c239036f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b42b05-ff4a-407b-9a51-f7412e32043c",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00b8961-b1ef-4ba3-a31b-26e15978dd51",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f9672ee-de56-4938-9eb2-1bbac806bfe6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7740e1-58f8-4fd7-b813-74537f6ce7cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4104f6-73dc-4710-b283-112ad306e019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19a1f710-1f7a-4913-9e4d-27a5cf2def5e",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce4781d-bed5-467f-9bd2-f800d66fabb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9ff821ae-50ee-4446-9fe6-4029e817caa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4209c4-a5c9-47a5-b8b9-409c6a92b86b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a004befe-6638-4ce9-875f-2dd5b70d1e1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505fac0f-be02-4b61-8cbd-59b8f6d581f5",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9305ee69-45ad-43fb-8757-1fbb0391800d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f2531ad7-138c-4234-8bd8-ff7565801bb7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e004696-8310-4321-983c-1a0a951e7b94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00fae841-a60c-4344-bd1c-457873a5e5bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3f71f5d-b326-4a77-8230-be47546b246c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eed82aa-33f9-42e9-a882-43a59803949e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5a30b44-0526-4d55-9f0d-168c7d9e17d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6987805f-e43e-4ada-a24d-14cfb7b2cd5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5ec2ad0-c50a-4442-87af-fbedfe46405a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2958d3c-c97c-4c95-a6a6-937a27052ceb",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b82569-401f-44f4-8a4d-3c668b754e06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4b8bb575-0c1c-424d-a852-28c2a649d497"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "428bcebf-579a-4470-be4d-de5e4783432e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e32c725-3bc0-439f-a3d6-681376528c97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f0fe79-3333-4c56-a6d0-c852dc1c8759",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "937385e7-6b02-4b7a-8c97-45d2d9f0f4b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59a72d4b-303e-486c-b49b-0e73259a6830"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d25c2a4a-0fa7-482c-89d7-18bf771df504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21573f33-e34a-40b7-8279-a35697972fae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9403db-a365-4218-b871-a0acc0c16147",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558ffefe-d8df-42d8-bc9d-ac48d08c8117",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13337022-d58f-4478-93c7-f547a2bd6e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fc0087-52e3-4279-92de-effc3d84471a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d44d47e-ee98-4e4d-a008-beac5a08b658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24499de1-66a7-4a18-9fdf-bdd46d464376",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0159ec28-f290-4035-aeb8-78880429490d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "413623cc-50bc-4cd8-abb5-111daa129234"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a74594-c164-466e-8cc9-2b187fe286c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e3b3d1e-8f5a-435b-90a2-22a801554f97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f87fd41-861f-4a33-bd9e-28ef99de6ef7",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d4eaaee-5b30-4596-8d5e-4deaa6f832cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2bd6cf6-939f-464a-a93f-db1337a50ad7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53168c88-aba1-4a29-aad4-f27cb9d197e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "403ef01c-a036-4ade-be11-d89309e0b7e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77f5e06a-5cec-4ed6-81ae-92eeb5c1307b",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05f900bf-ae04-459c-9f48-badf02ed29b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "79e6cfcc-6f2d-45ac-8e32-16a3b1d643bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f998659e-3d3f-40ca-8087-e64c9f97150c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd09eaf2-9471-4184-b2ad-0644c7b8788d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24db7d14-aa7e-4302-91bc-635f588d20c5",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a511af15-42b0-44a1-88d5-44c4f8f011fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83b8ef1a-6b39-4ce6-83ce-bbd67f53f457"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a13fbbc4-4155-447f-960f-cb47a0212508",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab580e8-0c18-4424-b11a-cda3a027266b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e95d435-84e6-4f35-a2e9-e6b4b9bedc18",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12105bb5-3dbf-4dd4-beff-e390e1084ebe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb3bdc76-4284-4d7c-92cb-27fbb0e2759d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac86d4cf-23f5-4dbc-b9ff-dd3c85e128ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77a4915d-0a94-470f-844d-a755fcb2f6f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa1a9cc-5a08-4725-aef9-330177e8bb96",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "387add96-acaf-49ec-97bd-673408739207",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e06b18c-7b2d-435e-aaea-37ca5bf6c9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7273e154-0f77-44ad-9b50-d4c650dfabfb",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41ca6696-97b6-4331-a0d4-a09c172d1aef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc084233-cc0e-453f-adc8-0b2276743497",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99404d67-d7eb-447b-a3f4-ff1e4080a890",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e8c2d3d-eef9-4c4f-9909-66e71d1152c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe83978a-8133-4712-9bcb-a66bb21c3eac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faa59b98-6077-4fd7-9312-5a08dd47d3d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504b85d9-aa25-435d-b477-0ba71ba14a49",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89734712-c68b-4f9f-95d0-7a4e1e8bb805",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e299eff-054a-48fc-86a4-7a0d3983a931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58934baf-b1d1-42c9-a567-286e78434121",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b01b685-e014-4193-ab07-438441b1f84c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d3a6857-0f87-4c2e-b0a9-88e10e55a4cd",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1087d5-cd5d-4ca9-b261-a356fa85300c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26d171c1-6618-4a23-80ab-7441eb38f9e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01791620-e78a-470b-807b-717c6b8a986c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acee7993-c24d-4151-b28e-574fc9837041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e210e54-97ab-47ec-bb30-48f334e57d3d",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a679264-9dd8-4c7d-9cd6-7d106f2a5db2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef5e2007-d3fa-4a5d-b386-f2560af51297"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd05392b-290c-48ca-a040-345e4efddc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6626eb-2c0e-4847-bc9b-12e19e3eb1a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a75bb8-c4bd-453c-8d24-705336a76ecc",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1548881c-fc30-45dc-a6f3-d2d46f8ea246",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca814620-a33f-450d-9018-ce4be694d644"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4496136-325e-4edd-bee4-1f873ae30dd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0467db08-8e4c-4e99-9c9d-f9cd787d7417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee48fba3-c4ae-4027-a0f3-e1067a6c7b00",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "585c17de-1e4c-4357-83cb-a59971a5bfe8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae0d69ec-b06f-4292-bffd-d811ccba6fb3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "627cbdfd-9fa8-4998-89c5-744dfd8d15a4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "318ac129-2095-470c-902b-3f3df450fdbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ae6f35a-bd4c-4c12-bab8-31b0ea569aa8",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a388d1-2b9d-477d-ad40-d52c5659d3b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7543c599-f5ad-4da6-9586-bfa9c60e06d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "397f634c-b91b-4eb0-9e34-11ff3cdaf740",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1851a3a8-50d7-4169-927a-f4d520385a11"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5b5705b-54c7-45f0-944b-a394c3ef41aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6abb7778-2760-4625-b110-cbfbc8346706"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d8f63a57-6123-449e-9707-1d2db4a11705",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3b631974-c15d-4ec9-908b-aa60df6563ff"
                    }
                  }
                ]
              },
              {
                "id": "82786f1c-a368-43c9-b73e-c1d640f69c9e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36340050-1003-4772-9920-43be65839985",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "899e3267-df4a-4fb3-924b-8f7083ddaa6a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ee833a21-bba8-46b2-bc7f-8235d886ea6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4e2e300-c7ec-482f-bb4a-879c907716bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "518a25e7-2d34-43ed-bcb4-24da75681626"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d910380-c3fe-4277-91eb-6758d24f251b",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07c35c9e-61c5-4e24-9e3c-58a7eff7b141",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3b48af1b-2460-4ede-8fd9-eb9706500517"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3dcd96e-c956-4677-9426-0007f0cadebd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89dbff1f-859c-4cff-a710-1e5412578034"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "52ed0659-a67c-46f1-a52e-034ade7fafcd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87be739e-2bbf-43d7-ab22-7cf7c6fd28fc"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "abaee660-6cab-48c6-8399-8cbe794ee23b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9e04d148-94b5-4a70-90bd-cd050a30b935"
                    }
                  }
                ]
              },
              {
                "id": "35ad48f3-dff6-4975-bffa-ea362652c027",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "3af9ed57-a436-451c-b5c7-1dd57415e3b8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1fb8393-2661-45a5-9588-7285d3850015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5f54f369-d189-4496-884b-244ef6e2c352"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8c6193-ecc9-45c6-ae3c-93d410ca9e2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ed0954a-fbc3-447c-b8ce-167187d0931a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "3983a144-c1b5-4d2a-aba1-efebdbc77b71",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d505e1da-0b01-4adb-8d42-420519a94974",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c21c46d-1808-4e6c-beee-6f14fb7e8424",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8e330819-0bc0-487f-80a0-24f88fdb6c43"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c0e01f3d-ec54-47df-ba42-656799478af0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bf4bd38-7c49-4339-b61c-237cc214bdda"
                    }
                  }
                ]
              },
              {
                "id": "a63e9f8f-dd84-45a1-a926-76bec06af5d5",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "420a65b3-5088-4512-9a40-541b4bb25bf4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bb7cee71-a754-4fc4-a1a2-7c3c9bbe8f73"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b3c2f872-fdd6-44a9-899e-0560c9b27e76",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2ffbae92-8d84-4f50-bc4b-6896dd971d2a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15269d7b-3e07-4187-bee6-43b520394f02",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "c6cf0874-910a-4840-9f73-74bc3be96164"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "69279d3c-9159-4dee-a5e8-dad473cfcc9e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "43c1144b-30bd-4450-8654-4920031126ab"
            }
          }
        ]
      },
      {
        "id": "3155b1b6-b214-4c9d-a4db-126ef88a0f57",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "e9c26484-5238-4b6e-ac39-1f3332b3694b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a4f56503-05a6-4032-b950-5b935189b44b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "16f79dcd-7385-4fad-a1a2-e9bbfa933ac4",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8eec13ee-c732-4a30-9b71-235d5971b7e6",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a805cfe1-b7fe-474b-8a11-c303f373a736"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0469baed-7df4-45ae-a571-2343a75ee825",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "51a0e957-9dbd-478e-b722-1f1790322cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed2ce22d-39b7-41cc-9c50-dcff8650d17a",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e702aa4f-59e5-4fdd-8ed6-e9e07a2a3d59",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "1fdb614a-38cd-4adf-acb6-c0fea1649aa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cd6ad30-693a-4fee-9823-ef4a490eeb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4707a693-45c6-420c-bd0d-de7a4fd2edb3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8437b164-2a41-4f8d-a724-b30066868cea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3d157da5-71d7-466c-bb39-a8a36d6dc438"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "626684e6-6b09-4375-a7f6-1644b7db17ef",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "acc70eb6-9b73-4bb9-9db7-7e8435eb5727"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "eac9f7e6-f9ed-4da7-b344-caded406c9bb",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "cb6238b6-4021-4e54-914f-623ccb9a8546"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "902accea-a65d-4e71-bd41-1ee9deb6edf5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ac40d272-43c5-4224-9aec-9285fe089001"
            }
          }
        ]
      },
      {
        "id": "b5c2377a-e03c-474f-bc0f-0bb17afc7a01",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "e104faf8-d6c6-40c9-b93d-c8187de72301",
            "name": "Negative Testing",
            "item": [
              {
                "id": "67e463d8-8d6d-4825-9f50-5d00bddc45b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ebd5d17f-0b51-4343-8547-621d52940d0c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a53bbfb-6218-4843-89fc-6509b6a1ded3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "bb25dbb9-2d89-488d-8536-98b1ce93be71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894de823-eb87-4a01-b255-7ba6c68b092d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de66e782-0436-4554-b63e-f1f40b1f5a63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1d025e3-9048-47bd-9bb6-96f6b9dadcc6",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36b8e807-b431-4619-be1f-ca30a505ce61",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "5cb9152f-a38b-4156-9e8d-5186b68069ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "345b39e4-2b09-41bc-a59d-5bd185f8d949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de426caf-595c-40cf-997b-1284a0146d01"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f79128d3-d1d5-4d64-9562-189e0915c4f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ffdac309-a579-4e20-97fb-bef20bd1e327"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e16aef6-501e-4726-ba99-b9167bb87ca3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d1ab7841-6b52-4e6b-94f0-1e8c66d87430"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66aa25c9-bbcd-4258-bd26-167de20c8d5f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "f4ef5fa3-0bcd-4358-b9a5-fb1fd531ec11"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "37877f1a-4d35-4a7e-9e44-aac50e519bb0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e655a6f-567c-42a8-b6d6-b30724799f78"
            }
          }
        ]
      },
      {
        "id": "aad98500-2269-42c7-84a2-07dc47ccea2d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "9cb3cef5-b2d5-41d8-86c7-03fa738037ab",
            "name": "Negative Testing",
            "item": [
              {
                "id": "969e8216-343a-4807-9274-24a67d02e7c7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "089e02fb-6c42-4e86-9209-b47076cc5f3b",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dff80ae-62d9-4e7e-8680-f825fd5e1957",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "cac995a0-d119-4fc6-b0ee-2eb305fe1773"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37f0adaa-8f10-43fc-a2e2-5b7ba7c83bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6000c38d-a4b9-4f18-9006-b212398b18b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96e7a14c-1494-44bd-aad9-3e678b35be69",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c70aa42-fc2d-4497-8b2a-a0245bceb8eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ad9b029f-9239-44bb-8a4e-9a1fc6fc0d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce03dc18-6214-460d-b573-25b86a877ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "90b840b9-40ed-47d9-876d-18ce6a79e45c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d73fc6ee-4088-4bff-ae3e-bc3bb13a8840",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c430c23-f49a-4299-82be-44c35ec31acf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0432b028-cd55-4f25-a3ac-e8fbd594b9df",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce31e58b-d637-4378-84c7-9272ae035085"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5968bf78-d68a-498b-a6f5-90ab058ac6ef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "316d1d5e-db91-4fc8-a82f-2297163b80fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1963e6b-0731-4439-9444-4398d44b8798",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "707ecf96-8ca0-4a99-a32d-8f28cba18cd0"
            }
          }
        ]
      },
      {
        "id": "2d720de9-4feb-4faf-b896-3e64d0e03860",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f9f4fdb-4d8e-4cda-acfc-313938fe6c8a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c30c7707-4b86-4ddb-82f1-e75e02f76d35",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "5a7d8503-db4e-4542-80a7-89b11bbcf830",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e2d72bfd-7818-4a93-a4c5-6c655751379d",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "27cb27fe-be14-4cd0-8add-372a8d6dda2d",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 60
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.995929362466335,
      "responseMin": 20,
      "responseMax": 370,
      "responseSd": 39.84747582678738,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675730410421,
      "completed": 1675730436449
    },
    "executions": [
      {
        "id": "fc8ff0ed-7cc0-4b9f-a2fb-f0fada07e326",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a0ba26e0-1436-4a65-8d1d-a9a7b6d2a914",
          "httpRequestId": "b5309b0a-209a-402f-bf4a-215e5a8c58e3"
        },
        "item": {
          "id": "fc8ff0ed-7cc0-4b9f-a2fb-f0fada07e326",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "96a28bbe-591f-4657-96c2-963d9823217c",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 0
        }
      },
      {
        "id": "d90fe6df-b816-4e2d-87e0-27b60cb8e4a7",
        "cursor": {
          "ref": "ed3a56d6-387b-4bb5-b020-c8899408520c",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2dfacf6e-e21a-4f8e-8297-a87ad65608c5"
        },
        "item": {
          "id": "d90fe6df-b816-4e2d-87e0-27b60cb8e4a7",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "7e009fe7-ecc4-44a4-b3f2-0c73b87e8e5a",
          "status": "OK",
          "code": 200,
          "responseTime": 20,
          "responseSize": 0
        }
      },
      {
        "id": "605c9c6d-4750-4ea3-b03c-9f59f723517d",
        "cursor": {
          "ref": "7b79556e-9d6f-41e9-96ca-6a5096f26f96",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "807cab67-b3d7-402e-a1c2-a536d1c472d9"
        },
        "item": {
          "id": "605c9c6d-4750-4ea3-b03c-9f59f723517d",
          "name": "did_json"
        },
        "response": {
          "id": "d8ae7331-9ca0-4cde-a103-06b686aaa3f7",
          "status": "OK",
          "code": 200,
          "responseTime": 204,
          "responseSize": 1211
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0674e51f-0fd1-4b9a-8137-da387d9ba4f2",
        "cursor": {
          "ref": "27a20c87-9de9-4027-9329-e2e73dba5be9",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "13311027-2887-4c9d-baa9-451a4554d1d5"
        },
        "item": {
          "id": "0674e51f-0fd1-4b9a-8137-da387d9ba4f2",
          "name": "did:invalid"
        },
        "response": {
          "id": "863d92d8-e0f3-4a07-bf4c-7d74b10cf27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "0674e51f-0fd1-4b9a-8137-da387d9ba4f2",
        "cursor": {
          "ref": "27a20c87-9de9-4027-9329-e2e73dba5be9",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "13311027-2887-4c9d-baa9-451a4554d1d5"
        },
        "item": {
          "id": "0674e51f-0fd1-4b9a-8137-da387d9ba4f2",
          "name": "did:invalid"
        },
        "response": {
          "id": "863d92d8-e0f3-4a07-bf4c-7d74b10cf27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "94ed1610-6ddd-4862-ad7d-14f0c834af9c",
        "cursor": {
          "ref": "f5cc0b8e-a860-48d0-bc01-cb6ec54df024",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "3c3c7b53-3d82-4c63-a338-f380eec689b4"
        },
        "item": {
          "id": "94ed1610-6ddd-4862-ad7d-14f0c834af9c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "2aaa6935-501a-4d82-a8e7-b271dd8e0521",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e824d07-2eaf-499a-8244-cd24d4f34abf",
        "cursor": {
          "ref": "d13d8745-808a-4ff2-b3e1-ba2ccde46fbb",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "54bec21c-e821-49a2-b389-92436cf75f24"
        },
        "item": {
          "id": "2e824d07-2eaf-499a-8244-cd24d4f34abf",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "f6086257-dd62-43a2-8ff4-f686381f6165",
          "status": "Not Found",
          "code": 404,
          "responseTime": 53,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8013ec31-97a1-4deb-8603-7161bfcc3c52",
        "cursor": {
          "ref": "60cbdad6-c4b3-441e-b6b1-a2d4f47588a8",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "360c1360-27b5-4183-a65d-acc77021effa"
        },
        "item": {
          "id": "8013ec31-97a1-4deb-8603-7161bfcc3c52",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b9abb5e9-1a19-45fe-9244-d5c10bb94233",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 54,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f47c0f7-adb9-4038-8b4b-aeef24faf0ed",
        "cursor": {
          "ref": "1c2e33ec-6366-4d09-b7c6-4287f56675e2",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b8d0ce9-5780-40ec-bc09-f77df49f868a"
        },
        "item": {
          "id": "5f47c0f7-adb9-4038-8b4b-aeef24faf0ed",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6d8f9686-bb4e-49a9-a0ac-9ab7d0320554",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f47c0f7-adb9-4038-8b4b-aeef24faf0ed",
        "cursor": {
          "ref": "1c2e33ec-6366-4d09-b7c6-4287f56675e2",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7b8d0ce9-5780-40ec-bc09-f77df49f868a"
        },
        "item": {
          "id": "5f47c0f7-adb9-4038-8b4b-aeef24faf0ed",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "6d8f9686-bb4e-49a9-a0ac-9ab7d0320554",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 54,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d227dba5-cca5-48c0-96b6-41a6d755c4c1",
        "cursor": {
          "ref": "4e961d1f-8559-4c60-8199-f37631731ff6",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "aebbe155-a9b8-415c-a914-d9f8e4de56cc"
        },
        "item": {
          "id": "d227dba5-cca5-48c0-96b6-41a6d755c4c1",
          "name": "identifiers"
        },
        "response": {
          "id": "9798a2bd-14ac-4912-a7d2-8b1a8de462ea",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 500",
              "stack": "AssertionError: expected response to have status code 200 but got 500\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'didDocument'\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "8bd8dfd4-f433-4bd4-945b-4dd7b2f1d583",
        "cursor": {
          "ref": "2e1474de-995a-478f-b2fd-114984aecbc9",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4a30b3db-abfe-4a4d-90bb-a4f1f9867eec"
        },
        "item": {
          "id": "8bd8dfd4-f433-4bd4-945b-4dd7b2f1d583",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d6e42f16-f7cc-4661-a2a2-f8b1904150a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bd8dfd4-f433-4bd4-945b-4dd7b2f1d583",
        "cursor": {
          "ref": "2e1474de-995a-478f-b2fd-114984aecbc9",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "4a30b3db-abfe-4a4d-90bb-a4f1f9867eec"
        },
        "item": {
          "id": "8bd8dfd4-f433-4bd4-945b-4dd7b2f1d583",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d6e42f16-f7cc-4661-a2a2-f8b1904150a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f6b3edc-4241-47e3-a74e-0b857e9fabfa",
        "cursor": {
          "ref": "e88af74b-e883-4922-8e25-fdc588422bda",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "3d483a00-74aa-4ed3-aa7e-01c322434f20"
        },
        "item": {
          "id": "4f6b3edc-4241-47e3-a74e-0b857e9fabfa",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "6dc5ea7f-4e7e-410c-8864-e419cdad9477",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03cf6111-0199-4a9d-b56b-0d70827bf4f0",
        "cursor": {
          "ref": "ca514ea3-ced2-4390-862f-dc7baae35793",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "66359347-c6dc-4a04-a465-7f0fdeb309d3"
        },
        "item": {
          "id": "03cf6111-0199-4a9d-b56b-0d70827bf4f0",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "1c738da8-654c-4bc3-8fa4-3ec2bd6abb3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94e9e8ee-a8b3-414e-aeb4-b9c655ecf9d2",
        "cursor": {
          "ref": "7ac92497-d4a0-4659-b28b-03588f12ba8f",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "7ded5ce7-1cb3-412f-af89-ee30334fd39a"
        },
        "item": {
          "id": "94e9e8ee-a8b3-414e-aeb4-b9c655ecf9d2",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "44474b0e-7b0d-4f57-b7bd-a01b3b50bcf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "069c43cf-a7c0-4e77-9148-a3fbf3a648e5",
        "cursor": {
          "ref": "a6d9d9da-a4ef-4e98-8c73-fbf9476b978f",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "a0e01d4e-9b64-4ee9-8782-86d874dea4f5"
        },
        "item": {
          "id": "069c43cf-a7c0-4e77-9148-a3fbf3a648e5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "1ff10af7-9372-4549-9072-3112aa04acdf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "567aef0e-f472-44e9-9ca4-cd8d0a3e2278",
        "cursor": {
          "ref": "84bcb170-516e-45b2-a339-158871749586",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "bebd3cc5-61d5-425e-8699-c5bb97f219ee"
        },
        "item": {
          "id": "567aef0e-f472-44e9-9ca4-cd8d0a3e2278",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "970ce586-b088-44d3-8d07-5772c3cabacb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b366b5b2-92d5-40de-9149-ab811780557f",
        "cursor": {
          "ref": "b30059f4-8e12-4334-8b73-2ff7bbd83831",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ed14a41a-1f25-42ef-a917-4bff4b284a81"
        },
        "item": {
          "id": "b366b5b2-92d5-40de-9149-ab811780557f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "27382e7e-2dd6-47f5-b15d-49ac368faf10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48717c04-b786-407d-a385-663993d4ba85",
        "cursor": {
          "ref": "d779f5a1-7ace-49b6-981b-6c7c175316e7",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "72d5093c-b4e7-4851-894a-6d6a1dea7098"
        },
        "item": {
          "id": "48717c04-b786-407d-a385-663993d4ba85",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "65220feb-1f0c-4934-a4e2-3cc59cf47279",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b428f310-d760-40dc-ad96-b16c536995d9",
        "cursor": {
          "ref": "4af77896-7c09-4d49-8379-bcb1a2ea5ade",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "b1b619ea-8f6e-4213-b7e8-737bcdb1db26"
        },
        "item": {
          "id": "b428f310-d760-40dc-ad96-b16c536995d9",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "bf59c5e8-6f9f-40ba-8ba9-0689b375890a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce732cbf-b0c2-4b47-b1fd-66692797a40c",
        "cursor": {
          "ref": "4bf2ec0f-9f8a-4de0-a8b1-f0514536a41c",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "ff5a0f39-579a-44bd-8049-7ea328b5353a"
        },
        "item": {
          "id": "ce732cbf-b0c2-4b47-b1fd-66692797a40c",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "de51bd89-5460-4422-ae1e-3bd4e9a200f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "481ef5a0-f669-4c54-989c-99583047da30",
        "cursor": {
          "ref": "04f76c5e-9beb-4966-b73a-709236a83db6",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "737c6d34-4204-482d-94bf-750c16f8400f"
        },
        "item": {
          "id": "481ef5a0-f669-4c54-989c-99583047da30",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "2d3f4736-1ad1-4744-9602-6b9dc92d9189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b752870-98a5-453a-9a23-88e42038ac4b",
        "cursor": {
          "ref": "d46a98d3-a2e1-4102-9afc-b182aa6caa65",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "65edb914-7e21-4da0-8108-f3d7f1f48027"
        },
        "item": {
          "id": "6b752870-98a5-453a-9a23-88e42038ac4b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "a052086a-77c4-41a6-8143-5c2ca21e98c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1986c594-c883-418a-8d73-c1292fc30fb5",
        "cursor": {
          "ref": "74ac91b8-b5d0-42ff-9d9e-7f3666d64933",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "cd394483-b2fa-4ba6-9559-617e1ef0366a"
        },
        "item": {
          "id": "1986c594-c883-418a-8d73-c1292fc30fb5",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "e5c6b6d0-4495-4f9a-8b02-33bc8e6cde03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ea820b5-4790-4e9f-8767-9ac654dd23ba",
        "cursor": {
          "ref": "228e9b46-cb18-4164-bb6b-8b14ca16c587",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "714983c2-a674-4d30-81d0-f2ab85a83f32"
        },
        "item": {
          "id": "6ea820b5-4790-4e9f-8767-9ac654dd23ba",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "f6955b10-b31b-44dd-a3bf-12dcd3b6763d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5146449-b34f-49b4-b4cf-0d142dbd16a8",
        "cursor": {
          "ref": "b794588a-d2f2-4803-99ca-7a71ca06902b",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "da6ec57a-cd2f-46d0-ad97-da54d36794d5"
        },
        "item": {
          "id": "d5146449-b34f-49b4-b4cf-0d142dbd16a8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "72c2b665-ec33-4d8f-81bd-9602bf6b5bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd1ff9f-28f8-4ef8-9cea-10ed089ed9ff",
        "cursor": {
          "ref": "e10921ee-2306-4119-af0f-4f1f53fa83e1",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "f84a5814-cf11-4802-b7a0-20e70c554a1b"
        },
        "item": {
          "id": "ebd1ff9f-28f8-4ef8-9cea-10ed089ed9ff",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "35c00eb5-a258-4999-b755-2811e9d27eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1b2c57-9060-4a9e-a82c-fbdd0d7fc484",
        "cursor": {
          "ref": "170d42c8-1ed0-4fcb-842d-4cd352aea5a2",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "b04a1bfc-58b4-44fe-b9a7-d37f616d3e33"
        },
        "item": {
          "id": "0f1b2c57-9060-4a9e-a82c-fbdd0d7fc484",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "7a0833c1-878e-454b-b24f-a852de93fe44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af82f3b-48cd-4637-a47c-33876df1cfa8",
        "cursor": {
          "ref": "56109c3f-b8d0-4624-8d95-af6bc0607cc4",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "ad001c72-6164-4ca0-8a14-3447a08e6c30"
        },
        "item": {
          "id": "1af82f3b-48cd-4637-a47c-33876df1cfa8",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "f2eef6d9-6efc-4001-a6c6-80389a1c1b5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed87078a-4e45-44da-b8fb-f285471b1ad6",
        "cursor": {
          "ref": "524ef047-f812-4065-ba3b-6f66cfe35ddb",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "dccd6b52-8f8f-4581-9e11-233c85f816e1"
        },
        "item": {
          "id": "ed87078a-4e45-44da-b8fb-f285471b1ad6",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "bc7722bb-4c15-456e-8392-f6fd263c71c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561e2ac2-e87c-4f46-847b-f4d1fb8903c2",
        "cursor": {
          "ref": "afcebb2d-1a5f-46d4-8d37-b65f8e352c19",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "887d5bf1-4ff4-4734-86e7-97be198fff5e"
        },
        "item": {
          "id": "561e2ac2-e87c-4f46-847b-f4d1fb8903c2",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "236d7d5f-0cad-461e-b77c-0b936646cf6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ed673c2-080e-48eb-9f5c-a6a497cac6ba",
        "cursor": {
          "ref": "b4bff837-0d54-4179-b773-4e6a3eaa734e",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f5e2be3c-9e0d-494e-b9f5-31bcafdfaaba"
        },
        "item": {
          "id": "5ed673c2-080e-48eb-9f5c-a6a497cac6ba",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "305a2a25-eb0e-45b4-a690-484fd8f326bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "123d850f-80a8-40b7-b0c7-7ac27ca11f01",
        "cursor": {
          "ref": "5360ba21-b7f3-4321-a62b-e0f86f666274",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "fe8b397d-1f28-4cd7-9170-2b007794bbc3"
        },
        "item": {
          "id": "123d850f-80a8-40b7-b0c7-7ac27ca11f01",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e223f6dc-8f70-4507-aaa5-9933ec0c0404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6bbbce-b53f-475b-afd3-de119970069e",
        "cursor": {
          "ref": "e23aa79b-780c-43ce-95af-c897065e7a41",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e2fc85eb-68d4-4192-a7d7-398ab4e4e26c"
        },
        "item": {
          "id": "cd6bbbce-b53f-475b-afd3-de119970069e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e4310a7c-c89d-4963-8f4f-d9ba532fef39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8e42398-14f1-41d3-95b2-2c7526a7966e",
        "cursor": {
          "ref": "6923df76-df26-498b-b500-93fca825cd51",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ed8c9be6-5d64-405a-bafa-2a5d8121cc5c"
        },
        "item": {
          "id": "f8e42398-14f1-41d3-95b2-2c7526a7966e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6c2591a0-5fd6-4729-bfaa-e4c04a14a90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4b7696-a004-4b1c-b09f-de75196dd7b4",
        "cursor": {
          "ref": "1a79c6ea-c40f-4392-9435-bc70db71c052",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "8506a3aa-f76c-4770-9404-ca19823ebcf3"
        },
        "item": {
          "id": "8e4b7696-a004-4b1c-b09f-de75196dd7b4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "1cbeb7e5-2423-4a29-80b3-547be83d52c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e93447a-8674-4a1b-a429-20ec9df9992b",
        "cursor": {
          "ref": "a7f54f54-df7a-4021-94d1-6d1ca6fdf5c5",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "82e4c849-bf46-43fb-99aa-6536d586cc60"
        },
        "item": {
          "id": "6e93447a-8674-4a1b-a429-20ec9df9992b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2a8126c3-528e-41ee-bfe3-9596d0fd84f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89c21725-6214-4725-8cb6-d65c84a117fe",
        "cursor": {
          "ref": "004ac9d6-ec1a-4022-89af-311c01e22a2b",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8935caeb-f787-4c26-91e7-38a0f4095f15"
        },
        "item": {
          "id": "89c21725-6214-4725-8cb6-d65c84a117fe",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "e024af51-cf2a-4424-ae7f-f3c4c3014579",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6962932-afe8-41fe-a7a1-4e1199746221",
        "cursor": {
          "ref": "c9e28445-983c-4372-b251-9bc7c41ebeaa",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0cf40cdc-bd53-45be-886a-149bb5590c69"
        },
        "item": {
          "id": "b6962932-afe8-41fe-a7a1-4e1199746221",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "3b33bf7b-8ebb-422e-94bd-6a66c4bfb88d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "608b64d7-32e2-4eb9-9962-96fa75b4b242",
        "cursor": {
          "ref": "fd28adfa-46a7-4b1f-adaf-dd7c3a87c2ab",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "0edef79c-46e8-4524-9b3d-acbea85715a9"
        },
        "item": {
          "id": "608b64d7-32e2-4eb9-9962-96fa75b4b242",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1aedf443-b127-4914-9d8f-b23b840b762a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac3f2e14-6640-4fb8-93c4-4076970a7dde",
        "cursor": {
          "ref": "4f839f6b-5cb4-404f-9631-12cb5c1caf2d",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "36e92151-87e7-4ae5-9634-5425e735403c"
        },
        "item": {
          "id": "ac3f2e14-6640-4fb8-93c4-4076970a7dde",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f1587308-c9e6-4903-96e6-453546214ac5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6638bb2f-b382-4f88-af46-4ef3a231299b",
        "cursor": {
          "ref": "0278e90f-ef3d-48ff-9128-3b2ff6c684a2",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "ef05bf08-317c-47f4-b1ee-b88d85f6b285"
        },
        "item": {
          "id": "6638bb2f-b382-4f88-af46-4ef3a231299b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "172a6b57-41f4-4fcf-a058-84c7c136a967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ff1119-950a-4c8d-922d-5e4eff939e97",
        "cursor": {
          "ref": "26ded2a5-f2ca-4c0a-8410-6a91be422ec3",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "11ab3d49-4ebe-4014-8bdc-aa0bbc833636"
        },
        "item": {
          "id": "d4ff1119-950a-4c8d-922d-5e4eff939e97",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "4e156b97-84f5-43dd-a312-ec050931a259",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32633ebe-ca3e-4936-97e7-ba6a8668a35b",
        "cursor": {
          "ref": "a2a4fc1c-30e4-434e-9332-c68a068c82b3",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2052ec0e-2fc6-41ca-9fd0-eafde158716f"
        },
        "item": {
          "id": "32633ebe-ca3e-4936-97e7-ba6a8668a35b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b551e1d3-da54-4a40-918a-864623020417",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ecda20-0299-494e-9910-750c33379fb3",
        "cursor": {
          "ref": "a44b752e-6ffd-4091-a4fc-93b182c42624",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f595f539-4a25-401a-a6c3-700000a65b4c"
        },
        "item": {
          "id": "b0ecda20-0299-494e-9910-750c33379fb3",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "8e6e8d10-56d7-41f1-8ec6-84d162c3a1da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "134670eb-f2df-474d-afc5-edc55a148134",
        "cursor": {
          "ref": "a8996806-63e3-44a8-a6f6-c4f63336bdf6",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "fbf203de-9a50-4c57-bfc7-ae103f1cc793"
        },
        "item": {
          "id": "134670eb-f2df-474d-afc5-edc55a148134",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "305fa8fe-76b5-4125-815b-ce0384cb4b85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89bd5a63-d8d0-40a4-8498-8059cf545f90",
        "cursor": {
          "ref": "d30b49b6-f733-479b-b3fe-588f288333bf",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "d772711b-28f9-457b-a9de-38bd570fa5f4"
        },
        "item": {
          "id": "89bd5a63-d8d0-40a4-8498-8059cf545f90",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "501c4717-d375-4069-802b-7551a8529a9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d834c49-7a58-4dff-9e62-02140c3f0c8f",
        "cursor": {
          "ref": "869ffb93-bb4c-4224-9fd3-269f9a1a1eb2",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f78d7230-22b6-4684-91b2-6f275995345d"
        },
        "item": {
          "id": "7d834c49-7a58-4dff-9e62-02140c3f0c8f",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b8756fa5-00cd-41f0-befb-246e9ae8ed54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87e8a00d-ef08-425e-a358-4583b30b2531",
        "cursor": {
          "ref": "d2324bb1-1fcd-49f8-b2a4-5a6ed7ddf106",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "0229a8ea-137e-48f6-a1db-cbc8256b42f9"
        },
        "item": {
          "id": "87e8a00d-ef08-425e-a358-4583b30b2531",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f5fa3492-980f-4327-8041-8fbe4965cc0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "0cb76cfb-50e7-4055-98db-aea613edb516",
        "cursor": {
          "ref": "3cc1f6a3-ec5f-4ef4-b568-2887692d8ddd",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "e16ee815-f18d-49dd-88bc-77b1bacd7e90"
        },
        "item": {
          "id": "0cb76cfb-50e7-4055-98db-aea613edb516",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "95e1104b-9d64-446b-aca9-21dfa963d5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7491060b-4268-4e38-b1c2-8ddf13c98078",
        "cursor": {
          "ref": "995b8065-4527-443e-ba59-9735494a4a1a",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "1b56a8cc-75d3-4903-95f9-1c45d6989230"
        },
        "item": {
          "id": "7491060b-4268-4e38-b1c2-8ddf13c98078",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "06e77a7d-6efe-4a85-a2e5-fd4cb844b785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1441f2a-fd60-4271-aace-43523e6ef778",
        "cursor": {
          "ref": "c4797e89-36ec-44ff-b583-a7a76d4fe160",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "0a54e256-ed97-4f3f-bea4-c498fe9fc081"
        },
        "item": {
          "id": "b1441f2a-fd60-4271-aace-43523e6ef778",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3dff317f-342e-46db-8d54-a1e94e6531c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c66362f-864c-4c34-bdc3-2ead06546cd3",
        "cursor": {
          "ref": "b6d345b1-63f7-451d-9bae-af335995db04",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "f4fca2d9-0658-4891-93c4-b549891c8401"
        },
        "item": {
          "id": "4c66362f-864c-4c34-bdc3-2ead06546cd3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6110e9d2-6b8a-4e7f-ac5e-55dca2ad8e19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0def3bb-2b0f-46c4-b98d-832f3b78f5b5",
        "cursor": {
          "ref": "6bebe273-a323-41e1-9be4-4221b7053357",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "f7e778f7-f838-4025-a876-331828d34f7b"
        },
        "item": {
          "id": "b0def3bb-2b0f-46c4-b98d-832f3b78f5b5",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e48129e7-7c69-4e35-b16f-c1337745b3d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad1b745d-e86c-4fd4-adb0-0fb986ad3739",
        "cursor": {
          "ref": "8b713586-a9ba-43c8-9f57-da13db04ac84",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1b787a17-c0b6-4705-b077-c04e9c92a18a"
        },
        "item": {
          "id": "ad1b745d-e86c-4fd4-adb0-0fb986ad3739",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e0b3472a-4d93-434d-a9ac-a671b5c0a9b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24c2c07-092b-4592-b7bd-fbc671031525",
        "cursor": {
          "ref": "e50f3c08-074c-4406-8913-38181439a9e0",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4d178a99-df91-4952-a4d3-396f1053c444"
        },
        "item": {
          "id": "d24c2c07-092b-4592-b7bd-fbc671031525",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "144e0018-dae8-43f9-aae4-61375bb3c006",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "619cc236-687f-45d6-a35f-9823bd941ec5",
        "cursor": {
          "ref": "05b576de-83bd-439b-be65-f7edb731ad0b",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "43c8d970-4357-4cef-b3ae-b07544ea0c64"
        },
        "item": {
          "id": "619cc236-687f-45d6-a35f-9823bd941ec5",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "b5dd8d66-fcd1-410c-928f-37a94436af6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7844baec-6829-4f5b-95ad-e946e13c6898",
        "cursor": {
          "ref": "07d93b2c-6df5-4efb-987c-09574575109e",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b498932b-49b6-4f6a-a398-ac4fbeb2aad4"
        },
        "item": {
          "id": "7844baec-6829-4f5b-95ad-e946e13c6898",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "d27d891c-8770-4d80-8cdf-d4b0588bf68e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d25c5567-cd1b-483b-af5c-f46613579bdc",
        "cursor": {
          "ref": "5f476e6a-afc9-44e5-8477-92cec3e5dd42",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "21e56631-cad4-4dc5-8bd9-19867d0271b0"
        },
        "item": {
          "id": "d25c5567-cd1b-483b-af5c-f46613579bdc",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "882eaffc-9a38-4c2a-95e3-ee7e58d1ed01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b980499-64d7-4944-9eaa-6ab1c70ede7d",
        "cursor": {
          "ref": "adcba19a-f49e-4b55-8c63-21b97e9dff36",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "469e5286-7aba-4cb2-a793-d2bb89f55c6a"
        },
        "item": {
          "id": "2b980499-64d7-4944-9eaa-6ab1c70ede7d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "f590150d-c504-4183-a489-ef8af182a4e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1620ff1-9bef-467e-840a-ba7b88e562d3",
        "cursor": {
          "ref": "42f6be37-2d2e-4e6f-b83e-e844954eab22",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a3442b19-9fee-4e79-80a6-ab87ff8111b6"
        },
        "item": {
          "id": "c1620ff1-9bef-467e-840a-ba7b88e562d3",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "81133b90-15e3-48a9-a096-14366c5f9e7d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9c5e6b-dc2b-415a-bc9e-f488a27eaa37",
        "cursor": {
          "ref": "f53395aa-c3c6-4afa-af40-2ab3593000c9",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "b2621954-1d9b-4435-bccc-074c993f874e"
        },
        "item": {
          "id": "6f9c5e6b-dc2b-415a-bc9e-f488a27eaa37",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "6fc39a75-10d3-452f-aa88-0f6d5a5e15f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fa9233c-a7b3-496f-83d1-e63fde721275",
        "cursor": {
          "ref": "7ad2f997-ccaf-4b5a-a1cf-a744594c0506",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8071a85b-cc6c-4fa2-9f35-3b05ebc48dde"
        },
        "item": {
          "id": "4fa9233c-a7b3-496f-83d1-e63fde721275",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8114159a-296a-431d-9cb0-1d214a6ab3b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b92f6bdd-e2f2-4f1c-be5c-7692560f2f67",
        "cursor": {
          "ref": "81921755-6672-4f15-a130-458c5d3cb630",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "1136b928-686b-4832-8d72-ef9e55727694"
        },
        "item": {
          "id": "b92f6bdd-e2f2-4f1c-be5c-7692560f2f67",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f222001d-9613-48e4-8db3-185a81bdc876",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dfa2492-6f5b-435c-b9e8-b04d7ca96b4a",
        "cursor": {
          "ref": "50d69c61-f290-41a5-b50e-2a09d9236e32",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "538bbd2c-bc59-48d5-ae50-a1756a300f8d"
        },
        "item": {
          "id": "9dfa2492-6f5b-435c-b9e8-b04d7ca96b4a",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "4232e86c-8b37-483c-9aea-cb88916d57c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a24493a-a58f-4d36-8c79-b8f3d6768b20",
        "cursor": {
          "ref": "d2364d61-12b9-4790-a152-f85e388eae84",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "f28e4de6-1658-477b-8b5e-3eceea206255"
        },
        "item": {
          "id": "8a24493a-a58f-4d36-8c79-b8f3d6768b20",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "8d15f03d-46e7-4ded-8022-521d1114ab8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c75e541-33a0-4e4d-9325-772f4473800a",
        "cursor": {
          "ref": "dbc08b96-2661-4ad5-8a10-a15b24f2784d",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "12cd18f9-565f-459e-adb5-1aaa08945136"
        },
        "item": {
          "id": "2c75e541-33a0-4e4d-9325-772f4473800a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "e235c7ae-6697-46f7-921a-f7780fa3b960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b30bd663-ca34-4b6b-a1f3-81d9c9b970a7",
        "cursor": {
          "ref": "4a075e9f-4256-4b67-93c4-bce98f5dbb78",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e4c32ff6-f12d-4aa2-ba63-e262e19072e6"
        },
        "item": {
          "id": "b30bd663-ca34-4b6b-a1f3-81d9c9b970a7",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "ee44ed79-3c7f-48c6-969a-bd4df93cbc6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db13af06-8497-46d0-9e20-ceba4939ab2b",
        "cursor": {
          "ref": "6e7c25b4-ad69-46ac-96e3-01fa133408a5",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "104c916c-2813-45a5-bcba-c6cfb603e4ab"
        },
        "item": {
          "id": "db13af06-8497-46d0-9e20-ceba4939ab2b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "a9e584e4-fe80-4cf6-9d8f-85b0a6a6595c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "595d385b-0378-466e-8d7f-de688ee94e4e",
        "cursor": {
          "ref": "59b88111-8d79-4c40-8642-bc360e2ba79e",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "869e546b-e18d-4ad7-bbf4-52e5bae4d5b9"
        },
        "item": {
          "id": "595d385b-0378-466e-8d7f-de688ee94e4e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "feb1742f-540e-4890-a2cf-77207e04a1a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3285b75-b928-4850-ba3b-8723ae236d2c",
        "cursor": {
          "ref": "495b4048-04c8-4748-9253-e1a8ca0c8f4c",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "0f2542df-05de-441e-8ae5-13fd8606efc7"
        },
        "item": {
          "id": "e3285b75-b928-4850-ba3b-8723ae236d2c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d526a214-cafc-4ca5-abdb-fa8c326e07e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0757f2fd-76c5-49e0-acdf-1786696554c2",
        "cursor": {
          "ref": "4da54d52-cdb4-4108-a8fb-b8bb58fe230d",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b1965f6f-0bcd-4e12-9aea-9bf9966392a9"
        },
        "item": {
          "id": "0757f2fd-76c5-49e0-acdf-1786696554c2",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "784658ad-d1b3-47db-ac4d-04aa0697ba67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61c20cd6-4497-4818-98c4-3431dfc82fc4",
        "cursor": {
          "ref": "29062f0a-8a17-4732-b0eb-345fdd44aca6",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7271e110-f914-48a7-832a-bbe4b0fe22a9"
        },
        "item": {
          "id": "61c20cd6-4497-4818-98c4-3431dfc82fc4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "789fe6a4-a20d-456c-b486-0b46f3b92e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2adb3c-15e1-4d2b-88fb-ed0b68925aa5",
        "cursor": {
          "ref": "04b88ab6-015d-43e7-95cb-0b2589f2fd20",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f8f0536c-db80-4b6d-921e-744ec5c96025"
        },
        "item": {
          "id": "0a2adb3c-15e1-4d2b-88fb-ed0b68925aa5",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "50b2d7a9-999f-4af9-8f6f-66f8df875746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "161cdc21-0ea5-48a5-9942-1d647b198e22",
        "cursor": {
          "ref": "ea59f76c-b5b5-4245-8c04-5c467ddc1b01",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "533836fb-2149-4b71-a0cb-94ea548796ec"
        },
        "item": {
          "id": "161cdc21-0ea5-48a5-9942-1d647b198e22",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8fc18729-6943-4dcb-a735-e68cda1e24d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7deb1e3c-5378-48f1-9489-e5143d04fc75",
        "cursor": {
          "ref": "f450c44f-34a4-44fb-a7b5-a9654fdfcdc7",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "f4140382-364f-405e-a1a7-82cfe82d3be8"
        },
        "item": {
          "id": "7deb1e3c-5378-48f1-9489-e5143d04fc75",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "86e2c30c-26f4-4b28-8e93-cb80e4dab445",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0916bd8-ff08-4a77-8911-c3e40c68b215",
        "cursor": {
          "ref": "9eef2ab9-37b3-4f63-a568-479cd979b532",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "30e26141-6768-49da-ac65-67cf19cb6d42"
        },
        "item": {
          "id": "c0916bd8-ff08-4a77-8911-c3e40c68b215",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "1981e145-a062-439a-8b25-ab81e45947f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5caca292-06e9-448d-8cdc-588179e9c484",
        "cursor": {
          "ref": "2d74d00c-c99d-47fe-82fb-50a73674ba05",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "73ad6834-6faf-4ebb-b695-04ff37fa190c"
        },
        "item": {
          "id": "5caca292-06e9-448d-8cdc-588179e9c484",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8a9f005b-e30d-4257-9c38-a029ce25d9f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a03a8966-32f4-4d46-b547-02d5d4e2a347",
        "cursor": {
          "ref": "edf6233f-a6b3-416a-92a2-a40aca20adcd",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "bd5297a5-92f0-451b-9cde-67efc163b84d"
        },
        "item": {
          "id": "a03a8966-32f4-4d46-b547-02d5d4e2a347",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f26764e6-83fc-4c31-8538-dee834020234",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cd2c3e5-3d16-443f-97ce-f41017d0aeb6",
        "cursor": {
          "ref": "aeeca7ae-bc3e-4afe-8373-660d0f33b55b",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7376e079-5297-40e9-8c42-95ab1ef70769"
        },
        "item": {
          "id": "4cd2c3e5-3d16-443f-97ce-f41017d0aeb6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "03ed7b99-ac19-4fff-8e6d-0935bbc4427b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fe10878-3e3e-4a2b-b141-f4e4040fc065",
        "cursor": {
          "ref": "e65fa748-d15d-43c9-bdea-345f498c30e2",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "7456abaa-e1e5-4b77-b210-8826b7647edf"
        },
        "item": {
          "id": "7fe10878-3e3e-4a2b-b141-f4e4040fc065",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "fec68f05-1c11-4dd7-89d9-0aa74354f0ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00fe8e51-85be-4924-884d-b9e2c7ac8acf",
        "cursor": {
          "ref": "5d756335-73ce-4548-a3cb-40d93fae741b",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7344835a-fa36-4819-b196-1183ef1e98ff"
        },
        "item": {
          "id": "00fe8e51-85be-4924-884d-b9e2c7ac8acf",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "30d34672-d9cf-472f-8e41-5d401dcd7de8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e43966a-8d69-4697-9b34-be32ad57ab89",
        "cursor": {
          "ref": "ad5386d7-1188-46d4-aa60-4f326ce63551",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "bb7e8d58-5c75-4c69-8dfd-7ef8dc4d199d"
        },
        "item": {
          "id": "9e43966a-8d69-4697-9b34-be32ad57ab89",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2ed97a26-6192-4ed5-8a38-2aefecd73646",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66edc710-7220-47a8-8fde-a7cba1a142f2",
        "cursor": {
          "ref": "1fb3e34c-74c1-4633-83f0-8e22913601aa",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "fcf6ecfe-78e3-4da6-ac02-f780466c40fa"
        },
        "item": {
          "id": "66edc710-7220-47a8-8fde-a7cba1a142f2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "d2bcda28-8236-4f5d-afdd-7ddcc9d7a45e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b30176-28b7-43a2-9602-a59f8eaeb661",
        "cursor": {
          "ref": "2629f8e3-1bf5-47df-af7f-96d1b041b38e",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "2ce20113-f30c-4664-9abc-8bcbc221e957"
        },
        "item": {
          "id": "e2b30176-28b7-43a2-9602-a59f8eaeb661",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "c4bad688-3a2b-4cec-b17b-4ae7ae1e428a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dd2f9b9-e6e8-4db0-a897-7ae621fc570a",
        "cursor": {
          "ref": "c752470a-de9a-41ff-8581-a6d821f8b641",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "50c6f76b-8f76-4b76-a3cb-42ee61c4cd92"
        },
        "item": {
          "id": "0dd2f9b9-e6e8-4db0-a897-7ae621fc570a",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7ab17cfa-5634-4a33-9ded-2fce4b4f8982",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f315d1c-4803-4648-bc68-d344e765e805",
        "cursor": {
          "ref": "fc27f996-b682-4a7d-a168-d44b781e9020",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ae052062-4116-49a7-b771-e1ff3d2cabbe"
        },
        "item": {
          "id": "6f315d1c-4803-4648-bc68-d344e765e805",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "08e99661-a223-4437-a8ab-91639d5c4e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98952419-ece3-4843-8441-61cb73825615",
        "cursor": {
          "ref": "70a728e3-ff71-4451-b853-5be62c71f854",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "6634e277-03f8-437b-ac38-42dc36cfae84"
        },
        "item": {
          "id": "98952419-ece3-4843-8441-61cb73825615",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "205a90d0-74e2-467c-8ca3-ef738ba49be6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c329d3c-f6fd-417d-9157-c4106f2b02d1",
        "cursor": {
          "ref": "5b8af541-cf86-44f5-b31b-cf478b4e164b",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "2d67d311-5f20-4886-94d7-f886bdcd0f6a"
        },
        "item": {
          "id": "5c329d3c-f6fd-417d-9157-c4106f2b02d1",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "0b873bb2-21f5-4503-95c8-2e4ba608668a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05eaf108-17ea-4f35-9063-e36b4b3ba677",
        "cursor": {
          "ref": "47752265-9ef8-4ed1-ac18-3384fa0f124c",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1a1b5242-531e-4ad3-9881-d2fd02eeafd7"
        },
        "item": {
          "id": "05eaf108-17ea-4f35-9063-e36b4b3ba677",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "ceced308-214a-4449-bda3-db42bcfd06f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab9acb6f-b388-402c-8120-21ddd4d9d985",
        "cursor": {
          "ref": "af0e1cb9-d655-4e30-bd7b-1e6b3d80ab88",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "835fe915-6046-415d-a459-518637300d50"
        },
        "item": {
          "id": "ab9acb6f-b388-402c-8120-21ddd4d9d985",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "b8995d86-d1c9-4701-b2ba-1f1a46afe193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24724cfe-2bfb-491b-b490-0d3ac19f3883",
        "cursor": {
          "ref": "f2eb4a13-1dff-43ed-a0b3-0bcc5ce916aa",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "65244aee-214d-4b77-8d3b-8af7f2b814d8"
        },
        "item": {
          "id": "24724cfe-2bfb-491b-b490-0d3ac19f3883",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "5ced6431-a4f1-449b-90ac-a068a863e8b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "953dd552-4e7e-46fa-b49f-046738b0a601",
        "cursor": {
          "ref": "f60c58c9-f45d-4339-8d6e-da1182700656",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "47cc33c1-0a41-43fe-8e71-bc77f40af153"
        },
        "item": {
          "id": "953dd552-4e7e-46fa-b49f-046738b0a601",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "f4187907-0834-4fe0-934c-87cbb0f8ad2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced82e67-ff1b-407e-8aab-f859c76a4f76",
        "cursor": {
          "ref": "9ec22245-3a5b-463a-81b8-0cbeb85ae496",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b48d53de-407d-46de-9456-4924ce925081"
        },
        "item": {
          "id": "ced82e67-ff1b-407e-8aab-f859c76a4f76",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "a6943291-b724-4dbc-b799-6de44829468f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4377a7-ab18-42d9-a47a-b3880792cbb6",
        "cursor": {
          "ref": "07ef7ef2-07d2-4ea4-8cd8-4a3308b5b4d4",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "013ef1e5-965d-49a7-9b1c-a64da5836376"
        },
        "item": {
          "id": "2b4377a7-ab18-42d9-a47a-b3880792cbb6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "07f9b949-cb9b-4c75-8cfe-df85394a1c05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18db909e-d326-42f5-9a32-b21bb970ac27",
        "cursor": {
          "ref": "f077f6ba-d6ba-40f7-b4ba-721bcd395285",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d8781469-4d1f-44cd-a7cd-8674ae6bca92"
        },
        "item": {
          "id": "18db909e-d326-42f5-9a32-b21bb970ac27",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "5dc90ec9-ea1d-4859-87a2-2edd19c7285f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ac056bb-239d-4b5b-87b4-685535162bc5",
        "cursor": {
          "ref": "e76c2b7a-8123-4acd-959f-d6c28cb145bd",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "ff4af236-6f7b-4352-b4c9-5de8ae6efd7e"
        },
        "item": {
          "id": "3ac056bb-239d-4b5b-87b4-685535162bc5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6abcb93a-7bd4-4c62-bffb-a140cd5cab91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2bc9547-d098-4d03-a16f-77f176c09910",
        "cursor": {
          "ref": "374a129d-862a-4989-82fc-e21e34965b16",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "a93ed7e2-aa80-49ba-8a12-da4017589a32"
        },
        "item": {
          "id": "e2bc9547-d098-4d03-a16f-77f176c09910",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d0232272-fd29-41c5-9dfe-1582b4f063cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "796e4900-05a0-487d-adc6-b8ab32684979",
        "cursor": {
          "ref": "60496aad-de0a-4f4a-bed6-ccbc5d4440ab",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "e9428b39-8b67-4cfe-96d5-731ebd17cfe7"
        },
        "item": {
          "id": "796e4900-05a0-487d-adc6-b8ab32684979",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "5f2f5e2a-76d0-4ab5-8028-2351cdefef55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31545938-dae5-4edb-8a52-5c014c000676",
        "cursor": {
          "ref": "8da98b2b-5bf6-41c4-9c16-67a90de573c6",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "50fa3b63-d668-492b-8465-bf269df8d12a"
        },
        "item": {
          "id": "31545938-dae5-4edb-8a52-5c014c000676",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "44b0a77c-0b3d-4b74-8269-f1b2788934eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422f95e5-a2cf-41f0-8b3d-912154b8bf98",
        "cursor": {
          "ref": "4cd2b569-b111-43e5-b440-18631ccbf050",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "bd4d80e0-108d-4e4c-8b25-a481756234b4"
        },
        "item": {
          "id": "422f95e5-a2cf-41f0-8b3d-912154b8bf98",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "dacdbc3c-d77f-4e98-bb4c-ac8df0fd75f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4eb84c50-7b48-47f8-9bcd-fdecbd64f9e3",
        "cursor": {
          "ref": "c933d82a-db5a-40d5-9ac9-4d401ca993a2",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "bea523a6-58fd-4d41-8280-89a1a80b4ab4"
        },
        "item": {
          "id": "4eb84c50-7b48-47f8-9bcd-fdecbd64f9e3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "afbb4ca7-d739-4896-a002-dd4a908a2835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9133070f-7254-4895-a548-219cb3e2b38d",
        "cursor": {
          "ref": "03c82c31-2a85-4087-8e15-7be8fac4ae61",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "11c80e4c-914f-4931-9035-8c8ccf8cde9c"
        },
        "item": {
          "id": "9133070f-7254-4895-a548-219cb3e2b38d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "0173955b-1819-48bd-8adb-f9657e555708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e394678d-2168-4ca8-894b-bd5144f9142b",
        "cursor": {
          "ref": "18404c18-6a8d-40e0-90f9-2434f6cc74cc",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "05ab2ac9-4ebd-4f13-ae27-6a2bd8772047"
        },
        "item": {
          "id": "e394678d-2168-4ca8-894b-bd5144f9142b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "a8c51eb9-184f-4a19-bbfe-47cadd0fca7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4925fc3a-e8d6-4425-a6a7-7465788d703b",
        "cursor": {
          "ref": "29ead409-8611-4bbe-b6c0-d66309a681e6",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "56a8a4b3-ed61-42ea-9e3c-dab76a3c5e56"
        },
        "item": {
          "id": "4925fc3a-e8d6-4425-a6a7-7465788d703b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "df6297d3-d3df-4260-8374-c8be3269ebf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 183,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0213d491-3b31-4428-ac90-6473a6cbd8c3",
        "cursor": {
          "ref": "4384f5ed-1a01-411a-9d02-bac583f4b271",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "35e90dac-0d5b-4ac6-a812-ed57439ec050"
        },
        "item": {
          "id": "0213d491-3b31-4428-ac90-6473a6cbd8c3",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "af9d8a99-3425-4e02-b900-a9eb6ed14836",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "7dcc0aab-dbb6-42b1-98cd-4c9f18617f65",
        "cursor": {
          "ref": "6a1665ef-6d97-47af-a1b2-05061bf0ffe4",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ecc92e5d-37fa-455b-9ee8-2d2d13e7d4e8"
        },
        "item": {
          "id": "7dcc0aab-dbb6-42b1-98cd-4c9f18617f65",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "b11b5b7d-f3dd-4394-a59a-a6dc6c1e1c0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "3cc03d4d-a285-4fcd-a5e2-c5432981e173",
        "cursor": {
          "ref": "1abd3bbd-e21b-42d9-afca-3f10fab34097",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5fc9a232-af66-44d5-8a6c-239de9723735"
        },
        "item": {
          "id": "3cc03d4d-a285-4fcd-a5e2-c5432981e173",
          "name": "credentials_issue"
        },
        "response": {
          "id": "39869319-838a-4069-9acc-69efea644b2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:106)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "50c90b61-88e8-4355-ae2f-09917bfeba1f",
        "cursor": {
          "ref": "336c3e26-893c-4892-8b86-892d23535847",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "8429fdf3-a3ed-42f6-88f2-05778196650d"
        },
        "item": {
          "id": "50c90b61-88e8-4355-ae2f-09917bfeba1f",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "49509b6d-5431-4f92-bf18-09c0f63965e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "9bcbc776-d9c1-4660-870e-86ea743e2f19",
        "cursor": {
          "ref": "6e8bc39d-0ff4-4a2d-bf0b-9148b2ac496b",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "70102283-14eb-4b49-a5a0-4ec85348598a"
        },
        "item": {
          "id": "9bcbc776-d9c1-4660-870e-86ea743e2f19",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "fce835bf-9877-40b8-8e02-7a4ab66f5558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "7f3f64ac-2055-4781-8d28-67171964ce8b",
        "cursor": {
          "ref": "674c8ee4-8527-4b4d-a6a5-f06621fa0caf",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "30f54182-d236-4afa-8a13-12e0083b1604"
        },
        "item": {
          "id": "7f3f64ac-2055-4781-8d28-67171964ce8b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "8599c997-df44-4091-bffc-a6480b8c8720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Cannot read properties of undefined (reading 'proof')",
              "stack": "TypeError: Cannot read properties of undefined (reading 'proof')\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "2ece5354-9d48-49a4-8a09-06dafa492e01",
        "cursor": {
          "ref": "8b851902-044e-41be-87fb-957248ce9603",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4a8eda8e-ae76-439d-84ed-2b7af3c036e9"
        },
        "item": {
          "id": "2ece5354-9d48-49a4-8a09-06dafa492e01",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9e6d5523-a099-4102-b33f-a995c8a1baba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "84474978-33d0-41ea-9276-2926b474633d",
        "cursor": {
          "ref": "ef5cd04b-0f30-4be0-ba45-7d0f8f52fbfd",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5cc1b258-5a81-4c77-8c39-41a865db84d5"
        },
        "item": {
          "id": "84474978-33d0-41ea-9276-2926b474633d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6c7cc56f-fb2e-4ed4-a938-0f8cd1dcb468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84474978-33d0-41ea-9276-2926b474633d",
        "cursor": {
          "ref": "ef5cd04b-0f30-4be0-ba45-7d0f8f52fbfd",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5cc1b258-5a81-4c77-8c39-41a865db84d5"
        },
        "item": {
          "id": "84474978-33d0-41ea-9276-2926b474633d",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "6c7cc56f-fb2e-4ed4-a938-0f8cd1dcb468",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "617a2d5c-df3f-4b76-97b4-f7f45960cf0d",
        "cursor": {
          "ref": "862f1c6a-f009-431c-8d44-3a9e0af8f5e5",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "e321e016-b8ef-4b2b-b552-18e565a17b9c"
        },
        "item": {
          "id": "617a2d5c-df3f-4b76-97b4-f7f45960cf0d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "909ab194-414c-4241-a845-d80c51c28b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8db71e60-d92f-44cd-9859-8b889806840b",
        "cursor": {
          "ref": "fea84e94-d81c-4cd2-92b9-ceaa5e82a56b",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "46953dc8-0da3-4412-8a65-5bfed85f355e"
        },
        "item": {
          "id": "8db71e60-d92f-44cd-9859-8b889806840b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "247c1845-f321-4b8b-990f-88f7749d9f82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2942e3f0-2ba7-4a6a-8981-818821f29244",
        "cursor": {
          "ref": "ab2e35aa-0a73-485c-8ae6-6f3e48ba408c",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f47582e4-7df7-4e39-9ac2-42f130d57d2c"
        },
        "item": {
          "id": "2942e3f0-2ba7-4a6a-8981-818821f29244",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "5057dd7b-cb82-494f-aa6c-4602cc313714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6205fb9-2ee4-40cb-9273-8ddc23bc9e8f",
        "cursor": {
          "ref": "db35de0e-2b25-47f9-83d2-b3ba99db357e",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "4af68dfb-968b-42f9-b7f4-0509c52e7579"
        },
        "item": {
          "id": "d6205fb9-2ee4-40cb-9273-8ddc23bc9e8f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "2fe37bfd-8fda-49fc-834a-6dfd2665e072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "097f407b-9cd8-41bc-827e-a6e7d0c6bb1a",
        "cursor": {
          "ref": "8fc01fb1-ec9f-4617-a5a1-321827a68a39",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "44c14d71-bd3e-4d69-b40a-b52f138dd1b0"
        },
        "item": {
          "id": "097f407b-9cd8-41bc-827e-a6e7d0c6bb1a",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "36c9a318-43ad-4ccf-b196-75e9d5857e78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd34d42-6e01-4051-addd-80c4bb6096aa",
        "cursor": {
          "ref": "910e04a0-f37d-4f16-aa97-ea098c749a54",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "a4b241e2-67a5-48bc-a9bc-bec70e909f0b"
        },
        "item": {
          "id": "9bd34d42-6e01-4051-addd-80c4bb6096aa",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "092ce67c-c904-42d5-8f91-2568e68a356c",
          "status": "OK",
          "code": 200,
          "responseTime": 48,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "7b1608c0-c01e-46d9-9eca-5567c6267ccc",
        "cursor": {
          "ref": "2aafc399-fe69-4ba2-9aba-9ddffc311c0f",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ef096464-3ad4-4106-a9af-76459ca6ca7e"
        },
        "item": {
          "id": "7b1608c0-c01e-46d9-9eca-5567c6267ccc",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "5913340a-0266-4932-b8dd-a433ed0cc832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38cc4d73-024d-484e-b5af-4d1c92cfb1e3",
        "cursor": {
          "ref": "ba00d314-1143-475a-ad87-af40c5ca9e82",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "56518643-6bdf-4857-a38d-3e0068fdabca"
        },
        "item": {
          "id": "38cc4d73-024d-484e-b5af-4d1c92cfb1e3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "4660190e-cf31-43ff-843d-53f0a279277f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68a91abe-4a74-48fe-959b-76d8dced901d",
        "cursor": {
          "ref": "7555e61b-1ce6-42eb-bd77-0c0ec080e19b",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "de1d57c9-9197-463b-9fbd-fd6548f698a7"
        },
        "item": {
          "id": "68a91abe-4a74-48fe-959b-76d8dced901d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "938759a1-2e1a-4f8c-9d39-0438124cb44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d67191a8-0a70-442e-b201-c7cf123276fd",
        "cursor": {
          "ref": "7a517aa9-49a6-4373-8e2f-99d9db261d6e",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "a265c912-f783-4560-bf8d-c28c52f6ebc9"
        },
        "item": {
          "id": "d67191a8-0a70-442e-b201-c7cf123276fd",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "22c373b3-f568-456a-b1b4-cf2b37dbffaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ff0b1d-f60f-459d-ba59-024e5f0602f2",
        "cursor": {
          "ref": "c8dcf397-4c03-48de-ad7a-c7de3844ad70",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "6e07a1b1-1c41-4b3c-b691-61d8d7156418"
        },
        "item": {
          "id": "e3ff0b1d-f60f-459d-ba59-024e5f0602f2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "c6140c57-93a1-40ff-95f2-e13ce2800d48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44b87a05-98e4-4101-b944-266a0365cf7e",
        "cursor": {
          "ref": "7f0a70f0-e85f-4bc2-bff5-24e9c2761161",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "336d1ebf-06b5-4ccb-b669-f9c4c8447306"
        },
        "item": {
          "id": "44b87a05-98e4-4101-b944-266a0365cf7e",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "2bfab156-2922-46f0-a0b9-d873db772414",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1410cfed-fe4d-431f-983a-bcca87f451c3",
        "cursor": {
          "ref": "deb06ce9-2f76-45d9-a513-da559f9e24fe",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "77681aea-2419-4058-bcbe-274752a99a6b"
        },
        "item": {
          "id": "1410cfed-fe4d-431f-983a-bcca87f451c3",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0a4ca4ec-adc7-464c-b4dd-d1c13dfc5d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2b036e6-6090-4de4-b7e5-d13c10e50f25",
        "cursor": {
          "ref": "2714447c-7d62-467d-a4f6-ccb3ba8322c1",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "a6a36d34-a551-40ae-b458-e0b6b606a268"
        },
        "item": {
          "id": "e2b036e6-6090-4de4-b7e5-d13c10e50f25",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c6f121c5-8806-4fbc-b07b-2802ae406100",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96dae846-538b-410c-8a93-64a440912e0a",
        "cursor": {
          "ref": "d415bda5-f5cd-47eb-ac9a-13356114423f",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "ec6e794f-30e3-4965-8ec7-68a7d2d666c8"
        },
        "item": {
          "id": "96dae846-538b-410c-8a93-64a440912e0a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "c5acdaf0-b59c-480e-8cbb-0c9a18bf2fb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a0e402e-21ee-4e77-acce-a3b23eb18790",
        "cursor": {
          "ref": "14ec32c3-77d5-4fda-af4f-ea8d20c50f2c",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "61f3664b-d839-4d5d-88d8-df9d950873a0"
        },
        "item": {
          "id": "8a0e402e-21ee-4e77-acce-a3b23eb18790",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d0d4130d-90f8-4663-901d-f47bca063a9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bb54512-c0ad-48a5-b7b8-ae93d358855c",
        "cursor": {
          "ref": "33c1a099-ccec-48d7-8eb8-b7aaad219da7",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "6aed8709-53b7-4723-b075-b2f38e967087"
        },
        "item": {
          "id": "8bb54512-c0ad-48a5-b7b8-ae93d358855c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9c5128bc-9dc9-400d-9301-43adab7e82b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b25a03dc-26b9-483e-979b-6ededed5d2ca",
        "cursor": {
          "ref": "108c0346-e4d5-4f82-94e9-692f2475604c",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "2531a5f9-dc13-43b9-9705-ebca89ed7dee"
        },
        "item": {
          "id": "b25a03dc-26b9-483e-979b-6ededed5d2ca",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c4a72333-bb3c-4182-a199-eb22f113e011",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd10af1b-d37c-402c-968e-ef94fe7233bf",
        "cursor": {
          "ref": "547182cc-4ce1-4baf-b854-62bb575e473e",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a1c24adc-e61f-474c-b85a-fbdcc8917d6e"
        },
        "item": {
          "id": "fd10af1b-d37c-402c-968e-ef94fe7233bf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8419cf57-e5f7-4cc1-985d-02b0b14c8760",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f016be8d-9e5c-454a-a9d6-7c1b8be776d2",
        "cursor": {
          "ref": "2eef1862-d469-4ae6-8a9e-45be520b1ecf",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1ff514a7-87e9-4ac1-bbde-8d9ed311f379"
        },
        "item": {
          "id": "f016be8d-9e5c-454a-a9d6-7c1b8be776d2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d83fce21-68df-4161-86d0-d8477a21c4d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "423a686d-eb80-402d-897b-8253e026a6a5",
        "cursor": {
          "ref": "417edd22-a594-47f2-8f8d-d21a3d228093",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "4121a75b-dc65-4de6-9564-2871620172ff"
        },
        "item": {
          "id": "423a686d-eb80-402d-897b-8253e026a6a5",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "b502f9b1-46c3-47df-9d7f-c2af33323f9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c46e661-c85f-4c96-9def-0703e7a6f4f7",
        "cursor": {
          "ref": "ed5d2c76-a647-417f-9e80-5b8dab8597ec",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "9b3d0d0f-7cab-4214-9dfe-26411b0ba8d4"
        },
        "item": {
          "id": "1c46e661-c85f-4c96-9def-0703e7a6f4f7",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "a77375ab-445e-4ccd-9a0b-8a108e8ede29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a9538bc-2052-4468-ab35-301e5793ec27",
        "cursor": {
          "ref": "c7f7c4d7-6575-42be-9080-5e52929d6a7a",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "903ad36c-3cf0-4c85-a51e-05116f6cf1b8"
        },
        "item": {
          "id": "5a9538bc-2052-4468-ab35-301e5793ec27",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "f435347d-093e-4545-9230-5d0c03cdeb72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50085dbc-2890-4ed4-bc81-1ed2f258d8df",
        "cursor": {
          "ref": "52577d05-d689-4090-8928-711f54ee9de9",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "5d2b2815-7429-4d16-88a9-5530dfd21870"
        },
        "item": {
          "id": "50085dbc-2890-4ed4-bc81-1ed2f258d8df",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "159e6c9f-85fa-4e2b-b01b-a1b74f0001cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b89472d9-d95e-46de-aee1-0149e5318f27",
        "cursor": {
          "ref": "7a9cbb3a-c902-4dbf-a39a-9031d64acc36",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e8d3a0b2-72b6-42b9-b9ea-5cc5fe61bacb"
        },
        "item": {
          "id": "b89472d9-d95e-46de-aee1-0149e5318f27",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0cdcb821-fccb-4bfd-af0c-d7f9e6555fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04d75f37-284c-4c43-b15b-12613a27bacf",
        "cursor": {
          "ref": "2892b920-3127-4894-9638-0a3fc82b2dad",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "a943f031-e245-4c83-a46f-46dd13e400ed"
        },
        "item": {
          "id": "04d75f37-284c-4c43-b15b-12613a27bacf",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "0352cd7c-0fe3-44c7-af11-efa72aafe88f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "807b292e-b1e1-4c86-84bb-dc481d276071",
        "cursor": {
          "ref": "0cd89fc0-6d17-4339-a9a6-de4673ed3885",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "727cc025-0514-42bd-9568-bcddf6d97531"
        },
        "item": {
          "id": "807b292e-b1e1-4c86-84bb-dc481d276071",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "61fe075f-fc9e-453d-a48c-45bacb543abb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8246504b-47b9-4c7e-b54e-2e72cb272ebd",
        "cursor": {
          "ref": "78855be8-baf9-4a5c-8503-9590f2437f36",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "f0bd8e78-e71a-4da8-b504-488a7283af02"
        },
        "item": {
          "id": "8246504b-47b9-4c7e-b54e-2e72cb272ebd",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "38891a02-715d-43d4-a0b0-4008cbb5e05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f120c8e6-cd9d-40a6-9040-71ccef1fe630",
        "cursor": {
          "ref": "eec7e78c-28d9-4280-9893-1a206472ea09",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "67db9be4-b51f-4700-8ee3-704384606e50"
        },
        "item": {
          "id": "f120c8e6-cd9d-40a6-9040-71ccef1fe630",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "106ad106-09c0-4b44-a5a5-51d21c4e7f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd41d058-a5f5-44f5-835d-cc5827b452c3",
        "cursor": {
          "ref": "61536331-2922-4532-bc50-d8fa783aa216",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "d20af1e9-b30c-44a1-bf23-50011d0f7409"
        },
        "item": {
          "id": "bd41d058-a5f5-44f5-835d-cc5827b452c3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "3b3b8a73-4ad9-4588-b4c4-6e4072b50dbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faab3ae4-716f-4ca0-bf03-abbff3613347",
        "cursor": {
          "ref": "58e8f5d1-7c40-43f7-bdaa-94b391f109c8",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "4116841f-33c6-4da9-a954-db07ca7f1986"
        },
        "item": {
          "id": "faab3ae4-716f-4ca0-bf03-abbff3613347",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "40ceccd2-92f4-48e6-8014-0c7d3c1911fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee326eec-1678-479f-943e-e280bbe07967",
        "cursor": {
          "ref": "12f0762a-ece1-46d9-8b24-0618e67202cf",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3353ed8e-f4da-4c61-8f5b-39f13332b216"
        },
        "item": {
          "id": "ee326eec-1678-479f-943e-e280bbe07967",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "b993410b-94c5-4073-a6bd-b1014c8c280a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "2eb78aa5-4239-4bf7-8123-84b58b2bb932",
        "cursor": {
          "ref": "cc98beda-ebbd-4877-a37f-4e0a8806f065",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a6e9b648-e8f4-4952-80a0-976d8f621269"
        },
        "item": {
          "id": "2eb78aa5-4239-4bf7-8123-84b58b2bb932",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "8cf37aec-b209-41d2-b6d3-8f6aae6a610d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "e3107f85-2764-48dc-811d-cf6dc4281113",
        "cursor": {
          "ref": "efc6dd0b-74a5-4df8-a2a9-06663e41bfab",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dfd71824-8d10-4d78-b3c8-7529bf0bb95b"
        },
        "item": {
          "id": "e3107f85-2764-48dc-811d-cf6dc4281113",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "66268f43-78d7-4e55-b467-2c444115b823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3107f85-2764-48dc-811d-cf6dc4281113",
        "cursor": {
          "ref": "efc6dd0b-74a5-4df8-a2a9-06663e41bfab",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "dfd71824-8d10-4d78-b3c8-7529bf0bb95b"
        },
        "item": {
          "id": "e3107f85-2764-48dc-811d-cf6dc4281113",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "66268f43-78d7-4e55-b467-2c444115b823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a179d48f-135b-438a-a179-ddb99f1cf9c6",
        "cursor": {
          "ref": "7598751c-4766-4c5c-8c60-7184c84fed84",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "ede5d1b0-6bf3-47a1-a706-9bef084b8590"
        },
        "item": {
          "id": "a179d48f-135b-438a-a179-ddb99f1cf9c6",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "65fab932-a4e3-42ba-aeb3-b63fc8ce8b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8d025d-cfad-4552-9797-94af011a32f4",
        "cursor": {
          "ref": "1e2bef66-2910-4447-8ec0-2c89844b5f4a",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "c5baeadc-a21c-44f2-a3e2-f221bb8cf23c"
        },
        "item": {
          "id": "ec8d025d-cfad-4552-9797-94af011a32f4",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "c4a6c1f3-c9d6-42ba-ad1f-d9ce1d9d359f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c850c2-f7da-4c25-a8cd-09038796f394",
        "cursor": {
          "ref": "a9e27eac-9741-4da7-8f8f-99d0eecff22f",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "371751d7-5e18-4062-88e9-7a434c10e66d"
        },
        "item": {
          "id": "39c850c2-f7da-4c25-a8cd-09038796f394",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f0460b07-ba11-46fd-b11a-c061d34861ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "110f0164-3256-40fb-93cd-352af55563ca",
        "cursor": {
          "ref": "bc177f40-71a4-4b70-b7bd-2fe9795fa838",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "be72f213-5bf8-46d6-a5fa-bae5d82e8dd2"
        },
        "item": {
          "id": "110f0164-3256-40fb-93cd-352af55563ca",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "5263fae4-8b1b-4378-a2cc-b805b0b6d746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1448380-eaad-451e-896b-b64809411fdb",
        "cursor": {
          "ref": "17493341-e4cd-49f4-b482-75e6387c42d1",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "93447bbf-5f87-4992-9dc7-20e6a2ec191d"
        },
        "item": {
          "id": "c1448380-eaad-451e-896b-b64809411fdb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "7b33751b-297a-4a66-a997-67b4ecc57658",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e4c058-c8b7-43de-a524-01ca80e80fb9",
        "cursor": {
          "ref": "4b0b0513-0369-46d1-b2d3-d0fbc5b5d8e6",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4c723388-5430-444b-aa7d-6c64b4c3d3ef"
        },
        "item": {
          "id": "27e4c058-c8b7-43de-a524-01ca80e80fb9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a7e3d528-586e-4869-8817-acf7ac4f6bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d24095f-3ea3-4dbe-9f99-802704f9fcb4",
        "cursor": {
          "ref": "33b81794-920e-4449-8c7d-2315daed0159",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "95623162-5872-448c-83f4-4809be99e8fa"
        },
        "item": {
          "id": "3d24095f-3ea3-4dbe-9f99-802704f9fcb4",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b3806140-c2ea-48f4-bc8f-4a9224786955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f4ea36-73b9-48b1-8842-750c421f1d1e",
        "cursor": {
          "ref": "557167e4-9994-4d9c-892b-9f18517b8231",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "76ccf397-71af-4fed-a23f-2b69a6d251cc"
        },
        "item": {
          "id": "24f4ea36-73b9-48b1-8842-750c421f1d1e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "d5d99179-340f-4a1f-ac35-b422da095554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c4168f4-b659-40f5-8d35-dbabc1910e3e",
        "cursor": {
          "ref": "f2c032e3-c955-4ec8-bf2d-1a573a250afb",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f9321b3b-378f-4e18-8153-88d541f33759"
        },
        "item": {
          "id": "9c4168f4-b659-40f5-8d35-dbabc1910e3e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "5e3fdee2-f560-493a-a62e-49a4b24c39c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b72e5184-c1ae-45dd-9bff-8610cc6ae1a9",
        "cursor": {
          "ref": "1a68650c-b889-4b1b-aacd-8cae9ce59f86",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "420c58b3-d4e3-4ce2-aa06-0d50cade7651"
        },
        "item": {
          "id": "b72e5184-c1ae-45dd-9bff-8610cc6ae1a9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "39a68d38-f748-484a-b091-8bee6aef5a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "365a64dd-294c-4475-ab11-a4cc438d6fb4",
        "cursor": {
          "ref": "0657f240-4c7b-4cf0-a149-a56864836866",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "84881904-0ac1-4f0f-bb1e-10201dadb698"
        },
        "item": {
          "id": "365a64dd-294c-4475-ab11-a4cc438d6fb4",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "a781ec1f-d8ad-4238-8238-86df45f34124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea432668-b852-4737-bf47-8e94df1f1f02",
        "cursor": {
          "ref": "44cc2ce9-8e16-43b4-8ede-b012ca67beca",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "0e10fa11-0998-4b66-9cff-2c0cdfd1cff0"
        },
        "item": {
          "id": "ea432668-b852-4737-bf47-8e94df1f1f02",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "30127351-3d98-4e4a-8832-0c00a4651e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2fbac91-c69f-4848-82ee-6f539f9c8da2",
        "cursor": {
          "ref": "1b696de4-2cbf-4ce0-b1d7-4caf70b0794b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "829c70cb-dfa0-44e6-a673-7b93cc6ff12b"
        },
        "item": {
          "id": "b2fbac91-c69f-4848-82ee-6f539f9c8da2",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "57b8932e-b274-4ede-b0b2-dc30425db0a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac8d9b84-7fe0-432a-8cdf-4b91302182cd",
        "cursor": {
          "ref": "36d5acce-9841-4d26-8088-23da36d77a1c",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5ea3c977-60f2-458f-a0f0-a6e7362e187d"
        },
        "item": {
          "id": "ac8d9b84-7fe0-432a-8cdf-4b91302182cd",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "d588c8b6-1386-42ad-b706-9b6b1559689a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf20e131-57fb-466c-8b90-84e1c1905376",
        "cursor": {
          "ref": "7838c581-0c38-434b-8d56-784adc8a02a2",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "b8599b09-2f65-45cc-bdfd-944534960329"
        },
        "item": {
          "id": "cf20e131-57fb-466c-8b90-84e1c1905376",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "6a76f452-9197-4757-9e2d-c90bfbcb06ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3187f76c-2c2f-4c5a-b8cd-710d062a6334",
        "cursor": {
          "ref": "19a62fc8-0943-4eae-90d9-2a7ee29222c9",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "c7362a3a-993c-410a-a66f-3ec054c4c4b5"
        },
        "item": {
          "id": "3187f76c-2c2f-4c5a-b8cd-710d062a6334",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "bd9e9e16-e442-4f6e-8e55-e5c0a4992720",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee03e862-b39d-449d-8789-db237469272e",
        "cursor": {
          "ref": "027fa5ad-1203-4d9a-a5b0-ea054864d88f",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b90f317c-e1d8-4043-a9cd-29fb4d7bce54"
        },
        "item": {
          "id": "ee03e862-b39d-449d-8789-db237469272e",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "a47724f1-d4e2-4040-a0c2-52979a2cccef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9323144d-8c91-4c22-b3c1-52c311dff33a",
        "cursor": {
          "ref": "8a5a7981-7ed4-42c3-892e-384d42e818d0",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ea45a7d7-211e-4987-b26e-5d59082c8b6f"
        },
        "item": {
          "id": "9323144d-8c91-4c22-b3c1-52c311dff33a",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5b7fafaa-646c-41fe-89c9-4470896647b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14b0c8a-67fe-48e3-a632-1a517db4a861",
        "cursor": {
          "ref": "1d3f3142-8cb5-4882-bebf-44d7a29e2a4b",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "a32f759d-0435-404c-a094-e69b885f2aeb"
        },
        "item": {
          "id": "f14b0c8a-67fe-48e3-a632-1a517db4a861",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "85c3ba37-e2b7-4267-8f70-82027fac69a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94085218-0859-4788-b318-a5fea9c2ad32",
        "cursor": {
          "ref": "b68aec48-f12b-4fac-913e-2094b97c2efc",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "42da45a4-ebce-458e-8f8b-d7f92fc58a9e"
        },
        "item": {
          "id": "94085218-0859-4788-b318-a5fea9c2ad32",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "5d27aa81-a3eb-4a09-b3d4-2c134b1eac0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569adba6-ba28-4355-b2f8-3e734c044237",
        "cursor": {
          "ref": "f6ffbd19-c191-43e5-834c-3f3d859db821",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "d7f9d168-a082-4618-9632-5066286a598c"
        },
        "item": {
          "id": "569adba6-ba28-4355-b2f8-3e734c044237",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "341d2bf1-44c7-4004-b4d8-c0a3ce540bf7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f087f9cf-162e-41f3-b07e-490486fcaf60",
        "cursor": {
          "ref": "6784db52-2972-46e8-a5dd-b56e021054b7",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "973d281a-4677-460a-8343-6bfffbcb779e"
        },
        "item": {
          "id": "f087f9cf-162e-41f3-b07e-490486fcaf60",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "5e237ff3-149b-4f93-a8bd-2aef6308c286",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9d51b95-1dbe-406b-ab6f-b06db12f1ddf",
        "cursor": {
          "ref": "44423c45-dfb7-4319-9a49-cc5b4f083283",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "8144b752-5de9-469e-8fd6-d04322b067cb"
        },
        "item": {
          "id": "f9d51b95-1dbe-406b-ab6f-b06db12f1ddf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "514198b4-55bc-45c4-8c25-3fe414adde70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d71f15a4-5a15-4c0c-9175-4273e6a115fc",
        "cursor": {
          "ref": "4073599e-a8f1-4e28-a19d-a6a9f2218fdb",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "8777f4d3-73e0-4a7b-94e1-d31205a25e0b"
        },
        "item": {
          "id": "d71f15a4-5a15-4c0c-9175-4273e6a115fc",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "6287866a-60fd-4aaa-a8ee-421c9f2236a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70d11fca-60d4-4fef-9afe-e24f6e499863",
        "cursor": {
          "ref": "1eeff143-970d-41f4-b209-b5ef3075edac",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bb7a09f9-7b7c-4d88-886d-16b7f796e0a4"
        },
        "item": {
          "id": "70d11fca-60d4-4fef-9afe-e24f6e499863",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b722f97b-1dcc-4a4a-996d-c7c9d51fe303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f63e1e-cfbc-406f-8b34-444fb5f65fda",
        "cursor": {
          "ref": "2235532b-2a33-4160-9440-521c5dcfe56d",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "b7ceb879-2516-42e2-9655-78d7f8ee56ef"
        },
        "item": {
          "id": "d4f63e1e-cfbc-406f-8b34-444fb5f65fda",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cfe979aa-ad7f-489d-aacd-ff53cd1c57fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a884bac7-1b31-4688-a222-c9ad1c95b255",
        "cursor": {
          "ref": "d84fb4c0-05f9-464f-a2fc-e918d7e122f0",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4f19c83f-3a26-4e59-959f-0dbe6767a128"
        },
        "item": {
          "id": "a884bac7-1b31-4688-a222-c9ad1c95b255",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5336660a-5c87-4b0e-907b-70f1f3e87593",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb630928-ae1b-4049-b499-1d1430c541dd",
        "cursor": {
          "ref": "7359333e-399a-44d7-8b5f-ac7863ef1ec4",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "1d46fb29-7d31-4a7a-838f-837e0eea97ec"
        },
        "item": {
          "id": "fb630928-ae1b-4049-b499-1d1430c541dd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "777b0e1a-8384-4089-b3c5-da62743f23f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800603e4-d29b-44c3-aed5-8dff9563686b",
        "cursor": {
          "ref": "f8a055a3-6600-48b4-a3ba-ded01bc2802c",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "371a4adf-c179-47d6-9060-86c9c9fe734b"
        },
        "item": {
          "id": "800603e4-d29b-44c3-aed5-8dff9563686b",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "7e75c774-19c3-4605-b229-ed358935e13d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "824eee56-653c-4423-90d4-a9b902172639",
        "cursor": {
          "ref": "d938f7bf-3240-4f8a-9a21-baa4af2424d1",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "fe002a0d-2ee6-41af-af47-58aba7aba876"
        },
        "item": {
          "id": "824eee56-653c-4423-90d4-a9b902172639",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "66b9fbd4-3bd0-46ab-9da9-158014ab5d6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07538609-c7e7-433f-9e61-902f13131d99",
        "cursor": {
          "ref": "ba38ed18-3296-4a83-9ebd-9156585c5e2b",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5a1b7eeb-9b11-4817-8430-8405af27c5e9"
        },
        "item": {
          "id": "07538609-c7e7-433f-9e61-902f13131d99",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5341a556-0efd-4307-b353-fffcd1118246",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0cf1db7-8154-4dfc-81c0-62caea06ce00",
        "cursor": {
          "ref": "9a11e717-379e-43d9-a667-4ec27f1f6fd0",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b4399e9b-a72d-4fb9-9458-817b0ee684bf"
        },
        "item": {
          "id": "b0cf1db7-8154-4dfc-81c0-62caea06ce00",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "ca04145d-d58a-41ff-930f-a686a81c25fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d10ed347-c518-4a7a-975f-db6a9541cb6d",
        "cursor": {
          "ref": "228f5d0d-8b7a-42b2-83ee-88253d441f82",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "52ac6b7a-14af-4427-8288-c93e3e9abb51"
        },
        "item": {
          "id": "d10ed347-c518-4a7a-975f-db6a9541cb6d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "caf2d841-0566-4aeb-9af2-31e7fee62bce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9788c468-cb11-43f8-aa06-395a76212104",
        "cursor": {
          "ref": "56107238-223d-4144-9482-61a434a3a5c4",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "e56ad5fa-f491-4be1-ba5d-b22e0af41d54"
        },
        "item": {
          "id": "9788c468-cb11-43f8-aa06-395a76212104",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ec92b8e2-1fa9-4bc8-ae8d-fd4e16056b07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c341f42-6dee-4a72-8744-60bca4486f66",
        "cursor": {
          "ref": "cf2c5659-af12-4c37-947d-6c3450387cd6",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "6ad3da93-fb08-49ec-a8d7-d21ecb2d7cf0"
        },
        "item": {
          "id": "5c341f42-6dee-4a72-8744-60bca4486f66",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "44651a45-1308-4f18-9b5f-363d0377355a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604bde6a-6ddb-44e0-a593-4b30baade008",
        "cursor": {
          "ref": "5db85eeb-bb4e-4717-b167-b6c32cf54569",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "da4845a8-bc42-4bbf-9d5d-c4cdc3366b69"
        },
        "item": {
          "id": "604bde6a-6ddb-44e0-a593-4b30baade008",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "98334dd8-58a7-4eb8-a2ab-6eaa00ca439a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152ac19f-4af3-4503-bd8d-690fdf119c16",
        "cursor": {
          "ref": "c3d32b6a-90a8-4819-ac47-afc30fbf8fe8",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a475a2c7-be39-4cbc-b7a0-186efebcb733"
        },
        "item": {
          "id": "152ac19f-4af3-4503-bd8d-690fdf119c16",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "11dde216-b06a-44ac-939b-cb3b52467216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43f9139b-8e70-40f1-a6a5-aa402d035d70",
        "cursor": {
          "ref": "c6bd29d8-2bb3-4e7c-ae28-3c4ef7c11c32",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c673e6af-2fd1-4f3c-a777-0212a00c1f18"
        },
        "item": {
          "id": "43f9139b-8e70-40f1-a6a5-aa402d035d70",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "271164ca-6bbd-48f4-8a9a-6ce226dcd34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ce9b8ca-fa77-4a47-9606-6560876dcde3",
        "cursor": {
          "ref": "10466b70-e651-4e62-9fa6-6b6b1fad08a7",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "9cc0526b-064f-4908-84a2-d3a7c6c281b4"
        },
        "item": {
          "id": "6ce9b8ca-fa77-4a47-9606-6560876dcde3",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c660fb0f-eae4-487c-bfe3-ec8562b29edc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b989683b-8a19-4076-8cb9-4b0f85e2a857",
        "cursor": {
          "ref": "448154b8-d0b1-452d-a603-be3bc57804fd",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "74d63751-146f-428d-9c95-5f60f3cef840"
        },
        "item": {
          "id": "b989683b-8a19-4076-8cb9-4b0f85e2a857",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "6b76c5e1-c184-40da-8d7f-f8cee93b0cda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5398099a-f85d-4e2b-955c-05563b4e2533",
        "cursor": {
          "ref": "57949171-8fc4-43da-9b39-720920cee206",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "8476c953-e302-446c-9881-217ec39feb82"
        },
        "item": {
          "id": "5398099a-f85d-4e2b-955c-05563b4e2533",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "03c31477-7784-492c-96f0-4dffd53bac78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57453a58-ef99-480a-8e1c-9e14f9cef9fa",
        "cursor": {
          "ref": "3742298c-e5b9-47be-9914-5bb8c22a56d3",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "1776fc2d-77db-42dd-8637-1d9230af187f"
        },
        "item": {
          "id": "57453a58-ef99-480a-8e1c-9e14f9cef9fa",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "9c640112-a75e-434b-97a5-08d2d6ad3068",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71ec4d8c-4d1c-4181-9632-358c7b6698aa",
        "cursor": {
          "ref": "a95003ac-84ee-4ae9-b85a-9f8e80e78b77",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "cbff1bfb-4b24-426f-b2f3-c733e5c46e22"
        },
        "item": {
          "id": "71ec4d8c-4d1c-4181-9632-358c7b6698aa",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "cf040a74-477b-4d50-aab5-a0015107f43e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4013d0b-0ed9-4c6e-aec7-94b8358174a0",
        "cursor": {
          "ref": "e12d9e4b-6e58-4db6-97e5-c43994e6d4dd",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6da45472-0087-4df3-8335-da30f220c7df"
        },
        "item": {
          "id": "d4013d0b-0ed9-4c6e-aec7-94b8358174a0",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1adfa8ef-bbde-409b-9b84-912523b62919",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa14ad8c-7ed8-493b-b284-23c8e362915d",
        "cursor": {
          "ref": "e4d56998-dd8f-4170-affc-3a67600ff457",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "a73a00fb-af18-4fc4-948b-4a36151c0ed0"
        },
        "item": {
          "id": "fa14ad8c-7ed8-493b-b284-23c8e362915d",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "2f1e21e0-63af-493b-abad-e3f9737d53fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b86741dd-35ce-4569-bd57-afc67e808ab6",
        "cursor": {
          "ref": "1d5b88ab-a7b4-46b5-8dd7-cf49b963ff78",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4c9ea94c-e062-4eb6-9078-d717540a393a"
        },
        "item": {
          "id": "b86741dd-35ce-4569-bd57-afc67e808ab6",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "5ebb6590-3bb3-42ff-a7df-afa9b0d259c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "648546f7-4956-4444-b771-b87a7cd1d451",
        "cursor": {
          "ref": "ea1a68e9-55de-4d99-9703-97cbf9a5e3bc",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "6a008582-8dfd-4937-af82-37dd83aecdbc"
        },
        "item": {
          "id": "648546f7-4956-4444-b771-b87a7cd1d451",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "bed17789-33e0-42d8-b6ef-fb78ddf80c75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22bd8ec5-078d-4c5f-b077-7bdc2640df0f",
        "cursor": {
          "ref": "2b21eb21-a84b-45a4-9a2a-b23067c5b93b",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "4ad90a28-603f-4ad2-b42e-67a3fc011ce1"
        },
        "item": {
          "id": "22bd8ec5-078d-4c5f-b077-7bdc2640df0f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "339b823a-1d76-4f0f-bfc8-fa58af0fa68c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e0be216-0a9a-4b87-a9f9-5544f790a17e",
        "cursor": {
          "ref": "11b19155-aa3c-46f6-9797-80248021aae5",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "ec100cdc-8514-4749-9a54-819b300a309d"
        },
        "item": {
          "id": "4e0be216-0a9a-4b87-a9f9-5544f790a17e",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2cc462ed-0d50-4d17-857d-1bb26b91a5ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42933935-e806-4277-b192-3f174646be07",
        "cursor": {
          "ref": "d32094e2-2c86-42ec-9d36-94c03f8bc3cc",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "3fc2d426-32d9-4189-8c8a-02fac2aff4da"
        },
        "item": {
          "id": "42933935-e806-4277-b192-3f174646be07",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8d27e058-9f51-4551-b434-b10c993767e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483d14ee-3bb8-458b-bbc0-666690bc2458",
        "cursor": {
          "ref": "68b56f5c-cd6a-4e58-93fa-d093c8ed2dc9",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "892f4111-fec1-4aeb-b92a-aeb261ba8531"
        },
        "item": {
          "id": "483d14ee-3bb8-458b-bbc0-666690bc2458",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "e2d399d2-1353-40f0-ac48-c96bfbba9dbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ffe665e-53f3-4426-8c14-c4b0c7fbc16d",
        "cursor": {
          "ref": "3fd8d04a-9363-4bf1-b6aa-cf3e0771393e",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "67cbb21c-8bb2-43c3-83e7-5fc5a548607e"
        },
        "item": {
          "id": "0ffe665e-53f3-4426-8c14-c4b0c7fbc16d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "93a14615-828b-477f-83fb-33a3bdadd01c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fa465f7-9995-4e76-8da5-6fdc6f461c0f",
        "cursor": {
          "ref": "98a764a5-4c34-4338-959b-bdf4d48578d0",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "4cf2e479-5866-4a1c-82bd-14f8d9e4167d"
        },
        "item": {
          "id": "1fa465f7-9995-4e76-8da5-6fdc6f461c0f",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "70034c8d-9061-4f4e-97ec-078f90b084db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f2f6d7-372b-4363-9573-9ecdddd6dfbf",
        "cursor": {
          "ref": "201fb7d5-fbf7-45c4-8160-64f0b659db94",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5bb50a66-a7c2-4e99-8e0a-7cd53be56b3f"
        },
        "item": {
          "id": "c6f2f6d7-372b-4363-9573-9ecdddd6dfbf",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cc59c9a1-1c30-4e43-81b6-5f53947b85a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78e584c2-d694-43e2-bc96-af678284687e",
        "cursor": {
          "ref": "9abc8b07-e2d0-410a-9688-4135e147e276",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "b87fc5ed-a67e-4f8a-8f61-5519e15684ed"
        },
        "item": {
          "id": "78e584c2-d694-43e2-bc96-af678284687e",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d59f8809-12f2-42c7-bb65-200438d70855",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfaec399-f4dd-4df8-9ecf-a6e7871cf02e",
        "cursor": {
          "ref": "ed83af99-67f8-4ed6-82d7-749c5d22ca1f",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c13f49bf-2f5a-41fe-9f64-5a06c5ae95a8"
        },
        "item": {
          "id": "bfaec399-f4dd-4df8-9ecf-a6e7871cf02e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "5f68830b-394a-48cb-8c5b-7b3117e964d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b862ea8-b7da-4beb-98cb-a2cd30ee855e",
        "cursor": {
          "ref": "026e8a8c-696d-41e5-9853-68334686440e",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a5a85de2-ff50-47d0-aa08-f411d0ab33f9"
        },
        "item": {
          "id": "9b862ea8-b7da-4beb-98cb-a2cd30ee855e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "75850cef-152d-413b-bcb0-14163f6129f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb2bda82-0e49-40f4-877c-987def1208ee",
        "cursor": {
          "ref": "d231ac2e-852e-42ca-84d2-8413bbf8cf20",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9265861b-6945-4367-a2fb-00043223e6cc"
        },
        "item": {
          "id": "eb2bda82-0e49-40f4-877c-987def1208ee",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "f4a11ca9-872b-4813-8f04-cb2e69c2eb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 184,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e572dc51-b395-4ceb-9761-14881349fb89",
        "cursor": {
          "ref": "10bde0eb-d637-45df-aece-ee67e6582ac8",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1cd48255-bc47-4947-92ea-78c89f3ac1cf"
        },
        "item": {
          "id": "e572dc51-b395-4ceb-9761-14881349fb89",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "515dbc4c-dab3-4ad9-ac4f-7799fbc602c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d965f08-df7b-4df9-8e90-436752873ee6",
        "cursor": {
          "ref": "c7cb6709-41f1-4dcf-b729-03e56485b49e",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "71010205-8dcd-4e7e-9207-c83a855bb181"
        },
        "item": {
          "id": "6d965f08-df7b-4df9-8e90-436752873ee6",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "abfd3482-17b0-4040-84be-766a7315bb12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9a3705-52da-46ec-bc72-ce997dff0e16",
        "cursor": {
          "ref": "9268cf75-0338-4456-abfb-04d16410d4c2",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9ce9da38-fc0c-4bfe-88b2-28f5e8895d6c"
        },
        "item": {
          "id": "6e9a3705-52da-46ec-bc72-ce997dff0e16",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "64d9bfcf-6f9c-4fbf-916f-12494c03f034",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc06d98f-185f-44b3-86c1-d9475985a467",
        "cursor": {
          "ref": "560fb205-2639-435d-8c5f-102812198d67",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "83d9a71e-7da6-4ce1-853d-074aa057c967"
        },
        "item": {
          "id": "bc06d98f-185f-44b3-86c1-d9475985a467",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d06af552-a911-4004-bbce-6f25a045968c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5032736b-a479-42fa-8ca3-fbb3ca557403",
        "cursor": {
          "ref": "ceb3ac51-0c4d-4df0-8f90-ea2efd3f095e",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "72e0c586-f604-4138-8f72-9d4c18d95739"
        },
        "item": {
          "id": "5032736b-a479-42fa-8ca3-fbb3ca557403",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3ede8ac4-5334-4c06-9c4c-d48bc755a8a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409a1a0f-720c-4b7f-b870-bc41ede6a807",
        "cursor": {
          "ref": "cf45afc6-4635-45f7-afda-b81fba6416ce",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "84fc11de-42a2-4ead-805d-cfc69209935a"
        },
        "item": {
          "id": "409a1a0f-720c-4b7f-b870-bc41ede6a807",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "0b5af4ed-50bc-4722-949a-ffdc491d2801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609e4a34-e40b-44b3-951b-a8a64aaf4a6c",
        "cursor": {
          "ref": "5d63ba30-e034-494e-a4ab-1bdada6478c0",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "2382444f-d247-4c07-bd10-1880c75d7531"
        },
        "item": {
          "id": "609e4a34-e40b-44b3-951b-a8a64aaf4a6c",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "760d1ecb-746b-4331-88a7-f10cbb4a1e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a82e5f-cabf-4e6a-94d0-b572125fa562",
        "cursor": {
          "ref": "eb5ccb3c-4195-449f-ace7-8254bd30784e",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a6ecf119-4001-44ca-8814-6f45b151c997"
        },
        "item": {
          "id": "57a82e5f-cabf-4e6a-94d0-b572125fa562",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "39249ce1-730a-4f45-bf86-d34132bbfd4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f88f433-922d-4c39-9863-5a1608bbeca2",
        "cursor": {
          "ref": "54b95336-8638-4036-b08b-9d4503cb3f48",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "400eba63-49ef-4359-ad14-481c598f375b"
        },
        "item": {
          "id": "2f88f433-922d-4c39-9863-5a1608bbeca2",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "50ac6772-ecc2-4218-a115-4d2c25408b66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33cb4861-664e-4860-bc69-4121fd7ff2b9",
        "cursor": {
          "ref": "e8121a5b-e8d3-4482-b126-fd6b11ea3574",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "6297bb38-ba71-40e4-87f0-b1e13a899744"
        },
        "item": {
          "id": "33cb4861-664e-4860-bc69-4121fd7ff2b9",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "157adc87-315a-4ea4-9c36-e892a44bea9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbfdf19a-07d0-483b-ab26-eadb72e25b66",
        "cursor": {
          "ref": "e4a50719-9544-4520-9c7e-e3e0dc3e11c9",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "079188bd-af54-4eb5-b291-3e9ff7c580a1"
        },
        "item": {
          "id": "fbfdf19a-07d0-483b-ab26-eadb72e25b66",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b0ed7d80-c98d-4dc7-85a5-b771a5270b8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb30edbe-7ab4-45b9-a691-083bf82a07c7",
        "cursor": {
          "ref": "da434efd-8191-4a7a-8b4d-e53defe03964",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "52101398-3f24-4996-955e-8b8510698093"
        },
        "item": {
          "id": "cb30edbe-7ab4-45b9-a691-083bf82a07c7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b20430ab-1bbc-4f57-83b8-03e4bedd6421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d94d6bff-dab9-4fc4-a8fa-bdcde39822fe",
        "cursor": {
          "ref": "5bfc639b-a1b0-45b8-9f96-a759107dbb39",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "d1a7f666-13bf-40a5-bfb0-a2a7fc083b15"
        },
        "item": {
          "id": "d94d6bff-dab9-4fc4-a8fa-bdcde39822fe",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "4423deb4-025a-496b-81c3-f40367f04a39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20cbcf2-a015-4caa-ae4c-db364bf66d7c",
        "cursor": {
          "ref": "ca131145-ba2c-44ae-a36b-8d9b9e73a617",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5678dd0e-28c0-409b-8e6f-ed348ef995ec"
        },
        "item": {
          "id": "e20cbcf2-a015-4caa-ae4c-db364bf66d7c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4ca7c320-a2eb-4a2a-a531-c5669f500292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ea2747b-bc91-43af-9633-8d4eba9d4f90",
        "cursor": {
          "ref": "6aa9edb4-7ddb-41ec-80ae-d27eb6a20c10",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "e5315c72-b27d-4125-ad79-881c4a17c37e"
        },
        "item": {
          "id": "5ea2747b-bc91-43af-9633-8d4eba9d4f90",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "34f31111-0ed3-4db6-beea-ca8a773b4204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d245284e-9b49-4ef2-91e6-b493031cf963",
        "cursor": {
          "ref": "366d0668-9dc1-457a-84de-ff8b525f227e",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "e562e015-7c26-41c4-b430-cf5b66bef657"
        },
        "item": {
          "id": "d245284e-9b49-4ef2-91e6-b493031cf963",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "f5598acc-c9c3-4425-87b7-31d735e3e4e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af2f272e-d02e-475a-ac99-a83a2968dcf5",
        "cursor": {
          "ref": "f9b891a7-2e56-48d7-9d11-4ec638f5494c",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "c524e870-ddd1-4eea-868f-08ef814de360"
        },
        "item": {
          "id": "af2f272e-d02e-475a-ac99-a83a2968dcf5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "aefd91c7-f85e-4c1c-8963-656c38265bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b792e3a7-2f87-4dcb-92e7-4c54b3d853d5",
        "cursor": {
          "ref": "041fef6a-ea9c-4a40-bc49-9e2b354fa8c6",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e7922258-3343-4e81-8881-3fe76ae4dca1"
        },
        "item": {
          "id": "b792e3a7-2f87-4dcb-92e7-4c54b3d853d5",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "db0bceba-bc63-4d01-aeee-ebd02bea2616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69cdcb08-db5a-41f8-b46c-0e968186413f",
        "cursor": {
          "ref": "3e1b1e05-0deb-46d4-8dbf-d96ee475d439",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "34dd2fff-7e20-4289-9936-c0c7c29bb3a8"
        },
        "item": {
          "id": "69cdcb08-db5a-41f8-b46c-0e968186413f",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "aaffa584-1349-4077-b378-81c34ac07357",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b42b05-ff4a-407b-9a51-f7412e32043c",
        "cursor": {
          "ref": "ef183558-36bf-4f7b-bd9f-6ec20be3d910",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "aaa895a6-cc7f-4285-a8b0-7afccea60607"
        },
        "item": {
          "id": "25b42b05-ff4a-407b-9a51-f7412e32043c",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "b7bc59cf-2edb-488b-b262-5334f7aede61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19a1f710-1f7a-4913-9e4d-27a5cf2def5e",
        "cursor": {
          "ref": "40b9e9cb-ca68-4dac-a17d-1780ec5436a9",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "9f9982b6-bdc7-405f-b3ae-76648e0c1433"
        },
        "item": {
          "id": "19a1f710-1f7a-4913-9e4d-27a5cf2def5e",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "65824696-cafd-4844-8561-88986d98429d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505fac0f-be02-4b61-8cbd-59b8f6d581f5",
        "cursor": {
          "ref": "3b9bb75f-e841-4215-92f1-51cba73b1d48",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "afbbfc59-c731-4cd5-81c0-f35d2466890b"
        },
        "item": {
          "id": "505fac0f-be02-4b61-8cbd-59b8f6d581f5",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "199ff76f-5bf2-4957-95b1-7b11bd95a99d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3f71f5d-b326-4a77-8230-be47546b246c",
        "cursor": {
          "ref": "c5e8fa85-4d5a-48f2-8115-7e37c44ac31c",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "055eb478-182a-485a-aeaf-297cc8654f67"
        },
        "item": {
          "id": "b3f71f5d-b326-4a77-8230-be47546b246c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bd01c447-a437-4646-a820-716e1b6e05b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2958d3c-c97c-4c95-a6a6-937a27052ceb",
        "cursor": {
          "ref": "96d9555c-3924-4f28-8053-1a80bfc4ae2b",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "0b4c6c06-736d-4aec-a86c-87ab0c7ede1d"
        },
        "item": {
          "id": "a2958d3c-c97c-4c95-a6a6-937a27052ceb",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b2b607aa-8448-4e78-85e1-6bf1e8943ee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f0fe79-3333-4c56-a6d0-c852dc1c8759",
        "cursor": {
          "ref": "e8105f4c-c620-485d-96be-510d226b2701",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "2ec65da7-b37a-4405-a951-1f7f5baefe25"
        },
        "item": {
          "id": "f1f0fe79-3333-4c56-a6d0-c852dc1c8759",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "30887251-a3f4-45e1-913e-360331b8545c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9403db-a365-4218-b871-a0acc0c16147",
        "cursor": {
          "ref": "41c176c1-fddb-4277-a6e3-4539288464b6",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "15968427-75fe-44e9-9aba-debcd2bcf1ec"
        },
        "item": {
          "id": "ea9403db-a365-4218-b871-a0acc0c16147",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "5e7c2a2e-9a6b-4f15-a420-883f47e5a98c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24499de1-66a7-4a18-9fdf-bdd46d464376",
        "cursor": {
          "ref": "c002f0ab-6216-479b-a761-2beffb9c9e34",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "cbd5ae5d-6585-4023-93a7-4d7dd74fcb1c"
        },
        "item": {
          "id": "24499de1-66a7-4a18-9fdf-bdd46d464376",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "9fba91cb-3e7a-4948-a620-6b894531a6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f87fd41-861f-4a33-bd9e-28ef99de6ef7",
        "cursor": {
          "ref": "c5760405-5b63-4a70-8ed4-1767cbad055c",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "ccbda2f1-1454-48e8-b984-c7d1ee06eb6b"
        },
        "item": {
          "id": "6f87fd41-861f-4a33-bd9e-28ef99de6ef7",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "1255a1a4-d6e7-4411-8f2d-28a3c43809eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77f5e06a-5cec-4ed6-81ae-92eeb5c1307b",
        "cursor": {
          "ref": "74e0fbb8-fc37-4948-bb60-668c0224aa7d",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "dbb9ac16-2fe6-46dc-af1a-6a598159b4ab"
        },
        "item": {
          "id": "77f5e06a-5cec-4ed6-81ae-92eeb5c1307b",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "90d35892-b9e7-4c6b-ab9e-06d4e0acee31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24db7d14-aa7e-4302-91bc-635f588d20c5",
        "cursor": {
          "ref": "55bcb80e-db72-4988-9ddb-58b5bf75c077",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b9641fed-64ae-438b-8eae-8cf2ce19ac78"
        },
        "item": {
          "id": "24db7d14-aa7e-4302-91bc-635f588d20c5",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6c30a85f-0d66-4878-9241-dac9b8d3d669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e95d435-84e6-4f35-a2e9-e6b4b9bedc18",
        "cursor": {
          "ref": "78279b45-964c-49b8-a919-5aee1388eee9",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "58a169a4-e2a2-4be6-9baa-8e75c9c3febf"
        },
        "item": {
          "id": "4e95d435-84e6-4f35-a2e9-e6b4b9bedc18",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "96fa9452-f900-4735-97f2-1ab16382e30f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa1a9cc-5a08-4725-aef9-330177e8bb96",
        "cursor": {
          "ref": "c67dc2e6-4ecd-4a5d-b7a0-06835d704fae",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4c50a89e-419b-4596-a5af-651f02b46ba0"
        },
        "item": {
          "id": "7aa1a9cc-5a08-4725-aef9-330177e8bb96",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b5ccaa2c-69ae-4f93-982c-bb6a5ab048f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc084233-cc0e-453f-adc8-0b2276743497",
        "cursor": {
          "ref": "97a579d9-7e03-4557-b2a9-8245b2698590",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "a1aa75fe-2a21-4652-8b03-6fc178d1d5ef"
        },
        "item": {
          "id": "dc084233-cc0e-453f-adc8-0b2276743497",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7c8de786-bed9-40f4-b9ce-1a20d62e9dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "504b85d9-aa25-435d-b477-0ba71ba14a49",
        "cursor": {
          "ref": "b22de57f-0004-4716-9e10-850c8a95e6d7",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "79ddd8e2-a11c-49b6-97ea-166ae43634d9"
        },
        "item": {
          "id": "504b85d9-aa25-435d-b477-0ba71ba14a49",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2a99f60e-812a-4a2f-bffb-d34ab8d853ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d3a6857-0f87-4c2e-b0a9-88e10e55a4cd",
        "cursor": {
          "ref": "94026157-d6da-46d4-b590-18c1edacb245",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "6e258e27-f7dc-4b7d-835c-64367b471f6e"
        },
        "item": {
          "id": "5d3a6857-0f87-4c2e-b0a9-88e10e55a4cd",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "b8a4729d-567e-4610-8575-775ae1cd4fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e210e54-97ab-47ec-bb30-48f334e57d3d",
        "cursor": {
          "ref": "a98968f4-b31c-4f28-905d-7b4d614385bb",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d8c8bd0a-4b60-4f98-990e-58ccfff0b634"
        },
        "item": {
          "id": "9e210e54-97ab-47ec-bb30-48f334e57d3d",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "8ce4855b-7882-4689-be85-9eb5aa78c02e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a75bb8-c4bd-453c-8d24-705336a76ecc",
        "cursor": {
          "ref": "1078791c-7c25-42fc-b031-f94a18329c29",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "6d0d8f43-2a0d-40d6-b72f-71d2f661653b"
        },
        "item": {
          "id": "f1a75bb8-c4bd-453c-8d24-705336a76ecc",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "fff9d74a-1fa4-4f05-8f5d-5be5b7e4a15c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee48fba3-c4ae-4027-a0f3-e1067a6c7b00",
        "cursor": {
          "ref": "5c3416c8-f5d9-4f31-9257-0a85ed9e3891",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "7121ce4a-5662-4d4d-bba6-c6a8682afbeb"
        },
        "item": {
          "id": "ee48fba3-c4ae-4027-a0f3-e1067a6c7b00",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "49f72e5b-8045-4376-a727-6cfe320be559",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ae6f35a-bd4c-4c12-bab8-31b0ea569aa8",
        "cursor": {
          "ref": "799db292-c09b-4163-bb41-0462ccdb4dff",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "386e2931-f1cb-4a5d-b903-73588803ac27"
        },
        "item": {
          "id": "6ae6f35a-bd4c-4c12-bab8-31b0ea569aa8",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a754df80-a63e-41b0-abf7-f4036e8e4a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36340050-1003-4772-9920-43be65839985",
        "cursor": {
          "ref": "d4d8bd53-bf46-498a-8351-bcc180fc29e9",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "faecb8e8-03d2-46b8-a471-a3362fcbbac7"
        },
        "item": {
          "id": "36340050-1003-4772-9920-43be65839985",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "47554781-5222-432e-9256-ec660ff64e72",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 48,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d910380-c3fe-4277-91eb-6758d24f251b",
        "cursor": {
          "ref": "7302aa17-672c-4e5f-ad7c-3f1399178db2",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "c450440c-151d-488e-97aa-f2921077c91f"
        },
        "item": {
          "id": "3d910380-c3fe-4277-91eb-6758d24f251b",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "28f119d4-b11a-419e-9dbe-7cec96c1b400",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 49,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af9ed57-a436-451c-b5c7-1dd57415e3b8",
        "cursor": {
          "ref": "de43e62a-d20f-42de-959c-2c4fe3906a18",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "5767bc6a-6e27-48d4-b8bc-dd696f2a08ed"
        },
        "item": {
          "id": "3af9ed57-a436-451c-b5c7-1dd57415e3b8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "74ab40b0-4777-4e91-905b-a88dc4936e70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "d505e1da-0b01-4adb-8d42-420519a94974",
        "cursor": {
          "ref": "d3141952-e5f2-4fa8-88d6-991dbcadb58f",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "114362ed-2d16-4bfb-86cf-beb7494c9d1c"
        },
        "item": {
          "id": "d505e1da-0b01-4adb-8d42-420519a94974",
          "name": "credentials_verify"
        },
        "response": {
          "id": "b9e790b7-5ff2-4107-a07b-4ce57b638930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "a63e9f8f-dd84-45a1-a926-76bec06af5d5",
        "cursor": {
          "ref": "baa9b3d9-5224-43b4-992f-ae090430248d",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "e54be896-47e8-416e-98d6-041d0830cd52"
        },
        "item": {
          "id": "a63e9f8f-dd84-45a1-a926-76bec06af5d5",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "427ff342-b320-4859-92ac-26bd82912e5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "16f79dcd-7385-4fad-a1a2-e9bbfa933ac4",
        "cursor": {
          "ref": "a56ab86c-8520-4bba-a917-1a85a22310b6",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e18baafb-861c-4061-bde3-a92eebb835a9"
        },
        "item": {
          "id": "16f79dcd-7385-4fad-a1a2-e9bbfa933ac4",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "16f79dcd-7385-4fad-a1a2-e9bbfa933ac4",
        "cursor": {
          "ref": "a56ab86c-8520-4bba-a917-1a85a22310b6",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e18baafb-861c-4061-bde3-a92eebb835a9"
        },
        "item": {
          "id": "16f79dcd-7385-4fad-a1a2-e9bbfa933ac4",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "16f79dcd-7385-4fad-a1a2-e9bbfa933ac4",
        "cursor": {
          "ref": "a56ab86c-8520-4bba-a917-1a85a22310b6",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e18baafb-861c-4061-bde3-a92eebb835a9"
        },
        "item": {
          "id": "16f79dcd-7385-4fad-a1a2-e9bbfa933ac4",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ed2ce22d-39b7-41cc-9c50-dcff8650d17a",
        "cursor": {
          "ref": "042bc814-0f34-4359-a1f4-22e45e76ab2a",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "6577c255-75f5-4d69-b94d-8874dd59bf53"
        },
        "item": {
          "id": "ed2ce22d-39b7-41cc-9c50-dcff8650d17a",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "ebd5d17f-0b51-4343-8547-621d52940d0c",
        "cursor": {
          "ref": "71d7de94-23d3-42ad-8021-3a80b7a37a25",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "adf18007-0539-494e-8f6d-31236714b8eb"
        },
        "item": {
          "id": "ebd5d17f-0b51-4343-8547-621d52940d0c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "ebd5d17f-0b51-4343-8547-621d52940d0c",
        "cursor": {
          "ref": "71d7de94-23d3-42ad-8021-3a80b7a37a25",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "adf18007-0539-494e-8f6d-31236714b8eb"
        },
        "item": {
          "id": "ebd5d17f-0b51-4343-8547-621d52940d0c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "e1d025e3-9048-47bd-9bb6-96f6b9dadcc6",
        "cursor": {
          "ref": "75cbc8f6-e347-408f-85ba-107d65dc373e",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "cca691d6-fff8-4c40-8c6d-9ee1765c1c68"
        },
        "item": {
          "id": "e1d025e3-9048-47bd-9bb6-96f6b9dadcc6",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "089e02fb-6c42-4e86-9209-b47076cc5f3b",
        "cursor": {
          "ref": "ebabeb6d-31d3-4dba-aa68-3511fbec6061",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2ec6c66c-609f-499a-baa0-8c3e31b9c1fe"
        },
        "item": {
          "id": "089e02fb-6c42-4e86-9209-b47076cc5f3b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "089e02fb-6c42-4e86-9209-b47076cc5f3b",
        "cursor": {
          "ref": "ebabeb6d-31d3-4dba-aa68-3511fbec6061",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "2ec6c66c-609f-499a-baa0-8c3e31b9c1fe"
        },
        "item": {
          "id": "089e02fb-6c42-4e86-9209-b47076cc5f3b",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "96e7a14c-1494-44bd-aad9-3e678b35be69",
        "cursor": {
          "ref": "fa38fe38-d615-428a-8767-d0ed455d39b2",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "c78b653f-bb97-4fbc-8e92-0d8778024b41"
        },
        "item": {
          "id": "96e7a14c-1494-44bd-aad9-3e678b35be69",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}