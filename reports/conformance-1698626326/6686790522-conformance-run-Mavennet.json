{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "ddccf79b-27cb-4969-8474-041d3c73bc2c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2dd1c6d1-2446-4c19-819f-b6a423e44f4d",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b34c1d37-94b3-4c37-b12b-b8226524702f",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "3191e290-0e2f-4066-a050-312ad2a8055d"
                }
              }
            ]
          },
          {
            "id": "b1ad8df0-66ce-42dd-8880-54c18b9f0617",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "717e9769-c8ac-4d26-a84f-0ed23330c8ca",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f3438249-62fa-4b4d-b07e-2a66e0d018b1"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "1905204b-899b-4451-a4ba-d53df8eb5ef9",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "f6300be4-18e4-46f6-b524-32d093d96ad2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "cd2b08e6-9cbc-4b7f-8cd8-590089d3f9d6",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "031c40d6-8c06-4779-b27f-c16647e8e7ae",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bb67e8bd-7147-4722-80de-c515763fae74"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "cb75fef4-020e-44e5-b5a1-3a0f5ef938df",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "50658812-f8cf-4d32-9ffd-ba569894deca"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "57944aeb-21d8-47cf-84ca-935171e5a62c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "08a4f56d-b840-44de-b3ff-a5790d731dec"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "91287b20-0d4f-41ed-9686-00c92c828cd8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "8118d0f8-41ec-47dc-a3c1-cb21ce8c633f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dda963d5-3d99-4b38-8162-614e59e31353",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "479e9168-7bcc-4177-8d29-a0c616c4df1e"
            }
          }
        ]
      },
      {
        "id": "e902032b-f1b9-4dd1-a467-58aa1b9bfe05",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "b8e8a0a6-c955-49ad-91fd-d801cce66612",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4ca2a7be-45c2-4541-8857-f38dc2137e79",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2e6b05f3-26b2-4de1-ab10-c2ea9327b660",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "546addce-5be7-4482-a4ed-d7717d1c21e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "82920dae-cd46-458c-bb45-c7cb667876b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db2ca11d-96c5-42cb-a1fc-6e4e763b8065",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25d6105e-ad66-428a-9e17-0e0b2379dc9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "89569a42-5685-4f56-bd3d-27aefc2f8490"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a13af6c2-b70f-4344-b4a5-9d857150ab9a",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64a7322d-4c6e-4f6b-83f3-debb1c9ece04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae16cfa9-97da-4668-8d0c-131dd0838c70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "2bf863c0-0210-41c5-9e97-11c8ffb99d35",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "19ce533a-5958-4289-a529-cdb065b104ac",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cde324d4-101e-405a-893b-51430ef89ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "de724f31-2233-4f94-adb7-cfc3c269fb7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4f83cc6-5845-4957-8551-3afef9d0adcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f349af1-390e-46d8-8b92-e23cbf44c0e3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "1a50b10a-a529-4176-b9d4-8246651401bf",
            "name": "Positive Testing",
            "item": [
              {
                "id": "10631c7a-8769-4044-aa48-7fc96ec7eb75",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6966981b-2dc8-4905-84fd-af0071bd8944",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "f1341736-12a6-4f9d-a43a-1a968edcde8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8d9a8c07-7042-465c-af8f-4f0ba60bb364",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "7282dccf-beca-48c7-8f70-111a2646027c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "652d0371-8764-4caf-bde8-50ec1b2fa4e1",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33cf5c12-9628-4fce-8883-846ca68ba19d"
            }
          }
        ]
      },
      {
        "id": "e8e778af-cf16-4b0f-8bc5-aaa5e7a9a25a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "18e936e6-2cb0-4a22-bbd6-c739c0a94d75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a30b3b4d-b39b-4246-946a-427a596da6c1",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "b632efba-113a-4b2a-8a51-a605df7cee7b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86b768df-c010-4c03-b058-5c848e4959bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fd59701-a259-425c-ba57-9e6c0ba56daf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de414bff-69ba-432c-9e53-ddf1f47af70b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1bf4d576-8301-4c80-bf30-7c863af29842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ccd375-eaa0-4ae9-b30a-8a2aa84ba8d0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08207ddc-e588-4af2-bbb8-7f6605daa8c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc54d411-e541-4d2d-b26b-6b25c7741e1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7603e469-833a-4e0b-a1cf-12bdaf52131f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9848558e-6af7-42be-bc81-735b31e5ff33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe14f903-1faa-48fe-b5d2-1ae894418b19",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11e0ef15-a7dd-46f1-b817-adb98e078f1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c4c12cba-d14a-4589-a503-d3029a3ff16e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a3ef385-632d-4e9d-a0fa-5def10d4828c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6ffe055a-bf45-4cfc-b6d4-25e3ce7fca6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3f8843-ec88-48a7-95ac-20e755a9ff79",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a56bf665-96ae-499f-a33a-485c418fd09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c5b5b55-6aa5-4b6f-9b55-41b44bb3259b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c1713d-66a2-4d02-b681-16e90273be79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f0aa4609-5043-4033-9d87-d20196b874f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42bb757-7862-435d-972c-0c542604f8ee",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4c4b5c2-a9e2-4959-8126-44aaa9826d41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87781dad-4fe0-45a3-a0a5-5db44b97222c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c717e75-3756-4063-bfdd-47448802ae87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b04d7894-70cd-4f46-9943-d8a2fdccf9c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a38b7ae-734f-4ba4-b9cf-c2d3845b5bab",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f88c177e-1e22-480c-9b99-e840d7d3a14a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3059c23f-fc79-4833-a827-b6e6bf05371a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658b638f-152d-4928-8a05-34d81843a6ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6944998a-ff36-4671-bd90-b49fe04bff3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15da8945-d972-43c3-871d-f9da10aaa2c0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27f260b5-956d-47d4-bd07-981d8e32d5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e4fbaa1-049e-4d2f-8cb2-91afacbcb24b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21f04af3-3d96-431b-89cd-42eccd6a466c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6295762a-9afa-43c9-9d4a-f0019e5ace37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "075a1620-0c4f-47ea-a8fc-da422c781b1c",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34169478-3c08-4f05-9eb4-15e66fea63e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "640fe746-70e9-4c70-81dd-e7f6877d48e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8db8dd0-ab81-461f-9a57-92aa0ce72e0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f3d31b9-6232-40ad-8379-c9eb5246902d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b37131-5fe5-4c8b-9c10-ccc0f1cc6768",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "02aa31c8-0969-405a-9181-d45bd071d848",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c80382be-7c03-4bde-8b2a-e538523192a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c96c41-2703-409a-a608-3bdfae5945de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7280e38c-1855-47f7-95ef-af89fa2afb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca3d374d-9891-4e0b-a438-ac4094380883",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d2beb44-8428-4da3-8e04-53d05bffd6dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "687dbff6-e357-4443-a147-56fa50ab1940"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fb5b0bf-3b41-4d56-89f3-b696ebb5708f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb99c03e-9035-41a2-bc51-b71dd5e4e528"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31c73cee-d4de-4a58-b09a-57522f0e4228",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8249512-e009-4472-8b7d-021f8a94fa55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb1298da-ec7e-4664-bd55-797ef889507c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ad692f-c6a0-4385-8123-35fcdeec55f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fe07d2d1-e630-4750-9ea3-d7b3f431da3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63e0c91-8c8c-4824-be0c-21a0630c7201",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62237b8-0b3a-4391-808d-b4be80552182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8230c356-dcb6-4d38-bc55-cf563e61082f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5643f7c-10e1-4e90-b529-a41a57a1bac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab3e6d02-15a6-4c34-b66d-90caf598bbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dca37963-ef84-48f4-b03f-5d12aa1019a0",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8bdde3d-255d-4ddd-8073-f6be8dde0b4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "172e4725-8f46-4a41-97cd-96885b75f2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "688576f8-bd58-49e0-ab62-f51718cfa092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "14d3a0a2-61d5-44cf-ad86-84e2a9a23b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aa39cc7-703b-4a4a-b88c-0e02691bc70e",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2acd20f7-508d-4ef3-b298-27fda167180c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed8980c-dad5-4cc3-8380-693ee21d924c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e6786c-22d9-43a8-94c2-110a069be649",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f92dea92-08e8-4f76-822c-9e07a2a6fbe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "403aed87-bf00-4c00-ba06-498500f1e450",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e69dd9-1a63-4fdd-af90-aa94788150a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d427f15-fe43-4c06-b73b-00e4953f1c30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97ea5bbf-4f17-441c-b58c-c7f37a1b393d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c266b9bf-c1ae-4d7c-8388-028e39a3ef62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ccf307-3c41-47ae-9f23-e4a1988b4193",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfd187db-44c3-41fb-87c2-ba9e145b5db1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f69c87c4-3f6e-4d73-bdcf-aaa447efa0c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64535e06-bbb0-4491-a1f9-d1649afdad25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5d48e468-e1af-4f06-9026-daadcf77a757"
                        }
                      }
                    ]
                  },
                  {
                    "id": "246811cf-bd16-402b-b67e-83b0f9524e67",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db463015-4b6c-4f74-8da5-f6f8e980e68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3043eee2-c711-48bd-ae43-724fe1f00107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fdd7b66-e52e-478e-889f-7933e02159db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4920b26c-429f-481b-8872-6511106de92a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42a5c514-92ea-46c8-aedb-36a5dd5f9e7a",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf393743-e00b-4489-953b-9bd2dc7023c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6016d7e3-bccc-4d06-afbe-640dc495a344"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c56f30e1-4f53-4612-9a1a-dcd32835bc3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5d0a934-d689-463d-a70a-f4d496529093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "623b6d4b-3c07-455d-916d-758d3e65bd1b",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a11250-ef4f-4ded-9e83-4bfc10d9e177",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33f589bb-5678-4d0a-930f-b3d7d6eaabf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7991c285-a40c-483c-9d3a-5fcf4519b321",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "33a11e20-82b4-4205-8a0c-0130a8f0e266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fec4820a-84e0-4658-b797-72f83b19481c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bd9fd4c-8e38-451f-85a4-68d0e96df1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "144d04e3-a680-4523-b59d-393cad08f805"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e31a1284-66a2-4c18-8c0e-78e7dac67b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7a78d42-2f29-4969-b9d9-aaa44e306f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32709d53-edc0-4b66-b514-35e2d4b1011c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01149c61-17b9-4848-aba4-ff081ff59bd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f40ed298-a8c2-454d-bbbe-264861b0690b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d817567c-4a7e-4328-8be2-9ed84b20cccd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a548b2bd-f01c-43d4-a33e-b20aeb8eb3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70ccc09b-3d74-44d9-8d79-5461dd136fda",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672e11fa-55f8-4eee-a1de-dd149e2c0590",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "058f8a01-bfce-43e9-87a7-8850c52546fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "caf42933-0a4b-4955-8ee6-20362e29b862",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7dadd3c-35e7-4bc3-8f94-b7580f363690"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f279506-6da5-4ec4-891e-fcabb144f8a8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8534ef-eaee-41e6-9b86-fff2c123ac79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9daa583-03f7-47f5-b376-2a57e6f5a721"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03b5344a-c34d-4f09-867d-70fdf2d68307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "145ca495-6202-4fc6-aee2-5be2c98a55d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "708a1238-46d2-4652-93c1-33bba82c8800",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "749e4aad-404f-4637-84db-2f7e9b4abd11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd32172-fe53-4e96-86e8-a8bd7266623b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ce7b08-6c22-4e34-a06c-8f69affdba86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0ea7d90-429f-4d9b-bff9-3e21be5d10d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "152c7f76-b99e-4f46-bd14-2386437591c6",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d87365e-0836-4471-b160-53d17b9af6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96bfd8bb-46af-4eef-bd1f-e69c7c444910"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2970655c-d681-4371-8ad8-365ae5f54f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e62258f4-2bfc-46d6-baaf-5caaee9ecc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41e9c8e8-8364-4d44-a96e-a40012b63023",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552731be-3736-42e3-a14e-7e459623e57c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "529e0323-f812-4854-872e-1d0439424aea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3c3e15-faf6-463d-91c4-eac267d0206a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "11e6e826-b246-44ac-aae9-84e311c43fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de7528ca-c5c3-4885-bc0a-28b2d1d37eef",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e99224-b02b-4f94-b825-43d4617a06ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47c2be87-04c8-45d1-9f40-5d5705cc8d83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a64ed524-769f-4f9d-9822-ba6c54e7476d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2ef1006-7aef-4b4d-942d-0126a393257d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60c49d39-84ef-4f73-b59d-bfedd2cc18dc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5fe5fb-8bcf-4e4f-bbac-91ec5f30dcaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d5cfe0-b014-471a-a7b7-c52fd675c4e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db046990-87bf-4d1a-9dc3-ef1225a97145",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba2dcb21-42aa-44f1-ae77-837b58235e6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "834eb2d1-6271-4439-a192-b2083b1a7257",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86c6e88-4801-49f2-9d57-7e62d040ccd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b67d868-11ac-4c17-bb03-084a4e3261be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89b96b3-30f2-4e65-8e2a-765884a5cf1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5dc434fc-48dd-40fa-ae30-e169c04f2396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d47328d0-81a6-41d2-bd2e-4a03bb90f9cd",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8ddf4b1-8e2e-409d-8719-6f908ef5f8ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e80449-eed8-4229-8ec1-d2d2ab4f3148"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64201ea3-a3be-4f52-9f76-070c5669ef65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "d08a358c-2d1e-486c-b52d-9164e94b1b7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc6c3178-78a6-45c0-92b0-c4993c2f4e5b",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0beee5b-39e4-47d0-b66d-24a9ecb62ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "753de7c6-b618-470b-bdaf-3b657ae09c3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0068cdd-d2e6-4a87-8294-c862447dd322",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cefc7588-f39d-4787-92a6-3d93d11769d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f56b56c-1b17-4348-a228-d50267447138",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73f1fd9-d9d2-47e2-b760-26b17748b919",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0972e49-fea9-4777-8a60-83c5df93b18c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ebf590-e67a-4cd1-8c73-861ef7611bf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "637761dc-c71e-486a-84ea-576c9dca69e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d13f1b6-ee2f-4778-ba1f-75e5ea1db988",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8815ef7-3048-408d-8b11-298eca474af9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c55d3e61-11e2-4a72-bd07-0d1fa325973d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb7ca4bc-9bb7-4131-9c38-8aef3739a4c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "537ee3f0-5611-42a4-bc10-aac07367b5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9691fd13-b84e-4648-aacf-825a3a47f487",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81f5cd6-ece8-418b-925f-43d3ce475e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99419654-b5a1-4ecb-95ec-d78c03269f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2322e930-7fed-4bc2-8b0e-862ee6569607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "00a82c55-8e33-4c87-879a-f301fd7e5f6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc20d86-7ec1-4964-800e-f9f6f4374760",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "257ce092-840b-4f27-af98-051a63f6b190",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84edf042-014f-4137-a081-03787e73d7d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2df18789-c25e-4c4f-b46a-e937889db88a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "e9f73373-735a-4df9-a52c-08d24352c1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504edc1b-e9d0-4a42-8773-d9aac6c2d0f1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b81725a-e189-41e5-be6c-0136704c58d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "746a43b3-77ce-4f6b-87d7-2d7fde68ab20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "291fc2b8-4647-4c6f-b789-e3b3389d6871",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcb8c318-2abb-438a-a79c-c8d502e2feaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efbadb46-663e-4d5a-90e1-fde8e84ee7b6",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aeb8e87-50b2-4df0-8493-a413c81cacc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01a43f5b-b058-4716-b3aa-00286de8010b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1c8863-c96a-4f3d-a0da-a448e867f064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1adfde-22a0-4a23-816f-499652f1cce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd9ec0e4-68aa-47ff-ba48-4b4db9e3bfce",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "197c1af5-8926-4d54-9416-429cf319e5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b82c729-59ad-41d5-96e9-fbd1f5c61c8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50859a58-d138-4edd-8957-9d9c4b9a2b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "43707756-b96d-4bfc-aa80-4946818829e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81425311-ad60-46a6-9829-e7b4c0c12073",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d32ac3e-d131-46e7-9317-3a507736e36e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e86f9f56-6a0d-496f-8683-21ac47f44246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a5b144-4894-46e3-b78a-5a2b9b780c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e9abdefc-3f79-430b-9403-778f58998da3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49fe106b-3bda-4da4-8bd8-fdcd1ab2c65a",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2632aae8-7968-47b7-b2f5-0be06e8a1527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4957d33b-0137-4916-82c4-a57d7628c3db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11c54441-b802-4527-a52a-bb5a3f198751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e868ae0b-68ac-4360-9d08-7e341175ceb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b236da15-9b25-4cbc-b20f-6799f1102d2b",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e87de1d-1277-43d0-a500-76112291cb78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cbb85e6-8ab8-42c8-a9b1-a68a551c9a46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27e75be7-8e14-4cb9-9e1b-babcdfbefd46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "67703450-81aa-4bea-83cc-e6b8ec2c0486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc5f988-cf96-4e56-b5b2-1526ca3d4dab",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cb68916-8c1f-4079-9d5d-afacf5231580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cadc3784-c3c6-455f-b11d-0c5be58ea482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f0a642-4873-4cb7-99ec-07bf1f23560b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4bc76c80-42f6-4d7a-8646-543d4f2efb25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f74e714d-23dc-43c4-a070-e6e9d0460a21",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd4096d8-ae2d-449a-8b4d-7209d2cf7b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "076c38f3-e4c0-4777-b4e9-a2e025f86f19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f96d06-810e-4430-81ee-fe602265b4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "425771d9-b972-48a5-a259-fbd0298d2ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93c03d30-dc59-47f3-b7a6-93e3ef607a0a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1866178d-c837-48f2-9e59-c2663a7cecb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93a2ace1-5445-4be4-927e-cd711f9d3a16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e53ad3f-39bc-41bb-b7cf-59b6601536d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d04172e-bdb4-46d4-a61d-50835a5fc208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dde5124-0a9d-4572-8bba-5d25a8a90cd8",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61014cb-3ed1-4a16-bdf9-0f1ebac38289",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86241b44-12d0-49d3-87a7-f6f083b9391f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c77f75-7408-4ba1-aff2-ca1d08efed90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb3d0cc8-7e84-4122-b0f0-1721a25b3b1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71f6d73f-5bcf-4f82-86b5-fa7dfad4eeeb",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d7b48f7-c084-4ce0-b4e1-0214bf230597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91bf801d-0a92-40d9-a93c-12e2c7e2048f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f611971-08f7-4a83-9cc4-ab6f38a36613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cb26e03-91c3-43a2-a2e7-6bae604fc136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e99c55c-0c8b-4a0d-bbd3-757675932df1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06600f0-2236-48e8-8c92-d43aa658b68f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58c3b10-4602-4c6c-8f21-66cb3a07f435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c70554-32c7-4fe0-93fc-58b99e3dc814",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba39c47d-485d-4fda-a0fa-19b56e1f874a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5ab9bd-1bc1-470c-8b2e-73f28e00aa14",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "342cda9c-4a23-4c62-990a-76acaa189a78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7c7d006-2cf1-475b-8594-90a9c03c439c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8b795a-6748-4e63-a45e-18ed8857e831",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "51688dc5-e921-434d-bdda-186594819eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4454b389-6162-417f-9f78-8dae3beeae42",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ee43e11-18c5-41ed-82a6-a4160e4cbc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd92fdf7-ec1f-4d18-a918-e484d2c58ef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7be5c74b-5e6a-442e-aaa1-87f06a66e50f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28b18205-302c-4218-aece-21a957da98fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "757422ff-d024-4070-8c42-c4352cff0c8d",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6edb083f-ff35-4a54-8647-4957ad1cd9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "203086ea-6dd9-46da-baa0-ac93f43ccffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d704a1c-46ab-47d2-9b7b-16270bd26126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4b63fcc4-9709-42fb-b327-85eb39c43ee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae2bd40-67fc-4563-8b4c-21490757cb06",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7180f2d8-d238-4757-938f-545c01462529",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44ea7c05-44fd-41cc-885b-33f953f09b10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540ce384-b770-427b-bfbe-a6ab1ece5541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "edf875ab-d919-4a93-973c-b597904c64f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e438489c-3239-4d7d-9aa6-3a3ba43e9260",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e6e0060-94e8-4175-b035-20135b6e40d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04261b17-4507-4256-bef8-4858a3c0e9ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "401bc6f9-9b73-43f5-8267-2c50b60a5f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "98794950-59f1-4a6e-a0e3-16d83891b8b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81f86361-9a82-40ee-ba9d-0d435cb52af0",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c45833e8-c4df-4d8a-993d-80427aa9ca77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4474e84c-dcda-4e2e-8181-913feffe2154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25f7d62-777a-47c9-b391-5515b03fefc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b47a100a-0c6e-45f0-a820-8188c881c7b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a2961e-e51a-47d7-9f5f-8465744fe8f0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9445e51a-fdd2-49e6-b6b8-5b4cbed82404",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61a2a8a8-f2e0-482c-ae69-c5ddfffb09a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fcb883a-4d92-42b0-adc2-3b4f7967f569",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "195020c9-3ac8-465e-b248-f8785dc5a0aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc0aa01-b002-4fea-a84e-c6d7783edc27",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d17abb77-6083-4e9c-ba8f-a9aae7e69071",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9296760-c115-4a71-9b02-f5dd46795b8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5b81b1b-cc14-4189-9ed1-f479d7e40872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "464476ad-0621-4ee8-8428-af0ddfa0f91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53e04609-cd5d-495d-861a-5646bcbc313f",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1725619c-01c8-476a-82a0-cd18acc102bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1659dab4-dae8-4833-966d-1d525f49055d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc27bbb-b70b-4143-87b3-f2e9dc41ad92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "05afdeab-d7ca-498a-9cc3-642b0b2f659e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "693d7bae-1918-4f9e-8cfc-0fa1f9857904",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "794f3bf2-4df0-4728-aa66-be9c705013bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cdae0fe6-2363-4106-a7d2-3ba1fab2685e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b18ef40-d51d-4593-aeb7-3ccc4f0dbb6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "53cfff2e-a604-415c-9bf9-4d2c8b44c2b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01edd9a9-0948-4563-ac47-7b19f536644c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63a485a-669a-4bee-ac9d-d8156ea24ed5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b88a39a7-de91-4f4a-9479-26efbc50d48f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51c703ca-85ab-46b1-8ae7-2d52f5a153c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2104f0e1-5ca4-4ed5-b242-f9954136b7c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06d0f098-cb9f-4bd1-840d-b3648073a669",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38caf317-e949-42c3-8f47-0b84d465fcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874b6c19-3748-4e9b-a465-329acc1fe19b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1d9a284-fcc8-46aa-843f-31f1367d4f27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "091ff56d-079b-4b23-ac25-c520861d2d06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af414f0-d253-4492-aa72-fa37b8b1bb4f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b1957fd-5a80-47de-afbb-dab4e7acf4c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a677de-1b81-4ec4-b967-0d2b32ccdc1e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1fc2e04-8dad-43ee-a72c-4007f0ac5f2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9dc4d51f-3c5a-46bd-859f-be80385b9d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7beb2923-13b7-40e6-ad45-e0741b4826e7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec7e6f82-c267-4a33-990d-fd2ab3afebc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d54daee-6f56-4dec-9189-42e7a3f570e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b014f0c-09d5-4c3b-86f8-4728f4fc9b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5630d4d1-df79-40df-af5b-20b6599e93a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f596d5a-b83b-419c-8031-c34ad5089e87",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "409e8cdf-3184-4760-bfd6-c06c17f469a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa8e8a2d-284a-40d6-9c51-9ae11e324396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "077644cd-7828-42f6-b0b7-0c66a6bcfa18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "cb7acfa9-7c19-4ea3-afde-5f4ebf3c781d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62780e04-dcc0-4ee2-875f-36f8664edb41",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8c21f7d-ed46-4761-8999-7861a4903e5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3be1610-1182-4532-b5c7-6edb61401420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068054e6-ec9d-4f55-a503-c4c68acb5c1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b40ed4b-ca22-4960-8714-3e1b6e7018cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41bb4dcc-4e96-4e52-a474-fb911e30b200",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c75d5240-bbc5-4eee-ae44-0584955c0c70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24926f4d-4976-4a42-ac5d-ad477b9a70d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d1d46a-b31e-4f0e-86d8-16703ed2d87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "84e324b7-85ee-454f-b8bb-436350bd94b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "195ffa48-72a4-4b0a-9fa4-b3f30a48d726",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "893b6142-d71f-420f-9c10-872a1de984b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87ce6c4d-772c-455f-a7b1-dbb8df6e7de1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a62dc9c-4020-437d-86f7-bcb66e5c44bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5180a4e-0a35-41ef-90f1-ae25fed843db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7071bd9a-1bb7-454b-b5fc-abe635fd39f2",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7229110d-ed27-493d-865c-04e8f7c53c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e084e36-2073-4b19-85f9-f52452da57e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0deb123-4133-4a86-85df-06c59af0aba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "906265e5-4f95-4f81-af86-f15fefb1a729"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e153efbb-6a67-4f93-8721-8d186539fab6",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de8f063c-bcec-4e83-adfe-97aa41981976",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53745152-d1ed-4245-849b-5070f2763301"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a4cd6e-0d58-4ecc-bea1-f36f0cb36c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2e6517ac-5195-451a-a8e9-b2d873213b2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19860d8-709c-42e7-8474-798309f562df",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c144da42-0ff6-4dbd-ae88-8761477175d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c42bab1-772d-46e5-90df-9e0e2aaabab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02eb2b1f-8192-4da1-84bf-acd421402fbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6b25921-e836-4e61-ac95-c6f6da31d635"
                        }
                      }
                    ]
                  },
                  {
                    "id": "925ee423-e0b0-41c8-80e0-57d3492faf57",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b149bde-4926-41f6-83f0-c5ff6f7ebfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2249e784-f4b0-4732-b7bc-fe0b4ad0a980"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3dad28-2fb1-4347-95b4-89ff42ed33e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bcca98d-d31e-4549-8a31-e7d84bce79bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3700d791-867e-4f8f-a2a9-dc6374cf05a6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5859dc45-550e-488d-ab92-694f55d18ee5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54016509-1ba9-435e-b4b2-3d16f226e999"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8161bfa1-b047-4c74-9c8d-a3600d0b500a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1707325a-64a7-4dbf-8ee4-070844073b27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e23ea13-e6cc-40d9-af85-bf6f6a6ef2c0",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1db8ae-39c9-4161-a6bd-21f603d59084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5878a560-6c33-4953-bae6-daa88cbd9ac5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7bba69f-77f1-4864-af24-a0193c8b25d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c07e59cd-134a-4b6a-91a9-ec4cb1b1d348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f0126a7-4284-48ae-b433-c3403921176a",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a51f869-c2c5-45e8-9c4f-c130ba9bbe0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fae44398-0afa-4a50-bfc6-e4a546179f64"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35f3be59-377f-4aca-93e5-3e17f79d1119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6485f82-c827-49c9-aa1a-2606bf3c926a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "978dbeed-7348-450d-9717-2dfba53b24e7",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab423bc2-b77e-4e2e-ba7b-47c1d10190e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625ab6bc-55ba-423e-acd6-0ae94b4350cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07b6515a-76cb-4945-aea4-bd0cd3959dd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8ea1501c-1830-4f93-81e3-8798773fc486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f196818-96e8-4028-80e7-576e302fe454",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0980178f-604f-49c7-9f24-0682670718ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c20b122a-0588-486e-b0b6-375536d6ea05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6a7dbd9-75fb-41a0-9f37-139ebbecd63d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5465c347-7e14-40bb-9d92-9c0dd1eb9c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2586fa06-1a79-4aa4-ba57-6b66938e6df3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0353bb83-2765-4f4f-be27-aaedfb897cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1bd952c-1bb8-418f-8f9c-94d16dca2459"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2768451b-9ec0-4801-8939-800dc5cea4a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "45ca21f6-be99-451d-83c5-64e2862af4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4824e71-b0f1-40fa-b5d6-7f4de8ae9ab9",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fd25fc2-2ab8-4be3-8480-dff4d0de1d43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1799b79-a5dd-4fdb-850c-8f67a13f9890"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e34293c-486a-4f7a-bc0d-7027954cdc80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5688d239-e799-4bbe-ace0-6883e89562ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "578544dc-4266-4284-a8fe-9ec18e42b429",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e392b2d-1a7e-4fda-8fb6-9c3962a24136",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba50d4c9-ebad-4963-8d3a-14245fa2a0fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4499e21b-bc03-4759-baad-b65d1c5edf78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14796a5b-a5d2-49d4-92ad-36e94af134a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e37da027-7f84-4eb0-86b2-1073d5f4e5ec",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b53e5ad-e993-43d2-aea6-6fb8f4eadb19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e984c2d-b10b-423e-b20b-c021f16038ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72e37702-4e30-4b2d-8ee5-a97585aa20f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9fa2546-87c3-4663-878c-daf4e654e3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0f2e0de-fe28-4346-b8e7-62a304d3f12f",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45e687af-eb86-43f8-8709-2c3a33e89deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e79384d-0fdf-4b5e-bf82-4ab6b81c3a98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25cb523a-8fa4-45da-9ba8-86a4a6174928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "02a54ac6-66cb-4478-b7f1-86ce33c65d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2064bc7-3973-4091-99d5-49c9822d70a0",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd7349cd-99a0-4d22-80ac-4d04260c2f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e35e28f-ff91-419a-924d-3bda31498d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "811e175e-fc34-4fd0-aadf-f13e47dc573d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "10dd16a6-daf4-4ce0-a590-e8e5205a00bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75767cad-5c7b-4943-8529-2801581fab1e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef3c4e5b-e21c-4f1e-9fed-a09d6c996bac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec2557be-279f-4ce7-8672-90482866b502"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a04937d-2f43-4d1b-b7cf-87898f543f38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ca8551e5-507c-44e6-86a1-e4968ba73557"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba690adc-69fd-46b5-a5de-def450249482",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f430e7e0-143a-4a8c-814b-77d03ffefe07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62785277-d8f4-4389-90de-ac9975fd628c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec751399-8f25-44c6-accc-113fdda47570",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d50f361e-fa65-4f5b-9d99-966de0788d2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58a27651-016a-4de0-9640-666c3ae33c24",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79d8d29d-dc2d-4c4e-9b25-9733239995ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bf8ad12-36e3-451c-89b5-dc43dc2c27db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf280916-055a-4289-a424-fd0f371486c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5aae998f-c36c-4adf-93e6-1060e1b45b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9ccd0f-859b-4b8d-bf1a-0312bfb5ac2a",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8bbf071-c1a3-4974-ab0d-dabdb51420a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de90d4a2-fff2-4d70-9e0d-7e3ea016f8a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e00af24-161b-495f-868b-dfba6923cfab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5964475-feab-4872-b8b0-250b68dc0b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17bc1fa3-f12b-433e-93f6-56fa0c7b4cd1",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f94160-028a-4ef6-8de7-fe97d026f6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a026ba1-4ae5-4095-99f7-7cd3f6f2d877"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1935a5f9-5f49-4a96-93bc-b023e6123834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f39e4ffe-9c1b-4aca-970f-bc247cad38f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93cd75f0-c309-473f-9429-80fa11a3dc4c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c589889-a1fe-41ff-982e-a0b6fc39592c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "368feec9-7e06-4756-9d15-92e46314aea5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ede07a3-6b84-40e2-b523-692a65093fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "50530aaa-ce6e-4341-b947-06307297b00f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8bafef7-3f37-4699-a885-5aed9c63b838",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f98ac94f-c2ab-41de-8e94-02b70a7cd718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25bb8345-5a97-4c5e-9f60-f7c501ecbc2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37b56a9c-ea4f-43bc-9050-c1c32c0fd064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5aa11a23-0ff6-4061-92a3-770618652b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1701bbf2-c4d6-4670-a0a8-9f995a2b48ff",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531a65ff-9ff3-4c47-8e29-a2d18be8c001",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c9fe70e-4c48-4c71-9310-516638df4a49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38076d1c-0b75-4f07-8881-7317dd35c65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "00ef35b7-8718-4e5c-98ce-d818da21af1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa2792fc-d197-44f9-8d9b-10b862ec74f3",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4887ee4d-1e27-4fad-bc9f-468ddd8217d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4752e589-bf05-4d9a-b594-859a3b2b940c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54a8afed-5bfb-49d3-85fd-d4efbae1bfbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "76cd0621-dd03-482b-8255-f6e2fd4f2f76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee18a969-179f-4ab7-95c6-2e4287903986",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f00f053-949b-4980-9f50-6d799f79d9a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38fa789f-4de4-49b7-9f6c-4fd8fb6303bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb62d21-72a2-4082-9360-927fa21e8f6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "fa92a6a3-4b9a-4120-aac9-a357172e2660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39eb3dbc-ce2c-42f0-b000-b7405185f4bf",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1335049-f2bc-4b0d-8188-146f8332a60f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c5a6930-15a7-48b0-af76-4590c1cb15a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac6e67ba-8e8d-458f-b3ee-ff9504ba5f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "33f15373-4cf9-452c-88e8-71fa10f0fedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f29f10f6-94ee-4b84-ad96-4438c02e31a0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce900f19-45d8-403d-a915-a5d1cca0283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "8f4b7026-8aa2-461e-b716-104082701216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891dca4f-8776-43db-8db4-15d4e543a214",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "2bcbf988-1f91-44fb-9bd6-9377718c56bf"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b1da1d90-bed0-4136-b08b-99ac8b41644b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82ca63f3-cfce-4aa5-bb89-be2275a43d38",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ea0f55-7384-4b4f-85a6-123dfe554223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "00fdd282-02a7-4989-907c-92275fd25b2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caf26ee-61f0-42f1-9fd8-f3df3e389ace",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5b5d04d-e4c3-4880-9dc4-296ffccdf4cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0c8a341a-ca8c-4a2e-8475-50213e2386e9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dce1d9f-3bff-4cba-bd56-1c9e2a38892f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2f99bdef-4ad3-48e9-9d6a-4355cd0184b8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a2e542ee-99a6-4b88-a259-58ec35a363e1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ec342d7e-dd1b-4cd0-b5c9-249533c5256c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "718a9889-6514-4ee0-80ef-6227281e6ea3"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a52e42b9-c569-48d6-8700-36468e7018a6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "31fc1f7a-c000-4da7-a7d3-18ead2ea87d7"
                }
              }
            ]
          },
          {
            "id": "e2cb39a7-1a1b-41bf-bfaa-13ff1d40df0b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a89a421c-f051-4f96-8cb8-697bfa9f5271",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "d3520823-23bc-4c25-9424-ceff4d0395d0",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "790e044e-8779-4d41-9c97-8060b7fa8ac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d948b3ad-7879-4512-bc3b-aa9195d80035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b97223f-dc29-4224-b095-79b29b27c8de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ed766f5-dd0a-4638-b6ed-25c1513d4009"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "37db8272-960e-4990-bc3e-145de72ef40d",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0062936-8c1c-411e-ba7f-192ef9f77abe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b461b2eb-fc1b-43b2-ac54-4475a41a0be3"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4a2fc7d0-a6dd-4da8-8f98-94212f36e4be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fd95597e-bda1-4dfd-9f35-1ea5a6adff9b"
                    }
                  }
                ]
              },
              {
                "id": "1c63c871-ae43-4a98-9652-b22cf0efd9c8",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bcb9551e-289f-4027-9934-57c65445204d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ac7bcfeb-283c-4e09-bfa9-ef9ca692f38c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c605ff9-7756-4b31-a469-318e43916b25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fa342a1d-619b-46c3-bf6a-cce06698f94e"
                    }
                  }
                ]
              },
              {
                "id": "fad9eb4d-a660-4ef9-bc77-489dd1dc12cd",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e305f75c-3bcf-4c54-8eb0-5d31d68e33aa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2b74573-634e-40cb-8934-75b5b6c2921f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82d7a8fb-15f0-42a5-b1e3-d4e62ca444c9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "596d5fc4-acd1-4417-86b3-7d169b5be283"
                    }
                  }
                ]
              },
              {
                "id": "13001f49-3552-4f43-bd16-3105d0ef44bc",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2a44b10a-4efc-4ca8-9990-9ff0727ce02a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6ee69274-ea83-4857-bfcc-645d0ba2584f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "313f647b-3f7d-4646-85f9-1aae42724a06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "d37cb539-f5e7-4e7e-a24b-2492141ffc1d"
                    }
                  }
                ]
              },
              {
                "id": "117b48b4-3f89-4e11-a311-e338a648be81",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3fdebadb-1197-4477-a0df-cda541fdbd0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e68887aa-2630-47c6-8a6a-0524f6c9e336"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29bedd28-8c3a-48b1-a41c-13547b471a78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "d2fafbe5-235a-48bc-a91b-ce93b04fe6cd"
                    }
                  }
                ]
              },
              {
                "id": "9e42abf1-4ea4-455e-8b0d-fb1939493bc0",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5d1e52f1-d17d-4ebb-b379-b024b5f21759",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0cfddc76-29c3-4dd2-ad3b-5a256ece1b78"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08292c51-c0c1-4673-8308-0bfa95e9d0e5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7097d1ac-7831-4f56-8a7b-6cb4f6734233"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9da0346b-388b-4dfd-84e8-8e1b0877fa9e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "20e238f9-0d0b-441a-802c-cba9588fae21"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e101bf10-1f54-4e11-8e25-fc57ed2faf41",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c1bed3b0-3f69-4119-ba10-d97470918203"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5dee8676-3bc4-42d7-b3f1-07b25770c360",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "ada46fbe-4633-4e3e-8cf7-66d70389c915"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1f4ea590-3293-44ae-b442-0297274c7bcd",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "85ec197e-a47a-4f51-8767-66e8b924ca2a"
            }
          }
        ]
      },
      {
        "id": "b756b484-7dad-453e-9d1b-168a5547e00a",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "03d0f9ed-3a3f-40ea-aa16-53ecb8ae27ea",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c0d8d02-1966-48fc-b753-d5c19e8ee0cf",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9db55fb1-989c-40e2-84c5-b7c280762d35",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "306cb63a-cd70-4923-8fd2-0e455fcfe283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57f2912c-9620-48c4-8288-6b906f25826d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29707468-7c51-4f6a-9c31-6b3f22a58a71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7adbc12e-b4cb-45a2-930d-2f4ef7d5690d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d3c60e-4ace-428d-b55b-ca804e336ce0",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74163f8b-81e0-4709-8263-26eadf0fafae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c3d948a-5e28-47f3-82f1-73bdd71172e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e99e06b-9532-40dc-a636-e3129b27e11b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2416043-3fad-49c8-ba51-f80205189ae7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dd67146-b797-4821-867e-d4960f732a2e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6acc13b1-3b31-4904-95ec-b96622de53ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "147627e0-c7d8-4d1e-abb4-9f1d184eea65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4845ff48-982c-456b-a448-b1bc822f1628",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "af84db93-aada-4da6-a3ac-534e4f72fc07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce363376-b622-4d6d-b4ab-2f0b4f5edb5b",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c53065d0-dac3-4b49-8c44-c3dbff9e7b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4ca0b5c-2638-4209-9ef1-71f8402f4e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac7629e7-0fa9-43de-b734-3c6f69ec822c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "70fcdc84-bf5a-4a96-8613-cb8ab7afeb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e22304bb-3029-4713-b589-bbbb697d7923",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "91d980a7-4504-48f9-9889-6b2082da11d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7120de73-411e-4448-b7c8-7cbcde4e924b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "625ae9c2-db6c-43bc-a1e8-9f6198b5d303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f855c184-47d9-4fd3-b4a2-8e65ad834514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3709aef-6174-4f89-8e19-c84065f1cb95",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33531578-6013-4185-8269-5b1d3b43db43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d36bd5-558a-4d4b-90d6-d8ef06986f1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da240824-d817-4cc9-b902-57e8712762a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d16f7ef6-611a-407f-930d-c78db8c250c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2af63c6-f906-4649-8d7c-d55dddc0101e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48941f24-8d26-42e8-9231-b6c67189bf70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99859fe7-2f80-4f41-bc05-e650c3c69501"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f40d308-80ed-4503-bda4-5c206ca0b984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c148a5a-e441-4f6a-aee9-30d5d821fa5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666b1fdc-2876-4b1c-ab4e-6bae1153178c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "845b90a7-2b74-40ce-a92d-e3c70ea2224b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86601383-abda-4964-94b3-2696f3fa2d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9dc07c-bba0-4da6-9323-71d52271a7d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "60c09eff-3dc3-44a1-9eaf-ca577e323c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47635af-8ce7-48b3-aeac-ef3cae68ce64",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e528ae82-4e92-432b-8da3-47e8c0acde7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab36e2e-ea05-48e3-8019-1f88b3a44c09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99be79c9-7182-4d8c-8d18-9374dd12c5cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0255f314-b188-4cf5-8bd2-9de3386346b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b5f473-63aa-4449-8475-5690927e47a3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ea3528-9373-4a32-9227-05dc24f25bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b190479-87b0-49dd-9a74-73183c20bfc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "813cc9f9-612d-4256-8170-4835788d5585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "55e471fc-8618-4611-9214-a7f7da7cf285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ded4575-d95d-4529-853a-2ff9d0d68637",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85b3968-1041-449f-97f8-788cf77566cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4b308ad-1a67-400b-8fa1-030463565d61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aa6e941-a8d5-46e9-b5d5-043fa910413d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "5b82193c-4276-4d71-bbca-3963fcadbce1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5aa0cec-8e86-4693-8fb5-4a4401ddcb1f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fc63382-43ed-494e-9ec9-0aed78a07974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc4d53fe-eb45-40c7-88ad-e225b6efa4db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0529f748-5824-42b8-b155-bcf4469d0c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b760be2a-2c12-40a6-877d-51193b0aebe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff9dca8-6aec-4003-8703-d9dc4479cf73",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "879cf8c9-2f9a-4bbe-aa60-ab4dd5435934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a928189b-d901-4d8a-bf86-24ab55b3fb53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fd87a0-e7c8-425f-bbd4-1a315302a678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4fe20a2-5408-4868-a3e5-26e01803b82e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e2edf37-4ad6-49db-88ac-65ec3ef0d2b7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e28500a-337b-4dbe-87f2-4f2019f14e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b11055ed-3e0e-4c55-b949-737958f2e948"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54e196db-dbf2-43d4-8f8e-f44b16f2f613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe5f47c-e860-40f9-a8a6-26b96fe340d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddaea142-df2a-4e5a-ae9b-f1754f47970e",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a4e194b-4abc-4a9d-9ad0-5029a7a76eeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6105c4ec-68ec-4492-872e-a620aeb74e54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540d17b0-7e03-492e-9618-a5761b07158c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7da39b59-787e-4449-b8d8-6492ee53b3c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e15965e9-5d89-444f-b5cb-ad3876a5496f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "044a364a-5bad-4610-b392-a274eb429733",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d932fea2-d0f0-4ccc-9691-b115b87a77f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e070650-1bd6-4f9a-ae05-d7986fdd192c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "c34d2e97-8668-45fd-b1fb-14fedba7b2a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1de7ced1-bb90-43c6-bd9e-14b1e9d051cc",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62b4572b-2763-4658-b21a-c89a83d54ed7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a024961d-047c-4df3-bcc4-35abd018338e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81e98b27-c2ac-48c7-9460-12665d66568f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "61e53a65-7b0b-461a-9cd5-123996996676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3fa34f-37c2-4445-8d79-653f151645d0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7e4ea10-fb42-446f-ae4f-5604bd3a631d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8c80d0-13fe-486f-9eba-9a219238e576"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cd3003a-46b3-4128-bb0b-226b6331e8ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb217919-bd52-4d9c-a0e2-12e2fd831758"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b88079-9c8d-4eec-9278-c25de0534fec",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e2b500-12eb-4c47-92cd-00c588ef99fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0715655a-8bc9-448e-8a62-9d79f39f8b38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af1467ae-d1a2-4bf3-8589-18ab477953ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "555b23e1-c708-4a9c-abf6-4a7f263a129e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e459561-e290-4359-a8d9-3ffd071c611e",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a084a33a-35af-4d45-b82c-e4a6aa4ac1c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b3bfee9-f290-439b-bea4-677c0804d9a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46fad410-7206-445e-9152-11f185958015",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fc8ea0c-bc1f-4872-a705-3a1275ea4813"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7356393-4be4-442b-bf52-f151176313c0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fa95063-7bff-4cae-91d7-7e0556276f36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6db6720-6cb2-4379-a9e4-d493f9518b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2674c31-96a5-4b50-a983-ec9939063469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4183665-b0da-466b-b24c-59e3b1da09c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00688fde-7c9b-4313-b403-b52fce95eb69",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfad7b7-3548-413e-bb9e-c89ee7ce4c72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c5e68bb-72ed-4499-affd-9615747b4ac0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52cc03f7-8a1d-4e15-b6d8-83655350f48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e1bd934-7e35-4bb5-9efa-e2b8d2997ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea6afc6c-aa86-4983-bc30-01e24e209a39",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ce0222a-d4b0-4df0-9899-d8474ea5da10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94524f42-131a-480b-9771-16afa8989f7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df23ec2-7440-48ca-ae6b-e218e26f2377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "68592848-cd52-4992-be53-45c5cc587181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96aff6b0-6f6c-427e-a0e8-999f32c27e2c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977ca685-b1f2-40eb-a920-e70729c82576",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d995fb14-47b1-4617-ae05-388dcd61bedf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e0a98c3-71e4-47dd-a0c1-3f484c9b827b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3af6265e-9684-4cce-9bc7-f19886c00552"
                        }
                      }
                    ]
                  },
                  {
                    "id": "128afbb8-f5fc-48d3-893a-2f18eaa96ad6",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202d9f62-81b1-4a2d-be66-6e6579ad6629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d9fe54-d7fd-4407-b7ca-5950e0ca62c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650295ae-5ffb-4538-8eb8-b6db52098815",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d5146245-eeab-48a8-89d7-5ef805a0a6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74d97a8c-761c-441b-a1ad-fbfdb1fa5474",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f82953d6-d5c1-49e4-a905-aa40ba3d5f54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e24fcc7e-14d7-47bb-96e8-d4aac9b05a93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36be4cf7-f168-4a8b-b20f-3415b7dc13ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac7decf4-a567-4928-91ef-294730d71512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85804ba-44fa-4fe3-8696-a6788823f1bd",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c71f740-2b40-4dbf-990c-72d91abd2140",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5950b7fe-9946-4e02-9f9b-3a7eea9eb413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37f0ec0c-9da4-4988-923a-d3f1fab6fd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b2e8764-4779-4b7b-9143-8376f5501279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8266ace-b628-4d98-8236-b3836345df1e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ae9c0b-25e0-443d-b674-118f1c395eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7052760e-5b95-47d7-a1cf-5a9d8c32cf48"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1000f60f-c274-4007-ada6-e37a030cd905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53833745-0097-403a-ba26-89dc1c209d1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdf11ec-2ee4-41cb-a81b-d2ca6734de20",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29d0b071-c56d-40c0-bdf4-a2c639491301",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b198fb19-5d64-4e2a-a71a-3926540fafdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7c418bb-3e46-4f6a-ad4f-4fe34b6414d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e94b5647-688b-4fcc-aed5-39a706924d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a7da60a-4262-46c4-bdde-2e59e90172bb",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51da3d0f-4b5b-4da0-aee6-c626e69d441d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9beef67a-5d51-4959-98b3-bb4a4af26af1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "618fad58-ef6d-420c-9596-23579ee1ccc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "808fbb48-abda-42c8-b0f8-02f182060aca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920ae356-89c3-477e-9743-73af85523de6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0313fbbd-775a-44a4-b480-b8860e2c437e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d784049e-f9a7-40cc-a166-d6430a01b040"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08259169-c282-4db5-a04c-f367b622ec68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c5720c36-8802-4ea8-a34b-7887de61354f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79e5612f-9527-4e5c-91a9-da264e84e643",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2f1727b-2e4c-425d-9d34-e5616c8a1d2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0148caf-a22d-45e1-a867-558dab145d17"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dcc0ff-6b36-4be5-854d-39cb09d13f62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "709b357f-c26a-469b-8adb-18e0180052f3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ae227e79-df24-4dab-9685-f0b52add9b47",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8f417607-0a88-4b9f-8652-a6c9204c397f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3e8d951-6987-4e94-bb8d-81df89b723eb",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "2f84812e-46d0-4955-8362-2b5729021cbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acce724a-e619-4740-80c5-c75fe287d536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3dfa299-39d2-4b0a-9116-5bee54cf8fac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2d633b54-60e7-43f9-a716-115f570a993a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00d84667-bc38-4280-8d75-5caf8a922fc4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c119e90a-6882-4501-ac70-794113b7b019",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5568b855-2c5d-455b-9e95-80240e2f1770"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "802bf353-2404-4224-a7ed-f4c3bd171aea",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "78699792-1a19-4aeb-9327-90acf1079755"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2840acfa-1d18-4664-b77d-4d69516be933",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b4dad991-674b-4840-925b-633670abedd5"
            }
          }
        ]
      },
      {
        "id": "2ef0fae8-37ff-44ca-9c63-0b4443397182",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "c9654a15-4042-4d98-8024-a08494a8e0b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "13905a1c-0612-40b7-9060-23dd43a8940a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d00b999f-10bb-459c-b26e-038ea924627e",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d6fac57-01cb-4ceb-aab0-4e1b1982487e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9747baca-177a-4284-8f4e-45054ee90104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b961593-c8c7-4792-a05e-8fb0985d9c3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ceb924-e224-4275-bf71-b71cfe9a88b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2611464f-cff5-48c1-ab8b-647d5cb36364",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd7aeb5-68f0-4b8c-bc97-ff0795b51fc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b69ee00-311b-4f97-953a-995d6945a520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb72f9c-65b3-45f9-846e-d8d6f8c62818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "30eea33a-8223-47a8-9da8-5030a33c0564"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfbb8cd9-3a7e-4cfd-9657-09cce996fabf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "024a2aff-c367-4cc8-838e-d7669966a916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d783810d-03ae-410c-b84f-6419262833ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04329d00-375d-4a27-9a86-293fcb5c1b71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0cf947-e101-472f-bdf7-ff44b746854c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a75491-9658-4136-aac1-e7a605038316",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71fe96a3-01f9-49b6-bc21-9008ae552123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "846fbf49-09d7-4b9a-8084-5c7c89c0e099"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7ca2da-e6e3-491d-baf2-babc58422008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "45da8ee8-7283-43ae-8d2f-d34296c2a596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02cbb362-dbee-48e3-a001-b05619c6545f",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f1066b4-67f7-4893-97d7-bde9d5e568f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "063eeb91-569c-4b2c-ad7d-f5aeaa2eadef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a3982e-b945-47b4-a7e3-1b238ac532a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b90ee37b-712c-443f-b43e-35cfe0d4078c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f2b265d-b2a9-40cd-a6fb-2cfa571a5264",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a00d78-5dbb-4954-aae6-49de697d57c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13935b6d-86c2-4884-ab49-d78fd0f4b818"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1540e971-1d68-459a-8cb9-8d5749f09d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b2b737ae-59af-41c6-9095-ce7e00487c8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9904dce6-1e9f-473c-94dd-37dc265cdedb",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e98612-4ae4-49b1-9875-f00a52b424d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56575a49-206f-4ce1-bd81-932336f7ccb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c60cb910-f891-44e7-8082-96c2524ca946",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "3cfece55-1812-4c3b-874d-0c269d7d357c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f98a1243-6575-49a6-8043-a1f3349ab561",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e714dcd-a9b6-4852-b0a6-2e2f44f340b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de3d19c4-9cb0-4d81-af01-7fec28490fc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "564479ef-44c4-4403-9f79-98ad7c041403",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ce27111-c567-47f1-b1d2-706317537bca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6c68069-1450-4725-b55c-2e0a569502c1",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d143942-9dcc-4d3b-8e62-d881185be156",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08275e1c-b035-4912-a385-37417b5b4773"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21b3b78e-b4d0-47a7-bd6f-79eda5266aa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "62201b04-45b0-4140-b10c-046f8c9fb8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbdfdaec-7562-4d28-96c0-36756a1c6acf",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c10edb9-960e-4edd-8b61-e57e55e37bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e47b6b43-2e59-4941-91db-1b6250459f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0611c6-8741-4c70-b506-6a70086f255a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2824c5eb-7989-4124-982b-23c8a46ec0eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b759d5-c3b2-4bbf-8dca-52cf92fcb3d5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22975d91-48e5-4943-97a1-9f1697c3b492",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c59cd14f-7823-4f47-b283-daf0c38aeb44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab25a81a-45a9-4ff0-a128-6d26147213b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "c2439914-8307-4e9f-b5d7-0888bd51ca7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41787405-e508-44f2-be77-b21f1ecb8ea5",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "547c7d5b-9f22-427d-b7ba-5df6e8472e59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc991109-9e78-4e40-b76b-84590a640c39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8286d087-c3d0-46f3-8189-f98f4be313ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "41bfe62e-4c22-47f2-8630-411eec635b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f77a696a-5ea2-4f05-a92e-d6b320535d9c",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a53393c-120f-481a-9878-9439fbf44988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3744385-7565-4846-b0b9-f20ba9f1ea68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc533f51-bbd4-442f-b004-8c29cdc5536c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7bc8da89-933a-4fb2-9158-c1d73c0eb86f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8463f9-d825-4d68-bc7a-468bd90f9c39",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ac5a70-66ed-4241-bf38-cb374b3e05a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "363c45a1-d16f-42c5-935b-4397943a5661"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95fe4562-a2b9-411f-9d3a-e8e79d15a2f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9cdd13bc-e7ee-4ede-bd6c-5811578f2e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4a2822-33f2-406e-938a-8d89e1965837",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24046dde-2efa-4ce1-8719-612a03ce1450",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e2c6ec4-ed19-4e00-b79c-1ddc3ac97931"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fac2454-ed8e-4ce0-b34f-c335faf8e498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b2a6ae1-d0f0-47d5-88e4-1f4eca1c3efa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5dc139e-81da-43a7-ac9a-24c4877cde1a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61900c70-3c2d-4583-a530-f91301181de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a19e1b28-42ce-4e4f-823a-ec76617b9a89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "860918be-aa66-4fb2-8742-acbd13fdea97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "09387562-764e-4e92-87ea-39e4a76ffaec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c46010-ed3b-4a45-a20a-060d12783008",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af764c5-62e8-406c-81f4-19cd77c239dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed427024-f8e1-4247-ac6e-d23b088df61d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b49424c-0e8b-48c9-91b8-96e8d1efab73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "82c41a64-33fc-40b5-9953-b00d7e64ea63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68413698-97a2-4881-8ae3-3b415c7b9eec",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b938b637-be13-4670-98e3-47c40f47debe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06da00d5-724f-4e69-aeea-8e8947b1d7e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4bf4720-d480-409f-b3b6-c3eae2582388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "2dd496c1-1b50-4da7-80ee-c20631b20d9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e92455cd-f711-4237-b454-9ab11b94254c",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a459d902-d7b8-4423-ab5c-deb8edab5767",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0b3ce07-731a-4691-aef4-8a31aba7ec0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aa19dfc-6cde-466e-9336-97df6ed67579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "77e7c01c-d79a-44a8-96a3-7ad08280e075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32751851-16d1-4b49-b47a-b729e2828083",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbf436e5-a92f-41ec-ae6f-3e50532f669e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0bc06a0-9667-49f4-ab37-b47e4f24a420"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70348b8e-6b8a-4d57-8730-1610a7da6eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5a0aa2f-756e-43bd-96e7-c6cf1f6b8566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc106a7f-7c4c-4b53-8721-d5f17e6968c4",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4491c88-d089-44f2-a8a7-b7c4842af6f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2118d0e6-994d-4656-85cf-87aafa8e80cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f6b1f23-fc21-4074-8f6a-2f3ab2f38ca9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "66ed1b52-7bcb-47f9-a844-b0559724c57a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b79e28b-2438-422e-9e80-b5ba02411795",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "443e768f-a782-4e0c-a56b-f9631b4f20b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7666ce8c-69d1-47cd-b2a4-f47806d8486e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568510de-b560-498e-8e57-b38426cae559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "072881e2-eb8d-45ab-9fab-088b44ada3cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28cf764-0b3a-4c8e-9909-7ad06f3ad49c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b34c921c-c872-478e-a38a-097ab6445716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32c24521-8867-40bb-b37a-5060d3328db9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f9a31d0-5ae7-4726-9aa6-88a0327fc2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa202622-13be-4ff6-80a5-aeab287bf8a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0985624-f52d-4396-9edd-95a893717537",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "410456db-3282-4014-9243-c0af807ffba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c88ed2b3-5307-4f89-bf10-5b1d2907c79e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f050de-1da0-4b4c-a6df-92b5291b0b7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8df387bf-f136-4ed0-8bfc-870005adb566"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb3d48fc-1d13-4240-89f4-6f107d8b8bf1",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9030769-f6ca-4e5e-9173-10e5df6a8199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fab8b3-ee5f-4669-9e61-7b23ddb5a9e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3029b5e-6482-420e-b364-681458145298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a4ecf046-cb5a-4379-8808-4026ea61ec4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c857ca5a-a551-4818-8cb6-4c682acf34dc",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe026b97-21dc-45e6-af96-d292dd90aa1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "482b1a3d-6e47-4bfa-a43a-9ba7601da14a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efd62d9f-b83d-4206-995e-b6b324556c12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dae60cc-3885-4296-865d-9dc68eea47d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e7a749d-c450-4fd8-8c33-501a38b47004",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4bbb193-d71c-43f3-86bb-980dde9da663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4e0315-6b1b-4a90-ae4d-51b8b76b17b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4211283-7f12-481d-894e-af7c45606de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dfad3210-d3de-410a-ad37-1d96e471c057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e887a71f-37f9-4a5a-8936-b2ebba25cede",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "020cdb27-7713-4442-94fa-3b626f3a0b96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "368307f8-9458-4ab8-8a94-fa59219b050f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0142c1d3-9390-4c7f-9d90-7167d3465e7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab0d38ba-a4ac-4522-a7bf-607758581a66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d24a1479-0f4c-4aae-ad94-75d8e5a19f7b",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d8e24bf-55bd-4184-b8fa-247e98bb84f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b79548-2ff5-434b-9c01-db8bae8e4cad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f5ceefc-ab95-4444-9ac9-47e7d5438588",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83a84431-d195-4996-a270-94f8ca15f0f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa2f791f-8138-4c14-a340-e9a4d9333778",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba2df749-b67a-450c-840f-e0aba834a187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a45f0f22-60d2-4b9d-8a5d-df2884de85e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f538dfe-2c4b-4ba6-a1ca-49a69728bc6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "93d0d9e8-dcd9-4712-aa56-78a089c109fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9347e828-0a49-4365-b34e-3fdd35cf5165",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2398194f-6a0b-435e-a2b8-414d3f10814e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9beb07e-3e56-4b36-be5e-f29d178c1c63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c248863-9c4a-42d2-8647-71ffd0ef76d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3fbf9f3d-3dca-4fdf-8914-a95986467681"
                        }
                      }
                    ]
                  },
                  {
                    "id": "881b497a-c9bc-451d-b75f-76e5782196f9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c9b11e-fa75-4e9b-b47d-64d9f5ed786c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c192ce-fd57-4dd9-b768-d78fe3b8f5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fed123e-f0bc-4913-89ee-17d3f45c0493",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "018d6b17-0678-47dd-b19d-a76b5ad0d3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37a5efa-7624-4790-a5f9-07ae71a0731b",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b189d0-3e0e-4f6d-9afa-998831fd2f85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62775a65-4517-425b-bc71-cdc9c9df17eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92c1deba-bdb8-4f20-a27a-926fc31f869a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "69262129-620e-43cd-bc83-5fc932a9af30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ec56fe-c329-41f3-ba4d-cf6900c7b2e2",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2110ad7b-cb45-4a52-9a7e-df5b989b7112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a27f939-84d2-45bf-9bb0-64282cf5cfe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00483cf-a0b9-481f-90eb-860478743e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99666523-f76c-4f70-b000-caaf2e1be39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e894c0-68d1-467a-8e8f-4983fc742b1d",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce478056-e893-4f8e-9aea-5f0808b7ac25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b923c07-b721-4001-9d29-65ed272fb710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cc8e745-998f-46bc-a971-2782edd58e56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "995a243f-0190-4462-a23b-d68b10bf7f7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f7a0ff8-8890-408b-b520-89bdb5dc6924",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26f55b40-8d90-4793-b557-043528607043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e50105f3-8300-4a31-ad7d-4211f7bbcae4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b2c75ca-eecc-4ca1-9ef1-50ab87346d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1e9675-1736-4e1c-bdf9-a1210a371191"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a77b936f-d704-46f5-bd6b-aaecd156b02d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9984b696-01ba-4368-960e-6ca27cbcf852",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "977550e9-6923-4089-b46c-10a1a56e8372"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fbdb4a4-8609-4ee6-930e-355b6582f2ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4726e3e6-624f-4226-a060-a95774a2dad9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "d1f2db63-e8fb-43fb-9028-5a056a231de1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8e287c58-2130-4a5c-9a42-1eb6a029b488",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef7070aa-4ebb-4c68-9175-6f57b0723d0c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "723c4e8d-3c2f-4a84-a2d8-80d73b7e4dc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906276d3-02d7-4ff1-932a-caa2281ac93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3a84ce3c-ffde-458a-ad9c-0910f6e822f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7363a8cc-fb7e-40be-9544-82fbb928524c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e1f1cd37-dc37-42c5-a0bf-b5866a7f910c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8577c698-aa43-4c68-ac10-0913cb354f66",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56c0df26-246a-4485-9a71-5f18837bddc5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5acfded-6bfa-4b20-86b9-fb04a2823877",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "aa17c0f0-0ac2-4d28-a004-c721428244e3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8a7f13c0-b129-4cd5-ba6c-28b8a91656b3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "153a8730-b065-478a-b726-056f70d82b61"
            }
          }
        ]
      },
      {
        "id": "1ecedd75-5096-491f-8daa-85f12e1823f7",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c2ead18d-aece-4662-9c36-a92002e637a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c08d9b44-1a8b-45e3-b39c-0195816251fd",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6e04dc0d-40d9-4338-a89d-5efcc020dc8f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b8b40b1-2857-4536-9229-b5e1c694cc85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "678551f1-53b3-42ac-9aac-9c4382f68fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aea77f2-4f30-4624-bee6-f2688a277678",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3519f6b-3e5a-490a-a677-33f4360265c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efd775e4-f713-4c24-ba37-e260e3f3f8fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9473dc34-3cae-485a-8eb0-d8f75f11d2c7",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603aa6fa-1118-412f-afeb-61794206c6de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5f5292d9-decd-47aa-889f-862abb13951c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92b795b8-ee05-4728-8a1f-8de4fcd03c0e",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f402455-c16f-4427-b697-1c46256c6014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cfb6e25-3024-472f-a760-36a6ac1cd219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34cb80e5-c8a8-49c2-aa42-1110fa9e8dcb",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b4cb67-78b6-4211-ba90-fce531fba54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4732dcb1-a4a7-440c-a96d-ab8b1344a2f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fd17cf-f134-4d0a-a028-4252c79cdf87",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb06b26e-4bc2-4797-93ee-638668349d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17c4dd0a-5b97-4671-941a-7a2ac4f0942f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79a19c08-838f-4354-b1fa-b4190e04f17a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb45a77-3b4c-4d4a-b821-ffaa7e4749fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11904a89-e7fc-47d8-b543-f71096a2c332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56cbbdd1-2130-4aa4-9afe-382386d6e080",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c44f45-1ca3-4072-983c-ebb0bee1318e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e448c7-02c7-4a6f-8632-47233dda4701",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5edd183-b555-47c9-8a51-ddf6184c6873",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2439b43-6687-46d8-924f-f268b786a98d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "962d6478-6ad2-44dd-af70-173bc96c2d3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9402b2c2-acb9-4971-9d30-1bcce39d3f41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c92656-869c-454a-bd5b-e147eff8dbc9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8d5e35d-0796-4f87-a80a-14535cbf6ee1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a68b9d3-5090-41f2-a86c-2aa99a1b3dee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "39b81130-1a62-4cbc-89f2-694221519e35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f06ab329-b2bc-4b6f-a69e-a7eaa1cd737d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cb90ec-a0c4-4549-9f8c-fce2f4d5b3cc",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5fe4b90-5b03-43e3-a54c-76cd422959c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8551887-d216-48a5-bf44-247aa1e9d358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df8d1c6-c59b-48ab-9c7b-3119b627d982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b08b5a76-e89f-456d-be1f-0d7e1551a21a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c6a4abe-ee3c-4470-beaa-3a4ba694b7d9",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc1dc50-93e9-430a-a145-d2cb6059633d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7f7933-c3e2-49fc-86a7-334440761bd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5f26ed2-690f-4420-a62e-720d9a64a013",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da1fdfa5-99d3-44bc-bc7a-e857ae3b6ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2cdc0a0-75a7-4130-a296-a8e19794dde6",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e4dc5fe-0bbf-4f5f-94f4-ab897c59587d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67e94e68-1c1d-4fd2-aa9a-89c6df3f76b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc8174d-b2ef-48e2-b5d5-960b344a8763",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7839a005-dbcf-4c80-8507-a3b8b42ff5b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08197f57-c1c1-48b0-af23-376569125977",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c26b154-1255-4374-bb36-ce0d6dd8cb67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d775d597-dbb5-4ad3-8eb8-1143613ae131"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba1fdb5-e9f4-42b6-bf0b-f5dbc8a2a968",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4fa7921-bb41-4c33-b430-107d38d839ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81a16a0d-784b-4d57-9412-1688448d5a05",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04c4a1ce-cc1a-4d84-84d0-ee9088158732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f22b23a2-f3c1-4fbd-9671-f4a49764c549"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "be43ef25-a545-44bc-8844-885e3a72b341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8df2e7d-c3e3-4781-b62f-ec43f18bdc88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071817da-a638-4ee2-b64e-94dfdf2e99c9",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f053b2f-f779-4eac-9969-310280f0d1fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed53f8fc-24df-483f-9268-f1e98b295336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c1e2edb-ea13-478b-9ac3-e14c6943e3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e19d31da-6dc5-4015-8d38-071d6369023c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7019d1-9cc2-4619-b73e-0941e18d64c2",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1634c74-8cb2-435c-a850-e5db9cb4f307",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa6f9df7-7141-424b-82e6-5c393f5fdf53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b29f916d-0212-4401-aaad-b7650e2b0ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d3d0758-3062-4658-9f6a-f937b3971a00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d6ee934-3b74-4052-bfdd-5b05b44985e4",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e36e74e-27dd-49d9-af26-31da0f7dd81a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5c6b84-c45b-4c8d-9870-d10df2736072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20891aca-f04e-40c5-93b6-bd0057b0928c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb84a6b2-cc20-4b60-9d95-2d5c110473b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24bb114a-68d2-4b5e-ac8b-aeb2c84aa33f",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30f42969-d78b-4541-ac3c-dfe58baaaee6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83641efd-c879-4b1d-aebe-a54d48d4fbf1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a05567b-44e8-41e4-9bc9-ab45aeab74f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cda4dad0-f029-4e03-a667-3e3a4b1e9747"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c5d7fd-7571-4750-82b6-2841181c4f5d",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05885f66-0a10-490d-9a02-5fb5cd66ad31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c785ce7f-26b4-46b7-8068-b00d6842940b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30abef47-8c77-4d1f-8ad7-e96aeb794518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca8a46aa-3b37-4bf7-8d3d-9f28286afaa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "749b3793-195a-425f-8925-31fd37e4ae95",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ebc5eaa-b05d-4b2d-84b6-7b56b701089a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "558dd6e1-9f91-43c4-bef8-513eb6d71b22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d420c6d4-2456-4872-850a-3667c0da026d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e69fb2bb-d6fd-4376-a730-194b5b45f741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31210930-a10b-41a1-b6db-dd52a2d7a1cd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dea6829c-8d21-4feb-95ba-e44a6ba0bd97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45bb8c0b-d585-4b06-943d-504434047c6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdbdc5f9-037c-4f35-9dd8-3d21c9b5afb2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75c7e3ef-ae7b-4355-80e2-de1f0fc1d3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3312bc6-ca74-4686-a200-04bb61aaa76f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93211836-5b26-4068-986e-2c1195ca785b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f97576b-b6d9-4cf2-906f-9dd4e8e8f84e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "15fae4b2-8986-4217-ab46-dfd4712da349",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712b4443-2741-40d4-9aaf-7cc542168448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf81fbb-1f42-4aef-b988-81fb2ce30ee9",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f95e195d-c9e2-465b-a677-5af0b3dac3d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdfa0240-8287-4361-a274-7f31c9f0fa3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe50289a-0526-4fa0-a1c7-84b8250a3e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf91ff6b-6b82-404a-a248-ae08c610ea2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c458c382-7bb3-45de-aeda-db02147e8694",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac1cd09-e2d8-4861-87ff-4f3f5b1c4f6d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a932ed0a-435b-4b8d-b445-c9fcb3f96c3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "402b5941-5adb-4fcb-a381-05807baebf7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad0fcb6-4ace-43d1-9345-deb59e877e0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e932c443-2e49-4295-a8e9-92a7976f3f24",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c48872-ef1b-43f4-9df8-6b7bfb2004df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7c4ed366-0dda-4038-8cbe-7d9bf9c67048"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bc62207-3fe4-413b-be07-44c2f02b6950",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "280b5980-0746-4004-b42a-99d07cd97f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ee064b2-535c-4d07-ac02-09b910812525",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "313ad6a4-22d6-4611-b6d5-404aa384a7e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d767749-6581-43b7-875b-b264e79183ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da1cb27-b818-4085-b70d-64066519b425",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3ef45e-3df0-4f4b-8f10-3308d153adaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24f3bd22-f254-40f7-b042-43e1f678ed5b",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85468f98-318e-46ce-b5ae-219023101763",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84ae4a3d-2e7d-4d9a-8c2e-ce64c250fb23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de081d7a-118d-4175-8587-837c0545f230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ce273d-df43-457c-97ba-862aa747d87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed3a51a-c9c9-455a-aa72-d5e707d6d31c",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "340d1f96-baa3-47ec-85b9-e1aa3beca480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b895f0f6-cd7c-4947-95e0-943367605995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a928b0c-bd97-40fa-b8a2-d4331b174722",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9dd1cb6-40d9-4ed3-a94b-a9360b540c85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c19647-d9d0-4fff-895b-94c3f1c146bf",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68b04e12-63d6-40b6-b6dc-6f56e7c88813",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fc8a248a-b97d-44e4-98b1-d03c60613c5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c4aa967-1666-4c5a-be18-670e75ba3fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f095c6-fafa-4198-8ba6-11917e454d38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0569f1-f32a-4cd1-ad79-4acc026bd595",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77c4db88-8ece-44bd-94d8-2483ece3741b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72dea5ea-e743-439e-aa09-25f2c6aa5a9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b794dab8-0507-44ef-b999-f8711ebcba7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b828a4e4-cfaa-4856-a5ca-e5cd10595aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e2d02e7-f1f7-4018-845d-bf183ffcaaa3",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1554fa2-9910-41a5-8111-b98cac8e5b88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7219e5b5-0594-4ac4-981d-778b1ea4af49"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e26b2942-0e55-4192-af24-c31f8d906bbe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ca7ffb-f25e-4cbc-abf0-c1b8cea5b26e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea3dfd0-c420-4f95-92d4-f7cf0d38e66d",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84aa651e-bda1-460a-96c7-356a1ee9acf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "153f481b-7e7b-4968-acb6-622760deb66a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfe20b1-7e6f-4c8d-9d56-9cedbd993902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6520c10-608a-4ab6-8e23-d814f90f4035"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6409f019-7d7e-4153-9f44-e91fd9e02556",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44542d98-3fe3-4382-838a-0bfe0e1668ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49ee9d80-c067-429a-bbe7-38871623b04c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f06df3b1-5170-42c9-b190-220d57e6e1c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156fc027-e005-454a-9baf-b50cd898adeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4736e24e-eb32-4c57-a5e8-721d7e635acc",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16b67dd8-ea8f-4e73-8bd6-62d9374e20f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e3aace0-d440-4e07-a34b-a9b82debfb87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95ef4cc3-36f7-4f09-b688-4ada41006b07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f38917a6-f387-40a5-ae6d-4d53b216f372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2345f82e-eea1-4054-8d91-03bf3bf9bb2c",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcc3c51a-6162-478c-b5ef-24ae232dd569",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ade518-d88a-4ccc-b66e-24e417bc422a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba121fac-098e-4604-be35-4eb743276908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "131a46ac-e94c-4807-8d22-09005be1e43c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d2f03c5-c15a-4add-9cc2-2abd368a03e4",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6892e2a1-cda6-4daf-b2b5-392085fe96af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "943d97b7-d297-4914-a55c-4257c4667ebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b847d3f-3357-47de-85c7-dcab5587bf40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "808d4d0e-d4ce-4fa4-b3b0-10091e7f8667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018fa4e5-3e48-448b-973f-0fe84ecf2ee7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20d5e3b4-25c2-4308-9e02-9542e0b67264",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aec6563-6ccc-4287-9cf4-321212a711d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ac4fcf-94d6-4219-ad0e-2319017acf50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4ada40c-348d-4d3f-bc7f-5d91420dbb1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eac5887-a32b-496d-b3f2-f29b67c2d159",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b38cb86d-a7a9-4a7e-a473-270aeebbce30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b09d688e-75ee-4a8b-afeb-ebac0e5e667e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25aafd7c-7780-4721-b654-7d5fc220f8c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69e80a15-e03d-495d-865c-4022df045dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24590b0c-8608-4632-ac0a-625d4bd04bb2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6ae69ac-7442-435b-8b03-0b2979ef2c60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bb9e888-a28c-4904-a42a-21fdc02b20f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3578f070-9962-4a3a-9d29-117f724376a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac760d04-7169-4b90-b12a-25fa3623f9d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0755345d-83ac-42a4-81dd-3eb298a91503",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76615c2c-8fbd-422f-a621-e3682c0ab385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23aff92-39d3-4185-8059-7c8cf5ff029b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4040146d-3714-4e0c-a53e-ca14b9a0aacf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46825192-203e-4a27-9da9-6055aac64354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d636ef34-6ecc-4d82-bd59-18f5455efa68",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d23b9e53-f3f7-4e3b-989a-5c15d88c448a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10a8fb39-761c-4ece-8c67-e681e66a68ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "778c0afa-ede0-4d1b-9f43-fe7558f06830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "488022db-3e28-4ab4-ad59-1cfb0a954f55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7f7229-4def-425b-91cb-ded4bf85dc26",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dcfaa19-fa4f-416a-a30e-3fe9190b4b92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5153806d-03ae-40c1-9461-0fb64799432a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba485099-e2e5-4d03-80e7-3398683fdc99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e64545b9-b9e4-4c36-8033-7780ee65b7d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0dd69c-16f8-4d4e-b53a-4620018ace72",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08535e4b-ba05-4573-af02-b69d766d2ce3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb879a8-45fb-419d-829a-9cafdd9b63ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5628ea47-e5de-4682-a06d-9e60aeddfc3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a91ce9bb-e45f-4083-91f5-a5b31bcf3b0c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7661679a-6986-4355-8f51-d1ef20d03c1f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76ff6c3-4d1f-4d8a-818e-f95d28868d11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "160c4049-7e00-43eb-9df2-0cc6b4c3b487"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e94513-3562-4ea3-a673-1a4a01051483",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "630c40f3-d565-4369-abe2-8c0912f09b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97d032ad-cd20-44cf-a5bd-9f2ff425d4b9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f5761ea-525c-4794-aaf9-4f66396c4516",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87c75b8a-8a05-4634-99ae-34cd9e90f7e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "385348b1-7d87-4912-87ac-2d1918b36efb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d4229e-ae2f-4a96-9f3a-0ff5e5e43b4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06fd7bb0-f741-48b9-baf6-cec2cc9a56b2",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae887c4a-fdc6-4422-9337-639e667a5c0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9bcddd8-37ff-4558-a6c2-5cbd82bbbcb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff8f7725-07a3-4db7-bd8d-9b3b726607ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4053a6f-d55f-4a04-96af-a099693e5bc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bf8e98-55cc-4e61-b89f-e1cfa2d07059",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a833fc4f-c530-4341-945b-d1eadce7a35d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaa76f16-ba60-40ba-948e-a3a0bc69be66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a97fe6a-a402-41e2-8263-023fb0e35c50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76ecd3dd-d27e-4834-b767-f57fc27cb0d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54c0ac68-e35b-4d03-b171-d2191a815985",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf45c5ab-1b10-418a-9459-42cb04fc6887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dccc0448-1999-4f42-9dcc-b191541dc484"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "836d7c94-a009-4ed8-85e5-80ca1021fcd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3927f51b-cccd-47e0-9a50-b0ff2c42f8dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a1119a9-3eb6-4bd7-b608-66bb685e4c31",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43ed2529-679e-4852-9e2a-1a99e8c9dcc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "363cbb1a-ae9b-42a1-bfd9-f9bcb908a82d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "affd3414-2230-47da-9ac4-62ce178d6c1d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409f6537-310f-44dd-a0d6-983a4dd1cf67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea3c8c48-989d-4a6e-81f5-c9cdb4369f58",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f28697-6f1c-4210-a67e-7468d43e3590",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bb73381-19c8-4147-a90f-cb548f5e1ed7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f58c678-e9e1-4dcf-9f7d-a9403f6a2f9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb089edd-852b-47b4-97d3-406d90391be8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab434eda-77c0-4ea3-9a41-52dee8d7c6f0",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4949389-efb9-4d14-bef4-acfd632c3c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a205ac47-71be-4023-a45a-c27ab41314b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad75ea3-386a-4f00-8852-b825f3690fcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "836783e2-4a73-4429-b560-9d2c4905f145"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42b10667-9db1-48f3-906c-b1fd0ad91c2d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2940922-8dca-4dd1-bee7-45d2515cb688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae62aa3-aa40-433d-b35c-183bc1bee83a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93250900-ed68-43f8-aeb1-9d8c576f6956",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b0a2695-4ced-4a68-8e30-4fd08aa4715e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f1d9e92-c40e-4686-a2a2-8f26d9c13a8c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afd0e515-2dd0-4e8d-abe6-010b42914a89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a750ba0-ff85-47c4-bf2f-7aeee46555ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3d06054-e4bb-4553-92b6-a40eb38843a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00661aba-42eb-45ff-9a1a-c01b7c25d146"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acd6e67e-3727-46f4-88cd-f8aeffc70380",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a203123-a90a-42ce-aa82-009b41ec17c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b9b1161-665e-4667-89c4-fb5b0475acac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcaa8e95-3079-4962-8356-5b2092c27696",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b4cf6d-1b0b-461c-a514-83b10ce06e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93eead11-491e-467c-b38c-01292aac157a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f3ba32-189d-47ab-bd60-2b557b430a08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0dc7fb0-411d-4432-b443-cf9d34664cbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29af0820-3307-4344-ac29-ae3d7606611c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74b9482a-b46f-480d-8f76-6670246120fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828cc117-a5e5-4831-a5f6-f0beba7907ff",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc25068b-de22-469d-8156-71ddc4bd0328",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf769147-cb43-43ef-aae6-ca14c70abb15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b286687c-4234-4b4f-b3ec-bb47b35a2ddf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2242cfca-7c13-4945-9ac8-754f8fe669dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e15a76b-cf79-4198-a961-6072a272de4e",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bd32163-3e18-4088-b30d-585c76a3f2e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c79e04ee-8137-4b86-835d-1e1e22dca05c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821b880e-6b36-4eb7-9fdf-f015266688cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2580af4-6f34-43a9-bdeb-4c980a93846d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf0acd86-4cef-4b3a-9b6d-1641f2a9f962",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bd20fb7-c856-4617-895c-9a78cb5eb3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4eb75cf0-d378-44d7-a74b-fa4b753ca62b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "894eae56-a68e-4209-a5e6-21a758cbe524",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "855ba643-ddcf-4bfb-a2c3-f044e90a62d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c089efe-bd1d-45b4-bbba-d6731db2e665",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9fafc3b-4890-48d1-94ee-ad22c80702a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5419c67-930f-4767-881d-65af7de6baac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5291d5-8ee5-4600-a5d1-78227e0e133a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2bdbed2-4e3a-4526-a6b3-5f3a8fdc7bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d20528-cf66-4977-9ee5-401ba7e9fab9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8381d1d4-e3f3-47e5-9b38-1272ced246a4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b10a9e0-f64a-4f14-8986-548749b4156a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d738209-588e-4c2a-a23a-d664e38335ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a451359-3ac7-4eb5-97be-2d384e97880e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f5b5142-5862-4811-8b03-237dbbeeaf30",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0eee5ab6-42d9-47ba-94b8-0ffa394ab6fe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4de7441-9e0f-4b9a-97d4-bcef4ea14aeb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48339076-c07d-4e4d-b5a8-9148b2af480e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57642430-cea4-4cdf-aad8-fc1ac89d452a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "828e196e-9414-45d4-b4e6-833857d1e144",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d0a5dbc-d44e-44fa-900e-7ecea7c991b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac5f0636-3ed0-4faf-9568-bf9b079c1d61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71c14986-05c5-4c01-abad-9aebb04a1ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3898a5-ca63-4c54-b6a6-b71b34ade294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09c3859-3178-431a-aa0d-fb01da930da9",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a01f7a2-e3dc-4f6a-b82d-98533c6480fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "873d9e91-2e0b-44b4-b297-c00122813b07"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6a084c2-7052-413c-9e69-76aa98a80de4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba60e704-972d-42ac-8240-2567cd2f705e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3fcd97c-3f92-4e4f-b189-e927f3d2bb5a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb6953b-6062-4fc3-a016-7e4320ec8b95",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0ecf1e8-c3c1-4931-927e-bf6598ac51f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "237699b6-e069-4daa-8ec8-8547c590dd89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad15ac24-59fc-4ece-9676-bde3b8081dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece82ec2-bbe1-4c2a-bb1b-45926fcb5625",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ce9868b-4ce3-4d16-8e49-64cf209b3163",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d5d9fda-a285-4ead-974b-4b0b05944889"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5de8c32-8390-4829-918a-7124798b6637",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76f25ca9-8dc6-4d37-aa96-656ad2358018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f896bcb2-08cf-4a8f-b1f6-ef900749bc7f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "256fbdf3-f424-4f5c-9511-2be3e96318e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a548a48-30c3-4daa-b6a2-2079c0213512"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4115924-2c2b-43b1-8400-53fad846cc4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdd99c07-84bc-4cf8-90b0-00e34d658e7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04394c48-cd2e-4012-ba91-0f71356f7c8d",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5e620d-0af8-4ae4-b6cf-e20c1648d476",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "77125119-8fe7-46ab-9690-5bb0934b9278"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc6716e9-d20f-4959-9c5a-edf643e2980b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19a188f5-b8bf-43ad-9be2-f6e3417c6dc5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8017af6-fab5-4acf-b6af-6c65c7e0d495",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2424ac78-5204-45da-b47c-0f526eb227e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36f26fa5-bd45-45e9-97a2-4eaf30a49058"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166f8218-d32c-4efd-8237-de9e56cdb66e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c5b991c-b7d7-47cd-b0e8-ae1b459f4de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "419d3992-cb34-4fa6-a431-f0382b4f560d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf1e6c5-ab85-4ac3-89be-206417feb29b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be18e2be-a8c3-4a3c-a3fa-7dd075a0ff17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3503a79-dac2-4566-b5f1-9e3e333ae84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "792e3fd4-9009-4c13-9551-810196032fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baeca16e-36da-4815-a91d-f2afe04a6f5e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c30d70-b904-4b4d-a35b-4bb385f9b60e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5819958b-fda9-4210-af65-de630edf151a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "56b88527-3179-4c6b-b67f-c28290d540dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3644951f-88ac-4ed7-a66d-ddd6cf66b373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c1bb29-a1d3-4088-a47f-0f77f72d132d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31a6ce23-74ef-4594-b522-99feef4e33db",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb4f6870-0369-4b5c-9110-6bac2ca1fea2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb11db24-f342-4c83-b157-c2602dea6d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a14acd80-4e7f-4be7-b590-832ed6f6395e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf62068c-9842-47e7-850b-d40a122f2e9d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d264876-5c4f-4ccc-8ab3-04e645258039",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "67e26d6d-fe32-4191-a514-50d057d4e578"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7c755ee-a4c6-42ad-9f03-06095822fa18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433a48a9-7e89-4631-b3b4-8ebe8e1a04fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8fde48b-d74b-4486-bbfc-e7215d9f75f3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f12fce-579b-4f28-a552-0792b7972484",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3bf287a3-0dfb-4188-b7ea-2444fbf82c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9795e9c-eca2-4f74-b9ea-39af6ef01354",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c46e5ab1-fec2-4c66-b89a-a246f0c0dfe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87aabe44-4809-4bc3-852d-1dd0b57f1a8a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13a836b2-baf7-49b7-9b53-d1698b9fa7eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f5893a3-50fc-4014-a5c9-9c2111aef7dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6468de-7655-432d-9ae6-3cc143b4d79a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea6a02f2-21c5-4f14-bd3e-b09224ffdcfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bf28d0b-fa26-4270-8d41-da9a81f3c879",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9ef22b-5f7f-4f55-90dd-0fa27152a670",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc17ab90-3a2b-4384-b51b-fd3103509d00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2c9e0f-94be-4952-bc5d-af2d57cf615f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a493d7c2-0cfa-47a2-8f37-12b87dc15341"
                        }
                      }
                    ]
                  },
                  {
                    "id": "667c0365-139b-4811-98a3-fae20f1a5e88",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb6ddf02-93d5-44ef-8d15-af03d560ac98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7f48eb4-eb61-44ef-abd5-3fafc6283c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2457c2ba-b9d6-4992-aa6e-cbf26e0915bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108d985b-23e7-4c96-8a9e-a44cf8c74366"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70a774d0-ae0d-457b-a886-fadd8c6aaced",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49b2f579-8793-4ef5-b555-a8488d1b217e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18ae8d3c-e419-4682-8e7c-401b92302642"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41c27386-59c7-4f67-8d29-1d4ae0b699cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efef7d6f-fa85-42ef-a18a-f52f76f3b057"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e04ad94-3663-4dc8-b757-8152a43753ad",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b4974bb-c4fb-493e-96a5-adc0b662663b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5f44ed8-8ae5-420f-bc34-a406cd18c57d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b57b369b-12bb-4656-aabd-0bf7e364a039",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00ebfdfc-cf36-403b-9bfa-38e526613598"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ed227d2-03e1-4f35-abbf-01e19bbb41ec",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "504785a1-8d88-4e9c-82b1-b9d438aef834",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "304513c0-fd5c-4c15-b04d-e1d0cdd8400d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa25010-ccfb-4f1a-b604-2935a126c337",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3297375-b14a-4a1d-9627-a46e58659c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ec37828-2955-4f66-b32f-3bb2b9f28830",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1b1e322-c241-476c-b96f-19f3e258ebe2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c955bc52-d125-414a-a2e4-026bea54e936"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96326a3d-d379-4d82-acf4-a6ddfa1bad20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0fa1694-1409-4ddc-b5ce-247c53f22f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d41044b-e1bd-404d-9f2c-190ac9f68ad4",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a22f3d5f-0751-46f8-b549-cea2de78f6e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e435836-da82-453c-8b11-8ffea017470b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38be217e-496e-4dc5-9b34-55a5648ea15d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77afc2ee-0842-4e3b-b008-3d34bf8da74d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "020a429d-7d02-4a0a-8572-1531473a7598",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26b804ae-3405-471f-9931-a2158b51d664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3613c18b-56dd-4aa0-8bc4-910d14108fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5acaf49b-b682-4981-bfe8-74f052fd7fe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54a72870-27f1-4080-9a3a-ca07d642d4f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f133f7a7-b666-484a-b7d1-4b1a2008720c",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31aa7c8-3d49-41f6-808c-4d43be233121",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e84e51a1-6b36-4e34-a6ae-df54ac10c70d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca75d1c4-8ea6-4a26-9ceb-6aedf094be21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "098d4441-249f-439c-83df-198336a3ea5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0d52ba3-ede0-469a-8d0c-b533d3392855",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e7e16fb-4cf0-44cf-bb72-8dd9c00d4c8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83399a62-38f0-4b70-aa5c-637271458184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8164a99a-6b59-434c-bfa6-6ac85e7bb106",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef57876-e484-4670-8996-17ab9c11c2df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81fcea47-8e46-4e55-9869-18700419142c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf0b19d5-d610-4737-a864-480d168227e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c05c35f-e5e8-49b5-a13f-d54e3518f37f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5de4ab19-a3f1-45f2-9318-44d74b9e8be6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d719514-5689-4be8-95cf-4911b89edc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccf3c1dc-0490-4da8-ab2c-151106ae2f47",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c656e016-16d3-4290-a257-eda4a5f86448",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd0f2bbc-7cc2-4616-b079-08f333cbcc03"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59786072-3d78-43cd-9cd0-bdfc4ce51fc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b968b466-8ebd-411e-b242-038a6659edca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dfd7e36-69f2-4807-a23a-875fca3ec2d6",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90e163b7-02ca-44f0-abc8-253e4dfd2c4d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bfb6bbc-eb37-4d1b-b95c-9e96827204cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ff9a6a4-6fab-4e63-a03a-c589b64f622b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e41d7dd3-37c3-4f27-9482-84f3fcb52d8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7b42dc0-8ed5-4089-9c0c-f9dc820ecb0b",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5f39fd4-ac1a-4ac7-8540-1ac2f1a7d1fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a28126-0b1c-4240-8edf-6f16c0059d8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "150b8c80-3ffe-46c8-8512-5689a740aa3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7887b324-2134-4c13-8191-cb8360c69483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa9e9ccb-934b-4865-b909-dfb5f40b0cda",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b445f9b4-9eef-407e-b24c-3fbef057a354",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bd4c2f1-37d9-47db-854b-09e387d00b8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c848768b-7620-4dda-bed5-a236340dcf61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fee36623-05a4-42ed-a054-3d9d8eb34548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a8f309-8f0f-42a6-a4cc-11f87ee5e954",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0c6f47-20f0-4cea-8e13-a42c2538877e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b42bd7b0-32d4-468c-8bae-7e0f30405dd1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364a4e71-c799-4b3a-9408-a275f69236cd",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a7b8e93-0218-4bf7-9f6f-eab1ada329cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0aefaf2-0636-4cb4-b09b-d55c75629a8e",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e3a3788-d4bc-4264-ba38-ec3cde4cbf8c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3314cf1-d343-4fa4-bd1d-a6ebf6909c9b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c24a7746-6a76-4ff1-b05b-19b2b4b56068",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "795bd29e-b1e9-4049-a62e-9312e2a80101"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a965069c-c1f2-44e2-bc74-eeb7b1b34fff",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55590b66-2f27-48d2-836f-564b22092863",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4465d8b3-ea21-448e-9041-6178b0757e64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b9c4e7-251f-4c08-b5fe-42dd2d417601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a945df0-6ef0-4f46-8124-09edc937532b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63f9099b-1925-4cf8-a281-c1c214828987",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7a54896-406b-40fd-8695-7d4f0e75a0e0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3cca4118-4efa-443c-ac12-cfd247a8a232"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "17df9742-6c33-4984-a809-c990a0aef397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a93beb07-ac13-4d90-a97f-6c3ec9dfc360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ac20aed-1d6b-4839-a46a-be2d5dffef84",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bb3537e-5ecd-4442-a117-2b944c632916",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11da5f0d-46b9-4afd-a8d3-4ff8c0484e54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fccb150-7ef9-4dc8-af32-b1f173983cdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b142a25-c6a7-4151-a258-6edc8cb8d7ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d9524e-d1f4-4afe-b24a-ef638a1daab5",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7d5b5da-6b1f-496f-a4e2-bebc164b36ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1a9f018-3f75-46f7-add5-66f8c3e067a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5da3ca45-8bd4-4b5c-8c42-b32b70673929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83edf300-b864-4ce9-91e8-b5d8fc50fc12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "899f6e55-07c0-46b4-8336-7af906b4f04b",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2d4a47-9255-4e08-bde0-4d10c3463579",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0b7a260-0295-4565-8d96-4a90eb333996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "713321b8-e3a8-4d49-81b5-4ea61dbfcdd4",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92f8ef1a-1143-4bda-9cbd-9584243592c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a44b7f14-53df-465d-9102-89b241bd6d9d",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf5516a5-bd42-4c09-96b2-884541d6cbb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "987923bf-727e-4357-a08a-1474dcea9a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae875dcd-5825-4fa5-b6da-be76d2af583f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba83b0d-70b7-4a72-a05c-577e6860c937"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32c6d42e-0d1f-4653-b619-eefbb166cd5c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0fcb83f-6ccc-48b0-a115-1bce695d5a00"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a0a27992-4a3c-4a07-af5a-dd6e5dc83b3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b20bf989-5835-4fc8-9b93-3f42f5ef943a"
                    }
                  }
                ]
              },
              {
                "id": "a0582086-0fd8-4a4d-821f-3f8c5119eb9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b6b9d198-c0a1-42c7-8fe9-70e7e4cba1f8",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea55ecc4-770e-4e34-b847-7cf34819460f",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "37817e99-bcbf-4406-a1c7-6aa698675610"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cf0480-3f94-4670-9794-e91951860149",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbf5f6c7-1b1c-4d99-997b-6cb1f798abb1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b91e2e7-8904-478d-854e-7b360e63b9b6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e124ed1a-5595-4245-874c-b51c852255fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e70a67fd-b892-498e-b4e5-cc9384b9361e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59322f31-bb92-40a0-8143-15dca93dfebf"
                    }
                  }
                ]
              },
              {
                "id": "38c6bd2b-b946-45c6-82d9-f710f2c7f183",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "532a9367-fe41-4d47-ba89-a57fe4c1a251",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b50cd1a1-5c28-4133-b2d2-b50a3872aab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b469a6aa-cdc2-49b9-a697-306b345abdeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce0c44e1-7c76-4b9a-b6d7-8040c3bc4cca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49f209ba-ddea-4a92-bb4f-42396cc152b9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "cd42cd84-ce3e-4c01-b40a-32301ea308a2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "7170e207-cf23-4b58-89f0-d4800c2a7bd9",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bec41f4c-b42e-4db5-9ec2-ac946df2f114",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "b9a5c913-3d95-4d79-a184-96d6fc3ba230"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22eed63b-01dd-463e-8aff-f7dcfa66b3d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2b6072e6-b171-4da0-9612-f036a37486ce"
                    }
                  }
                ]
              },
              {
                "id": "ed6c1825-bd74-47e9-ad68-d77c5d95f4b4",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c70be76e-6d34-491e-8b94-acd12813efd5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "604b178d-7d4c-474d-889a-64d6e605710f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c42a145c-fef5-44e6-a778-5f5fc9d115e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "950be591-4005-475d-bf55-78e12a2c40f1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53d8fb32-3aff-4fec-8d2a-ae94957f87de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8711acdd-f9c3-475e-9522-c528e73882f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9590f24d-175d-4cfa-bfd7-08df961806e5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "86436c2e-45b4-487e-8c2a-e33986b34535"
            }
          }
        ]
      },
      {
        "id": "526d912d-dc3f-40f3-8f64-a3662495d635",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "c5f03fe5-c764-4254-bed0-94aa8ce8fb95",
            "name": "Negative Testing",
            "item": [
              {
                "id": "bb2ee863-2e88-49f6-9254-49820a7eccbc",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "258f3d1d-62f4-4132-96bb-01504b07e800",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd6bc4dd-3b9d-42fe-a12e-6ff875b02d39",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "442a4836-03a8-491d-8e08-e9528b1a7fd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35b2d608-dc9b-4fe5-bd54-b01c0d032165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "464dc0b3-9c67-42ce-9489-63a9f790369a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dca15e0-c17e-4a05-a97b-7a15f90053b3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d4284fc-2ad9-4fd7-9775-bcb242c8cd4a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fc097308-9163-49b5-b151-198f4a62021b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5dc2bc2-76eb-40f1-a234-55b151c9a128"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a1a2f019-22b0-4008-94a1-23bd3e20cc78",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "1b78bed7-9d14-49c3-ace3-c8d97f156bb4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7202f4cd-51b9-4e54-b758-f4e41d1464bb",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "63885fd0-ac48-475e-b7c6-02ee57b2c645"
            }
          }
        ]
      },
      {
        "id": "66fb244e-de31-4c3c-b260-114dc3a1f589",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "a087ceb6-4442-4fac-871e-1ceacaa46181",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2e6036f1-452a-4c5b-872d-0d13838f0fa1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c99dbd3a-e0b1-4082-8422-ee4a65dc07f9",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61dd2313-0156-4562-96f8-a8203221c973",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dedf5185-6768-47b7-a983-c89e7b95ad9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "726c8438-ebaa-4f1c-87ab-1ad6f8043fed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed9ae76d-6a0a-49d9-b8cc-5641b63d4c44"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2227a184-8f31-4a22-b2a5-510285cf8778",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08fecc82-9b8b-4a11-8e08-2face8b1b9fb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84557d81-fd3e-4e2b-9e55-203121031ed0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a4638c14-7073-4dfd-976f-45348123564e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "46f36fdc-af11-4a5b-95b7-fff675fd9569",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bc3d3698-8c26-43bc-87a2-c266caa90913"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "efa594f7-28d9-4a3c-bedd-ce6870b53885",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5d3a66ed-5f19-4c78-840e-a522aa6f70fa"
            }
          }
        ]
      },
      {
        "id": "6fc815e5-bf7a-428a-8454-eacfa2fe47b2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fb4e607a-649f-4af0-a2db-18f941e17f39",
            "name": "Negative Testing",
            "item": [
              {
                "id": "41af6e3a-1353-4508-92b7-96855f74250d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d85fc99-5c5d-4494-ba24-de158a7ef4b9",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64c05839-5f02-41eb-9476-c4b91acd4a8a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5ddf184e-fd42-444d-a83d-403445e66f8f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61de56cc-39fb-4c0b-91a8-091f9ae678fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a821c43a-54d6-46ea-8da1-3338e396c410"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "138f314e-652f-4255-9146-1e3ce02e434b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "444c1662-eb8b-4298-8750-1c17fcacacb1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c20d7d8d-ec96-408a-bdd5-4c6fe1251e64",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c05b10ae-9496-4fe8-942c-c09483dd343a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "beb54e73-3a42-4e86-930e-e8a9ec8c2f37",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ef3540f4-2948-433a-9154-aa52a879112c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a63ce3d1-03ef-4f70-b2a4-af09ae4eef06",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3cc1be1d-10b1-4c3b-ad35-e6f0ca6a5536"
            }
          }
        ]
      },
      {
        "id": "4a2a6b31-b9a6-4843-9b08-5a9a1eff0c77",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7e912c5d-f616-4627-b21f-d9bd2e3a53ea",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "cee950d6-00b1-4c56-bd21-3ec8b21d89c2",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "e1e146af-1117-48f3-b04a-f6e15d418725",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccba5480-41d0-427a-b459-a97e92bc55d6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72c5c4f1-6ba5-4050-94b0-c251250f943e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 116.92280701754383,
      "responseMin": 8,
      "responseMax": 771,
      "responseSd": 75.53886653261968,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698626069908,
      "completed": 1698626117722
    },
    "executions": [
      {
        "id": "2dd1c6d1-2446-4c19-819f-b6a423e44f4d",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "b552dbf5-ebb4-4366-be03-6cc7b037a355",
          "httpRequestId": "4f74f35b-a3dd-47bd-820b-e960e4d51f6f"
        },
        "item": {
          "id": "2dd1c6d1-2446-4c19-819f-b6a423e44f4d",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bad84341-cb5a-4eff-8406-ce4314ccc046",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "b1ad8df0-66ce-42dd-8880-54c18b9f0617",
        "cursor": {
          "ref": "b75a1ba1-c96b-4deb-8d60-a59d863f1310",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "eaf634ba-5a82-4193-b162-cf419727c9f1"
        },
        "item": {
          "id": "b1ad8df0-66ce-42dd-8880-54c18b9f0617",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "8398e3bc-47f0-4b72-8709-b58725366b5a",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "cd2b08e6-9cbc-4b7f-8cd8-590089d3f9d6",
        "cursor": {
          "ref": "e60e84f6-ff40-4ca9-acbe-ab4cca3964dc",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "833a82a2-34b7-4bf5-b162-49fe5ae6da59"
        },
        "item": {
          "id": "cd2b08e6-9cbc-4b7f-8cd8-590089d3f9d6",
          "name": "did_json"
        },
        "response": {
          "id": "6160820a-82d2-40a4-ad92-6183fa3c5634",
          "status": "OK",
          "code": 200,
          "responseTime": 267,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6b05f3-26b2-4de1-ab10-c2ea9327b660",
        "cursor": {
          "ref": "1eb0dd38-e526-4a87-be93-7e8329566f95",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8b8a3d79-83a4-4b89-9146-fa33ec06dd53"
        },
        "item": {
          "id": "2e6b05f3-26b2-4de1-ab10-c2ea9327b660",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea87abb9-9787-4214-8012-abf35ea3b8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e6b05f3-26b2-4de1-ab10-c2ea9327b660",
        "cursor": {
          "ref": "1eb0dd38-e526-4a87-be93-7e8329566f95",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "8b8a3d79-83a4-4b89-9146-fa33ec06dd53"
        },
        "item": {
          "id": "2e6b05f3-26b2-4de1-ab10-c2ea9327b660",
          "name": "did:invalid"
        },
        "response": {
          "id": "ea87abb9-9787-4214-8012-abf35ea3b8e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db2ca11d-96c5-42cb-a1fc-6e4e763b8065",
        "cursor": {
          "ref": "305d9579-5cf9-4e6d-8674-e473d009db4d",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9b023f99-9313-4759-9310-b8ac91e909d5"
        },
        "item": {
          "id": "db2ca11d-96c5-42cb-a1fc-6e4e763b8065",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "0259fb1b-c302-4407-9759-9b462c84ac93",
          "status": "Not Found",
          "code": 404,
          "responseTime": 146,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a13af6c2-b70f-4344-b4a5-9d857150ab9a",
        "cursor": {
          "ref": "4beea9ad-2335-4ded-b263-50be1e0bbe14",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d6a65c50-7635-4baf-a884-0c1ff9a6d08f"
        },
        "item": {
          "id": "a13af6c2-b70f-4344-b4a5-9d857150ab9a",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b0b950be-6fe0-4d3d-a1ed-dbaed932fce9",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19ce533a-5958-4289-a529-cdb065b104ac",
        "cursor": {
          "ref": "22e1a541-172e-4756-b6cf-1878345ad79c",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "39a5d6d1-89ba-4a51-8978-6de57d9c4d40"
        },
        "item": {
          "id": "19ce533a-5958-4289-a529-cdb065b104ac",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a4b1453e-fe1e-418d-af7e-e23a0b60f259",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 81,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10631c7a-8769-4044-aa48-7fc96ec7eb75",
        "cursor": {
          "ref": "535370ce-f2af-4d06-85d3-09ed5195a253",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b80d74be-2750-43a6-848c-dc552ef4c513"
        },
        "item": {
          "id": "10631c7a-8769-4044-aa48-7fc96ec7eb75",
          "name": "identifiers"
        },
        "response": {
          "id": "a64ec838-9c41-4108-b9d1-2141afa66545",
          "status": "OK",
          "code": 200,
          "responseTime": 157,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b632efba-113a-4b2a-8a51-a605df7cee7b",
        "cursor": {
          "ref": "7c72edd1-0350-41c4-b33d-25238947eb91",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a76ca948-233d-4462-afbd-ccc97238978a"
        },
        "item": {
          "id": "b632efba-113a-4b2a-8a51-a605df7cee7b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f42597ac-559d-44b2-9e29-18a070fffc11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ccd375-eaa0-4ae9-b30a-8a2aa84ba8d0",
        "cursor": {
          "ref": "56778bed-38d5-40fe-af2a-81a8578d72ed",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "cbb39b60-60fc-4faf-b391-5afd76b36e22"
        },
        "item": {
          "id": "77ccd375-eaa0-4ae9-b30a-8a2aa84ba8d0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "0508f3fc-5def-4fc4-8d83-b68a073d5bd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe14f903-1faa-48fe-b5d2-1ae894418b19",
        "cursor": {
          "ref": "cdc0b7f9-02d4-4d8f-b2bf-5b156c4c10cb",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "9535376a-bbef-40d0-af70-ce6224a8c9eb"
        },
        "item": {
          "id": "fe14f903-1faa-48fe-b5d2-1ae894418b19",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a16ff906-b608-4192-a56e-c84fe43eff96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3f8843-ec88-48a7-95ac-20e755a9ff79",
        "cursor": {
          "ref": "ef53dace-4d08-42fd-ba5d-f09cf3545e79",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "161d0d02-5f26-483c-b8f6-9882e369b0d6"
        },
        "item": {
          "id": "6b3f8843-ec88-48a7-95ac-20e755a9ff79",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "21527d26-f336-4791-bd0f-f7f3605a9ebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42bb757-7862-435d-972c-0c542604f8ee",
        "cursor": {
          "ref": "e020c408-2aca-4ceb-8cfd-e8fe57d46b15",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "3cc7bb4c-751b-4bb1-9831-be189be5ce36"
        },
        "item": {
          "id": "a42bb757-7862-435d-972c-0c542604f8ee",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "44aca39b-3687-44b8-85ba-f31a8ae81365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a38b7ae-734f-4ba4-b9cf-c2d3845b5bab",
        "cursor": {
          "ref": "e247b4fe-2e9d-44fb-9fb3-07c8edec8df0",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "0c9bf11a-2e95-40a3-8b69-96fa9ee7943f"
        },
        "item": {
          "id": "7a38b7ae-734f-4ba4-b9cf-c2d3845b5bab",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7f2c6957-6cd2-4957-a385-2f8490c76ca8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15da8945-d972-43c3-871d-f9da10aaa2c0",
        "cursor": {
          "ref": "15345121-6a53-41fd-be64-c782e1ed9e34",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f9a91b02-3822-49ca-a956-00c930186d41"
        },
        "item": {
          "id": "15da8945-d972-43c3-871d-f9da10aaa2c0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "aa486543-f40b-49ce-91c5-24d8f13b7f93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "075a1620-0c4f-47ea-a8fc-da422c781b1c",
        "cursor": {
          "ref": "fa99b748-ffe6-47ba-bdb3-1e9262895fea",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "831f3ab5-a70a-4189-83d1-c23b7d425896"
        },
        "item": {
          "id": "075a1620-0c4f-47ea-a8fc-da422c781b1c",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "df9c6371-59c4-445d-8392-893ee0ff4183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b37131-5fe5-4c8b-9c10-ccc0f1cc6768",
        "cursor": {
          "ref": "3c3a7ce7-28f8-4d41-9567-4b2a06e20d45",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "d449f93e-d82b-4275-bd45-83d5708b974e"
        },
        "item": {
          "id": "39b37131-5fe5-4c8b-9c10-ccc0f1cc6768",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6f1c9447-b4a4-4a37-8362-acd43b9a1db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca3d374d-9891-4e0b-a438-ac4094380883",
        "cursor": {
          "ref": "00a8b046-85df-4aa5-8942-5c14c6585624",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "61847641-f689-4916-b15e-77d166af1d96"
        },
        "item": {
          "id": "ca3d374d-9891-4e0b-a438-ac4094380883",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "238b8aea-96c2-479f-be23-6e98c1bb7f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31c73cee-d4de-4a58-b09a-57522f0e4228",
        "cursor": {
          "ref": "7b0fe9a2-b2ff-4d99-a80b-6bc9c5c7494b",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "02c0d5bd-4bcb-4e9a-b6f4-b5d8ec658a3f"
        },
        "item": {
          "id": "31c73cee-d4de-4a58-b09a-57522f0e4228",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cc064462-9112-40da-b065-731d69f27a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c63e0c91-8c8c-4824-be0c-21a0630c7201",
        "cursor": {
          "ref": "9405ab03-9ceb-4731-8c11-f10ceb6cb751",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8f738558-038d-4f9f-853f-dcba6a181689"
        },
        "item": {
          "id": "c63e0c91-8c8c-4824-be0c-21a0630c7201",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "8e509252-da3c-4b51-861e-cef19943bb74",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dca37963-ef84-48f4-b03f-5d12aa1019a0",
        "cursor": {
          "ref": "e2823d6d-49e5-4717-b235-216e59fc07af",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0b4666ec-3365-4aad-8bc5-d5c903609a09"
        },
        "item": {
          "id": "dca37963-ef84-48f4-b03f-5d12aa1019a0",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "7405b980-1d67-4621-874b-0ea1ec2959f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aa39cc7-703b-4a4a-b88c-0e02691bc70e",
        "cursor": {
          "ref": "5f3152b6-79fc-4ff9-8888-2b106e3f0770",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "311a70c6-5090-496f-a4b7-50632a1ab016"
        },
        "item": {
          "id": "4aa39cc7-703b-4a4a-b88c-0e02691bc70e",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2da9e11a-9ded-4441-8911-63ac1da7d408",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "403aed87-bf00-4c00-ba06-498500f1e450",
        "cursor": {
          "ref": "1b2eb60f-1ce9-490a-b2a2-0ff16f808746",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7d7f519d-3737-47bb-98be-f5b6d2f014ff"
        },
        "item": {
          "id": "403aed87-bf00-4c00-ba06-498500f1e450",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "dc360f4b-5513-42e8-9054-b7b453d52e50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ccf307-3c41-47ae-9f23-e4a1988b4193",
        "cursor": {
          "ref": "bee0ce0a-f333-4354-a0df-6a2eabd9fd95",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1800db7a-398e-480f-90f2-ed644b3fc559"
        },
        "item": {
          "id": "c9ccf307-3c41-47ae-9f23-e4a1988b4193",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6f5aa9fa-cf5f-4124-806c-e87ed52a26e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "246811cf-bd16-402b-b67e-83b0f9524e67",
        "cursor": {
          "ref": "8ab48c8f-cf3a-4e46-95a9-6fcd6d6e5833",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "0954b5d2-f470-46ed-a1c4-a2b8b424f116"
        },
        "item": {
          "id": "246811cf-bd16-402b-b67e-83b0f9524e67",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "181e7bbc-8fe7-4792-a163-61a7dbcc1396",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42a5c514-92ea-46c8-aedb-36a5dd5f9e7a",
        "cursor": {
          "ref": "ea41dab5-bd20-456c-8a67-8ec2b5b54623",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "ba2703a3-59bd-45c0-8de4-82c3c0e730f2"
        },
        "item": {
          "id": "42a5c514-92ea-46c8-aedb-36a5dd5f9e7a",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "991273f9-f9cf-4c50-80cc-ad54adf3144d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623b6d4b-3c07-455d-916d-758d3e65bd1b",
        "cursor": {
          "ref": "f2d8d502-d4d4-4bb9-b0a4-9b421c82273a",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "2ce743db-6a9a-43d1-af45-0fb9e9f50d36"
        },
        "item": {
          "id": "623b6d4b-3c07-455d-916d-758d3e65bd1b",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4c5c1f63-3da5-46a6-80b7-aac8f4183883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fec4820a-84e0-4658-b797-72f83b19481c",
        "cursor": {
          "ref": "52ccd718-09ae-4f3a-be97-bd641b01b5c1",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "5b3d62f9-2ff2-4250-a6f0-08ec34733387"
        },
        "item": {
          "id": "fec4820a-84e0-4658-b797-72f83b19481c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e0fe77ad-d44c-4277-945e-7daf31f77f55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32709d53-edc0-4b66-b514-35e2d4b1011c",
        "cursor": {
          "ref": "de8cab21-a7cc-4401-a8e4-eb82ddeb6db0",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "4affb3af-6431-4d81-9c86-de7fd0b00ab3"
        },
        "item": {
          "id": "32709d53-edc0-4b66-b514-35e2d4b1011c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "39de4d4c-10f2-4127-8d99-807d9f0d1a35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70ccc09b-3d74-44d9-8d79-5461dd136fda",
        "cursor": {
          "ref": "75ca2100-8466-4731-b4b0-cb03598248fd",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "f1ee6782-1928-4ba2-a5a7-383f75fc85a6"
        },
        "item": {
          "id": "70ccc09b-3d74-44d9-8d79-5461dd136fda",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "a8f82c19-9965-4bbb-8539-2c54586a34f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f279506-6da5-4ec4-891e-fcabb144f8a8",
        "cursor": {
          "ref": "dbed2c32-60e0-4a43-a91c-ee86f1a2205f",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c1b105a1-0710-4630-b7fa-f441c5a40f04"
        },
        "item": {
          "id": "8f279506-6da5-4ec4-891e-fcabb144f8a8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "23eb6a11-afb9-4a8a-b282-d612731d40fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "708a1238-46d2-4652-93c1-33bba82c8800",
        "cursor": {
          "ref": "7b6d5796-dcaf-4782-948f-752a6839d1aa",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d5ae7906-d035-4656-83f2-2a3dcd047484"
        },
        "item": {
          "id": "708a1238-46d2-4652-93c1-33bba82c8800",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "2a8f17ed-108a-4dfd-85ee-75395d4eed06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "152c7f76-b99e-4f46-bd14-2386437591c6",
        "cursor": {
          "ref": "bec801e6-5a2e-477e-aa90-50310aed6bc6",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "01bc8534-338e-4d48-8033-d4725576bc46"
        },
        "item": {
          "id": "152c7f76-b99e-4f46-bd14-2386437591c6",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "d87501e4-1882-4424-8513-081c09e020f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41e9c8e8-8364-4d44-a96e-a40012b63023",
        "cursor": {
          "ref": "3e1731a5-d77c-4299-a90a-af27504b3abc",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "00ca644f-fb8c-4fe0-b4c2-0fff9a247422"
        },
        "item": {
          "id": "41e9c8e8-8364-4d44-a96e-a40012b63023",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "bd45a5ad-401e-44b1-8fcf-84e65f089f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de7528ca-c5c3-4885-bc0a-28b2d1d37eef",
        "cursor": {
          "ref": "d7490597-b17b-4cf3-be86-3dc1d88ff61c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "798ac7f4-13ef-45cb-aaa5-cb12515f8ffe"
        },
        "item": {
          "id": "de7528ca-c5c3-4885-bc0a-28b2d1d37eef",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "aa2e9373-3d50-49fa-b38c-8d95c9f9c5aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60c49d39-84ef-4f73-b59d-bfedd2cc18dc",
        "cursor": {
          "ref": "4d6485fe-1c0c-4df8-85e8-e05f038e462b",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "7d0fe97c-8fda-4911-b471-3a3da9e240d1"
        },
        "item": {
          "id": "60c49d39-84ef-4f73-b59d-bfedd2cc18dc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "4cbea7c0-1ad4-4af4-8859-0d27f8b6f871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "834eb2d1-6271-4439-a192-b2083b1a7257",
        "cursor": {
          "ref": "bf965237-173d-4953-9907-4490d8d5877c",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4cf57c3e-9de0-4a75-9985-07095e768056"
        },
        "item": {
          "id": "834eb2d1-6271-4439-a192-b2083b1a7257",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "2bc6a92f-d97f-4f7b-aebf-c34049304996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d47328d0-81a6-41d2-bd2e-4a03bb90f9cd",
        "cursor": {
          "ref": "9f7e5398-f002-47f9-b140-c14fb59b74da",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1d175d1f-4387-41bc-86b5-bedbc176bb45"
        },
        "item": {
          "id": "d47328d0-81a6-41d2-bd2e-4a03bb90f9cd",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "d09ea294-68ac-476b-adc3-59749335864c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc6c3178-78a6-45c0-92b0-c4993c2f4e5b",
        "cursor": {
          "ref": "6304f1bb-5a77-41c3-b458-979f775d56b1",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "d3009119-83a3-4d15-9ee8-c682beaf8ce2"
        },
        "item": {
          "id": "dc6c3178-78a6-45c0-92b0-c4993c2f4e5b",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "62bab0e3-7da5-4255-a714-5d4f574b1dbf",
          "status": "Created",
          "code": 201,
          "responseTime": 771,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "9f56b56c-1b17-4348-a228-d50267447138",
        "cursor": {
          "ref": "2e40a0a1-e26e-4fa3-a76c-7cf08f68b771",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "053bf5d6-75a7-4ce4-813f-ab991a79c1c6"
        },
        "item": {
          "id": "9f56b56c-1b17-4348-a228-d50267447138",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6e5df0dc-4bc0-4589-9ff9-e015e56c5d60",
          "status": "Created",
          "code": 201,
          "responseTime": 481,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "3d13f1b6-ee2f-4778-ba1f-75e5ea1db988",
        "cursor": {
          "ref": "c11b9648-155e-475e-950c-2a3ef863a27f",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "36a131e7-967c-4d44-9455-e5a99cb90f5c"
        },
        "item": {
          "id": "3d13f1b6-ee2f-4778-ba1f-75e5ea1db988",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8315dbc4-fe83-4d25-b5c7-2d9a6b510b63",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "9691fd13-b84e-4648-aacf-825a3a47f487",
        "cursor": {
          "ref": "2b9a4a82-e1a9-4a0f-a84b-e2fc9b6aa673",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "5c21d4ad-829d-4baa-9245-53fc55c92978"
        },
        "item": {
          "id": "9691fd13-b84e-4648-aacf-825a3a47f487",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "fe3cfe6a-f767-480a-8bad-4a0190e1fc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc20d86-7ec1-4964-800e-f9f6f4374760",
        "cursor": {
          "ref": "5d8a5d7c-9c8d-4ea9-9e37-7e0ebe4ba66f",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b462fe43-828a-4818-940e-baf125b52d8b"
        },
        "item": {
          "id": "7fc20d86-7ec1-4964-800e-f9f6f4374760",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "2659eb92-519b-4d7a-a70c-d37ef679d1a0",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "504edc1b-e9d0-4a42-8773-d9aac6c2d0f1",
        "cursor": {
          "ref": "30949734-1a3b-48cd-bd19-71e715d6981c",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "233fb104-d2ff-4049-94cd-271dacdd9080"
        },
        "item": {
          "id": "504edc1b-e9d0-4a42-8773-d9aac6c2d0f1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "fe6d91c0-62d3-4caa-aacc-3c8bed44bc7b",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "efbadb46-663e-4d5a-90e1-fde8e84ee7b6",
        "cursor": {
          "ref": "69b1c579-b3cc-4fc5-8120-210ec3e85ddb",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2d60e740-fee8-4c57-ac3d-b0df76d1f337"
        },
        "item": {
          "id": "efbadb46-663e-4d5a-90e1-fde8e84ee7b6",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "32631101-22c9-4191-8d4a-de264a386f32",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "fd9ec0e4-68aa-47ff-ba48-4b4db9e3bfce",
        "cursor": {
          "ref": "ef903a0d-2fed-4f58-b5fa-a8308fed5556",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "4829edf3-1ec9-4005-b4e5-73d11d9300b2"
        },
        "item": {
          "id": "fd9ec0e4-68aa-47ff-ba48-4b4db9e3bfce",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "bc5ddf08-05df-44e5-b7ad-79777d608a1d",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "81425311-ad60-46a6-9829-e7b4c0c12073",
        "cursor": {
          "ref": "ccbfb9c6-ff5d-4f2a-a6a2-0c59685e159d",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fa2a0751-f7c6-4213-8beb-3c1f158d1ca4"
        },
        "item": {
          "id": "81425311-ad60-46a6-9829-e7b4c0c12073",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "c0955d3e-704a-4ffb-960d-83e9fe3de90d",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "49fe106b-3bda-4da4-8bd8-fdcd1ab2c65a",
        "cursor": {
          "ref": "4b0c278c-7101-461f-a4a5-c01adebe3f34",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "cd5df100-1aa0-4a2b-83bb-98ef8ffa0171"
        },
        "item": {
          "id": "49fe106b-3bda-4da4-8bd8-fdcd1ab2c65a",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "1b06842e-2414-42da-9040-837c89ce9386",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "b236da15-9b25-4cbc-b20f-6799f1102d2b",
        "cursor": {
          "ref": "abf6f095-5784-47dc-94a4-9ecd2004b144",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "d7c1897c-9935-4524-82a7-a40654dd858c"
        },
        "item": {
          "id": "b236da15-9b25-4cbc-b20f-6799f1102d2b",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "70e7e9ea-de29-4238-8073-eb3093fd5a79",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "4cc5f988-cf96-4e56-b5b2-1526ca3d4dab",
        "cursor": {
          "ref": "c69df096-514a-4ec1-b5f2-4eae7f4415de",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3cb09a8a-dc89-46fd-96a3-a82970541499"
        },
        "item": {
          "id": "4cc5f988-cf96-4e56-b5b2-1526ca3d4dab",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5264dee7-c3bd-4e44-8ec1-ae31dddecd2b",
          "status": "Created",
          "code": 201,
          "responseTime": 305,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "f74e714d-23dc-43c4-a070-e6e9d0460a21",
        "cursor": {
          "ref": "e0f16387-5ea7-4d49-bcff-442b00c8f1a5",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "713d7ea9-bf89-4582-be80-c7089f01cc0a"
        },
        "item": {
          "id": "f74e714d-23dc-43c4-a070-e6e9d0460a21",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d04b297e-b6c5-4d2f-ab6e-ee56b2681f02",
          "status": "Created",
          "code": 201,
          "responseTime": 296,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "93c03d30-dc59-47f3-b7a6-93e3ef607a0a",
        "cursor": {
          "ref": "2fdab7b8-241c-46d8-8e25-936bb99960d8",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "cedbfcc5-5dd6-4b5d-a7c1-c93c8676fcea"
        },
        "item": {
          "id": "93c03d30-dc59-47f3-b7a6-93e3ef607a0a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "21c0c7a4-bdcd-4950-b531-b5268887432a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dde5124-0a9d-4572-8bba-5d25a8a90cd8",
        "cursor": {
          "ref": "065bb39b-f997-48b0-a83f-7b318730903a",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "2aada6cf-b8bc-4f06-8de5-a1e19bb71608"
        },
        "item": {
          "id": "7dde5124-0a9d-4572-8bba-5d25a8a90cd8",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b92cc22b-41a2-43d0-a3a0-672fe80d689f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71f6d73f-5bcf-4f82-86b5-fa7dfad4eeeb",
        "cursor": {
          "ref": "ba63f1ce-9f72-4aaf-b4cc-3bbd4d10a8e9",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "4769e7e3-5b2a-4bcc-986e-4622dbe6cde5"
        },
        "item": {
          "id": "71f6d73f-5bcf-4f82-86b5-fa7dfad4eeeb",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "760a3689-ed8b-486a-8867-e06b646e5300",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e99c55c-0c8b-4a0d-bbd3-757675932df1",
        "cursor": {
          "ref": "cb63801b-0553-4732-abfa-36880524ea4a",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "193c78c7-768c-4590-b37f-dde6bdab1244"
        },
        "item": {
          "id": "3e99c55c-0c8b-4a0d-bbd3-757675932df1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ecb2ed08-a3be-4360-8067-afbab8668527",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5ab9bd-1bc1-470c-8b2e-73f28e00aa14",
        "cursor": {
          "ref": "d15078a9-fc59-4385-a4a5-35ac579e7e6f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "ec9bab7e-0697-4b37-b0c4-da30dd84856e"
        },
        "item": {
          "id": "3e5ab9bd-1bc1-470c-8b2e-73f28e00aa14",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "56aa103c-f389-4073-b82b-5212ff6c8328",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4454b389-6162-417f-9f78-8dae3beeae42",
        "cursor": {
          "ref": "a53793d9-d9c8-4c5c-9a28-947639eb45c5",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "aa0dcc0c-f6b2-4a12-8de9-2f45e700c69a"
        },
        "item": {
          "id": "4454b389-6162-417f-9f78-8dae3beeae42",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "62a0278f-1c77-4163-a497-ce7ec6eaffd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "757422ff-d024-4070-8c42-c4352cff0c8d",
        "cursor": {
          "ref": "4f4fc647-2680-425e-8b65-313487435461",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8b2294d7-2f1b-4ae0-b3bd-f63540b23dec"
        },
        "item": {
          "id": "757422ff-d024-4070-8c42-c4352cff0c8d",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "f271110c-ad78-4f62-bf33-2671e1256446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae2bd40-67fc-4563-8b4c-21490757cb06",
        "cursor": {
          "ref": "0d428fa8-3b16-4dce-a9ae-fb24125e12d3",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2b49711a-7c9c-4414-8597-e9647b631124"
        },
        "item": {
          "id": "fae2bd40-67fc-4563-8b4c-21490757cb06",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "cf34cc78-d1a7-41e1-b5bf-2cbc1a086bf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e438489c-3239-4d7d-9aa6-3a3ba43e9260",
        "cursor": {
          "ref": "e83777ee-58b5-4e59-bfb3-741d020816b0",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "10ea1de6-09cf-4278-965f-7d1b372a62e9"
        },
        "item": {
          "id": "e438489c-3239-4d7d-9aa6-3a3ba43e9260",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "80242cf0-0c6b-499e-bde6-77d6472ed8df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81f86361-9a82-40ee-ba9d-0d435cb52af0",
        "cursor": {
          "ref": "14bc2c86-927a-45af-b1e7-e1b047cdf597",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "9176f13e-6300-4d5d-969b-54d301df0d1e"
        },
        "item": {
          "id": "81f86361-9a82-40ee-ba9d-0d435cb52af0",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "66880af7-cf2c-4645-b10c-161260240440",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a2961e-e51a-47d7-9f5f-8465744fe8f0",
        "cursor": {
          "ref": "70a8bf11-2085-4df0-930d-8ddc5ca35f09",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "610109c7-8ab0-466b-9af4-5d57ad6e8229"
        },
        "item": {
          "id": "58a2961e-e51a-47d7-9f5f-8465744fe8f0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1423f2db-c150-48ed-8788-a846a21e3436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc0aa01-b002-4fea-a84e-c6d7783edc27",
        "cursor": {
          "ref": "e6f16768-d610-4305-abdd-9b70e2669c54",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "16f8475f-70e8-45ce-8329-41538545b642"
        },
        "item": {
          "id": "bdc0aa01-b002-4fea-a84e-c6d7783edc27",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "b243082f-a336-4b92-8897-7a4ee0e4257f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53e04609-cd5d-495d-861a-5646bcbc313f",
        "cursor": {
          "ref": "fb53df7b-87fd-4f99-8791-88c65e52ec08",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "101da975-ca8a-4ee8-96c6-e311fc99b8fc"
        },
        "item": {
          "id": "53e04609-cd5d-495d-861a-5646bcbc313f",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "38315349-dd76-4356-b063-442c8937663b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "693d7bae-1918-4f9e-8cfc-0fa1f9857904",
        "cursor": {
          "ref": "03743fd7-4dfc-4992-88f2-c7b0ecd81750",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "7f200019-62b5-46bf-aced-614f109d209b"
        },
        "item": {
          "id": "693d7bae-1918-4f9e-8cfc-0fa1f9857904",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "826c1365-9adf-4b2d-b843-fad7bb1302f4",
          "status": "Created",
          "code": 201,
          "responseTime": 297,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "01edd9a9-0948-4563-ac47-7b19f536644c",
        "cursor": {
          "ref": "aa9e6c9a-2df2-4387-80e0-1f352eba792b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b555a6d2-a647-4224-a0f9-8dcc94a1e869"
        },
        "item": {
          "id": "01edd9a9-0948-4563-ac47-7b19f536644c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fcd38b1a-ef14-4e04-aec5-0a0a1ab6b4b0",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "06d0f098-cb9f-4bd1-840d-b3648073a669",
        "cursor": {
          "ref": "650dfcd8-c14c-4e37-bd95-7689f7c44785",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f855c983-9119-47f3-826a-f260fb06c6ed"
        },
        "item": {
          "id": "06d0f098-cb9f-4bd1-840d-b3648073a669",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "68b90fc1-44bf-4ce6-83b2-e7bba558d753",
          "status": "Created",
          "code": 201,
          "responseTime": 383,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "1af414f0-d253-4492-aa72-fa37b8b1bb4f",
        "cursor": {
          "ref": "874dcc68-e18c-4b02-b3db-89b630ef6d2e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "e6781884-a374-4c48-8146-043e0f7b0bee"
        },
        "item": {
          "id": "1af414f0-d253-4492-aa72-fa37b8b1bb4f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "69dcad26-654f-4bd2-a271-5c32a4d931b2",
          "status": "Created",
          "code": 201,
          "responseTime": 401,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "7beb2923-13b7-40e6-ad45-e0741b4826e7",
        "cursor": {
          "ref": "a1d1eb40-1b47-4c78-a12e-4530a8dde178",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f65128f7-1063-4b54-ab8d-b23a5f24c60f"
        },
        "item": {
          "id": "7beb2923-13b7-40e6-ad45-e0741b4826e7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b89060f6-75fe-45ef-bd7b-f16a77fa6c4c",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "6f596d5a-b83b-419c-8031-c34ad5089e87",
        "cursor": {
          "ref": "02e3e4b5-1a8c-456d-ae3d-783ca2c18bef",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3560b48f-ad3b-47bc-abd9-00deb317356e"
        },
        "item": {
          "id": "6f596d5a-b83b-419c-8031-c34ad5089e87",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "30f37018-0d91-4821-8ee0-159ea4472ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62780e04-dcc0-4ee2-875f-36f8664edb41",
        "cursor": {
          "ref": "8ebce53d-36b9-4401-b222-f13b8ab1837d",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "d4a3d15d-b826-42fe-9df6-5c6c3f5d7c43"
        },
        "item": {
          "id": "62780e04-dcc0-4ee2-875f-36f8664edb41",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "0ddba2f7-e4e4-45c0-a320-6701b871dadd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41bb4dcc-4e96-4e52-a474-fb911e30b200",
        "cursor": {
          "ref": "cffe911e-4704-46a9-9e9f-33210c78d3b7",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "3d64c554-1295-4a06-b74b-8ef2abe4d19b"
        },
        "item": {
          "id": "41bb4dcc-4e96-4e52-a474-fb911e30b200",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "159712ec-b8f9-45b9-a397-26fc2c4b6e05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "195ffa48-72a4-4b0a-9fa4-b3f30a48d726",
        "cursor": {
          "ref": "b27abac3-ee60-4310-bc97-4df86f1497ce",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "ebad89b0-4f11-4449-b9d3-eef8a9a1491e"
        },
        "item": {
          "id": "195ffa48-72a4-4b0a-9fa4-b3f30a48d726",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "fa9b6d5f-21d9-4f70-8378-c4cc97345823",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7071bd9a-1bb7-454b-b5fc-abe635fd39f2",
        "cursor": {
          "ref": "fcee0f4d-636f-4639-bd46-f111c7c8bb91",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "08b3b0ad-85c9-41a6-a385-62427514f972"
        },
        "item": {
          "id": "7071bd9a-1bb7-454b-b5fc-abe635fd39f2",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "847de484-bf4d-47d6-b841-7d9aae034e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e153efbb-6a67-4f93-8721-8d186539fab6",
        "cursor": {
          "ref": "f020a261-c0e4-4307-b61e-b492051b0cb1",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c6ae730b-17ad-4748-aa63-74fa36197bde"
        },
        "item": {
          "id": "e153efbb-6a67-4f93-8721-8d186539fab6",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "f3bd201a-9bbb-461b-8a89-7bd6e6b84977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19860d8-709c-42e7-8474-798309f562df",
        "cursor": {
          "ref": "be6ea26e-2452-4cc9-9949-1f315b919a53",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "2325c46d-98a7-4820-b45c-049f78069c59"
        },
        "item": {
          "id": "f19860d8-709c-42e7-8474-798309f562df",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "dc2bd8fb-967d-4172-a75c-dd6d098fef23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "925ee423-e0b0-41c8-80e0-57d3492faf57",
        "cursor": {
          "ref": "d05c6345-cf0e-41ec-8b25-387bbce3c32b",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "19bf4362-b68c-483b-ae11-a01b710d6780"
        },
        "item": {
          "id": "925ee423-e0b0-41c8-80e0-57d3492faf57",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "9772371f-6c14-460f-903d-f097f95067dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3700d791-867e-4f8f-a2a9-dc6374cf05a6",
        "cursor": {
          "ref": "2f3f87c4-a1fa-4539-bec0-2f5f4802c132",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "c32ff5c4-64e9-4122-bbf4-a70098c2b833"
        },
        "item": {
          "id": "3700d791-867e-4f8f-a2a9-dc6374cf05a6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "29ab52c1-60fc-479a-bdb3-e283b2fa02d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e23ea13-e6cc-40d9-af85-bf6f6a6ef2c0",
        "cursor": {
          "ref": "db128fff-164f-45cb-a729-ad25b9c6742f",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0bfc452a-6e11-4c9e-9e1d-16cf3dca33e6"
        },
        "item": {
          "id": "4e23ea13-e6cc-40d9-af85-bf6f6a6ef2c0",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "b36fa7cb-aa8e-454b-8a2b-b08580642314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f0126a7-4284-48ae-b433-c3403921176a",
        "cursor": {
          "ref": "21832d96-03f6-4889-a6bb-42219cb53815",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "616257fd-33a4-4f57-96ba-4abd32d47976"
        },
        "item": {
          "id": "6f0126a7-4284-48ae-b433-c3403921176a",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "673102bc-3490-4750-b8b0-8e0789766b9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "978dbeed-7348-450d-9717-2dfba53b24e7",
        "cursor": {
          "ref": "cec13418-b3b2-4f9f-83d2-0af95af73df1",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "a1c1fa0c-66ac-497e-9f9c-233e836844f1"
        },
        "item": {
          "id": "978dbeed-7348-450d-9717-2dfba53b24e7",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "1e36ea05-2782-403b-a429-215abe87a04d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f196818-96e8-4028-80e7-576e302fe454",
        "cursor": {
          "ref": "22ae7979-be72-4be0-a54b-7ca7aef66e23",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "58d4a6ed-fa73-489e-a4f8-aef4e13fb700"
        },
        "item": {
          "id": "5f196818-96e8-4028-80e7-576e302fe454",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5312db07-e130-4d48-93d7-ace39ec18bba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2586fa06-1a79-4aa4-ba57-6b66938e6df3",
        "cursor": {
          "ref": "76661b7e-0d02-4040-b103-1ad34851641f",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "93c3ad32-a57b-4040-ac86-fcb615869988"
        },
        "item": {
          "id": "2586fa06-1a79-4aa4-ba57-6b66938e6df3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "377390e3-2842-4a81-88e1-600f6fbb71f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4824e71-b0f1-40fa-b5d6-7f4de8ae9ab9",
        "cursor": {
          "ref": "543e943c-3cdb-4020-a91a-04e47cd6386e",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "21231bd1-5fe6-44ac-ac89-7679d0858d71"
        },
        "item": {
          "id": "e4824e71-b0f1-40fa-b5d6-7f4de8ae9ab9",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "94e496d7-a494-49c1-85a6-205faaf70c13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "578544dc-4266-4284-a8fe-9ec18e42b429",
        "cursor": {
          "ref": "8711dd4e-d10e-42c3-b830-9c517b6e6f2d",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "9639f6fc-5cc6-49fc-844b-b0534652c91a"
        },
        "item": {
          "id": "578544dc-4266-4284-a8fe-9ec18e42b429",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e7ae2a45-525c-4e46-abfb-6e5ebf76d316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e37da027-7f84-4eb0-86b2-1073d5f4e5ec",
        "cursor": {
          "ref": "22d30f23-2ad7-479c-8837-433e4156988c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "cf6bb37f-3e52-4f90-8118-3106f8c8940f"
        },
        "item": {
          "id": "e37da027-7f84-4eb0-86b2-1073d5f4e5ec",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d31876bd-f8d1-45c2-9d5c-e4d09a97e6dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0f2e0de-fe28-4346-b8e7-62a304d3f12f",
        "cursor": {
          "ref": "04161b82-b1fb-409b-9774-60331e883a46",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "041f2311-0011-4788-9e4e-6f492b6a4cf5"
        },
        "item": {
          "id": "f0f2e0de-fe28-4346-b8e7-62a304d3f12f",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "6fd70ed8-c2c6-4db7-94d8-8db86d2e73c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2064bc7-3973-4091-99d5-49c9822d70a0",
        "cursor": {
          "ref": "aaf8b5bf-8b76-432a-992d-53fc8deab433",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "d048bc5e-6347-4acd-8f8a-2644bdc8027b"
        },
        "item": {
          "id": "e2064bc7-3973-4091-99d5-49c9822d70a0",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c11cc931-9eaa-4eda-a339-5e69612a9a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75767cad-5c7b-4943-8529-2801581fab1e",
        "cursor": {
          "ref": "c32f3f75-e875-4910-a97d-f038d43c47da",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4ae7db96-7b77-47f6-bd67-7181957403e0"
        },
        "item": {
          "id": "75767cad-5c7b-4943-8529-2801581fab1e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "96d9441c-5d2d-4417-8cf8-4c8a0968cdee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba690adc-69fd-46b5-a5de-def450249482",
        "cursor": {
          "ref": "5dd88f93-a402-42a1-8277-0b242f42a6b9",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "2745ed63-e936-44c2-8260-31fee95367f8"
        },
        "item": {
          "id": "ba690adc-69fd-46b5-a5de-def450249482",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4dc30896-fc9e-422c-9b97-4fb5b1abf4a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58a27651-016a-4de0-9640-666c3ae33c24",
        "cursor": {
          "ref": "b0fad9f2-d1c9-446c-8efa-3f998eb0b41e",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "dd183f38-14e6-4664-b7a7-655c060e9e9b"
        },
        "item": {
          "id": "58a27651-016a-4de0-9640-666c3ae33c24",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "b4978838-ca70-47f1-9d8d-d1b6cdb6302d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9ccd0f-859b-4b8d-bf1a-0312bfb5ac2a",
        "cursor": {
          "ref": "9ba7ecad-2471-437f-821b-792df54cca15",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "d3ac896b-6515-4a18-b209-7090194f405e"
        },
        "item": {
          "id": "8c9ccd0f-859b-4b8d-bf1a-0312bfb5ac2a",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "fa68491b-dbd2-4106-9a3d-079583cf5161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17bc1fa3-f12b-433e-93f6-56fa0c7b4cd1",
        "cursor": {
          "ref": "e81c450c-59f9-4ec6-8115-6a288f148a27",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e5e6cbe3-aaa2-4f36-b4f1-006db78c47c2"
        },
        "item": {
          "id": "17bc1fa3-f12b-433e-93f6-56fa0c7b4cd1",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "4640df06-3cf3-4a5d-830d-4dc1fb44858e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93cd75f0-c309-473f-9429-80fa11a3dc4c",
        "cursor": {
          "ref": "5400581f-4034-4fae-baaa-490d7832097b",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "8fea27a3-068d-40c6-afaf-4cadd78cad85"
        },
        "item": {
          "id": "93cd75f0-c309-473f-9429-80fa11a3dc4c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "32e7c882-3362-48ec-908a-f96b6f2aa25d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8bafef7-3f37-4699-a885-5aed9c63b838",
        "cursor": {
          "ref": "8dc6a8a3-218f-4ec3-9e73-9d786bfceeb9",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "dee345a5-2975-4a03-8daa-83ef469c9f7d"
        },
        "item": {
          "id": "e8bafef7-3f37-4699-a885-5aed9c63b838",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "f22efbb9-3f00-4a87-abab-23937dbfc112",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1701bbf2-c4d6-4670-a0a8-9f995a2b48ff",
        "cursor": {
          "ref": "616208a6-a62f-41d3-9cf0-0e0ae407f236",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ff8e72d8-7b43-4411-9ab1-e2dbef98a0a4"
        },
        "item": {
          "id": "1701bbf2-c4d6-4670-a0a8-9f995a2b48ff",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bd0b570a-770e-42ce-b8da-de684df3bb4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa2792fc-d197-44f9-8d9b-10b862ec74f3",
        "cursor": {
          "ref": "7f86831c-df34-4e1c-b07a-8f6126ce23d9",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "3fea8249-84ac-4c09-9f16-fdfb522c7672"
        },
        "item": {
          "id": "aa2792fc-d197-44f9-8d9b-10b862ec74f3",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "147899d3-a130-4598-b7af-043a693cf6cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee18a969-179f-4ab7-95c6-2e4287903986",
        "cursor": {
          "ref": "d08f8ecd-6834-4142-a923-668800ef9249",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "7851e11c-4c9d-4c13-bf09-10374afc92dc"
        },
        "item": {
          "id": "ee18a969-179f-4ab7-95c6-2e4287903986",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "affb863e-25eb-4578-8473-31af49220bbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39eb3dbc-ce2c-42f0-b000-b7405185f4bf",
        "cursor": {
          "ref": "b2ca72ee-da98-42b6-8b8f-045b08282e2f",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "0485c242-8cfa-44a3-8b6b-4c4ca2d1834d"
        },
        "item": {
          "id": "39eb3dbc-ce2c-42f0-b000-b7405185f4bf",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "96a40fef-0f36-44a5-83b4-4de064221897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f29f10f6-94ee-4b84-ad96-4438c02e31a0",
        "cursor": {
          "ref": "0108719f-949a-46dd-851c-03bfa0e314c0",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "89045a48-ac42-4ae7-9899-f04bbdb5d0be"
        },
        "item": {
          "id": "f29f10f6-94ee-4b84-ad96-4438c02e31a0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "30522d23-326a-44ad-a321-07dadda6c2c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82ca63f3-cfce-4aa5-bb89-be2275a43d38",
        "cursor": {
          "ref": "60f3c6fd-d8d4-4fc0-a1b1-5433fd5254b4",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "a07f2cf5-d0d1-4180-85e1-3b84f311df4a"
        },
        "item": {
          "id": "82ca63f3-cfce-4aa5-bb89-be2275a43d38",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "b00a3180-b0fc-4824-98c6-ce1b0c0d2a2c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3520823-23bc-4c25-9424-ceff4d0395d0",
        "cursor": {
          "ref": "6d3a1d24-37f8-4f4c-8bcc-65d2cac1776e",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "d5e788e3-517f-4851-9fe0-4856aecb774e"
        },
        "item": {
          "id": "d3520823-23bc-4c25-9424-ceff4d0395d0",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "8ec6fb31-449c-4ffb-ab41-7f534596a22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "37db8272-960e-4990-bc3e-145de72ef40d",
        "cursor": {
          "ref": "8f521454-d0e4-418d-b48a-caded2d40e6e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "946c0a17-2d86-4747-82d3-1209e568e0d1"
        },
        "item": {
          "id": "37db8272-960e-4990-bc3e-145de72ef40d",
          "name": "credentials_issue"
        },
        "response": {
          "id": "0c3451fb-ad32-4194-a0e3-1483863c11a6",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c63c871-ae43-4a98-9652-b22cf0efd9c8",
        "cursor": {
          "ref": "89eb7145-0e00-41e7-b294-78cfeb926be0",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "542e9d5d-d5df-4925-b790-70070341b4ca"
        },
        "item": {
          "id": "1c63c871-ae43-4a98-9652-b22cf0efd9c8",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "ca2db1c2-5fc6-43a7-a096-0d36f32cd9a1",
          "status": "Created",
          "code": 201,
          "responseTime": 294,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fad9eb4d-a660-4ef9-bc77-489dd1dc12cd",
        "cursor": {
          "ref": "8aa5c95a-e879-4c08-98a0-b8c1b1d240d9",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "e3c95dd6-3ab9-47f6-ac35-b4c5f9a07576"
        },
        "item": {
          "id": "fad9eb4d-a660-4ef9-bc77-489dd1dc12cd",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "68ad97cf-3d3d-4e09-b895-f94851bbbff5",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "13001f49-3552-4f43-bd16-3105d0ef44bc",
        "cursor": {
          "ref": "4cdc1264-e502-475f-b8da-327733fab49a",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "b0c8df50-d31f-4620-bab5-e1ba8cd770e5"
        },
        "item": {
          "id": "13001f49-3552-4f43-bd16-3105d0ef44bc",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "556dd9a7-2037-4123-bae0-294e3b0dce9e",
          "status": "Created",
          "code": 201,
          "responseTime": 304,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "117b48b4-3f89-4e11-a311-e338a648be81",
        "cursor": {
          "ref": "e5d3d2c2-4677-4a7e-b8ff-2414b0cbeeeb",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "00cb8a05-c3e2-4869-bf64-c4c112d92637"
        },
        "item": {
          "id": "117b48b4-3f89-4e11-a311-e338a648be81",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "75f6390e-9d6c-4434-a4c0-8ed051279747",
          "status": "Created",
          "code": 201,
          "responseTime": 280,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-30T00:34:51.422Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-30T00:34:51.422Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9e42abf1-4ea4-455e-8b0d-fb1939493bc0",
        "cursor": {
          "ref": "2a47193f-5c3a-4f6a-8e93-4a2eb7635049",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "9da1da3d-035b-4cdb-8829-77ffc8eb3592"
        },
        "item": {
          "id": "9e42abf1-4ea4-455e-8b0d-fb1939493bc0",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "86dd7135-6e52-4492-9d2e-880a87eb896a",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9db55fb1-989c-40e2-84c5-b7c280762d35",
        "cursor": {
          "ref": "a1c73380-0122-4b75-a9d8-9a7d6bcb845b",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "50f9c22c-7f54-425c-b0fe-c07ea85dae75"
        },
        "item": {
          "id": "9db55fb1-989c-40e2-84c5-b7c280762d35",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "dd722675-e196-4ac9-8966-c21d098daf11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97d3c60e-4ace-428d-b55b-ca804e336ce0",
        "cursor": {
          "ref": "438ac262-cdb5-48d8-a608-a8bc7f7c7f34",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "150e193a-46c2-4cf2-9e5a-b73ec4372293"
        },
        "item": {
          "id": "97d3c60e-4ace-428d-b55b-ca804e336ce0",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "88104699-58ca-45a3-9090-94b16555a0f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dd67146-b797-4821-867e-d4960f732a2e",
        "cursor": {
          "ref": "3f736221-b843-42c0-a864-1176cd403183",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "59150c4b-edd8-4f69-916c-d420a523e473"
        },
        "item": {
          "id": "4dd67146-b797-4821-867e-d4960f732a2e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "e2ef30a9-b303-4441-99ce-5f68b42baa39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce363376-b622-4d6d-b4ab-2f0b4f5edb5b",
        "cursor": {
          "ref": "09c38014-d7b3-4e10-a0bb-7b2ef0017619",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "7dc45baf-841d-4c50-94f8-103758b21f59"
        },
        "item": {
          "id": "ce363376-b622-4d6d-b4ab-2f0b4f5edb5b",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "27ccd2f6-83dc-4560-a676-7cb8ad137e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e22304bb-3029-4713-b589-bbbb697d7923",
        "cursor": {
          "ref": "b4422399-fab9-4a9a-91d6-680708a3a34a",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5a9bc66f-d5f1-4511-89ae-ef7d44ea64e4"
        },
        "item": {
          "id": "e22304bb-3029-4713-b589-bbbb697d7923",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "31fc6aec-14f0-4fa2-af08-cd90ad8e41cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3709aef-6174-4f89-8e19-c84065f1cb95",
        "cursor": {
          "ref": "25df8e96-baa7-4dbd-9060-a9cc6b94ba7f",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "306d7698-93f0-49ff-953f-fdd4a628c4c1"
        },
        "item": {
          "id": "c3709aef-6174-4f89-8e19-c84065f1cb95",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a0bfb09c-a58a-472f-bfda-0e69f178d81c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2af63c6-f906-4649-8d7c-d55dddc0101e",
        "cursor": {
          "ref": "a07edef7-4072-4eb7-9e96-0f4d614e7110",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8f1d127d-d44c-4140-8652-ff4a24488298"
        },
        "item": {
          "id": "d2af63c6-f906-4649-8d7c-d55dddc0101e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "56dceb1a-df4d-4f09-9036-7e5acf37e22c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666b1fdc-2876-4b1c-ab4e-6bae1153178c",
        "cursor": {
          "ref": "8ba4f9dd-9fa7-4c71-b56c-4661fc147360",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "08d9c7c9-a3cb-4011-9182-7af065b0bcd4"
        },
        "item": {
          "id": "666b1fdc-2876-4b1c-ab4e-6bae1153178c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b6fca215-4f71-4083-82be-0334ac10a416",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47635af-8ce7-48b3-aeac-ef3cae68ce64",
        "cursor": {
          "ref": "1f7e3dd7-c668-4394-998e-a4a8876037f3",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "25336cee-c3a8-4d97-86a4-58585bc00106"
        },
        "item": {
          "id": "c47635af-8ce7-48b3-aeac-ef3cae68ce64",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "434e20e0-7719-4aaa-be20-ed31bbe90bf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b5f473-63aa-4449-8475-5690927e47a3",
        "cursor": {
          "ref": "2908df2b-7732-4e14-8d0c-88e6767dfbf8",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "604616f7-b7e5-431a-8d15-494cff19cb83"
        },
        "item": {
          "id": "31b5f473-63aa-4449-8475-5690927e47a3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "32c62d61-de99-4c9c-bf2e-501766aa62e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ded4575-d95d-4529-853a-2ff9d0d68637",
        "cursor": {
          "ref": "68c2da52-06ff-48e1-98ae-e697794e4abc",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "32b81e7e-00d2-460a-bc1f-3a2198cc333d"
        },
        "item": {
          "id": "4ded4575-d95d-4529-853a-2ff9d0d68637",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "be14e450-743f-42c8-add1-1c70cf6d2d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5aa0cec-8e86-4693-8fb5-4a4401ddcb1f",
        "cursor": {
          "ref": "8145f170-e6c7-49a6-888e-61e3d9d7751f",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "db775a69-c5b6-41cf-bfe9-7ed2d53bcb91"
        },
        "item": {
          "id": "c5aa0cec-8e86-4693-8fb5-4a4401ddcb1f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "83da639a-1930-4d9e-b3d1-f9a7d9522a12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ff9dca8-6aec-4003-8703-d9dc4479cf73",
        "cursor": {
          "ref": "791f0840-2e45-4b0f-b8fb-9936da6f1078",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "0d55c4f6-a617-4909-99b8-9c36da926251"
        },
        "item": {
          "id": "1ff9dca8-6aec-4003-8703-d9dc4479cf73",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "0b09e4cf-ddd4-4832-8116-d4700567d76a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e2edf37-4ad6-49db-88ac-65ec3ef0d2b7",
        "cursor": {
          "ref": "ed2594b6-82c5-4c6f-96f6-97649d5ff3c2",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "63ceb31c-4d73-48b7-98d3-26c3e10b28e3"
        },
        "item": {
          "id": "0e2edf37-4ad6-49db-88ac-65ec3ef0d2b7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "891ffea3-4026-4ff7-832d-076df979c492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddaea142-df2a-4e5a-ae9b-f1754f47970e",
        "cursor": {
          "ref": "ab47a38a-b44c-4cec-972b-9191411e8141",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "01e02fc2-fcec-43be-84fe-823e34b2252b"
        },
        "item": {
          "id": "ddaea142-df2a-4e5a-ae9b-f1754f47970e",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "c63ff70f-b810-4f96-a07b-85f27c1b5bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e15965e9-5d89-444f-b5cb-ad3876a5496f",
        "cursor": {
          "ref": "ea12563d-89b6-46f8-a40b-674dc187adce",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "08307670-7acb-416f-8c95-8264f576ae38"
        },
        "item": {
          "id": "e15965e9-5d89-444f-b5cb-ad3876a5496f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "def3cdeb-5219-4e85-a140-09e7c1a227f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1de7ced1-bb90-43c6-bd9e-14b1e9d051cc",
        "cursor": {
          "ref": "08b7b571-9e91-4586-8359-fde2fca451f2",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f4804274-e5b0-47de-8292-b4e77ff8691a"
        },
        "item": {
          "id": "1de7ced1-bb90-43c6-bd9e-14b1e9d051cc",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "4827d557-8b19-4324-bb14-35dd5eb01c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3fa34f-37c2-4445-8d79-653f151645d0",
        "cursor": {
          "ref": "4a6f8453-61b6-4fc8-b33c-3dd4a61ebd2d",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c2988ed5-4257-401d-9ef1-fc5e168c95c1"
        },
        "item": {
          "id": "9d3fa34f-37c2-4445-8d79-653f151645d0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2aeea305-2cfa-487b-ba3f-a754f8b04117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b88079-9c8d-4eec-9278-c25de0534fec",
        "cursor": {
          "ref": "906bc2b6-45d0-45f8-8227-74581c64f250",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2b4f45f7-091f-4d4d-8d2a-9e8550e525fa"
        },
        "item": {
          "id": "a6b88079-9c8d-4eec-9278-c25de0534fec",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "12ee8921-f203-45f1-9a2f-42e7cfb56d67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e459561-e290-4359-a8d9-3ffd071c611e",
        "cursor": {
          "ref": "467b4884-0152-4acc-8cb7-fa40c5c9eccd",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "234a874e-f3aa-4a73-96f3-f7cb7adaf660"
        },
        "item": {
          "id": "1e459561-e290-4359-a8d9-3ffd071c611e",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dc10bc6c-7d38-44b9-8b22-21916a072f2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7356393-4be4-442b-bf52-f151176313c0",
        "cursor": {
          "ref": "b9d53d34-c10d-4726-b47d-40ee07bebc1c",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "37259f9c-cecb-4ba7-a982-79a4ee017704"
        },
        "item": {
          "id": "f7356393-4be4-442b-bf52-f151176313c0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "cafe4794-8948-4d28-8ba6-ced6ed594053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00688fde-7c9b-4313-b403-b52fce95eb69",
        "cursor": {
          "ref": "ccd0f36d-7924-4229-8288-f2686d3a3394",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "522a211a-191f-46ee-8df9-d8dd00fc7b63"
        },
        "item": {
          "id": "00688fde-7c9b-4313-b403-b52fce95eb69",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "346c87d4-fd07-4c8e-80de-33dfc4258abc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea6afc6c-aa86-4983-bc30-01e24e209a39",
        "cursor": {
          "ref": "5b7fe514-0285-45a2-8576-45fcf8295929",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "cad67380-fb92-4f58-9cd8-0151f19c3d4c"
        },
        "item": {
          "id": "ea6afc6c-aa86-4983-bc30-01e24e209a39",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "24ba6009-2c3e-42c4-a8c0-f1282e51c486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96aff6b0-6f6c-427e-a0e8-999f32c27e2c",
        "cursor": {
          "ref": "b66b9c96-5dd9-49b4-836a-ded3251a57f8",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "c086b316-a7ef-459e-8478-a8a87c8abf8f"
        },
        "item": {
          "id": "96aff6b0-6f6c-427e-a0e8-999f32c27e2c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "4b4b376e-e83f-4540-89d5-0892b351a7da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128afbb8-f5fc-48d3-893a-2f18eaa96ad6",
        "cursor": {
          "ref": "184be34d-e688-4f29-8ae5-77b4ca029e11",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "e11ef800-a485-43e8-a394-632b87c905f9"
        },
        "item": {
          "id": "128afbb8-f5fc-48d3-893a-2f18eaa96ad6",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "41f6c297-3075-404e-ad32-4e031bb2906a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74d97a8c-761c-441b-a1ad-fbfdb1fa5474",
        "cursor": {
          "ref": "f30fc15a-7238-46eb-a03d-a39d5e458f48",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "e57c737b-52d2-42fe-8a73-5b08c8b38f75"
        },
        "item": {
          "id": "74d97a8c-761c-441b-a1ad-fbfdb1fa5474",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "8ab2814b-f4db-4eee-afd1-c4bd71d574a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85804ba-44fa-4fe3-8696-a6788823f1bd",
        "cursor": {
          "ref": "15603a87-5911-4613-b934-ed56ba4dd19e",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "168bff1a-c166-4cb5-887b-1eadef9340e8"
        },
        "item": {
          "id": "a85804ba-44fa-4fe3-8696-a6788823f1bd",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3e6eec0c-1c4f-42e9-85f8-e6423e51972b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8266ace-b628-4d98-8236-b3836345df1e",
        "cursor": {
          "ref": "d88dd6d7-fc64-47fa-b0c2-2844c9e25516",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "da8d3300-3d66-4ee4-8231-2340be09d3e3"
        },
        "item": {
          "id": "f8266ace-b628-4d98-8236-b3836345df1e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "85a8e3cf-99be-4e25-990a-ccb4e43b5877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdf11ec-2ee4-41cb-a81b-d2ca6734de20",
        "cursor": {
          "ref": "b71b7da5-3b4a-4d6a-b4d6-0960c1fa307d",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "235be095-7d8e-427d-826b-f8a55b044921"
        },
        "item": {
          "id": "ecdf11ec-2ee4-41cb-a81b-d2ca6734de20",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "e5a88710-aee6-40b6-b78d-444d297eafeb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a7da60a-4262-46c4-bdde-2e59e90172bb",
        "cursor": {
          "ref": "245f9f49-cac2-487d-b466-49109ff1f5ce",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "1b7bcdaa-06f4-4a6e-9fe9-c243ccdc3076"
        },
        "item": {
          "id": "1a7da60a-4262-46c4-bdde-2e59e90172bb",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "07f55c48-57d1-4e46-b17f-989b0120e064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "920ae356-89c3-477e-9743-73af85523de6",
        "cursor": {
          "ref": "e22972ac-9640-4d42-a270-f8ff770d0b5f",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "203cfb08-ff13-4d4f-8be0-68c7abc183ba"
        },
        "item": {
          "id": "920ae356-89c3-477e-9743-73af85523de6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "dc235a24-6918-402d-a671-4b322ebaf21b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79e5612f-9527-4e5c-91a9-da264e84e643",
        "cursor": {
          "ref": "ecde1f56-cdd4-4a43-a856-b40524660abd",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "7502c044-4d76-4ad8-b840-e9f28dfa31c9"
        },
        "item": {
          "id": "79e5612f-9527-4e5c-91a9-da264e84e643",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7658ea08-229e-429e-99de-0a712873cef3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f417607-0a88-4b9f-8652-a6c9204c397f",
        "cursor": {
          "ref": "56c66380-01f3-4f64-8b8a-20086a2d6a7b",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1438b1e4-fea3-48b9-8ff4-a107f927c5b6"
        },
        "item": {
          "id": "8f417607-0a88-4b9f-8652-a6c9204c397f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "00fc94dc-9448-4ade-85c9-812146f441e7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d00b999f-10bb-459c-b26e-038ea924627e",
        "cursor": {
          "ref": "2934f32a-5938-4d60-9a7c-e66fbda24561",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "448028a0-9737-4387-b919-4d123432a701"
        },
        "item": {
          "id": "d00b999f-10bb-459c-b26e-038ea924627e",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4bf83048-ef4f-4f8c-b1de-3c3e53fd6eb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2611464f-cff5-48c1-ab8b-647d5cb36364",
        "cursor": {
          "ref": "9efee894-9538-47d1-bfff-6161e5e8ac51",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "05c65f42-4534-463d-8910-167a84abe31d"
        },
        "item": {
          "id": "2611464f-cff5-48c1-ab8b-647d5cb36364",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "454e9d7c-0753-419f-b5e5-8e3ded9fb35a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfbb8cd9-3a7e-4cfd-9657-09cce996fabf",
        "cursor": {
          "ref": "12c866ad-0544-41fb-aca7-56247732d352",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "5fa269dd-dc88-49a4-9549-4724bb87e024"
        },
        "item": {
          "id": "dfbb8cd9-3a7e-4cfd-9657-09cce996fabf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d80009e3-496b-4dda-a0e1-340faf3966c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54a75491-9658-4136-aac1-e7a605038316",
        "cursor": {
          "ref": "224ef570-d640-4008-828a-5c1c78dc9982",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0b41080a-304f-4f2d-9fee-b4149fe623d9"
        },
        "item": {
          "id": "54a75491-9658-4136-aac1-e7a605038316",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "40c55572-1824-4d9e-8c82-65012978b08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02cbb362-dbee-48e3-a001-b05619c6545f",
        "cursor": {
          "ref": "d3517f36-0f51-42a9-9c60-3c9a5d8f267c",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "24ef84e4-55df-4ac6-b4b5-ac82331e1bca"
        },
        "item": {
          "id": "02cbb362-dbee-48e3-a001-b05619c6545f",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "8c049bd6-00fe-4fd2-bb5d-0f0e7fee2261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f2b265d-b2a9-40cd-a6fb-2cfa571a5264",
        "cursor": {
          "ref": "851ccf63-adcc-47ca-9f03-cca96baba780",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "efe1ac13-6c97-4442-ab67-4f93848ba906"
        },
        "item": {
          "id": "2f2b265d-b2a9-40cd-a6fb-2cfa571a5264",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1fad8775-5fd1-4725-a3c2-b25c4a7491c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9904dce6-1e9f-473c-94dd-37dc265cdedb",
        "cursor": {
          "ref": "47cc3368-240d-44b8-aaed-79e8bd2cfe85",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "a5a43c54-f8d8-4d9d-bbfa-6a0f02e68ddc"
        },
        "item": {
          "id": "9904dce6-1e9f-473c-94dd-37dc265cdedb",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "78f3b9bf-041d-444e-bd36-d27abad2c71c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f98a1243-6575-49a6-8043-a1f3349ab561",
        "cursor": {
          "ref": "0b5bf975-3dba-4af8-8fa9-910e4738b3f5",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "84aa5046-826b-4b8e-98cb-40315c045adb"
        },
        "item": {
          "id": "f98a1243-6575-49a6-8043-a1f3349ab561",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "596b0484-b7ca-4b3d-b1c9-ab5c8da0c772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6c68069-1450-4725-b55c-2e0a569502c1",
        "cursor": {
          "ref": "03a2f40e-bc1c-4a4c-bcc4-90bf6ca513b7",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "1ac58bad-05c5-4782-81e1-78b553197f5e"
        },
        "item": {
          "id": "d6c68069-1450-4725-b55c-2e0a569502c1",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "6b07576c-8140-465a-b2c7-30faa0406f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbdfdaec-7562-4d28-96c0-36756a1c6acf",
        "cursor": {
          "ref": "b748f1d9-4e44-4611-bcb2-e92f19d51cf0",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "8e5bd3b8-1290-4fed-850c-7aa40d3b457e"
        },
        "item": {
          "id": "fbdfdaec-7562-4d28-96c0-36756a1c6acf",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b40c29a5-f2f8-45c5-b507-405e2eb24486",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b759d5-c3b2-4bbf-8dca-52cf92fcb3d5",
        "cursor": {
          "ref": "c4cca709-1320-42c3-bc9b-21d7d96d7d10",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "98567265-c397-4964-93fb-128c2f91e63d"
        },
        "item": {
          "id": "a8b759d5-c3b2-4bbf-8dca-52cf92fcb3d5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "da0946d1-af35-475e-91fa-1243858eaddd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 192,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41787405-e508-44f2-be77-b21f1ecb8ea5",
        "cursor": {
          "ref": "c34c3f09-5cd1-49de-849b-459b11f23e8d",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "eaf9467e-1105-4e00-bec2-915667188abe"
        },
        "item": {
          "id": "41787405-e508-44f2-be77-b21f1ecb8ea5",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b0fa0e31-f4a3-404f-af73-17f39dddb493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f77a696a-5ea2-4f05-a92e-d6b320535d9c",
        "cursor": {
          "ref": "52aeca57-903a-4ca3-a7f9-5dc81bc07f54",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "538222d1-ecfb-4fbc-a266-ca38a2fd880d"
        },
        "item": {
          "id": "f77a696a-5ea2-4f05-a92e-d6b320535d9c",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "47972852-f6d2-4ec8-b09c-509377229fc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8463f9-d825-4d68-bc7a-468bd90f9c39",
        "cursor": {
          "ref": "2a2e4edd-5e88-4322-ab91-2b13963e0785",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "897df72a-766a-45fd-b018-4f2ca5d0390c"
        },
        "item": {
          "id": "9d8463f9-d825-4d68-bc7a-468bd90f9c39",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b5f5a80c-bebf-400d-af74-a9219b0951bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4a2822-33f2-406e-938a-8d89e1965837",
        "cursor": {
          "ref": "1b947454-eee1-4844-af06-fc6127e0445e",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "64b4c576-a3ac-4dc5-9b78-0b857296fd81"
        },
        "item": {
          "id": "dc4a2822-33f2-406e-938a-8d89e1965837",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6471bcc8-99f6-442e-83cb-1701a3525d3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5dc139e-81da-43a7-ac9a-24c4877cde1a",
        "cursor": {
          "ref": "1ed6a423-20a7-4eb3-8988-670d4b871cd9",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "1800caa6-3b65-4add-b710-965eaa999b60"
        },
        "item": {
          "id": "b5dc139e-81da-43a7-ac9a-24c4877cde1a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "478819d5-4c31-4640-8c16-681c4a6b0753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c46010-ed3b-4a45-a20a-060d12783008",
        "cursor": {
          "ref": "1da7f8aa-9779-490c-97e4-e0d9ed764a90",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "6ffe8f81-d26e-46e6-bcc5-b9994599d148"
        },
        "item": {
          "id": "95c46010-ed3b-4a45-a20a-060d12783008",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "d57f7f2d-2ee7-4f4f-a98e-e1b72483ec33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68413698-97a2-4881-8ae3-3b415c7b9eec",
        "cursor": {
          "ref": "cc85276e-870a-4813-9a00-9b50600bebdd",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "8685b7e7-6270-448c-8bfa-fd7d0938717e"
        },
        "item": {
          "id": "68413698-97a2-4881-8ae3-3b415c7b9eec",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "054ada13-b95f-48ef-8ae6-a985b019b80d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e92455cd-f711-4237-b454-9ab11b94254c",
        "cursor": {
          "ref": "c3468c68-f4fb-41f7-8b5d-8b8ec80d85f2",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "15184df4-6044-4b8e-bc43-9a2881f97b43"
        },
        "item": {
          "id": "e92455cd-f711-4237-b454-9ab11b94254c",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "677277dd-ed8f-4e5b-b8c5-7af9453eb62a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32751851-16d1-4b49-b47a-b729e2828083",
        "cursor": {
          "ref": "98e3da2c-25c6-4f25-be69-f606acafc7e7",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "94b30c5e-6d87-4555-a593-d9436b4001ca"
        },
        "item": {
          "id": "32751851-16d1-4b49-b47a-b729e2828083",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "dd721595-5fb3-42e1-a3a5-c642558fdf7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc106a7f-7c4c-4b53-8721-d5f17e6968c4",
        "cursor": {
          "ref": "f503de22-b738-4c58-a2da-182ede1cd3aa",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "15f3d16e-c9fd-42d3-973b-d6a7b5a412aa"
        },
        "item": {
          "id": "cc106a7f-7c4c-4b53-8721-d5f17e6968c4",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "aa760a61-e81c-45ec-9b22-03a265d90cdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b79e28b-2438-422e-9e80-b5ba02411795",
        "cursor": {
          "ref": "2c18d265-d0fb-4346-9654-c23cc9a823f3",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "70ab5b1f-9146-479a-ba81-8cf412ad9d6f"
        },
        "item": {
          "id": "7b79e28b-2438-422e-9e80-b5ba02411795",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "ed427737-0bce-4f91-8f9c-f6d83ec72a7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28cf764-0b3a-4c8e-9909-7ad06f3ad49c",
        "cursor": {
          "ref": "e2073d82-21a0-4eda-b9f9-6c3b93c9ab3e",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6952da81-9fd4-4b7d-8c61-c0a29d007d6c"
        },
        "item": {
          "id": "e28cf764-0b3a-4c8e-9909-7ad06f3ad49c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "6fe1c34b-1a8c-4041-bee9-f2cde2c7fa5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0985624-f52d-4396-9edd-95a893717537",
        "cursor": {
          "ref": "1167c1a6-6683-445a-93d5-cfc6a1e7b1fb",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "426b70f6-8f7e-4cca-80ba-15910a7dc7c0"
        },
        "item": {
          "id": "c0985624-f52d-4396-9edd-95a893717537",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "511896de-d781-4e8d-84e8-8a828b1aa2f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb3d48fc-1d13-4240-89f4-6f107d8b8bf1",
        "cursor": {
          "ref": "8fac460f-137e-4a39-b59d-7bbdb0532996",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "ab8e745b-993d-403f-80ce-c91854fc658e"
        },
        "item": {
          "id": "bb3d48fc-1d13-4240-89f4-6f107d8b8bf1",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c8b60ff0-c668-4b69-af3b-03a2d2d36b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c857ca5a-a551-4818-8cb6-4c682acf34dc",
        "cursor": {
          "ref": "1bab0be0-2fb4-413e-b615-c38f65ebb704",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "46b700a6-8549-4d18-b45a-16ad2a8472ef"
        },
        "item": {
          "id": "c857ca5a-a551-4818-8cb6-4c682acf34dc",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0d9b80ce-16a3-4360-956f-ac05ebfcd24b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e7a749d-c450-4fd8-8c33-501a38b47004",
        "cursor": {
          "ref": "b3b074d6-ba40-4303-ba5f-2750dda36bcd",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "87cdaa50-bae8-402d-bac8-bcccf412622e"
        },
        "item": {
          "id": "7e7a749d-c450-4fd8-8c33-501a38b47004",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "a2418760-01f2-4c86-8422-30d9e4193e4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e887a71f-37f9-4a5a-8936-b2ebba25cede",
        "cursor": {
          "ref": "1ef6a1f8-3a79-463b-8217-34204a8be250",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "23cc04cb-7871-495d-a4f2-ac5f85c02666"
        },
        "item": {
          "id": "e887a71f-37f9-4a5a-8936-b2ebba25cede",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8f66e7d4-de44-448c-ad60-c1ece070937e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d24a1479-0f4c-4aae-ad94-75d8e5a19f7b",
        "cursor": {
          "ref": "6564dd7d-23f9-41b1-8186-2555a1aa0139",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "9efc23a0-47e6-4479-802a-09cec85b2abc"
        },
        "item": {
          "id": "d24a1479-0f4c-4aae-ad94-75d8e5a19f7b",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "914427f7-dcd9-41cf-9b1f-af60b64d0465",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa2f791f-8138-4c14-a340-e9a4d9333778",
        "cursor": {
          "ref": "97e7eb41-4deb-4467-aa97-f77fb5b93a05",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "d1cee1f3-2951-46f6-8b13-0faddac2cd20"
        },
        "item": {
          "id": "fa2f791f-8138-4c14-a340-e9a4d9333778",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "1903cc79-e355-4128-82f3-e46409807af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9347e828-0a49-4365-b34e-3fdd35cf5165",
        "cursor": {
          "ref": "6f7fecbb-033d-43e3-b68e-8875974d196f",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "0770a45b-35c3-463e-9535-c5f00f33128e"
        },
        "item": {
          "id": "9347e828-0a49-4365-b34e-3fdd35cf5165",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "28b73859-161b-408c-a1e3-204f85d6cd30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "881b497a-c9bc-451d-b75f-76e5782196f9",
        "cursor": {
          "ref": "f1a9e1db-13ea-4f61-b261-c7be43bdd75b",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "d2154d4a-18e2-42c2-aefd-520ec747d397"
        },
        "item": {
          "id": "881b497a-c9bc-451d-b75f-76e5782196f9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "47196fab-dead-4677-b198-2af8862608ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37a5efa-7624-4790-a5f9-07ae71a0731b",
        "cursor": {
          "ref": "08df8c52-391c-414c-baa8-ccf400a91563",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "73b958ef-bee1-41ea-89a0-ac6c43d50afe"
        },
        "item": {
          "id": "c37a5efa-7624-4790-a5f9-07ae71a0731b",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "c50af554-7188-4f0a-aa4e-72414c33cdb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ec56fe-c329-41f3-ba4d-cf6900c7b2e2",
        "cursor": {
          "ref": "875019ce-39ed-4e0b-bee9-b21796abea3d",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "0ebd431d-2b36-4893-90a5-8c364357c951"
        },
        "item": {
          "id": "97ec56fe-c329-41f3-ba4d-cf6900c7b2e2",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "a49fb510-354f-49cf-856d-658b3f2188f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e894c0-68d1-467a-8e8f-4983fc742b1d",
        "cursor": {
          "ref": "8e6c8336-de91-442a-ac9b-452b291dbf11",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e83de359-2888-44f4-b718-ead291fe39f2"
        },
        "item": {
          "id": "13e894c0-68d1-467a-8e8f-4983fc742b1d",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "02d20685-35d5-4e94-9230-81091ee01d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f7a0ff8-8890-408b-b520-89bdb5dc6924",
        "cursor": {
          "ref": "62d85521-91e3-462c-b823-47c2398f4c6f",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "dac88a98-88b8-47a8-ba2a-07b8194a7eeb"
        },
        "item": {
          "id": "5f7a0ff8-8890-408b-b520-89bdb5dc6924",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "82be3e9f-3b46-4336-8633-7e54b593b776",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a77b936f-d704-46f5-bd6b-aaecd156b02d",
        "cursor": {
          "ref": "36fd94e0-86c1-477d-842e-48dc5b0ce150",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "ca51e7d4-f0ea-4ce1-a104-ab2b524c28bc"
        },
        "item": {
          "id": "a77b936f-d704-46f5-bd6b-aaecd156b02d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "40ce4cef-0472-4c05-9019-c26b4bce74dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e287c58-2130-4a5c-9a42-1eb6a029b488",
        "cursor": {
          "ref": "c4c1abcf-eb8f-44ce-9477-4a67475b289b",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "739a5b7b-cdc0-49d6-9e17-3730070b3b8e"
        },
        "item": {
          "id": "8e287c58-2130-4a5c-9a42-1eb6a029b488",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "c56467de-fb2c-412b-b9e3-59336f484897",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e04dc0d-40d9-4338-a89d-5efcc020dc8f",
        "cursor": {
          "ref": "cf5caea5-e892-4df7-918b-514208f39bf3",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "84fd2be7-89b4-4fba-a04f-ab61533c26e4"
        },
        "item": {
          "id": "6e04dc0d-40d9-4338-a89d-5efcc020dc8f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "10d7d0f7-2000-4118-951e-725db7665017",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aea77f2-4f30-4624-bee6-f2688a277678",
        "cursor": {
          "ref": "7818141c-916f-4676-b39b-dd5c56e9a9e1",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d270f69f-7cd3-44b0-b91b-b088baa9c81f"
        },
        "item": {
          "id": "5aea77f2-4f30-4624-bee6-f2688a277678",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2a3e0041-0a1b-41cd-9dc4-b643644a51bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9473dc34-3cae-485a-8eb0-d8f75f11d2c7",
        "cursor": {
          "ref": "b03c0a81-a300-436d-9e00-a2ee693b595d",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "87c5d55e-0919-436f-9bb0-f9ef5a756e9b"
        },
        "item": {
          "id": "9473dc34-3cae-485a-8eb0-d8f75f11d2c7",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "9e9f38b1-92ab-4877-b356-e3788f6166d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92b795b8-ee05-4728-8a1f-8de4fcd03c0e",
        "cursor": {
          "ref": "78da6e96-d69d-43af-b993-1eaeeb4da412",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "56546b05-208e-4ee9-bb08-df61bab1aab3"
        },
        "item": {
          "id": "92b795b8-ee05-4728-8a1f-8de4fcd03c0e",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "69699a8d-8e2f-46ae-9cca-adfb75e4cc43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34cb80e5-c8a8-49c2-aa42-1110fa9e8dcb",
        "cursor": {
          "ref": "f0264a88-23fd-44c5-873c-04339d3819ff",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "6bf578b3-e07b-4024-8f28-00b672236d90"
        },
        "item": {
          "id": "34cb80e5-c8a8-49c2-aa42-1110fa9e8dcb",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2e8dc5f3-57fc-4dab-a05e-7a39918ebd35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fd17cf-f134-4d0a-a028-4252c79cdf87",
        "cursor": {
          "ref": "449bf974-fdea-4417-8ffb-6236c87d29b6",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2f4a9f32-592b-4ce1-a806-07483733bd05"
        },
        "item": {
          "id": "94fd17cf-f134-4d0a-a028-4252c79cdf87",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "0675014a-b8e6-445a-ae6b-cf4d4315e9a5",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "79a19c08-838f-4354-b1fa-b4190e04f17a",
        "cursor": {
          "ref": "274b0fca-ad00-4156-b19c-b01d878e300e",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9dea8715-554b-449a-8a88-1b8245384cac"
        },
        "item": {
          "id": "79a19c08-838f-4354-b1fa-b4190e04f17a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e5b74147-6720-4855-8c13-a3d95a1cffb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e448c7-02c7-4a6f-8632-47233dda4701",
        "cursor": {
          "ref": "4049eb44-d553-45e7-aee9-de42c553b339",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "32e1b7c0-7f96-4a02-bc57-d716f7656b28"
        },
        "item": {
          "id": "92e448c7-02c7-4a6f-8632-47233dda4701",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "8cc9ce17-3799-4dab-973c-cec3bff92773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c92656-869c-454a-bd5b-e147eff8dbc9",
        "cursor": {
          "ref": "40850f03-9475-4218-a054-2d0770568c03",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "048e885d-c301-40ee-82d7-e8ac091c9646"
        },
        "item": {
          "id": "16c92656-869c-454a-bd5b-e147eff8dbc9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "a97b29ef-863c-49b9-a340-25b1ba329627",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94cb90ec-a0c4-4549-9f8c-fce2f4d5b3cc",
        "cursor": {
          "ref": "e2c6cca7-f9ae-48d6-9050-7ef94c279734",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "44682d9f-83ab-4c46-8eeb-15230a013e7a"
        },
        "item": {
          "id": "94cb90ec-a0c4-4549-9f8c-fce2f4d5b3cc",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "f075466d-15ba-46c3-9db6-c7734cea6c4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c6a4abe-ee3c-4470-beaa-3a4ba694b7d9",
        "cursor": {
          "ref": "29e2a82f-79f1-4a26-a48a-fbad4ab7cd08",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9b09795f-bbbf-4dfb-b8f2-4ee83a0e6eb0"
        },
        "item": {
          "id": "2c6a4abe-ee3c-4470-beaa-3a4ba694b7d9",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c9ece13b-cb37-4b21-a549-a92a1dca0943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2cdc0a0-75a7-4130-a296-a8e19794dde6",
        "cursor": {
          "ref": "31ba5fbe-3dfa-465e-836e-0267da288470",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "5b20f436-3e58-4be5-8680-252b674f78b7"
        },
        "item": {
          "id": "d2cdc0a0-75a7-4130-a296-a8e19794dde6",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "1dfd0f8a-2977-437a-a45f-3a7bf5526eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08197f57-c1c1-48b0-af23-376569125977",
        "cursor": {
          "ref": "8ca28b98-302b-45ea-9d55-7866ab7a06a8",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "33659514-0a85-43cd-a39c-cdea7b20b7e4"
        },
        "item": {
          "id": "08197f57-c1c1-48b0-af23-376569125977",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d2da9004-17f2-439b-a0cd-54d148fe8ed1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81a16a0d-784b-4d57-9412-1688448d5a05",
        "cursor": {
          "ref": "684883ee-7993-43e6-913e-c7b1ad736bbc",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "30cff5d1-7bfe-4ede-aec2-672710d3a56e"
        },
        "item": {
          "id": "81a16a0d-784b-4d57-9412-1688448d5a05",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "feaac020-3238-4b3d-919a-f487dee26f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071817da-a638-4ee2-b64e-94dfdf2e99c9",
        "cursor": {
          "ref": "f0ac9f42-41be-4703-ba6e-d5c9cca31c0d",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "b44173a8-1822-4d59-bada-358cf82f245b"
        },
        "item": {
          "id": "071817da-a638-4ee2-b64e-94dfdf2e99c9",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "b5375a57-f684-4f9e-8d1a-2d3c27d62e38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7019d1-9cc2-4619-b73e-0941e18d64c2",
        "cursor": {
          "ref": "08e6a0c8-006c-485c-ba39-e8791ffbf8f4",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a1d3b022-9766-4948-bfc0-852bda772539"
        },
        "item": {
          "id": "3a7019d1-9cc2-4619-b73e-0941e18d64c2",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "a02c0ebc-0bca-4127-8a1d-612748ea8231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d6ee934-3b74-4052-bfdd-5b05b44985e4",
        "cursor": {
          "ref": "c88812e2-8932-4ef6-aa5f-a8a0f71a70e0",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "fc1443d9-5012-47e9-af72-988c74e75f6d"
        },
        "item": {
          "id": "9d6ee934-3b74-4052-bfdd-5b05b44985e4",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "85bc697e-d663-40e3-bc4a-310737c5be2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24bb114a-68d2-4b5e-ac8b-aeb2c84aa33f",
        "cursor": {
          "ref": "8be42ce2-cf15-4942-a851-00070382fcf8",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d87def89-8ee3-4042-9dd4-fc4e07a7232a"
        },
        "item": {
          "id": "24bb114a-68d2-4b5e-ac8b-aeb2c84aa33f",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "14dd1202-6267-4761-a3dd-89c19d34cdda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c5d7fd-7571-4750-82b6-2841181c4f5d",
        "cursor": {
          "ref": "4cbf4a6b-f84e-4536-8dcd-85ebd7908cdf",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "836d07ff-c0d3-4fcb-a7a0-e20495c26918"
        },
        "item": {
          "id": "09c5d7fd-7571-4750-82b6-2841181c4f5d",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "0930c6a6-f7bb-4074-a9b4-64c8562fd3dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "749b3793-195a-425f-8925-31fd37e4ae95",
        "cursor": {
          "ref": "929eb368-5585-4362-afaf-352c635103a4",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "0b514b6b-191c-4ffb-96c3-2cf4217edf34"
        },
        "item": {
          "id": "749b3793-195a-425f-8925-31fd37e4ae95",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "83f37327-d3c7-4d60-9c8b-41b29d3755bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31210930-a10b-41a1-b6db-dd52a2d7a1cd",
        "cursor": {
          "ref": "68f37e12-34bd-4fcf-a0d2-82004e8c1040",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "865e66e6-55ec-4029-9b00-4cac2a5c0bfc"
        },
        "item": {
          "id": "31210930-a10b-41a1-b6db-dd52a2d7a1cd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "f9947f60-e288-469d-bc55-8b28171152ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3312bc6-ca74-4686-a200-04bb61aaa76f",
        "cursor": {
          "ref": "54c43caf-ffeb-47a9-b25b-88a2ac6cd683",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "16b2891c-bf0c-4e92-8d08-5c04560f54dc"
        },
        "item": {
          "id": "b3312bc6-ca74-4686-a200-04bb61aaa76f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "788842ce-0321-44f8-8235-4fe2145691cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf81fbb-1f42-4aef-b988-81fb2ce30ee9",
        "cursor": {
          "ref": "cdab610c-ded9-40ff-989e-ac12f10ee46a",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a6eabec3-39d9-4984-b5ad-7e87fda8461e"
        },
        "item": {
          "id": "0cf81fbb-1f42-4aef-b988-81fb2ce30ee9",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "56c46c2d-e456-4a9a-9e7d-bd0635335337",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c458c382-7bb3-45de-aeda-db02147e8694",
        "cursor": {
          "ref": "5619e51f-9211-4b90-960f-f2b02018a70b",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "fd4c2ad3-981a-4368-8646-9625733de1c2"
        },
        "item": {
          "id": "c458c382-7bb3-45de-aeda-db02147e8694",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "88809e78-08a9-4185-bab5-1cf6af428a0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e932c443-2e49-4295-a8e9-92a7976f3f24",
        "cursor": {
          "ref": "19493292-b442-4e0d-9b31-7cb30140d5cb",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8636d63f-d114-44c9-8109-7411fa01b881"
        },
        "item": {
          "id": "e932c443-2e49-4295-a8e9-92a7976f3f24",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1db2576f-2549-4baf-bf26-a077eac911ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ee064b2-535c-4d07-ac02-09b910812525",
        "cursor": {
          "ref": "86cdd2dd-83dc-484e-acdd-f47992a3b998",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "4a18133f-7f66-4910-92f1-efc455f67281"
        },
        "item": {
          "id": "5ee064b2-535c-4d07-ac02-09b910812525",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ecf6b0e2-d986-416e-a92e-60c1e7d272df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24f3bd22-f254-40f7-b042-43e1f678ed5b",
        "cursor": {
          "ref": "ea1dda74-ad97-4619-a321-f86034c05fc3",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "85c3928a-547f-423d-a209-e3209a11dc9d"
        },
        "item": {
          "id": "24f3bd22-f254-40f7-b042-43e1f678ed5b",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "f6ec3bd2-8a61-4bea-a3c1-d3ad613323ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ed3a51a-c9c9-455a-aa72-d5e707d6d31c",
        "cursor": {
          "ref": "1a725d0a-ed77-42b4-9eb1-66cc65bb793b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5419cd83-d840-4b87-afcd-9cafa7b5a84c"
        },
        "item": {
          "id": "7ed3a51a-c9c9-455a-aa72-d5e707d6d31c",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "1d4c8082-af6f-4578-9980-e6bab710f897",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c19647-d9d0-4fff-895b-94c3f1c146bf",
        "cursor": {
          "ref": "2b8497da-4c50-461d-9d67-420962a2f88e",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "ae29545d-a391-4855-829c-bdc0362cba07"
        },
        "item": {
          "id": "f9c19647-d9d0-4fff-895b-94c3f1c146bf",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "309828cb-5585-445c-a320-10300ded45a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0569f1-f32a-4cd1-ad79-4acc026bd595",
        "cursor": {
          "ref": "88607dca-f010-48ee-aa8c-885916c30fab",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "c9ba241a-1272-4b91-9f98-0f8c1183d4e2"
        },
        "item": {
          "id": "2e0569f1-f32a-4cd1-ad79-4acc026bd595",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ef6c404f-dc41-4088-bff3-2782de9fbabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e2d02e7-f1f7-4018-845d-bf183ffcaaa3",
        "cursor": {
          "ref": "ccaf268c-e6d4-4ec9-998d-789865982d8d",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "d54a6919-bcc7-45d1-a2a0-78084e9b2c94"
        },
        "item": {
          "id": "9e2d02e7-f1f7-4018-845d-bf183ffcaaa3",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1c68a644-ab5d-4c18-990a-215680dbdbf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea3dfd0-c420-4f95-92d4-f7cf0d38e66d",
        "cursor": {
          "ref": "f90c4126-dcb1-48cf-9b66-989306b6872b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "812ad14d-84ad-4531-a6ba-9fcbab09337d"
        },
        "item": {
          "id": "eea3dfd0-c420-4f95-92d4-f7cf0d38e66d",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c4ca7d08-63a9-446c-a70f-fad1aa062b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6409f019-7d7e-4153-9f44-e91fd9e02556",
        "cursor": {
          "ref": "ff97861d-9389-483e-9b9b-0c63e416fa1b",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "223d9cd3-104a-41b6-9eab-0b9bf76bd3ed"
        },
        "item": {
          "id": "6409f019-7d7e-4153-9f44-e91fd9e02556",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "e4cd29eb-8cf2-4a47-a38c-a8a701ae1126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4736e24e-eb32-4c57-a5e8-721d7e635acc",
        "cursor": {
          "ref": "3e1b0fe2-c8b5-4c24-adb2-e4fcb17f9657",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ad1582ee-b37e-46e1-b120-68c493ac8c36"
        },
        "item": {
          "id": "4736e24e-eb32-4c57-a5e8-721d7e635acc",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "64aac1eb-6a59-434a-907c-0e52783fbe8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2345f82e-eea1-4054-8d91-03bf3bf9bb2c",
        "cursor": {
          "ref": "1978666b-05b7-45b4-a627-f4a42e3511b0",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b557f6d2-5461-4867-9607-48ff72c0d3ef"
        },
        "item": {
          "id": "2345f82e-eea1-4054-8d91-03bf3bf9bb2c",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "515afe56-a53b-44a7-96b2-05c58f7a3ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d2f03c5-c15a-4add-9cc2-2abd368a03e4",
        "cursor": {
          "ref": "d865103f-6e8c-43ae-899e-8d7a70d69d24",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "69857aba-ed8b-41fe-a0e6-981fa8667ad0"
        },
        "item": {
          "id": "3d2f03c5-c15a-4add-9cc2-2abd368a03e4",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "ebb75a7b-a9a1-4424-b338-09f7b5026c07",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "018fa4e5-3e48-448b-973f-0fe84ecf2ee7",
        "cursor": {
          "ref": "a0518d58-8b36-43a0-8ca6-da54adcb7708",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "6e193929-c3f7-4950-bca9-12df09e7f7c6"
        },
        "item": {
          "id": "018fa4e5-3e48-448b-973f-0fe84ecf2ee7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "83892f76-3473-4583-90e3-043df65b1c46",
          "status": "OK",
          "code": 200,
          "responseTime": 292,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "1eac5887-a32b-496d-b3f2-f29b67c2d159",
        "cursor": {
          "ref": "b0c31321-54dd-48a4-a833-34559bdbcd56",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8dd6df57-e20b-4bf8-a8a9-1dab2ff3e363"
        },
        "item": {
          "id": "1eac5887-a32b-496d-b3f2-f29b67c2d159",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "df07e529-167c-446c-b556-f54a87cfe06a",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "24590b0c-8608-4632-ac0a-625d4bd04bb2",
        "cursor": {
          "ref": "5ff74413-0960-47e1-9687-d1c02e846c67",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "4e128dd7-bcba-401a-a399-7998986649a7"
        },
        "item": {
          "id": "24590b0c-8608-4632-ac0a-625d4bd04bb2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f9197cb1-be99-45ae-962b-07dff36b2659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0755345d-83ac-42a4-81dd-3eb298a91503",
        "cursor": {
          "ref": "848b600c-113b-4a81-81e5-d9ffa646386b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "b263eb3e-1be6-40e5-bc73-c2588d0f6f82"
        },
        "item": {
          "id": "0755345d-83ac-42a4-81dd-3eb298a91503",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "d144e7cd-2b88-4a2b-b45a-be9977b7ce0c",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "d636ef34-6ecc-4d82-bd59-18f5455efa68",
        "cursor": {
          "ref": "ab0860c1-b599-45bd-a85b-7693067abf62",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b057a0b1-1a7b-425c-b5b2-3cf319c99495"
        },
        "item": {
          "id": "d636ef34-6ecc-4d82-bd59-18f5455efa68",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "c86ddbf8-d2b8-4cae-8fc5-b22dc67d6710",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "ed7f7229-4def-425b-91cb-ded4bf85dc26",
        "cursor": {
          "ref": "dc101acc-4a84-4e8d-b032-a0640d4b2662",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8b27e289-6d3c-419c-a19f-cc6d53cfbe56"
        },
        "item": {
          "id": "ed7f7229-4def-425b-91cb-ded4bf85dc26",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a7920c9a-ee35-43db-83cb-fc164748c025",
          "status": "OK",
          "code": 200,
          "responseTime": 201,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "bf0dd69c-16f8-4d4e-b53a-4620018ace72",
        "cursor": {
          "ref": "17e19e74-a6c5-4bef-a8b0-9f958788c6be",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e396dd46-e730-4bbc-90a1-7bc6372cf595"
        },
        "item": {
          "id": "bf0dd69c-16f8-4d4e-b53a-4620018ace72",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "6fb0f0dd-1375-4fcb-a7ba-baa56cff0095",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "7661679a-6986-4355-8f51-d1ef20d03c1f",
        "cursor": {
          "ref": "27d87a50-2c18-4413-b63e-d18ad434896d",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "2f63ae1f-2af8-4652-81f4-707e00e57c06"
        },
        "item": {
          "id": "7661679a-6986-4355-8f51-d1ef20d03c1f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3154f669-675f-4d08-ab87-3237caea5980",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "97d032ad-cd20-44cf-a5bd-9f2ff425d4b9",
        "cursor": {
          "ref": "faa78bf4-27a8-4458-922a-dce4e9cd9e27",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "df5ec6fc-2ce7-4f2e-9b1d-27e68de4202e"
        },
        "item": {
          "id": "97d032ad-cd20-44cf-a5bd-9f2ff425d4b9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "08dd8628-6735-4839-a1e5-3064a4934915",
          "status": "OK",
          "code": 200,
          "responseTime": 231,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "06fd7bb0-f741-48b9-baf6-cec2cc9a56b2",
        "cursor": {
          "ref": "990434d0-4b20-4b90-9f0d-596ffb7fbd4d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "222dc8b6-48f4-4906-8c7f-3f35d7c6391e"
        },
        "item": {
          "id": "06fd7bb0-f741-48b9-baf6-cec2cc9a56b2",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "96322aba-4928-4be6-bcf8-a092dd8c3f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63bf8e98-55cc-4e61-b89f-e1cfa2d07059",
        "cursor": {
          "ref": "de0f3f7e-8f5a-4033-9fe8-4179e777bb63",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "da65024b-84e4-4c1a-b519-81624519adcf"
        },
        "item": {
          "id": "63bf8e98-55cc-4e61-b89f-e1cfa2d07059",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "2c929939-5368-4cc7-945a-526a60da2a9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54c0ac68-e35b-4d03-b171-d2191a815985",
        "cursor": {
          "ref": "97bf1d6b-5bcd-4250-b22d-e1d41b53642a",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "fe7cbc58-9ba7-4a70-9e97-cd5ebb58dfdb"
        },
        "item": {
          "id": "54c0ac68-e35b-4d03-b171-d2191a815985",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f38ab2a0-a390-4945-9d0d-0706545c9c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a1119a9-3eb6-4bd7-b608-66bb685e4c31",
        "cursor": {
          "ref": "092a4ee3-9b90-41b5-bc8d-adf30a12450e",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "7f9c2e57-36c1-4bfd-94fc-0140b9844475"
        },
        "item": {
          "id": "2a1119a9-3eb6-4bd7-b608-66bb685e4c31",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "040bd4af-5ef2-49ed-820e-9d1286146886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea3c8c48-989d-4a6e-81f5-c9cdb4369f58",
        "cursor": {
          "ref": "2e54c3e3-f74e-430e-8998-f5f31e93ce0b",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "206f047b-6b8b-47d6-86a7-ffd46a3f3784"
        },
        "item": {
          "id": "ea3c8c48-989d-4a6e-81f5-c9cdb4369f58",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "ffae6339-c18e-4103-873a-25211aaed5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab434eda-77c0-4ea3-9a41-52dee8d7c6f0",
        "cursor": {
          "ref": "dc9aadd7-3223-4cec-a4ba-a30084198b6f",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "a5ceda9b-43da-42d6-a5dd-27ca756f510c"
        },
        "item": {
          "id": "ab434eda-77c0-4ea3-9a41-52dee8d7c6f0",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "1bf42183-6c19-4d2f-8391-5f2397f06216",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42b10667-9db1-48f3-906c-b1fd0ad91c2d",
        "cursor": {
          "ref": "3d44d153-6751-4eec-b1b9-e89ab20d0b20",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "7a6d4057-61b6-404f-9ca9-7e7848d45617"
        },
        "item": {
          "id": "42b10667-9db1-48f3-906c-b1fd0ad91c2d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "efdefaa6-4e95-4a2e-8735-2e00032ec97d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f1d9e92-c40e-4686-a2a2-8f26d9c13a8c",
        "cursor": {
          "ref": "3797293b-2049-407f-9e42-2779334f1cd9",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "4ef36421-b8f3-4112-b38d-83c1a818af6f"
        },
        "item": {
          "id": "4f1d9e92-c40e-4686-a2a2-8f26d9c13a8c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "fbf8ebe0-31ec-42ec-9210-29285e376bb7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acd6e67e-3727-46f4-88cd-f8aeffc70380",
        "cursor": {
          "ref": "bba3d736-b3cc-47d8-87a0-cd3e3b9b73be",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "de9e742e-6fd7-404e-b1e4-f13434b8da8b"
        },
        "item": {
          "id": "acd6e67e-3727-46f4-88cd-f8aeffc70380",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c40c766f-38e9-42b4-a773-671582bef9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93eead11-491e-467c-b38c-01292aac157a",
        "cursor": {
          "ref": "58a5baa8-bfde-47d7-b3f4-7223bf76e558",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7de135c3-3627-4882-977c-8537d85ef9ff"
        },
        "item": {
          "id": "93eead11-491e-467c-b38c-01292aac157a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "97dd29ae-e834-4e81-825e-fed39e78eef8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "828cc117-a5e5-4831-a5f6-f0beba7907ff",
        "cursor": {
          "ref": "0d0aeec1-8f1d-4da7-bc20-447e6102950d",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1cdad693-5ab3-445a-85f3-8d2043de5f49"
        },
        "item": {
          "id": "828cc117-a5e5-4831-a5f6-f0beba7907ff",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "31553072-fd3b-42bb-ac05-27f6c39379f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e15a76b-cf79-4198-a961-6072a272de4e",
        "cursor": {
          "ref": "7c8ea1c9-97d8-424d-82e9-844f95fd3967",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "43354423-b4e3-4411-97c6-7bccd4f8b99f"
        },
        "item": {
          "id": "0e15a76b-cf79-4198-a961-6072a272de4e",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7a47084d-dd84-4ccc-9c7e-6501a2bf8e28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf0acd86-4cef-4b3a-9b6d-1641f2a9f962",
        "cursor": {
          "ref": "adb16158-c8c4-4d6a-abb8-e4cda3cf9b60",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0a9a76c3-5ce8-4d26-ac9d-2789df08c7b3"
        },
        "item": {
          "id": "bf0acd86-4cef-4b3a-9b6d-1641f2a9f962",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "d5455f6c-9ee5-4946-95a5-d3eecf30c951",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c089efe-bd1d-45b4-bbba-d6731db2e665",
        "cursor": {
          "ref": "758f4ee4-d1f2-46ab-bae3-fea3cfd060c1",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "d4e15056-e473-4837-9a00-3734afc497b8"
        },
        "item": {
          "id": "2c089efe-bd1d-45b4-bbba-d6731db2e665",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "149bcf1d-6e59-4d34-abc9-3863a4120b38",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "78d20528-cf66-4977-9ee5-401ba7e9fab9",
        "cursor": {
          "ref": "5da2a9b4-3809-42e4-b958-b8c55bb7397f",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "f6bae1b3-40a2-4db6-ae72-e3de7bc867be"
        },
        "item": {
          "id": "78d20528-cf66-4977-9ee5-401ba7e9fab9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "9899b6b9-72bd-4701-a3bf-29b2b8b315be",
          "status": "OK",
          "code": 200,
          "responseTime": 142,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "3f5b5142-5862-4811-8b03-237dbbeeaf30",
        "cursor": {
          "ref": "a12e5651-af2c-4731-8d36-a61f6f30d7a2",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "0e983fed-55b4-42c5-9d06-9046c45442a8"
        },
        "item": {
          "id": "3f5b5142-5862-4811-8b03-237dbbeeaf30",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e91bf9e7-606c-412e-9745-52fcf422d380",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "828e196e-9414-45d4-b4e6-833857d1e144",
        "cursor": {
          "ref": "a32ae5af-3ff9-4400-8868-b82267b960c4",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fffac33a-4abe-41dd-8378-344d76cb6262"
        },
        "item": {
          "id": "828e196e-9414-45d4-b4e6-833857d1e144",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3f015307-6628-4001-b2f4-a8bb42cb7aa2",
          "status": "OK",
          "code": 200,
          "responseTime": 144,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "f09c3859-3178-431a-aa0d-fb01da930da9",
        "cursor": {
          "ref": "87553878-3f89-409d-a14d-3d2c687dd482",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7e2a8d9b-d2e8-43ca-8712-f0921ea96f5d"
        },
        "item": {
          "id": "f09c3859-3178-431a-aa0d-fb01da930da9",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "f943bbd0-0426-4156-9ec4-4ec2e54fc6a9",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f3fcd97c-3f92-4e4f-b189-e927f3d2bb5a",
        "cursor": {
          "ref": "8f5081bb-9df0-4c55-a643-c51d7e4bd67c",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "f65e0bf6-aaaf-4c7e-a4f3-30e8738b4db3"
        },
        "item": {
          "id": "f3fcd97c-3f92-4e4f-b189-e927f3d2bb5a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1dee7afa-16b3-4252-a277-719b1274777c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece82ec2-bbe1-4c2a-bb1b-45926fcb5625",
        "cursor": {
          "ref": "ccae1b0b-c8ac-451a-ad45-c1477d476640",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "856d7824-d236-4bdd-be63-e21aa752cfbd"
        },
        "item": {
          "id": "ece82ec2-bbe1-4c2a-bb1b-45926fcb5625",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "1e6cd508-6383-4527-b7a2-26fc81eb46dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f896bcb2-08cf-4a8f-b1f6-ef900749bc7f",
        "cursor": {
          "ref": "b7045271-6012-4e4b-bf6d-42f61f04d498",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "ea700c19-ab59-448b-bcce-7cc6d0bbf2d8"
        },
        "item": {
          "id": "f896bcb2-08cf-4a8f-b1f6-ef900749bc7f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "fe4f53f2-2152-4fa0-9a7e-9591805c6c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04394c48-cd2e-4012-ba91-0f71356f7c8d",
        "cursor": {
          "ref": "cd3f477a-ae07-45c0-88e8-f35bb2da12ee",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "5ffbdda0-8323-4eb1-8b5b-4a6ce6293447"
        },
        "item": {
          "id": "04394c48-cd2e-4012-ba91-0f71356f7c8d",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "07325468-9a23-48f6-bc45-8a4ccbae7c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 116,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8017af6-fab5-4acf-b6af-6c65c7e0d495",
        "cursor": {
          "ref": "a312ee78-93bc-480a-b630-3f9bdaca063c",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "4748f124-04a7-444c-9ca7-40458bca1378"
        },
        "item": {
          "id": "c8017af6-fab5-4acf-b6af-6c65c7e0d495",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "88854984-3d72-48df-9c10-023c8b303949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "419d3992-cb34-4fa6-a431-f0382b4f560d",
        "cursor": {
          "ref": "42465f09-f0cf-4479-be07-9a9117fa8aa9",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6e3e85b0-906b-4780-a6d6-47e09853a874"
        },
        "item": {
          "id": "419d3992-cb34-4fa6-a431-f0382b4f560d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1a10450b-62b6-43ed-b48b-ecb636b918b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baeca16e-36da-4815-a91d-f2afe04a6f5e",
        "cursor": {
          "ref": "8af7d83f-02fd-4f3b-9a43-00125cf94bef",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "42316712-b935-408d-9041-d62339741de3"
        },
        "item": {
          "id": "baeca16e-36da-4815-a91d-f2afe04a6f5e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "86d24104-e624-4748-9b76-29d932bf1d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c1bb29-a1d3-4088-a47f-0f77f72d132d",
        "cursor": {
          "ref": "428349da-0248-4ec6-b6fc-8feda86ac515",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "3ec2d8fd-80dc-43da-b2db-1cc9517cb9f7"
        },
        "item": {
          "id": "71c1bb29-a1d3-4088-a47f-0f77f72d132d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "ec698b92-f18c-40da-b3c9-3370fb022dd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf62068c-9842-47e7-850b-d40a122f2e9d",
        "cursor": {
          "ref": "7528154f-3562-4d23-8fad-ab30f5b64058",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "872081d0-edb3-4b5c-9ee0-ec5ae8d5ccc9"
        },
        "item": {
          "id": "bf62068c-9842-47e7-850b-d40a122f2e9d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b09efd5b-e190-4101-8737-cdcef7e58fff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8fde48b-d74b-4486-bbfc-e7215d9f75f3",
        "cursor": {
          "ref": "9d028361-3a9a-4d3f-b7f0-396d42d37709",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "7ac45382-5702-4977-bf60-5bd512a9b9c9"
        },
        "item": {
          "id": "b8fde48b-d74b-4486-bbfc-e7215d9f75f3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e0ca7ab4-350c-43e3-a3e5-c1e945765f6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87aabe44-4809-4bc3-852d-1dd0b57f1a8a",
        "cursor": {
          "ref": "0b8f18c2-bd4f-4ee5-9aed-dd01b1bf9773",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a732be93-92a5-47b3-a880-3aceb6f57156"
        },
        "item": {
          "id": "87aabe44-4809-4bc3-852d-1dd0b57f1a8a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "cc02ac7f-9631-47d8-b1cb-75992f278995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bf28d0b-fa26-4270-8d41-da9a81f3c879",
        "cursor": {
          "ref": "922a8e82-74cf-4a7f-bf60-759a17f2dfa4",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "177bd46a-9a8d-4d71-ab95-e977b5cdaee5"
        },
        "item": {
          "id": "4bf28d0b-fa26-4270-8d41-da9a81f3c879",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "01cbcd4a-baf4-4645-a992-b0d81c1650be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "667c0365-139b-4811-98a3-fae20f1a5e88",
        "cursor": {
          "ref": "517c3438-183a-42d2-88fc-7381a724009b",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "858a87f0-1dd2-4ad2-8a80-4fd0bf4fbd82"
        },
        "item": {
          "id": "667c0365-139b-4811-98a3-fae20f1a5e88",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "293480d8-f8e1-48bf-a76f-75f21ab5e6f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70a774d0-ae0d-457b-a886-fadd8c6aaced",
        "cursor": {
          "ref": "d177038d-4851-4e1d-8724-3d9d5a81a177",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "3c0a9471-c9fa-4be0-aa27-991982512a56"
        },
        "item": {
          "id": "70a774d0-ae0d-457b-a886-fadd8c6aaced",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "a73054b8-6aad-4761-bd5d-314217fd83dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e04ad94-3663-4dc8-b757-8152a43753ad",
        "cursor": {
          "ref": "33f37de6-8573-448b-b4ce-20d9023fe871",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "d9c9a474-a81e-43a0-bd2a-a25adba704eb"
        },
        "item": {
          "id": "8e04ad94-3663-4dc8-b757-8152a43753ad",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "7271daff-f7bd-44a9-801c-9895ffd3615c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ed227d2-03e1-4f35-abbf-01e19bbb41ec",
        "cursor": {
          "ref": "ae290105-0c73-4ca6-ace7-56c220e57cdc",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "870fc2e7-18b2-4d17-a942-d660499f5c48"
        },
        "item": {
          "id": "0ed227d2-03e1-4f35-abbf-01e19bbb41ec",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "011ff7ec-17e3-4c92-9471-5dc8eb0f6d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ec37828-2955-4f66-b32f-3bb2b9f28830",
        "cursor": {
          "ref": "d3e886ac-cd68-416e-93ea-707ec26fc386",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "04fa82a3-08af-4bd5-b6e8-193b4aa45aa1"
        },
        "item": {
          "id": "6ec37828-2955-4f66-b32f-3bb2b9f28830",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "e052ac07-1aa1-4aac-b2ea-e7f716082968",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d41044b-e1bd-404d-9f2c-190ac9f68ad4",
        "cursor": {
          "ref": "e816d3d8-815f-4ffa-bb89-8b5cd7a0e658",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "3101e1fc-709a-49e7-a928-8e9dccd0deff"
        },
        "item": {
          "id": "7d41044b-e1bd-404d-9f2c-190ac9f68ad4",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "0fe3a725-1ef4-4efa-9c7a-e1b2dd31d5fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "020a429d-7d02-4a0a-8572-1531473a7598",
        "cursor": {
          "ref": "93f0e3ce-a491-41ed-8de8-79dfc0c8f070",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "3b5546a5-335d-4388-81fb-72796e9cb0c4"
        },
        "item": {
          "id": "020a429d-7d02-4a0a-8572-1531473a7598",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "0089ba6a-5d3c-4b21-ac77-bce798db775d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f133f7a7-b666-484a-b7d1-4b1a2008720c",
        "cursor": {
          "ref": "5a287dd5-5667-4f5e-aee3-71004dca4727",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "76f900d7-b5d9-4705-803c-a94f6e3822fb"
        },
        "item": {
          "id": "f133f7a7-b666-484a-b7d1-4b1a2008720c",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "376aaac3-9765-439a-8713-6af4ea8fc865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0d52ba3-ede0-469a-8d0c-b533d3392855",
        "cursor": {
          "ref": "44eabac6-6874-4ef3-9b06-615c173abc75",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "0bd6c5d4-349b-4fe7-b26e-0a9994ca0d33"
        },
        "item": {
          "id": "d0d52ba3-ede0-469a-8d0c-b533d3392855",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "046bd225-353c-4f4d-8a1b-f063e051bc6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81fcea47-8e46-4e55-9869-18700419142c",
        "cursor": {
          "ref": "09fa03d0-6824-4fb9-8bee-3517504078c5",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "7c07d36f-8365-4679-8bed-99fdd33ee10c"
        },
        "item": {
          "id": "81fcea47-8e46-4e55-9869-18700419142c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "b7bfe704-b2b0-4620-9520-01b46d86d886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccf3c1dc-0490-4da8-ab2c-151106ae2f47",
        "cursor": {
          "ref": "580ac601-ede2-4b51-a4f0-ca9fe8e8b9ce",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "9aa84677-2bfc-4b3d-b084-e8695c3b3591"
        },
        "item": {
          "id": "ccf3c1dc-0490-4da8-ab2c-151106ae2f47",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "e9d479d9-a651-40f0-8f56-2d5d5ba17c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dfd7e36-69f2-4807-a23a-875fca3ec2d6",
        "cursor": {
          "ref": "f67d2df5-c597-435b-8823-8f18cf1e1b54",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "ca0d16c6-60b8-4c61-b66b-d1f1f6f610ea"
        },
        "item": {
          "id": "6dfd7e36-69f2-4807-a23a-875fca3ec2d6",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "e511e3ba-1ff1-49cc-9f79-c5df3f01732c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7b42dc0-8ed5-4089-9c0c-f9dc820ecb0b",
        "cursor": {
          "ref": "6e95cba2-32d7-476d-ad56-a1b7c49099f6",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "16291927-807e-4cc3-94bd-ad3fc7d41dcb"
        },
        "item": {
          "id": "f7b42dc0-8ed5-4089-9c0c-f9dc820ecb0b",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "a43ebf1e-767e-41ce-a413-8469461b91bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa9e9ccb-934b-4865-b909-dfb5f40b0cda",
        "cursor": {
          "ref": "4c412516-ef79-4cb4-a2d8-2233e90adce8",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "03c35f2a-fb3f-4368-b753-04b0afa4ec9b"
        },
        "item": {
          "id": "fa9e9ccb-934b-4865-b909-dfb5f40b0cda",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "64b2211e-dd78-45bd-921e-246995c416a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a8f309-8f0f-42a6-a4cc-11f87ee5e954",
        "cursor": {
          "ref": "4bab94e8-0b76-4686-8f38-fca06496ef6f",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "830fd939-06de-4afb-bedf-05a2ce741ae8"
        },
        "item": {
          "id": "01a8f309-8f0f-42a6-a4cc-11f87ee5e954",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0a9aeff9-6b68-4d1a-8978-a90c71889b47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0aefaf2-0636-4cb4-b09b-d55c75629a8e",
        "cursor": {
          "ref": "63f03289-297c-455e-aada-da39ef382bdb",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "dcab31fc-0709-4a29-9391-a11510e3a7d8"
        },
        "item": {
          "id": "d0aefaf2-0636-4cb4-b09b-d55c75629a8e",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "f2236da4-197f-4da6-b88e-c152605cb6e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a965069c-c1f2-44e2-bc74-eeb7b1b34fff",
        "cursor": {
          "ref": "7451b899-58ff-4c9a-a22e-734f76009f80",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "ffe6633d-1d35-4147-8097-7b99f57d49a2"
        },
        "item": {
          "id": "a965069c-c1f2-44e2-bc74-eeb7b1b34fff",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "e9bf32da-fa27-4246-bd80-5dcd7419b8f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63f9099b-1925-4cf8-a281-c1c214828987",
        "cursor": {
          "ref": "623e3c3e-9f4d-4c9f-a84b-688a341a881e",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "528d846d-2bbb-4010-838e-ff6695bfac4a"
        },
        "item": {
          "id": "63f9099b-1925-4cf8-a281-c1c214828987",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3e179eb7-3d97-4f97-a8d5-5fa2edccd6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ac20aed-1d6b-4839-a46a-be2d5dffef84",
        "cursor": {
          "ref": "547287c3-1642-48d6-822c-321c93580bb3",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "dd2de3ed-b636-4290-8ae6-17d5d2987c02"
        },
        "item": {
          "id": "2ac20aed-1d6b-4839-a46a-be2d5dffef84",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "f851f765-c2e3-474d-b5c4-2a692c8793dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d9524e-d1f4-4afe-b24a-ef638a1daab5",
        "cursor": {
          "ref": "568bf5f6-5231-4b72-a28b-618766670ae3",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "bcaecae9-5ccc-4b1d-8d67-a2a94f543a58"
        },
        "item": {
          "id": "62d9524e-d1f4-4afe-b24a-ef638a1daab5",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "5a38dcb7-6b26-4ae0-9225-fbdd486798ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "899f6e55-07c0-46b4-8336-7af906b4f04b",
        "cursor": {
          "ref": "ababf86e-aa55-40a2-b00c-7c4b128a046c",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "6f35f96a-79a3-4eef-bbc9-c916d99b4338"
        },
        "item": {
          "id": "899f6e55-07c0-46b4-8336-7af906b4f04b",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "7ac4be8e-4cf8-46d6-99e9-86bedb46b222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a44b7f14-53df-465d-9102-89b241bd6d9d",
        "cursor": {
          "ref": "4774f844-14a8-4870-b17b-321650fb9c5a",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "8b6a11e3-b3d1-4be1-acfd-081092f177ca"
        },
        "item": {
          "id": "a44b7f14-53df-465d-9102-89b241bd6d9d",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "18366b8f-b47f-4ea4-9123-eddff4054c76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6b9d198-c0a1-42c7-8fe9-70e7e4cba1f8",
        "cursor": {
          "ref": "f1e0af00-0f4c-4689-a2bd-9cd2b4ebf793",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "ac896eb8-b1aa-455e-b8e4-2a1192e62565"
        },
        "item": {
          "id": "b6b9d198-c0a1-42c7-8fe9-70e7e4cba1f8",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "50a96fc8-fa51-4e0a-9c31-b2abf3c9def7",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532a9367-fe41-4d47-ba89-a57fe4c1a251",
        "cursor": {
          "ref": "d2fed78b-9bde-4bbc-a4d2-a67e8cebc8a3",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "9e8a7f6f-4b83-4da1-926e-64196e612dd2"
        },
        "item": {
          "id": "532a9367-fe41-4d47-ba89-a57fe4c1a251",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ba92e694-e9c1-4696-9b3c-e4c2d6916c8d",
          "status": "OK",
          "code": 200,
          "responseTime": 162,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "7170e207-cf23-4b58-89f0-d4800c2a7bd9",
        "cursor": {
          "ref": "c8cc2038-ad58-4ac0-bc86-8f4b4757eaac",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "447d0cae-73b6-4a5e-8c06-1b359e90b788"
        },
        "item": {
          "id": "7170e207-cf23-4b58-89f0-d4800c2a7bd9",
          "name": "credentials_verify"
        },
        "response": {
          "id": "3830aeb8-ff57-4dac-b361-0d509aafc2cd",
          "status": "OK",
          "code": 200,
          "responseTime": 146,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed6c1825-bd74-47e9-ad68-d77c5d95f4b4",
        "cursor": {
          "ref": "e0f56072-2c22-4136-b9a2-813de7978b7a",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "1b0ffc11-90a1-4980-b013-d113dc9cef61"
        },
        "item": {
          "id": "ed6c1825-bd74-47e9-ad68-d77c5d95f4b4",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "2889aa79-c184-4c8d-9f99-6ec7cf586fb6",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "258f3d1d-62f4-4132-96bb-01504b07e800",
        "cursor": {
          "ref": "20f4ca7c-6120-41a5-85c5-abc157870bb2",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "01f28cd9-3129-4442-ba90-a3a485ef0f3b"
        },
        "item": {
          "id": "258f3d1d-62f4-4132-96bb-01504b07e800",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f3ddb098-b0e2-42e0-923a-37d85616028c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "258f3d1d-62f4-4132-96bb-01504b07e800",
        "cursor": {
          "ref": "20f4ca7c-6120-41a5-85c5-abc157870bb2",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "01f28cd9-3129-4442-ba90-a3a485ef0f3b"
        },
        "item": {
          "id": "258f3d1d-62f4-4132-96bb-01504b07e800",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "f3ddb098-b0e2-42e0-923a-37d85616028c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c99dbd3a-e0b1-4082-8422-ee4a65dc07f9",
        "cursor": {
          "ref": "b0e899ab-45d9-42a9-a7db-42d130544be4",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "3ecd6026-57d9-40f7-82a2-41805ae861f7"
        },
        "item": {
          "id": "c99dbd3a-e0b1-4082-8422-ee4a65dc07f9",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "5ab5da2c-7972-4920-9b1c-932d5121b731",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 75,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d85fc99-5c5d-4494-ba24-de158a7ef4b9",
        "cursor": {
          "ref": "801582c4-3dbf-447c-923e-2313ea0d0f91",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "ed12efff-7d0e-483f-894c-6f881f295c5a"
        },
        "item": {
          "id": "2d85fc99-5c5d-4494-ba24-de158a7ef4b9",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "703fa6ed-c854-4b76-ba0e-45cb1fb23b7c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}