{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5380cf46-779f-4d99-a26b-e9b3dba5fe54",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4d795bfb-94c8-4a0f-add7-ffe7d828d00c",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fd4831f6-e7f7-484b-8876-19ff2dbdd084",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "17a804ad-4873-471b-a7bb-afe5c4338e01"
                }
              }
            ]
          },
          {
            "id": "c7930ff3-9c44-4dee-9587-9551b8e37647",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f7028856-dbe3-4ee3-91d1-5fcc3183d2d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "93db1817-8f44-49d4-98b0-9f2687f69722"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "00b3baf6-279c-4ff1-a8de-6bf084cb33fd",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c88d3e3b-0dcb-4f52-8437-d7c53d25a951",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c7aad645-7f34-4154-a66b-1921db419371",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "38245dff-057b-4896-95f0-83eb6632c355",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bca8b885-97cc-4455-84e7-6bcf6fe40c8c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3fa0fbb9-c567-4f95-aea3-7314f835be2b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "d394a6ee-49a3-4707-87f6-f05526bd8d65"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "340c814a-d0d8-4adb-9800-2107a74f68ff",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6e811839-5982-49f8-b446-a937a1349f89"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "657848df-d732-423e-98b1-45d1307e517f",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "4e868f1c-9be8-4b49-a36a-77eedb33fd71"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7a52f18a-0322-49b9-9668-8843f6d1264a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "39592259-390a-4e45-8dac-8d660032ce15"
            }
          }
        ]
      },
      {
        "id": "0f968b6d-6a8b-48ea-9075-ffee33a65cf8",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a36a6220-a33a-4890-9f3d-bc62670822cf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8792e43a-306e-4984-8f23-670d3659bc0a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "987d82f4-28de-41f8-baea-ddd0823ec47f",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ab44ac-6dac-49e4-85c2-ac9bb6a040cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "065ea61d-b661-44d1-bbf9-4c9e6d9571fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66031c2a-2126-4fb4-afd1-d9f8f9bead29",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e4f18ed-7210-43e2-94e1-ecd0edc6e134",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f48a2214-a193-4ff7-a852-864200753d8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4c9f41-14c6-4278-b749-2f4dc011e1b3",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aa2e523-3166-40e0-b423-38b86c50d346",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4452e374-17a1-4b5f-98cb-90afa77877b4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3767cd02-21a0-4c5d-89f2-5c7ae1e6d49d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "19365d13-fc14-4b57-81a3-c54d10b86e9d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28b641e8-fa73-476e-b1f4-e2f51b7fb756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "98fadc82-24f2-44db-9e83-201c7dfa4a87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a69666f6-fcc6-4f4b-9bef-16d2db7efccd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f301b45b-87d0-4956-abf7-d96070e279a9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c0e0c585-c356-4f86-8e8e-0b37d20c315b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "fee2e4b4-0e09-4650-a886-5331b61785f6",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "07a17197-ffd9-4096-83ce-f965b829fc2b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "5cfa2e12-ce7a-40e4-8512-acac25d7712a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "112f6fbd-40e3-4527-a54d-d298fa9c61ae",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "8a9688dc-35ba-4af8-9ffc-9a6c009b1b72"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "67e3dde0-379d-4848-99c9-d1b17d26f6a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "784a9ea9-54a2-4470-ab09-a8b2c9102ced"
            }
          }
        ]
      },
      {
        "id": "723032e9-6989-427e-bc0c-a91de617aae1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "83818889-eb68-4902-87ca-1e991f9e5b54",
            "name": "Negative Testing",
            "item": [
              {
                "id": "139eac2c-3c03-46c5-966d-b8e1a637260a",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "1cacb71f-106d-41e4-a179-f6d07ed380bd",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0940d45c-8805-47e8-9bfc-84a8cd6a1763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed3acbb5-4413-4192-9858-1540d196300a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fea180d-56da-4529-9379-8836b0f40d8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "088fb96d-ac0e-417f-94ac-47deaf44fbcb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb20fd2d-cd5c-4871-a8c4-fc9030b685a1",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b943dee-6ba0-469e-b5ee-c282f495e155",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "136af24d-8f69-4c85-b8db-008da32ec2b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58250dd2-197a-412f-bff7-b172d6de833c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f21222f-353e-4c41-b180-9973415bbbd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38edb927-6147-404c-8b1d-47028f9b6bfa",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae76ac8-1805-48a3-ac6a-602e725801b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12770a8e-6f1e-4a71-b6bd-4316c005155a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f723330-d220-427c-9f48-ea9409dcc466",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7b3f2fc9-dbc8-4f82-96a2-5c360da405bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6266f98c-054d-468e-9759-18b7b2b6ec2f",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85cc63c8-ad76-4ad5-84cc-b7191fd03455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2865214b-a9ce-4826-bd7a-ae3dcc173463"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fe67347-2ec3-4bbe-b442-2dd093232947",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6846c00b-b9f6-4ecc-8fe4-4cbae7fbd45c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ab5ad03-1f10-45a1-87f0-cc3ce7985ee3",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c512041-736a-4690-a8fb-eb3a653edf06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f12833f-2354-4cc1-aee2-07c7318f05a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f747a9-2e5b-46e4-9030-d7670ba4577e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4047ad0-cfe9-4091-8741-1c7eb9cdbb40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d01e077e-7637-43de-ac61-9e430d065085",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8756a2e3-1387-421d-b31e-ccee65b21e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc868a20-9d65-4340-ae90-d18e125196ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "000816f6-a88c-4999-b8ff-3acfb215b7b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "df60ac28-204d-4cbb-ae70-47dd1b386872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ec410c4-273c-48a4-949b-046441dcbaee",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fa84524-ddde-46a2-bdd8-f21c745e1a45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f619c6c-a7a0-4881-ac85-423f07507cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "320c0b84-0c05-4361-8026-7ce4c2c6d3ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1d0ae9f8-ceaf-4805-ab58-480c6e7cb1f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8edfe3f6-9e9f-45bc-bd5f-cd32397bf899",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13eb05b6-7727-41f6-b41c-109c82992512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24bb2601-fa55-437a-9bdf-259bb531e766"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1c2c8f4-cd43-4baf-aec9-b910ca093e92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "90fca006-6934-4c2c-8ea6-e8f145c9885c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0dd09b0-5d3e-4b91-af54-a1b5b1bfa46a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a2b43c-b1f7-41bc-be9c-b4a9a715638c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff0dbd13-0799-4317-b2d9-d3c13e8c9e65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b719774-174d-4151-99bf-7473d99da4d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0453b757-de62-460e-84ff-a8a70be515f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d2d85c-d3cc-4d3e-b64b-41816c0e4fcb",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b74f8305-8392-4387-aa2e-ce6d0255414f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4435e81-a94e-4183-b5cc-a76375e0066e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "472c32b2-523e-4b68-8a3f-2989d110015a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a5218c5d-dacf-4b75-a498-f18af03de10c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f11838f6-b652-4f9d-a187-9e3c0f8b738a",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47cd164f-9d88-4488-881a-9fc6bb3b0ce9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbe4a58f-ac54-4ab8-90ad-06c13ee3f29c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088863da-2e7b-4c11-aac0-2cdf8b856daf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "672bb1d0-c701-40fa-8a27-78c913705ab8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35986df6-c680-4af5-8d24-85514ba86606",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc28d2cd-1858-4545-ba9c-b2d28f9916b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17da4d94-d9a6-4a5d-ae13-e18b17a2ffbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25936934-eaac-4995-803c-b1e1c254f299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4d9aa28c-0808-47ea-8fb8-b669161d103b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009ec4cb-061b-4dd2-b5a4-af3fba9837d6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c21df93-4d9e-4633-bce8-43c61262df6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a7d2914-7e91-4fbd-8506-b9b9cc5ab37e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d579364-61bb-4cdc-b39b-4bd0515e30d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "06a42cb4-2fae-4dfb-9be1-546afce9a2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f045a2a9-6748-4b99-870b-f582d67f6647",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f031e706-6b18-4090-8e40-5d134d292ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc44edff-2ccb-433c-8a2a-f85e15456000"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "747c3a45-1970-4eab-8f01-6df3e35b2ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "723bc86e-97ce-46db-913c-4072edbcc468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d39f395-dff9-48d2-9e8b-2c2aa80c5665",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c8533fe-f796-4607-b367-826a1654335d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf4478a-c315-444b-91dd-85fb5ab91009"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f7d1d7b-d236-4fa6-aaf1-bd2032e00252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e60cd44-b2c9-4f12-beb9-46eace6adc5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68256ec8-6987-4e47-8faf-c315c21e244b",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91388ff-b043-4474-a7f4-c39663079248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab46c92f-b4d5-4d9b-ad4c-a88032264617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ffdac74-e62e-4076-8822-cbe3cd1f892f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd59ecfe-51b0-4e14-a781-e2cb53bac858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af83f67-dc7b-4482-b6a5-ba353aebe355",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73c69b3-45f6-4efe-915b-f4f300044eee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6156cb36-836a-48ce-b47f-224144832cab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca6aa2fb-ed4b-4d92-83bc-b591635bef7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec93a738-cb73-4e80-aaca-82335c583059"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5d33da-6c2e-421b-b9e8-bd48ccede955",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3d1cbf-0fee-4038-a9b7-b28fb1140be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5058c63c-8d42-4883-9b04-a01c1717a615"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e854343-df50-4b29-b5c3-81316205adfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "2a6af71a-a2fe-4e37-9899-ada0aedf1f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bb9c35-0663-4b77-b703-81657e1dc16e",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5c5e77a-2807-464f-b36e-1eec511ffbc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdf26f45-6ff9-4cd4-a4b2-903983b842c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "757ebf99-998b-4e18-961c-2779b541b8cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "482a7d9c-d161-4184-ad36-4f59109def97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0583087b-be42-4d7b-b81c-7bc5f851e986",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5189a2d-7c56-493e-9ed2-dbc2632aae7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23fe557a-3d44-4aed-974a-b439f3a83c4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f38007-27d9-43fc-ad49-ec54f28a7240",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "69f2524f-82d9-4e65-b0fe-b3cf8848231e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faa72bd6-2267-405f-a3cd-5fb633426926",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c03e75e-386b-42fa-b3a2-4be7adde312f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef970a3-ef4e-431d-9880-e3b0c69f4cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "438a02dd-bfb3-498c-b31e-fc73246fb49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b47088dd-d43d-4d0c-b340-864ab4328614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24b48bd-3347-4024-8544-86819896e72e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1685d792-db03-4430-8aab-8417030fb307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d152569-d2e5-4d23-8ac4-28836d7679e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "215af631-a462-4d33-b0ad-be9e2380b1f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "155737ac-c1e6-4910-982c-0fbb533da80d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04a3244e-5ed1-4cb8-920d-7c8441dfde25",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5702562-c67e-4ef9-bddf-8ac2477d625d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874947ee-2c84-45c7-83f6-5bb903a3e8f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8312524-e7cb-4cc8-9196-94db8534d604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ca34b4f0-d793-41ba-8933-a894d1fe7e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182b8e2c-417e-406d-a305-a8b703583447",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222d24c2-eb42-4c0a-83be-845426cab5ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea927d0c-8236-4f48-98e3-9cecdad92dd9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "255f92cc-0ea7-4adb-b9ba-6486be23201c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "0dddc0e1-7dd9-43dd-9988-910b5e54931e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9164df6f-d07e-4593-8de2-4ecefc854b40",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e06db01d-a39e-4c8e-b7cf-f1422bc8704a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "874f740b-93fa-43c7-873f-5502258c46ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ef0b5e-c8ee-443a-82c7-59c59a1a6721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "02297364-f2f5-4bc0-a046-f04a6368a9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8017d12e-bc49-44f7-9795-e14cce002262",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c225109-f6c4-43d5-bd41-8573a7d759c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b46607d-2cd6-4db7-8958-e367e5db6625"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "782e99df-15b2-4257-a569-9ace2a6784f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "755c39c5-a0e3-40bb-a8c3-ab910732f373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5476badc-83ed-4b14-91ff-19b57cbe2014",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1442823a-ae6a-4295-b024-fed5c3a638be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21b95810-5236-44d8-8c8d-879c83e31565"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82c023be-adaa-49de-a6d9-fec44564e218",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2bfa4dad-72fc-4db0-bbe8-b66aa90ef706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324f1e22-601c-432e-8b05-0c2a463b0273",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be83f5d-b7d7-4a1f-ace8-4b26b97e3d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d73cf8-8283-4568-96fb-ee0f923b2778"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8083ba84-bfa5-476e-9d2f-97cf54392a84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "07073c22-eb8b-4e26-b350-476ee22a343c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5bb8b0-3e22-4abf-902b-a8aed5809aed",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1796d25-26fe-4e65-98cc-8de9202f7714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "473be31e-c91b-4f76-b124-257ebc363fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7efe22-e968-4316-a90a-db6609e00820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd63a444-ac69-43ac-a7bf-f458854c25dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c225cc1a-1891-4d1d-af5a-a64a288705f7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecfffe85-2159-4c10-8f09-64ef470cd0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1018724d-f121-4177-b86a-c1efafc1b20f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f060e2a0-ba69-47da-9003-eb9e140b6568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e06007d0-1cf3-4eb2-94e5-c3304cd24440"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3702f6e5-9338-4f3c-8fc3-d2953221b851",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70c491bb-028f-43c2-b4c2-7e7270f2a4ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "420b3f44-e5e2-4b6d-b19b-59bb9b03b70b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf057f8c-790c-48d1-975c-3fee01cca08a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1479c58-4030-4de8-8896-488a7e6a18f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec79f3a6-6349-4c9d-a521-f44302732017",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95b546f4-620e-4b14-9727-4ccc3c142388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f30fd5f-a76e-4f6f-ade1-e632606edaef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83036ba0-d5b5-4ad8-bdad-ef64bf0c29f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "467a234a-e20d-4c70-82d9-f991a4a522d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d124e36-d764-4b5f-bac1-3fd2776267f5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc2a6f1d-e2a0-40b9-8e32-cd49d9f018cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b64ff216-74ee-4641-a3fe-069800f2d74e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90aa436-3eba-4a87-a854-3d4763ed9a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e40d77de-dd8f-4fa1-bac1-b0948938e5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "202786fc-e906-44df-9808-8f6d8113f1d4",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3dec3166-e7e1-415b-bb6a-798af5b4283c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52080997-7575-4d02-9abe-fefd375d604e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94eee8e6-62bd-439e-baae-356c900531b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e42da6-a49d-4fc1-9f20-86e17d6a97c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c84328fd-2342-4916-bf0b-3f21262eb6ae",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cd0801-7a20-4216-a46f-c7d941f69816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d17daeab-11c2-4e3e-8d8a-c757a8384a08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1899cb64-36ce-459c-ab63-5be2c07a6559",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "787e6f2f-3735-46a9-b88b-0441fdd78659"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a51499b-cb79-428c-a2f7-d62b289c419d",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdef32e0-37a2-4743-ae55-9015cd6ac06b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1715793b-a0d3-4ebb-802a-cacf6cf46641"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40603122-064c-4c66-a01f-d41d2bf4847a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6524ac-19f9-4ae5-acb5-bcea7503424b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "add21cf7-f094-43af-afe4-4ef72e3a9147",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc13660-e16d-457a-bd2e-5829fee07745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6ec804-ab51-4ab6-93c5-509d78d709fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa08d63-692a-4b53-a207-9b13ea77252f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a686ab66-d895-4679-b389-b64edb76287c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8d436ed-db43-432e-b403-85564813b612",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710c40d3-858f-41ee-aeb0-139887a13607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f830c9c-cb44-4c84-b5bd-001c40434d22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53649798-1861-4287-89bf-6236ffd869e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e81c96da-fd0e-4b5d-ad9f-b91a3289b2cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9971e9dc-e3df-4e79-b645-4f3b0da9195a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "092b6b0b-1cde-49df-b07e-0ea0f121b8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28edf938-644f-4387-998f-d6e13126a066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fec7f355-d58e-4b87-9adb-c3b28de8ace9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9af86e7-3984-4a9b-9557-502292d834e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab2ccfb7-8b45-4850-bfff-9728d1a94680",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2252d2f5-6d10-4425-8b89-01a245b97b74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e3a760f-d1dd-474d-bdad-7e50e3de60a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3572de8f-c9ac-452a-9038-ded6029a7cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c566a6f8-cc5b-4911-b0e7-432b8c5838f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac1f927e-0932-4d56-9417-0b7e1e8a4e65",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a2834c7-108d-4172-a73e-9a9064947992",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5f3d510-867a-4253-a602-cdd13ae0946a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b48b6196-7a52-4f3f-bc42-ffabeaa48663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "1354f50b-cafd-4d36-b135-7ac6ab61d9eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73fbd67-d442-44e3-bfa5-cb8bea56549e",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c383715-1917-460a-996b-fd900d77a0a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96e0ad05-d38b-4e81-8f0f-b155ffc31386"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a55fb8e1-6751-4fcc-843d-d4db31bfb3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "664f5640-eed1-4ba5-8ea1-2c16a66b9291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1731dd88-a135-4f81-a293-a5d3fa827464",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480fc53b-d168-4caa-bba7-015067b63523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b516a017-89f4-403d-986d-a9c86adfe2f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8af30d6c-e6bc-4d12-80fb-037bcd49c61c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4add81-fb5a-4d7c-a3e4-6f4e32c7bfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd5dd9dc-7c60-46b0-9127-9225dd6dcd53",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "998de4ad-5772-4d1b-b023-379f03206902",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672b13c2-9443-477d-9b20-3db222676265"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50c71c53-eafa-4f62-8538-b1e63a0000be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "80f4def0-0988-412f-9a39-98bfaa2d6c13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92a7ad24-8b89-4d88-8001-fd74c614fd4d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74076242-c1e4-4407-9895-c099992a98c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1716e36c-633b-4e5a-8283-8743131dbd9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290004bc-fe85-49b6-a93e-e0713af5a855",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b09e28c2-41f0-40db-aea0-5a4df860cbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75747d5-ff79-47d3-9acb-734b4c3b8170",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a58841-08c0-4b16-a142-7126b7f5c3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccfc20d4-0477-499f-8716-d4b616a32908"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d29d6e-9e36-454a-b307-dfe85c2d2d16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "249024e1-76d2-4768-a5c6-0efacac6c989"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db170d3-7945-4048-bb21-f03c4b0fee9a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeeb5dad-72d4-4e00-a9a7-7f9c40595208",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e351c81-f92f-45c4-a402-4dbf8e4d0603"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "299f4e5f-f251-433a-886c-cac84948f024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b871714-5060-47f0-afc1-974e7634ea01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b37ed7b-980b-4461-a81c-3fa2d05f90c7",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a46f02fb-6ca6-498b-a5ba-ac211b220621",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdde70cc-a628-41fd-aba1-f7a3f1884324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "172a6fd5-26ea-439f-ada1-843b1cce43ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a51fa60d-f833-418e-9361-a9110978c9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f04ee4-d0f7-46e8-8c20-2bc6472b6502",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa906137-b257-46a6-aaa1-4b7bade1a6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac9c3961-9944-4582-be63-edbaf7f7538e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc052c7a-8e6a-4b11-8397-a216259cb53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8875f7dc-3b1f-41ee-8d45-905be52493b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ea4f64-4588-49aa-80d7-6fb4211a3d31",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8db1718-9b32-495b-aff8-30754bfed95c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b7ae8f-2532-4399-bbe6-b7151b336138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f462006-a440-4d49-85fa-7ae100a56464",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "45035ed7-38c1-4dfb-af0e-7a4611718242"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb01027-b127-4bca-a8a3-9abb040698cc",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a466482-af1f-43c3-b735-7fcba5c58dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f68a49-5075-42a9-b316-48033553a58d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95e14cde-3223-4f42-a3b2-aa4690ce5d6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5f698a31-cae4-42d7-ad94-bca2d2494f87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835ea986-7611-429e-b327-3e08766277bb",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d645d270-a3d7-4f6d-8665-934a67973ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f31e3f-1049-4749-9930-c5e4586ecb7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91cb6124-0129-4cda-a6de-70abb08adc3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "5bb48e6c-b3c7-4c99-8a1b-b50cdd0fab2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ee32199-c869-431c-9da0-b6edca435cb9",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b309a5-c4ef-4d3b-a671-df37adc8f377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58203afa-24f1-43ba-a547-adce6188b3f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d8216d-81f1-4838-8460-8cf6305f9cec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74d0f6fb-63f0-4f22-889b-762784e80407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b6b95f1-0bf4-431b-8644-67104755e193",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72029f50-36e9-44db-8c71-a52596bdff33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d89160-9f5f-47f2-9ee8-38d0c90878d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e13b537-ed58-4dbd-a7d5-8ec18df4aac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d2312a0-8d7c-4fa1-ac55-ab98474a4352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41ccfa51-c5de-4cc7-9f32-412c8d8a2609",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0353925-5fd5-47fb-9d8e-aa57497f5c09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693df43f-9e2e-453d-82dd-de449fdb26c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c720d395-18cc-45e8-a4fa-aa7de02bc46d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f5c9e8e-d332-4207-8ec1-6d804ad9c800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfbd9b2b-5be0-4263-a0df-f3e1e2da00b0",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6f3542f-0c41-4b9c-b718-151541b0e67c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9610a4cf-1005-44f5-9baa-65e32d427d45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d70580c-1ae0-49a5-8eb4-49da9777c6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "0b990220-e36b-4685-96ee-616b9ce29d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d475bb5e-442f-499c-bf1e-937be61d3bb7",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "823f2d65-7699-47f1-9fe0-b5b3d63e2330",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afaa0d0-9a32-43f4-a241-5d439d7cd30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34dc350-daa8-41de-9264-f27726dd7bee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "672289c2-ea2c-4f1a-b96d-eb98aacf7507"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5224692e-0010-4b13-9ac4-2d905cde232c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "027d9570-437c-4549-883b-733b4cc189ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "226d68c0-156b-4e78-b520-d248e28be7ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8a1be36-0d97-4df7-848d-66b13c8bfeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a37e6f12-cf07-45df-8cc4-f4a75bb4e181"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e75fbf4-335d-479c-9bb1-473c663330d4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bca6c3f-3b59-48e4-a29a-03af78adb2cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "992855ad-b501-4522-9ab7-ace2a58cc4fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcb1ce43-f14a-48d0-88a4-90b58c0ae701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "55e071cf-dd42-4a45-8476-ef288ecacdef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c497650-0a53-4ec4-9e8b-7c32db2770d3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24226010-3cfb-46d1-ad98-4fa5f99262e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55ce67ef-2a4c-4704-b3ac-08902b20288d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb53c649-4767-4b3a-a4e5-10319889d1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "e86dafb4-1d38-44d0-bcbc-cc619557217b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b8051c5-b80d-485f-b317-dcdb95e1ab56",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b568a6db-6589-4f0e-853f-13c3984eb368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6a42330-1e5a-4371-8277-a0910b7c52d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "028ca800-66e1-4fbf-b83b-73fc90c4bb82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8bcc139-c293-41a3-a884-5f16538fd044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362b9dc4-13a8-48fa-8852-4e16f4d90072",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5ee0f1c-b50e-454a-8230-9aabe308f311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1cc9e2e-4594-4182-9263-29752fd2368f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "becd0ba3-65e3-4f63-b4c0-ec5bc9015d54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "49ab3577-d40e-45eb-8e4a-c9fbf674f6d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e54bf7a-35d7-4054-93e4-5fdcd4e0fdaa",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c08253c4-67f3-444c-9fd0-367617da8568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63909ff6-da4e-45b2-9d0b-c8e8bde85446"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94f44e5e-94ce-4f82-a870-3567f5052dd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "be5cfa4b-abe5-48ae-bc97-765c0b787569"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bac1bf8b-da46-47a2-a2ca-e45b75bf9134",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63354ada-773e-400b-b542-62d2b58bcbc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68a3c5ee-3093-417c-979c-60bcd6cdcf05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cf1a3fc-2b8d-4428-803b-f2a0e0b8c6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4a7f66-5510-4f33-8d2b-0cd57863069a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d92c3c06-47e0-437d-819b-7dc71703bd6c",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abe4524-1d6d-4bbd-a9e0-c23731d26869",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1cc9820-d8e1-4472-96fc-00ff313488d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2803287-e688-46dd-a668-7153b4e17b22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9041eaa6-fc52-4c0a-8d25-0dd12ebe1cf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f01e3366-cc12-4c60-b6f4-c70534076704",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaead5b1-5467-4475-99c8-d4b9fc18c6d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "891a878b-22c9-498b-b35b-a35b744ed46b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92545e4-3fe0-4f1c-ae68-717bb37824cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "aee0966b-fce8-4973-9c4d-4cb7727f9dde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "016c67f5-b1fd-4e4a-a997-b128f4813226",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9af6cb-84ff-424a-9805-60196d8f66de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2aff1c6-7cca-4572-90cc-11371a3a1368"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2de5adbb-fa52-497b-b019-21c2df1740b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "24db8e32-2c3d-41e7-a610-592392eb9614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2466e7c9-4fe8-407a-9ba9-72ff26729be9",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71caed7d-311c-46ce-9c24-7e86eb783581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14b5da19-d6de-410b-91d5-77fc7d8800bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ecc70f-5835-4149-9869-603a0ac30e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "db637c3b-0cf9-4ea8-ad28-3a636388fe8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f148879-d605-43e8-96bc-555cd4a923af",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a950ce-d6da-4b1f-9ac8-f62f2d8a8eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc05d1f6-5512-4286-8a7d-7dd570698338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0d61b7d-f3cd-42dc-b163-ddc71db24cde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b869e195-cada-4bf1-baa5-f47021fdb2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18fabf6-1bde-4f52-90c3-f15318875579",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3120cc16-a1ba-4c71-853a-4f3c4c8bba4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6f40a7-76b4-47c5-901d-e9a8e86b2aeb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d5b4917-a602-4522-b045-6c1f1c7e7772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac2e6d7b-2af4-4d08-8576-b067df827294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8294246-c3f6-40d0-84e3-f316d7bd278c",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8d9bb96-6e16-4bf4-9509-b0355b3db05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b5cd9bd-5962-4e9d-b4b6-5518c581d324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6d4d016-536a-4238-b2c5-d7ee166becd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "666c35c8-aa3d-47ae-afb5-8b7c1789f79b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9512e1-e006-4569-b6d6-03d1d24a9f0b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f0bd2f-8f41-4207-8516-dedae66d4009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a497275-638f-4833-b2ab-d7b238e0859e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "886167fa-aac6-4b55-8dc3-06ce19eb098f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "80878292-efa0-441a-87f0-c62d70a28d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec2287c4-af54-41f9-bb59-5e0e3358fa07",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e74062a-660a-4d93-b336-e8f5cf80bcb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf60058-2ddd-4afb-9461-57f2df605506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1dad1c0c-b284-41d4-a18b-a328c0bb100c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fe3e1d0b-099a-475b-bc34-0843a40b1502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7270cfb-5297-474d-bad8-77751a218bf7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0edd7904-65b8-497b-a18c-e3e88c026a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9196946b-1886-42ca-a33a-b3972a3724e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139d0d33-501b-48da-af00-124f7e6152c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "55c90360-c4d3-40cf-841b-afc34fc12db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23c1d68d-e76b-4e12-8ff4-8a74d58479d4",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39a02458-55d0-4563-bcb3-492182c9f176",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40c8bb9d-a876-49fc-9d1b-63444e8fe88e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34476595-737b-47f1-aea9-1a49c1a5f375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ce71fb16-ab19-4b51-8530-f3681d488b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd6872b-34e1-43be-b351-5c67a186b3cb",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03fd32d0-e710-4f6a-888c-ab0e1368f909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b3a9dd-077b-4430-9fdb-f4334576bb27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48f74fa0-09db-44fb-a5c6-1d8ca2ef74d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae41a6d8-f534-487f-a169-e45ca0061ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3f9ecd3-508b-45a8-b408-e66e28baf2f2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26391ebf-8759-492a-900a-3f930719217d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8f931ae-8dfe-4371-8e45-ee6af328e0a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c54f0c-46d0-4dda-b02a-e86ea10ba4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6894bc95-ca99-4701-976a-c7e1a707c2cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b183c8c-e970-4f0b-aa20-68683a9cc316",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbc00ba-7de1-4491-9f5e-1b307b067963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d9e347-9013-4832-bf38-b655a30f95a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca2527af-2838-4d31-bc79-77ce0596dd0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b46a1d-c8e9-4c19-a867-ce47ca556b0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9dfee61-9960-4b0f-ba23-99c51fe855af",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16221aa0-41d0-47bf-8ba1-9d2105c1ed1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c3aa51-8c57-4848-9703-4c59e971d5af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c8b76de-df19-4640-b000-eb7a42472706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e5dbd6b2-9455-4024-80d5-ce3e5ea322cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "927a43c1-69d6-483a-8665-a3f5f95003b6",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75f5b66c-18f5-4625-83ea-2d571ca2f6fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3291b365-aa77-444f-8966-3274d75bea07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5842462-d094-44e5-88b4-569a0ce24e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dcd5fd19-56bf-4321-80b2-bbfaac1e7e81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e68fa836-e5d5-493a-810d-fd9b9b7cca49",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f542889-0477-41aa-af9e-c96d0984371e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be52ef85-28b5-46ec-b5fe-dd0949bd6be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ce708cc-17a6-4e0f-950c-fbc9e60049df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "f76b9566-1154-4899-a3bf-10c99478a606"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a87bf6b-6755-4eea-a4b7-13788a78ccc0",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b60e06d6-8932-4067-9693-9e0b63ec3386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89b6b217-6900-4337-8db2-812ebbbbac70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c578fd0a-f12d-4aba-a764-57a24276be25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "abbb2bc4-a178-48ef-9475-db983307961a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48dbb9a1-4e35-4005-b956-166428531fdb",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c7e9abe-3b91-4f3b-9ee1-fba52b7ade91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06038dd0-56ee-4c07-9b0e-e960e27befe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c3dabf9-2385-49ca-9340-6a9db1ba392b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fecc4f58-03ee-4ad7-a62a-3869f941c555"
                        }
                      }
                    ]
                  },
                  {
                    "id": "301a5af3-3643-45ef-8f61-8d9b83fe97ef",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdaa497f-3406-4acc-a126-055bd5d6d223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ef1a0cb-0839-452a-b033-f55667114338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a95df77-563f-4ffb-b632-2a75c8331f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2389f8f6-eeff-458f-a38a-3bfc153a24aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00619306-c479-414b-8700-aa13b8e16870",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b23ccb-282a-4087-899a-1e99c621c160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26be44b5-d4cb-4026-be16-0f86bb361c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fea615-69c7-4a8f-bdf9-029920affed8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d0a639b5-8d81-425f-b608-125f5a8f6361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba06ab80-6568-4458-86e1-55d1df120a5b",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f3d9970-6332-4a08-bd7b-fac71f27cb40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9af2f6-3f72-486d-89c6-8ec2a9302d00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af56dc74-c5aa-44b9-9c44-15c347102991",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ad676a7-7c73-40ee-8e47-71b75900f2b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dda05b0-9e9f-4277-a2b8-566e6535a066",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c35eaaac-4a06-4078-93f5-1dc59f4afa7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93e5cbe2-2078-4dd3-b041-eb0af8ca7969"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0a054d7-4d6c-46d4-bdd0-a71cc878acaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "86ec11c3-4094-4fa8-bd59-5480b1c18845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "924975f3-ed31-4e05-bfb0-0dd51594d023",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfc7f35f-f3e4-49a8-aee9-1344f6a37d21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f9635ed-582a-4d38-864d-ccb6c44d8181"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d21c24c-5596-4583-b144-39232345eb2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "3204bfa3-cee0-4821-b6e8-40b39e24bd11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df430fa-c5aa-4431-8027-92ab0704ab22",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b81e990c-021d-4fbd-8ae1-b1ccfec954ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27f11157-ba10-4947-8ee2-f89c685f41fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1da92def-a21d-4116-a6a0-699af09cda35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "2036d858-a681-434d-918a-af11e813c37b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae57344-b6fe-496f-b487-04771d9b8409",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eff32070-1e0a-435f-8ee1-da383c91d859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d67e920-923c-454b-b6a4-6d533de93cc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9ddedbc-daa7-40ec-847b-ece89221d735",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "69c817aa-dd87-4247-b2b3-b60bc22cb48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8bde77c-938e-49a4-9856-13add32ea456",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaaa8d31-a06b-4b69-9239-0cde8d5752f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "715911be-9167-4c12-b8ba-be84aabba899"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbb1d30-caa7-41ff-a728-c65993d41962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "96df6976-ce03-49fd-99f5-89b7dcae5892"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f962b84c-76d1-4674-aa34-67d3e79f1b7f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54dbbf2c-0100-4693-afa0-cf5a87ff77d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "476e6fa5-edad-4ff7-984e-60b319aa22e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ef6c575-5eb3-4798-bf65-7e411690dede",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba85590-43da-48f9-908c-bb00ec300d44"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "65d5999a-9546-4358-8154-e954e88c9fbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23ab16ef-28f4-42bd-a37b-3359c765309e",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "34099a27-5fbb-4e66-807d-be4046db2c5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5317d399-7193-451c-a5af-ea6647c2f629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b73578d-eb26-4e15-ae85-002ab39d591b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f736f95c-47cb-4db3-86a3-b16e2cee53f0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "18501549-11c0-464f-a4ef-1748418c59eb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3cf5d2e-e5ec-40d0-9e4e-fc100ad8f661"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bea381b0-b289-4333-b277-44b6cae1d20f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ef586f47-a0c8-435c-a771-be787270a320"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6a8c88cf-bb7d-4122-9c60-f4b10b039db3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1f1f2896-340e-44b7-92cb-cbbaab809a60"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "05d4e74a-bf44-4146-99d0-e56a1e6cf9f8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c2dae50a-94b1-4048-bad4-8d289a7720de"
                }
              }
            ]
          },
          {
            "id": "1faecb44-fbd3-4b79-b16b-74cbaf561769",
            "name": "Positive Testing",
            "item": [
              {
                "id": "4bcad8af-724c-461e-bc22-91b9b2ee8e84",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "624f510b-1749-4808-9393-8c05d7e84ee1",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d7faa9e-0ad2-4c12-b7fe-cc4bd0e0689f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "268abf7c-407c-46d4-a80f-34850b4cece1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe792b6-104b-465c-afd8-8374b2df5864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dffa7fa1-9e49-4a69-9fcf-016f12627876"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "fe3c38b7-9cfe-4f2d-9901-d1c84f2c8c20",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a73be42d-a8ae-4d0b-8c1d-b6f74b1eb7ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7690b3a7-a0ad-457d-8bb3-e5d10ed44a18"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "75a78216-75f6-4ce3-b21c-08c09f10f016",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "03d6acdd-9bb5-4581-bfd6-1f50aadd2d9b"
                    }
                  }
                ]
              },
              {
                "id": "72c4a1f6-177d-4ee2-9501-a2a04941ad07",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4a0ec6db-4ead-4e21-82cf-db55a7242da5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1235befc-85dc-46d5-a289-07d0786148a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "02f2b984-9088-40f0-bedc-738b04cdc02f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "13c22b90-cb67-4cd4-9c03-851ddc4e1c30"
                    }
                  }
                ]
              },
              {
                "id": "78d2ec90-8853-49af-86df-02dd199c56a5",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2da85ccf-f719-46fc-ba18-46ee1ad53464",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9895553-2063-41f2-a2c3-3abf343b2608"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5018fc15-cabe-4592-846d-356d07a52556",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "632ffd6d-3516-496b-be75-bba4588551db"
                    }
                  }
                ]
              },
              {
                "id": "d8e471cf-56c3-4e60-9504-e85f9e7d65ee",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04f4e5d9-d2bb-4474-9593-df1064b92155",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0bd1a735-9e04-4dd5-b786-8e257d034756"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c7507816-51fd-41bd-be0d-2dd9be1587f3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "38808223-e6be-480e-b30c-3ad6dc7d6510"
                    }
                  }
                ]
              },
              {
                "id": "98f3aa07-c566-41dd-806f-12ec7791fbb2",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "002c5524-0582-456d-a45e-3a3cb2297517",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5790909-44af-4dee-b129-b3b24e2d3465"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f3bf859d-9d8f-4cd7-b307-4c3289dd29be",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "69e89944-eb12-498f-a5bf-455bdce24432"
                    }
                  }
                ]
              },
              {
                "id": "ec4f6f3a-b302-4c14-9d83-a87787886510",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bf239ba3-c3ef-40ed-bdbb-8c963354c582",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "aaa52e23-fb41-49df-9eec-db79d206a252"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "68d35945-1ecc-43d2-9945-2affce5409dd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "bd533c9c-582f-408e-a7a3-c16e93e17535"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "25d6263a-ff8c-4ead-8049-670879ca6b2d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "453bd315-beac-490f-8ef6-1159f80d7a51"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f4f4f87a-56ff-466b-a256-0ed53975ecad",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f951328b-2ec3-4953-a0f1-791eceab7410"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2473e06d-a9c6-4231-8f4d-84c929a4fbef",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "4a4aebe8-c6fb-4933-87e1-0f9242a0f8cb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ffbcbb6-2fc8-44bb-9214-cc9614a7977c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "90f2086b-3da7-4622-bcaa-c0c0a118faf7"
            }
          }
        ]
      },
      {
        "id": "2bfed4b2-f85e-4574-8604-152e80a2e487",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "27d18bf3-e14a-4b97-ae0b-a26d72593b97",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c23b604a-9a6c-4140-b6d0-1b379fff496f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9e8af8cc-48a2-4d18-8dde-b11a6503b233",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52952e28-9b8d-4b93-ae51-f32d8d020f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "586400af-72e1-4130-8284-182a6a88db03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e94104b-3da3-408d-ba68-e5d8c88a2693",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7a45af2-575e-4c62-ac81-cfb6016cc165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81672332-96d5-439b-b8d5-fe8a89b18df9",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "974c78e7-28dc-428f-ab28-64df04f23055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f12e109-8ef9-4ce2-a3e8-df4f4bc9bf5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b9846d6-7ad5-453e-80d2-a3984bbbdafc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "01e4b65d-a473-4bcf-913f-94d4134e6538"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3943dc19-df84-4b45-a96c-af966d719f83",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87fa2b6d-795f-471a-a0f8-5580f1f6cb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9fdbbbed-aa33-4f34-86d6-f67b44d77716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248469b9-da61-4224-aebe-44bab380e484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f60c80fa-ebac-4c6d-a2d4-0a4416afdc0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63402e3b-75ff-447d-9682-ca514931a9bb",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "983217b6-8a20-4c85-a86a-9cac80300c45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21a422c6-fb61-4896-a81f-9bd40235a8b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7a1209-c5f7-4157-9611-cf293a1a146a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "415c62aa-e459-40d2-8985-8114e769c956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a66d18b6-47ac-4ab3-8762-860d48930ad6",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "add36e03-8ceb-415c-b204-8a5427268ba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e45ebe39-7f61-46f8-bdb6-425810d8dfe5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8cd01cd-45b0-4ab8-8942-77294512f979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc071c21-1934-488f-8385-f0df4cf05abc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936aa995-322a-422d-8ce5-31983e779753",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0ac1435-c527-471b-b61b-1a722dfa000b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d79101d4-6cf2-4191-b137-be1d8342f71f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c05e7ab-067e-488c-9465-a29edfde6295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ea1c24d-4037-4b7c-9e6a-b7ed111b6fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d036a767-c714-45a8-80cb-37564c708d8c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a4b9a56-08e4-4e98-9337-3d25ff4328dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e694c3b2-e666-4f81-af44-24fc604f0e40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8be745d-5edd-4462-a86c-5cf16761fd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ae36ffeb-1111-4074-ba4c-322d4dc90967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1047e3b-e20c-4e9c-b50e-b307d60db97b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2440baa8-c133-4276-ba1c-ed19959050a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214e063e-0dfe-4a77-9aa3-fcc439ce423e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bb5c2d7-d5c2-49b7-8dd2-61915bf53db7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc7e436-eb50-4d69-853e-07a45ca071cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e35fb80-9f1e-4749-91a1-e16889bb536c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05fa52fb-dacb-402a-ad2d-1f82b9464695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6728cd42-b97f-4609-a052-ca2bfdc1e9c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7826412-6cad-415d-a151-315238d708de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8dbd1b72-5c47-447e-bd1f-e9ec5181bc08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e577f476-79d1-4d66-b4d1-f7f521490100",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11c496d9-df02-4b64-8df1-8591b2b2d9ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62823b47-1809-4343-a116-30ce5e4d33bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b00af5ec-f449-4766-86eb-308e723cf6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4639806-6275-457e-9efa-c023d21b5732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a7b832-f88d-4f3f-837c-9139280609e7",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c813c498-be61-4894-871b-6b093ca37d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f08dd53e-88f0-457a-925b-e56bc5c3be89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95a4a466-eeb0-4ce4-bdbf-0e92b8825376",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "8cf8db6d-d712-43cc-a411-8eacc48303ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "438ebe94-c957-4e5a-96ca-78b50fa75fce",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b32ab764-3316-4b2d-87fb-313d5b023ee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6608b18-99e5-4908-9097-987a12de3397"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c2d222-00fb-43bd-bc01-9fa2c549c18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "71cc88bd-3fe5-45ef-a709-1e401f466e79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11254737-3ced-441d-babf-2e35727bc2ba",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb8b76b-d4d6-49da-b393-8bbe2fc75ba0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79c7f18-a650-4601-a5df-bd7158d0a416"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bec2a309-5877-4b03-adb8-3da912333f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a22d0810-869c-44d1-a0b3-0811606a2e5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b465fa6d-37b6-4774-b9e8-42bab4b30239",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23b91813-00aa-42f6-9f60-ef716c6a242b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4e20a3-db2d-4b9d-b556-eb06faed6075"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1141e18b-4ec4-49c6-a86f-5bb2e6d0ef1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a2a8775-bad8-4609-aa52-cfaa0bd0b6b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a74ccf62-80db-49cd-af8b-31bf2cf4da33",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ace8533-3e48-4c41-a48c-9c3256f2bc1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "589afc32-3213-4623-9bb7-b564f6d3f493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "562331c9-0148-4605-a882-fc25402b278e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "64f5cd1a-d80f-48bf-8c61-d2de0fa4bc44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00e4cdd9-2f4b-40b2-89c1-afc82bbb98a5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0225a4a0-0508-4a9a-ba95-4e0e6ac52f3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fec284c2-7e87-435b-a01f-ba651212d1b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40a8a5a1-4c9e-4d00-9123-39d31af424aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6b88490-5507-4222-b8b2-810db7d7155e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3e0dd8-b562-4202-aa21-9c18ad6394d8",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "973d2a09-4f35-465c-ae5c-ab83cb15aeeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57425878-8fa9-4c4e-8a0d-0b3c40f23175"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d84d2eba-be64-4888-a5a9-fe5f485c08f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "25d5df53-2bac-4a2a-b673-3fc6d89f5faa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9016ac8-5f06-4a1e-bca9-a904bfb9559c",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad338fff-74ba-44fa-aa43-c16cbb88a548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dd4155fa-a703-433a-a102-a1b9a4c98d30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fa082c6-55ec-45b8-89d5-e692fb11119e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6038db20-64fb-45fe-9369-ca945a7569fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efae6b15-e205-4905-acaa-50e78314f5ad",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ab50bb-ef45-46f8-b2ae-ed48e99b74aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d677b50-37d0-4895-8ffe-ee194f873973"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0785789b-b25c-4436-a70d-d5e94f4e8597",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eac76ac1-a94b-471c-8890-56792d232c01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc3dd5cd-a9d2-48bb-8b91-9f388052886b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6806789f-4d52-4707-a144-af58c3246743",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4128eb41-86e1-41d3-909b-feca93d41bbc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d08822-095c-4127-a220-093b898629e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a326229-3947-4630-bb35-1984f4302176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7032af-ba67-442f-8050-f9475afa90d2",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e1f82a-b2d2-4df9-82df-95df3cd4368c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7500ded7-0ba8-41b9-ab83-6c0a7e7b2b6f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae083a8b-a6d9-4550-9f84-74b8a83b1c96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "483e4ad3-093e-4835-900d-51ff204b17fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f547f1a-3380-4586-8947-529a722f5ef3",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0af0dc72-1b57-4985-bb35-8ac6f7a2e23e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c9857e7-1507-4dea-b679-bb664fc881d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8771263-dac1-4a54-ad45-d233524f8c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c346b22-db5e-48c0-9199-924f4d69c01f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "092edd3f-9a9c-4304-941c-d38cf68fdddd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30438ad-2b5b-48d4-a2ab-b9db06ae37ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e73ad69-17e4-46d2-b788-13edce90f555"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c776501-2eaa-4953-9b4c-909ec06570bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33603d40-3f2e-4a81-81e3-83af943a6615"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e81456f8-c964-4315-9b89-47a1880fad87",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb518154-4f18-4df2-b1ed-1938f82f746c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6bc81b3-c2ad-40f1-8f42-806740d7ff57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdfe61a0-f1a5-4973-a2f5-10d96a9b5115",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c286087-8297-4bbb-9c20-124a158a6466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd382328-fced-4563-a067-4d12073a8933",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21cbeef-45ff-4f9c-9054-c72e3dd69a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "661ec062-01c3-4434-9b6f-2883751db1b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6886e0c-f967-423e-a032-86ccee68f1c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f5571c0-8f34-4ec8-82d4-88109d195c91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ad3de87-bfa1-457b-9acf-d9bdce4534e5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c2a523-8368-4888-b85a-5d47e3dd3f68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b0abbef-f7c9-4f15-b153-1029be8cd88b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec771c4e-b881-41b5-a698-4f1be73f73fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a7f71d1-8c14-4a84-b92e-ed68007165b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a406428c-cc4c-4e51-85fd-9190058a2499",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80c2665-ea16-4dea-aff0-c621dcea666b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d18b7b-56c2-4b81-b098-dee3ad269c67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89177d8a-c527-4def-a41d-82ffeecc8fd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc4981e2-ea2f-420a-8755-4e5c7fb564ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cfd2acd-3e2f-491e-b637-782cdd26eec5",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e94f09a-fcf9-4146-97d1-5a8071e92c66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "839dc24b-c7b1-4dfd-889b-92d6a2942547"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b82db954-e1a6-4fc8-9935-92f27f3be9ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc71fe0b-7948-4ad9-9376-e550f2f89cd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bff40702-5d36-40fa-b31f-ed737185301f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc06a85a-0a61-47bf-a7fc-8937b29e8a67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d928fb4a-ecbf-418a-9dd1-0b006f399d3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba8d2d6a-0f36-4ee8-b3ba-912c1affcb23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6976190-f027-4e00-b37e-4540505922bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69381c2d-b1e7-4cef-8e11-1276047d509c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba476b62-32b8-432e-88b9-4ddbe99d666e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "07f8c17e-d096-40b8-acb8-73eae51d5dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26e66295-c6b6-466d-a20e-f248320fec7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ead6576-28b5-4058-9eb3-087a25dab6e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8138950d-3c00-4899-867b-c960f27782a6",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "529af2a4-8668-4053-93cb-b48397a9d768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51fefe5a-0052-4b35-9395-5c1ccd113c11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe920ec-131d-4a84-b148-906abfdd56bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "30230c55-1eaf-4793-8605-63c5e2b51bf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a396f4b7-9246-4d3d-b263-b925a158fa84",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1cd8ded-33db-464c-be29-f859d53dfcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ef08c0d-530a-48c0-b9e3-8b8c5eb21ddb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2322fa21-cb9e-4ae3-b132-fba2ae63ec2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99a420eb-d813-4108-a73d-94f97e68218b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c803780-6866-4b34-bb80-11ed0cde024a",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bc8a7b9-6c40-44ad-9cd1-69dba8c49474",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d67ace0-791c-44dd-ab82-7cea7b1b2683"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83f24717-def6-41f3-9b1e-4ea6eb9ba29f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "805f87e0-d8de-4d6b-b865-1a96df639bb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "345cd462-445d-40bb-a2f4-f79e8848b39e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73dcd38-63db-4c70-90b4-d91798e09a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2ae46c-ecd5-45cb-b981-dd14a71ddbf5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db3bae62-2581-4848-89ff-32256dd2ca85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0483e7a4-9601-472b-9b78-186726e54e2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d3035c1-66d4-46e7-8c85-b7c5cd9dcf35",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "710e20f9-8d10-4bcc-833b-9d7ceccb89a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6e847f3-ebbb-46f0-866a-22501c402c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2dc05a0-a534-4934-84c0-cb1ab355985c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bcdf6b2-59b3-4643-8cf1-30b15315b31c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88e17ba6-728c-4a4a-bf0d-8946426b274f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f13b291-b756-4fda-bdf1-88d32d47fff4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a048c528-86a0-4994-8169-9772ef2a627c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f86fb3b4-4583-4600-93c0-a18a4a9410a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fe61a4e-e579-4371-acb6-0e036ba4d561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de427ec0-1c85-48e6-93c8-0c1343730931",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92400350-d47a-4629-8781-303b80749764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d14709e-2c1f-44b0-a6ce-3b1a29f43820"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cf36c44-a293-4a81-800e-fb0239fcbc2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "eba9adc0-76dc-4c0d-88fa-7686b4afac79"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c445fc8c-681a-4d35-bc72-ba8406886d22",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bd1ac9c9-3180-4216-94f5-214148d16f3b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69c047c-cb2b-433e-af80-280f614cf926",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "755221a2-6443-413e-b222-33463c0ac9c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "057a58b8-633b-4772-89ae-1d43cffeb922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7644f686-3af2-4f4b-a967-29c7954bc3e7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7b1bd42f-e2e4-4d0b-82d6-e7794f64f7fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d7c3758f-e150-425f-a11e-c93001434e59"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5400413e-6bf7-4e8f-9df5-e38a2c7b8ede",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce791c10-e607-4db6-8cc9-7937f4e9de59"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be36ae53-6cc0-4b73-92f0-5e67d18d8ab6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4d39cacf-ceac-459a-a8b0-7c127e53f274"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc5dddb2-968c-43dc-ac3d-7201d44b6cc9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30fe3779-9157-4558-a984-048df5990368"
            }
          }
        ]
      },
      {
        "id": "c27a747d-b755-40ba-9f9c-c92ea975c313",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "9828b12f-16df-4c21-99da-a42e6516441e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "196451a2-bb2a-4685-aaf4-d80de6e7bb4f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f9841530-51cc-4959-b0ac-bed402c5863d",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd576b1-e9ef-4f19-a990-b85617e2727e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1195a4a2-4403-41b5-b020-d517b41ece36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d825e6cd-0ca9-4500-a3ec-d3bd9b024e9c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6172838b-f600-4b30-9162-4b3dc4bb0ce6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b984d8cc-83bb-40b2-90fa-c5abfed6f775"
                        }
                      }
                    ]
                  },
                  {
                    "id": "126804f5-962c-4fae-afcb-f4b000f0e0c9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3088d4-51c9-4baa-a4ed-62192ee947ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c73aeacd-a7a1-4d43-b490-3ba31b767c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f5020e0-af19-4498-b6db-ec752f4d7f83",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90e76acb-ede1-48ff-a36e-cb7171836803",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "700a8440-554d-46ca-bd7b-79f8647cd805"
                        }
                      }
                    ]
                  },
                  {
                    "id": "252b07ff-cdcc-4f4f-87c0-b31fde869849",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cb34dd-61ed-497e-b9e3-2bca7071adeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24135e1-6446-4175-b60f-3faebf9d13f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ee5a8e5-4868-4c4d-bc79-2a81feb41afb",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d6062c1-72c0-4c2e-869d-8ae6ae394242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c460e2-6e93-4192-a7e5-d48bbfe86f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26092562-3d2d-4587-aa17-485dd3c81abb",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c966c849-6cf7-4b8d-9bb3-20cf6aef0451",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83a34c25-2b29-43c6-9566-5ae6dcbdccdd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59abe6f2-036c-42c2-80ef-717045c64154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6940b71-f26b-46f2-a89f-755ad39c49e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4d51c0b-b04a-4be4-aae9-c3e63701598f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c986366d-bb77-42bb-9781-8cfdd6d40591",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2dec1d53-04f0-4516-bfbf-8ba51348835c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c783776d-6581-4561-8b84-ca3439190f1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b48d7d-2879-481d-853b-93b544c716b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7a550eb-ebb4-4581-b5f1-b054130537ec",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e417e8-d641-45ee-b6a7-4b3ed74eca78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12ad612f-1e85-4695-b723-9f55a4957fe2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc810c9a-99aa-4ffa-87ab-4e46c5fa076c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02d37cb7-79df-4b54-9a8d-e230809a1762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8450b061-9c25-4f27-a5d2-f5db4342266d",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4739a3d3-2bf5-4122-bca0-f3727c7db592",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "676671d3-b737-4ca3-8b65-e8c11f6ca54b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "47f31681-ed32-4324-8091-f6008b8b7586",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04dfd0b8-2aaa-4103-93f8-7e9550d198c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87389447-9583-4cf3-a1ab-727ebb84fb8e",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4a0f0d-9d15-47d5-96e9-3188f12f9bce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b81c4ec3-0503-471d-8ce2-11a346bd69e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e67fc2d-86d1-4e7f-88e6-f45a6d5df875",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1525043f-ec23-431f-98f0-0e65fca9187c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a65136f-083e-4500-a0e9-071cd9984f9f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b81e23b-189a-4f17-8160-011af5f769e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d73ea121-16e5-4139-a450-94f9d3e890f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e2c8ac-9b54-4db5-aa9e-579ebc951aa2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "943786e4-638d-4182-8611-0760934a8aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "297ac158-b83a-43f1-9e21-2d3da147eb5f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49574deb-f8c3-482b-a64e-ab9739faf0a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12731d01-87d4-4b6c-b953-8fade2c89d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fb0b2ed-d653-4e2c-abfd-fbbc9abe86a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "416ce9fb-521d-4a65-9285-13fd7c069ae2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05eb271d-0f24-4e80-8203-def6a3b60878",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74d1698-f412-4c58-9963-1a6c1a52fe8d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "451dd7e0-089b-4864-b2da-37c04dacdbec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b615ebdc-cde3-48ac-8e42-50f5328ade07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d08414e-50f8-4fa5-bf0e-520fa7ffcf9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6957119e-9149-4cd1-bcc8-3890c826106e",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4411a8f2-1869-49fa-bdd9-915c2374f0f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "876ff848-4bc7-4c6c-a209-091732c695cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e53d25-b369-45df-bfce-4a8891f4e1b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cefb8e7-f553-4042-aed1-1d00c371930e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eecc9bdd-af45-4af2-a1b8-de9dd4d7ea10",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe1b8e9-64f9-46af-bb62-671a74007ada",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02a16515-55b9-4038-8628-707377b520f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bd644bb-b788-4a44-8118-036e8b4b3c20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacf8f04-d776-49eb-9edb-51d33acedc61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee9e3b1d-3169-4ae7-81c0-12f460c3b213",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0824cc5-6de4-4405-a60b-dc7c7be0d611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "436fcaee-1eb3-485b-a284-2ff12ed6ce3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88289d9d-9aad-4b7a-a4bf-a9049de1386f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46dcdb10-acca-477e-a3ea-8a5799551432"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2a8e53a-ef9a-45ae-ac98-e2529595aac2",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30ebb656-5a3f-4bd3-9a6c-61577488dc62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a55f83d2-3bc3-4575-915b-70e09c079ad9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c6639ae-b12f-433f-9e01-6dac78fab7ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a29b5a76-b794-4d83-b3f9-b45b064d6400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36dbe03f-5fa1-4181-b974-eb4050e8d026",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96254772-e897-4706-ba11-d9b600b416ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e86e247-4cc8-4e9b-b073-ac5918e4a2e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0f60617-f9ca-4479-9630-d1f33a633053",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "538075db-fb59-4d72-827f-02b2ddc994c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7d4e566-8fc6-44af-9b04-5bde74126f75",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c55c82ba-e5d9-4b79-a669-978a11eb8f2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ab8317a-4b7c-4483-a60a-b521a6d247c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d876136d-d38b-424a-a998-24550c11c08f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bbdc37e-a057-4478-a231-80c6f57c218c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9de3aa8-8283-41c0-991f-f2fcf43d9e9a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c57c010-549d-459d-83ad-b95f9f15fd38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16bdea09-def2-4f7e-990d-19557727b12b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d6a80a8-e3bf-4eed-b35b-da12f6fef034",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf88bbd-9ad9-4faa-abbc-4062afc669f0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d196eedf-32d9-4feb-ad00-17b018b6e09f",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aea0f38-49f4-41fe-ac8d-03e589acae72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0d93f7e-9264-4777-87ac-b7f1a52b48e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df5b4dc1-750a-4f78-9346-6b9057db14b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb74419b-d502-4e42-908f-fa5835b049ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee3217d3-4a10-4c03-9dcf-c8277aa1264c",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9181e913-a553-48ba-bbd1-316ffcdb294e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b06f329-83a6-4c20-b65a-e479b697c7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb46972e-1a52-45d8-967e-1e41f14367d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e804431-8c49-459b-b42e-84390d47d646"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56881d68-4fb6-48a2-b979-77462be60704",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df70a75b-cfa8-4668-a6a2-81a4ec7e1de5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76bb64e1-04fa-4de4-839a-083b546ceb66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "306f4e7c-9bd9-4a25-909a-af9e502ec24b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682a0288-a612-4019-bdbb-cb12025ac827"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c9400e8-19c0-4343-b45b-24283b72d857",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a129ccb2-a007-416f-ba7d-c23eaea0633b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "411fd438-3b3f-4c35-86be-558c225e9b4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89578c8a-11d6-414e-99b2-102606df9aef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5854a123-6cbc-4f15-9c25-81c1b801c766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e67bc70-7148-45ee-a3e0-6914e3cfd1c5",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f64d0dbb-aa1d-4f1f-a7ee-897811eab9be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1966f710-8dd7-4eb7-8255-1cf9a603d624"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dca78334-b7e5-491e-a124-4d8018995764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c64f0ff5-fd13-4f2c-924c-a353908574d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be9c2632-d45e-400a-b8cd-e21b2fa29542",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c145492-6c4a-48fe-8479-8ca3c02b0864",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "46a78dbf-5438-44cc-bc93-92a2d7acce05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6cfda791-b026-4bda-9daf-94a10d5a0042",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25a972b3-95f4-4aed-8bde-61e939b12fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67eb8117-df78-48cf-ad64-571e59efbe91",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c411404-9ad3-489f-9188-f0b9ad818665",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c56b568d-dd54-4225-93b2-4c150b8706bc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18910329-9065-4c85-b796-3022b848b1d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206d180a-6ea5-4343-bc1d-19a1ee1e25b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a3bd7e0-b7f6-4825-afc5-81de5f26f3ae",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4af69917-5cdd-485c-861d-44573cc99df3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "72b2d8db-9125-4c6e-b85b-373ca0827332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9a44cd-0712-453a-8107-273ef0aa7f0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a113c4-c73f-4f0f-9535-08e1b16dd018"
                        }
                      }
                    ]
                  },
                  {
                    "id": "498b8743-89e6-411d-b247-75f272e8644f",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f5c8dc8-7494-40a7-b921-c28f035001b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ad436ce0-7149-47a2-a6a8-48ea25ec5e7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "222272a8-a494-4653-b024-d98813f60f88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1296882-abe3-44ae-8ec5-89bf28f17828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29425064-16c1-4264-8034-930fd575b3bb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b18ebb3-6580-4039-931b-896366dd2f23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "21d8ef50-e505-4e1d-8152-77a30188f72c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2b1cb1b-3e6e-448e-bb7f-30c2986978c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bfa2aea-eb29-46ae-960a-60cf08eeefe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d09b8e-ce03-4db4-8033-a50b5389cf07",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f18344dd-5548-4a61-a4a9-722994ef48b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13f2c836-fad3-48af-9e12-e5056c18038c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812b67bc-a8f0-4317-acac-609520386d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6128c9fc-986e-466a-9651-77f02348a886"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4228f1dc-a515-40d9-8fce-fa27d291aed5",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb9de189-c759-421a-b41b-2a253b31751b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "193c5b84-b619-4b08-9132-976417504637"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e870dbdb-ae8c-4e4a-8b55-c7908e4ffcd0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcd29ee0-8b2e-4c90-8ba0-894c6fe46ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ad0d3d-024a-4ef8-ad52-bc4bfbdcab81",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69731dd3-c429-42a8-92ee-dc443be8107c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2c32b760-f6a3-4c7c-8d0d-970e71de6788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05463d2e-f929-431b-b56c-247ef9d67aeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "beb4db65-fd73-48a5-bbce-f7512cff9c37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8a7629b-6801-4d59-b2ab-a97649a2c40b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd784ab3-86f3-42c2-abf3-c077d437185d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707306f1-6539-4633-81f3-9a95e5b6901d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5fa70f9-fd55-40be-915d-bc4633a5db94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929345c9-4703-4918-a945-dc303c9408b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4788266a-08c1-447b-90b0-3bb9772d9e17",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b19a28-5fac-4191-a85f-416e0f6eff6a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22873f22-8007-456d-9cac-d770661df0cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ccd73e9-1e99-43bb-936d-c2fb931bf666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "514869a7-f05b-4ce6-8bf4-6e5d21cc4ead"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3144752-79e3-4e1e-a0e2-de1b7f32b061",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5029c9f-62d3-4c07-b071-95baa11fa074",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "532c07a0-ffc7-4dca-a393-dc41a7b2b5d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d69eea49-7d4d-4fce-9ac5-d00442f090d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a49daa0-889b-4aa4-ba3a-ad8a94d2a4d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2ed4f9a-445c-406d-808f-83b9a854ddaf",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98f7bbd0-c4c1-4868-b3f9-934a88cc2152",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94966c13-7dc1-4046-bc89-ec203d09f1bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9267b847-866e-4f18-9213-0574ca7f4e8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "308ecee4-611b-4479-a725-2e80e56efeb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8aace75b-0eac-49c2-8448-5f0306cae068",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f80a9dc5-0e53-4d5a-a03e-2f10896e2199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78e9e78b-d0bc-4e49-b0d9-60c1afe8c33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cdb8e4-236c-427c-92e2-344a35fb3ffa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "692b36fa-ea4c-4f16-96ec-239b631dcd51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6112a4e-113f-4ca4-988c-524433c1388c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0cd37f5-9cfc-4906-9b41-62373bd45df8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbe5dcd-e45c-4e6b-b19d-be0e2f35f433"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e5ee542-1aba-443f-82b4-68fbdb4c6860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66fc263f-31e9-4db3-8ad1-fdc17200bc38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8ddb070-2330-4555-a8c4-5195244d4690",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb16d92-59f3-486f-a2a7-4d55f842cdd8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9eb3882e-12ad-47bb-9a76-65294a7851c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7444e58c-78d9-43c1-9b9d-3df83dee9f2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96d294c-0705-4330-bc9d-7e7215ff4b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbb378c0-2e5a-4471-8c19-e6644376dd6c",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e4ce6d4-323d-4722-b980-ab65db7f8d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6a80b2-2d34-46e3-bebe-fd36a1f57d3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8c71a0-4615-4cbb-b8e9-ab5a6a0c1f01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fbc3d00-fb5d-4d13-bc9a-cccdd35ea858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e960114-12cd-4fab-b254-630c91a4c95a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9881407-8c44-4555-a649-9d8f0dcd6ec3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2913d205-ef3f-498d-8ec7-25713eab312e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43d8e9da-d82e-4b79-9671-3281c103a9a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2e1e4b2-3943-4b79-83fa-a66a843aa2a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cac0078-fede-4f85-896b-044bfafa0b74",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de88b889-3d82-46ba-9080-380722c3405b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "716f0602-83a5-4a8a-9c23-ae9503c6f659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a321de36-fb5b-4d47-b575-940a2ba71182",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51bf10b2-3d5e-4432-839a-255461aeac10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2fe2ceb-4635-4780-9131-3a341e683df1",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2b99d5-dd4d-40f4-ab2a-eac4798d37e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2939cb16-de67-4fd5-ab51-f44a87436201"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8f60247-67e6-44f0-a78c-64411dc193d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59909043-fbfa-442f-9e60-c61e61a2e01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad983c40-f5f8-4dfa-929a-0e86fd2ec4d8",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "148731f8-e385-4e00-b8b2-16f30e34cac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4503f427-7389-462a-8baf-5b8d3662b368"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "484724ec-8ed2-4afd-b30a-a0bba9bf5ac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d7728f0-e981-42e3-a482-b95301a712ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ae1de3f-90d8-498a-bdcd-333118a6cf84",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1109c058-6aee-481f-8993-c0f170689afb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e8b861f-1668-4d57-a700-e1dab372356e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d06fb4f6-67be-4438-8450-e74b5d7ce66c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48a513d7-8808-4b65-b944-9bb00d80486e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd3b0a3f-7e48-4b0d-b082-e357f38387cc",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "064bbe79-cfff-4b4b-8ca0-129bfbf34d4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d7ec29-ce4b-4aca-aaa0-91bce8580860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d040bc-2321-487f-95ec-84c93abaf8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ba0be99-f71f-4b05-afb3-b6ebbc8da765"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0661f92-c5bf-45d3-af06-eb80579d03bf",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e60d2df-f254-4ee1-88ad-131a09a73a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b44572e-abb7-4c55-9453-056da4dfc8af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e62f61bb-0707-4445-a54b-cdf6b875d7b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3043b013-ba61-4ded-9b1e-ed3d9420d519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b297120-4444-4688-a490-c0fd68176134",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d72a820-5310-4ea2-a317-7a074af8b239",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1179744b-40d5-4407-be4d-3cbd8e6172b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d2701fb-a1c5-43c9-88db-70f28305b6a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebe28242-1e7b-45d8-b0b1-9e3cb4e223df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db893c53-0777-48bb-8adb-b86f34aff7bd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b74169cb-bf0f-4271-b0f1-ffd51db9e518",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fcdc3b7-e2df-4762-a847-3f62468ed025"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7722b5cc-4adb-4c1e-9b8e-66719d9a6c75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3acc7e1a-b99e-41f3-857e-f4f5251e6ea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f251f31-7f86-4370-b181-f67b6f2ccea6",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7362ec69-1983-4d3c-8b5d-bc4af5d61ca5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2285d39-20e7-40d1-8628-8ec6ad33c5d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "923fbca1-fa28-4125-bda6-8e90fcca8212",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "639dff54-a7ac-4e75-be80-61bb0c310510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc4b5958-8b2d-4fe8-bcdf-22c1f068239c",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955cf277-e0ac-46c0-8024-17ba0c9b31bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ded4c3-3582-4ddd-8be1-4cc9bbd28ffe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52eb113-1d20-482e-9eba-01a801cb2899",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b9721b2-3681-4962-bcdb-38a311f9d955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600e4121-750f-4d53-bec4-5b31cc2c5586",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41db70a4-108c-4c7b-9ccb-42c65d5b4d59",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c014f71-8059-4042-b969-379b08625616"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b509027b-cd29-4219-b728-89efc33d1165",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec7639ed-d1bd-4ef4-a33d-35ecc1853f83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a739166-a319-4925-9780-3b8ce607548a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4c9e4ac-9602-4f65-89f0-3b2f77cf7f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2aca304-2a10-41bd-b2c0-bf63b40e95d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4cf6ca-fee5-47e6-a622-d697b573d6ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4040b0f-435b-4ea3-803b-e4145f6848cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910529a7-a8cf-491e-8547-3b549a84230a",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0879ad5d-af9c-43ec-a44f-ae0bbde9a79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0174eb6b-cf6c-4676-8da5-36e9f5c9c685"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4720ccbf-3d49-4c8a-b08f-a869f6992011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ba706e-9613-4bbf-9efb-f93f8f9255fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebac01bc-b9af-4d9e-a125-09ebfaad6450",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a6b5024-fb37-4de8-835e-cb798c99257a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9298680-200b-473a-8ab8-200947f37d3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d19a5bd8-27aa-450d-b87b-3cd31b1b1c3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6442f281-efae-47c0-a757-e63afbbfb1aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cd73ab-7124-4a05-8af2-149b69836029",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85387881-9c1a-41cc-ba02-25148fb3ce5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2279b7ce-0c47-42c3-b20d-3ffc06bd2ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85de4595-fd77-4d46-ae6d-80d78ef9bcf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b2fc005-a08f-46e4-bcb6-6454abf5c5fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5963f26-498b-4135-98ae-d435e9cf6514",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c1aae05-982f-41ae-9cf1-554e6b67faeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1269931b-fce0-44b7-9630-8593bdb35072"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35a00525-b15c-4643-b6a8-6334559c995c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35eb93bc-9569-4c81-b978-1f306164d2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d67233b3-3acf-43d4-a872-e751fb9ba3e8",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba56474-410b-47b5-b081-94b9c7cb7e4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a76f1b5a-e915-4d01-af0d-e0d0b41b469c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4c2813-0286-4099-b613-2cb046cf1b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "defde496-fec9-4db2-a4cb-303c8723357c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58644fb0-6404-4fe7-a2e2-7364dd3983a3",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d0c0e0-6853-4879-9fa4-92fd4a3633eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0db1233-0c6c-4e3b-ae5f-b4a3a3e719f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9ffb2d-488c-4b61-9b58-2decc6a02211",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1255245-e40d-4b21-8c52-eb86203407a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40b9056c-54e9-43ce-83be-c64a44900478",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b742fb-51b9-4e73-bb69-fcc7335c7682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c748a32-03b5-4e90-859e-93492925902e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2db9303e-c814-4999-8084-2d06983ce03f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eed9470a-bd29-46cd-9833-1ecf4a94602b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e14ca5-4075-4a0c-af53-293e7b89fc50",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17d040aa-634e-4395-be41-4b5e6be2e76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65fe7f3-4175-44ca-848b-0e48f6fde303"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6fae762-2f14-45fd-921a-2d70aefaeff1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "162a3185-a5c4-4bcd-86f7-f93d73573093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b09939-49ac-4b33-956b-4d397e0b40cb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dad67042-4d53-48ee-8bb4-ed2649c876e2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5e4657d-3cbb-4bb1-a874-80c8de6bf61a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01dcf75-6989-4223-86a1-b3114a6536c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0220058-86ae-4413-8a23-e5537c7c0a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fe4ec13-97ec-4d5a-a5cf-3e9105693dc4",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9f16439-8b85-4aec-9eb8-bf8bd32e0467",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "946698ca-9d4d-43a1-aa80-414f695c35b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8dd3b20-9f2b-469b-b8e4-f62e782051f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "708e5f69-a203-4098-a88c-3b5cdf808561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2301fef6-7a08-4699-98f6-fbb49d6b34e9",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2211f39-9011-472e-97d3-677222790f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "735dc9de-249f-41ee-b2a7-09766cb62208"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b574f14-529d-4508-8eb3-6621ed73783a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab3b0293-9c1f-4614-b8c7-4984f4838f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccb9aa47-eb16-4485-bdf5-faf0c5424188",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad077240-79a0-4f3c-8fe2-16cc3e5c6875",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9c5a360b-5c97-4d6c-ae82-faf817c39a3f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d962e17a-98bd-4d3d-9f64-e419f3569db9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0a31909-cab7-424c-aa61-ace1833fc476"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ccbc07f-8da8-47e0-a4ca-2c623ecab0ed",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f54843-98ca-49e9-acf2-33f77508b48d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90da4d59-27f0-45da-a78a-02d8aa9c2e6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "359c9056-f212-4645-92cb-c530c4350b61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbe993f7-af8e-44f2-9d9d-f9c7e10b2ade"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5a8c6c-e691-4f61-8216-de589b1ed84d",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47576ded-13d5-48f2-9e01-959ede680cb0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74e76187-8769-4b84-80d4-9afcff747c00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f53fe8-9676-4575-86c4-eed223cf4efc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77e3bfb5-4a43-4106-a354-918616d98402"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c28da7b4-9aab-4a28-91b8-07a8bbd8af5b",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb4ed5b2-7092-4195-a008-7fd53ffd9f80",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0527dfaa-e3d1-41eb-9297-c2a8759f0966"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "071b77ad-b737-4fc2-83a7-5c7eb15aa5f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c427a41c-ce6d-45e4-ae36-3697fea92d0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14ed2002-46f2-4fe4-99c1-84a5a5a53130",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a7a7c0-87d7-44af-afa4-42374130120f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f002c845-9f05-4566-88c5-501104d35719"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c509e407-8cd1-40bb-b471-8dc87dc0e03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c42bad65-b11a-422a-9fb0-6654babd7bd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b301b03-918e-4954-8b13-33fa4bc15da4",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d64c0df6-c4bb-4087-8204-d6cbc45d9772",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ee0bcd-5946-48ce-991e-6dfb8b837bc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "538bde72-973c-4b47-b6a2-7685c5dd5bde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae2e7d3-a679-4ff1-a2e1-60de1a258ae5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b9b59d7-877c-4b35-82fc-8f74ece39adc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55861e58-e74d-40a3-a819-0e673e33319b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a15ebb0a-873c-42d4-911c-78e72d466155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9e14d60-69c3-4e0f-869a-88da0a230b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30c3c1a-0438-4526-acfe-92bad2e5305e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "076dac4f-3e01-4e7b-a8e8-e6c4c15cd4f1",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5068fe7-acc0-4116-9897-4cc456aa9017",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "372d878c-7665-4765-947e-8572a069430b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9abf9914-ec3c-456b-9169-fbc1820f21a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d827d87-ce2c-4708-87b8-052398824251"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f476f2-763f-412e-a244-de6c01c209a0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc38aaad-d7b9-4885-acf2-351fe8695171",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2bcbed3e-ca1f-4f68-ac4b-f6f6d684dfa8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8b1e3a4-5879-45cf-9679-d7689f5b7ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bc2a0d9-2581-4b01-9b48-ce06c75fc9b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f751cbd-f61c-49bc-a354-ba8f3544753b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be35e483-4cdd-451a-a342-23c8fff5d196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a682d90-861b-41ad-846e-0241eb2d61c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a44dd7-388f-4e27-8212-ec21d1d4f120",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc054c73-04b8-4e15-bf57-1e3b019c4edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6d0a27-30d8-4238-b642-f681a46c7070",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0548d7c-552f-41fd-89ad-8cdfa4070c30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5fd1964-51aa-4dc3-95ea-337599ca071d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4558bac-5894-449a-99d6-1830a80d5090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e954410-7f37-42e3-aa60-88a918255e95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ec0aa7a-9d09-483e-94eb-ad1b67d5f925",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4b0361-2d08-4de1-a963-70d666ff9254",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d38174c1-1b94-4eaf-97f9-eaf04ea00519"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e21e913f-046b-43fa-836c-0624a881acb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0273c5-d038-46f8-8a08-daecec1cd903"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0a1da2-c2f0-4a71-8fee-fcc2db3e4860",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29418a9b-0e8f-4c38-a94c-41a89842cbcc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3fcba11-4717-480b-84eb-e4857f8d7c0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73171285-ffec-4064-ae5a-352992b00d99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f57f9c6f-3fd4-496a-a334-04937f489de3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faaefbd8-4c32-4e7f-a62a-3c66dc0a6daa",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a77cd1bf-fcd7-4095-9e43-afc1e6de16bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6d54c9d-c051-47e6-8d32-ff91bdb62ce0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6b77b1-3608-4b69-88d4-b9f83c9edbd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb283b8-2997-464d-b825-2fd72a6a332b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371b4f74-bfe2-4520-a265-48f1259cb13c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f47a5b6-c445-4d19-9236-53a30a650098",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5415f750-f5ab-454f-a8af-9dadc9c7fe77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04ff6180-ac90-475a-b44c-29be1896754d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9c9216e-aa66-4f1c-b119-db9ec164f85b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c1a449c-ce1e-44b1-b862-401ef7d7547e",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d72df4e-2752-489a-b576-3fc27faa808f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d6acb61-63f3-4319-96bb-e4852dffda61"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4476f9ac-97df-417a-8a70-d532ba667453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8aebbafd-47c1-459d-8d18-4c7dcb111e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6efe4b4f-d6fc-4762-9954-777c2d8ccac1",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cc7844-9c2e-4908-b734-1677325e0bdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb3deb43-6c98-42b9-8940-daca38274182"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "299a3b72-fe71-41e9-ac42-10d94df833c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abe80487-519a-4cae-90bb-e48f2e94cbfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "903161e0-4a78-4f97-bb41-32e0ca0e88e7",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cee3840d-0e91-43d8-b994-2589f2b0e60a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f243041d-d6ad-4f5d-b8d6-fe393628f8cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f5f6688-b356-4259-97f1-c78810d4911f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "996382c3-c222-4c7b-9b9c-98002acc31ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e464cd1-35b8-4bf0-981e-04e7a56c1677",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de343801-540a-4953-9356-8eac15647977",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e39f175a-dd06-4ad3-8f4d-2c0d82c78412"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecefe7d7-4075-44db-88da-d505caf4a7e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e80b3a52-5b1f-4a92-9c4b-54ac789e158f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c92a9aa-5aa7-4049-a982-5ae4167767b1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52a48707-4770-4f77-9f73-da263531d099",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1745d548-bec4-4b65-a387-7f240ebe1903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d39d1371-b470-4d8f-af23-7d5ba43bc76e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "161afaa1-b9c2-423a-9a2f-12c0479a29a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44ad07fb-7d16-498d-84b8-55c1006b5ad3",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74298c9e-e173-4285-b2e1-706970509e5e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f682ed8-28c7-4607-b914-95dab19df6d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faad700-06ac-4127-9b9e-3b3fb20193d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36eb7b18-f920-4043-bcf5-38e2c5aada43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "784e518c-4db2-4b8f-a5af-77d350324a6f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d4478fa-aeaf-410f-a610-0c3fe6d218b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a86d9f8-1b91-49f5-94a9-24441f5af6ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd8355e-4f3d-4464-9862-016cdb7384e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb1e8e71-5f9a-4760-9061-a34bb5fff8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525f8c83-6fa0-4b4e-911e-0d68d3a4f09d",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0bf642f-dcf8-4d59-a0b2-0ca6e249126f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27660b77-efe7-4fff-b0ad-e34325761b33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52bfec90-399e-4273-b44a-859b3220ebde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ca8e430-0d9d-4968-b8da-a47a205d21fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3473f4ba-0e5b-4b5a-8d38-fb98e6780a56",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ea0ae1-0504-44ed-b11a-285c19c47b2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7cad39a6-2e70-4ba0-9bed-8b15f4621698"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08687982-a32e-4bc1-8f09-d8c7b3896883",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5808bfe-502b-41b5-a0bf-3d8ea30ab5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f2364a7-567f-40dc-8e67-8152557a192c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52aebe66-c136-4e03-8cba-c6bb6468cec2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1610bfb-d650-4d84-a145-7c7804109200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "197991d7-dcf5-4392-832f-6ff5b9293f89",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c8fe793-995c-4919-8584-d0ac520fa0f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf82c58-1812-4d44-a37a-da67bb99ea9f",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20f890f-1297-403e-8999-dfffdeb81cf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9df20424-f967-4c28-b88a-0dd0900f4a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6849da2-5182-4e4b-a6ad-7678a115f81f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6e8f963-0b3d-4ca1-8338-b2f563941360"
                        }
                      }
                    ]
                  },
                  {
                    "id": "127afa06-e37e-4e8d-8b9f-87d6b76132ec",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49d23e74-f519-4953-bd87-70baa3d506bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e99ca5a1-2099-4aa3-88a6-f0ed34f8d402"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37204655-465f-42e3-98cd-1d4f51567ff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "601ff84a-1404-43e5-88ba-472966b0dc6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50791d06-c787-4a2d-b0a1-27a6a82520d5",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f261a1c-363c-4d65-8fdb-4aae764dcf59",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "63a0bd3d-b9d0-457a-9dae-a90aeb4530da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f6632b3-c3f3-42bb-a284-4ceffa30a275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccc1a5da-bc82-446b-9bff-3d1db242a3e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7d5850-9bf7-4f43-92d3-8b1433c8f398",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ba4ab46-2d55-40ec-9638-c29e2f77451d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "837f06ff-d690-4942-9b66-8d7af5b79eb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "643b921f-e20a-4f6c-9c03-5bd48050b11d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2651d4f4-ed52-41d1-b776-b286a10ee880"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8593ec75-3d4b-42c2-8dad-08b63b4ed998",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31288bfa-6ffa-41f9-8271-b834a7336ced",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2927ae52-939f-4ba5-8a9f-8a181c0b5c0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "033466e5-b52d-4c39-b448-e0c70d0a4fd9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "442fe054-93e8-4cc9-9d70-98989c7b0a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75598fd5-2dc9-43f4-bac5-b624463711ad",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e4efee9-0420-4586-a8e0-fdf5c3ed4b29",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "76db19cc-e19b-4530-bf88-6993b105a1c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8435909-d75d-4ef6-b8ec-375cd22e41c4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f959c987-a2b5-4592-8172-da9c19657b28"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e465cda7-bafd-43fe-a091-b22678c478b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4ba28630-1d36-40a7-8f8d-27e3c4b06d10"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4bc617bc-0092-4b6c-9fd5-25ec5e57cefc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "25b6e232-ff98-466c-8410-73aaa3679295"
                    }
                  }
                ]
              },
              {
                "id": "d19937ac-6a9b-4036-83f2-3f58835b911c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7ef67cb8-5fba-47e5-aff3-9dfec36c6547",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea53ef93-956e-43cd-96f5-fda4ed7bc827",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "ddf701d4-cb2d-4a95-8ff4-51fe0af40efd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d12187-dbde-43ec-92ce-203d11a60e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "84bb9bba-54f9-4740-9763-a61109ddbf03"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bd261cb3-a92a-4f39-a629-d081c613472f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "90a7c0fd-a340-445c-b3cb-7a4abc2913d5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86d7f49a-5bb1-4507-a248-0bb5657ca29a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "da85ee13-25f3-4b28-8b57-395ef7ae3828"
                    }
                  }
                ]
              },
              {
                "id": "259c9948-e64b-4abb-93e7-31a2ea65576f",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "602e4e4d-2c3e-4abc-87b1-eefb9a4b9c2d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69c1ba23-5f32-433b-a271-0c251354d920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "93040faa-c41f-4d89-ac29-b05a53ca6240"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "743cee33-712c-41dd-ae40-ac8f04ac3eab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac6feb48-d362-45d1-8a85-14fd8da3c1d9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "6f9b854e-4081-4148-ac1b-adfbf36ab616",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d6b12c4c-38e9-4fe8-abeb-a8e77a1d0341",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f659b15b-6cd2-4167-99a3-f72028b913a2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6bc49635-2d25-40a7-bb65-3dd6ca70560d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3fb50a6a-6687-4f07-9254-087250a2ed68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6390a1a0-562c-4b21-aaf2-ce3da96742fc"
                    }
                  }
                ]
              },
              {
                "id": "555c0c78-02d8-4af4-baeb-4865188b04cb",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3d2b3e07-6301-4f21-9678-6e3e23f204ee",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0a5cfcd0-83c2-46d1-9741-0dd8b830cacc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "268c7aff-bd2f-42a5-813d-d818e20a823d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "260b4822-bd72-47d5-a8da-81661021cdc0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c724805c-c80e-49b1-acfd-b31868717b72",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "0ad0d345-22a8-4fb8-ae35-3c9af2af8ad1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8600c33d-1fd9-4c7b-a46e-cd54027ba9a3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e66d40c7-f444-409d-9f99-51e269df50b5"
            }
          }
        ]
      },
      {
        "id": "c8a79212-6c01-4a93-a785-b4a980e3ecc0",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6f364ba0-300f-45af-99cb-4c674877201d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "20bf9c6b-37c6-4ed6-a53a-ff3e5cb27f31",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d57ea87-bbd7-4a4a-83f2-143717b1ca7b",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00254f5-bb03-4fb0-babc-d5c8afd9de55",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "e556b0b9-3164-4bf8-a4cc-0e32127b11ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5b5890d-4021-4cf7-a50f-da0fea112785",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "deafb0d4-7384-49e7-bb1f-b0999cb9b728"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cd9d98a2-230b-4681-9182-aea8106ee4d8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e8ca5a76-63d7-416f-b5a7-a4689102cb5a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d809db31-e5f2-471a-abe8-db3a51f790f1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "080769eb-8a59-4d63-9d85-f99a55d42ed8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5260e107-0348-422a-8229-14b8c0626e17",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7c1ac592-bd60-4956-8651-cba470b9bc5f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "70f8fad5-4e8d-41ac-a46f-679e5c20fe8e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ac35c4d-891f-4f08-855b-a691fc7e380c"
            }
          }
        ]
      },
      {
        "id": "7007e0d2-ca2b-4256-8bcc-f29a34a3df81",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "dc6cc694-2584-4139-9cae-e5c9dd19fdd0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "75cf00bc-1f79-406d-aa37-10b1d3dd58a4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a285716d-b6a3-48f6-bfc3-ac0c7edc6311",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3a81c8f-b695-4b88-99de-217bd5eea449",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d95d2ed4-8279-4312-acb7-34c10cc36947"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6708bbe1-73b5-466c-9efb-04649512ca23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a099d4a5-09d2-42c5-aa2f-14ad35ab682e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d3b6d0e-1f5a-4447-957d-a7dd9387f7fc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "00b3679d-0b62-4763-bc13-89712a87cbf2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1094720d-09b3-4a79-9cb3-d2867a690a71",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "78016bd2-63b5-4178-8d87-c1a8f16c8740"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8157c6d4-dc73-419a-a88c-23b73f2b40a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "fc3ce2f4-387d-4597-837e-1ef9c5da4e01"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b4ef62da-1f75-4694-b191-16553857afe4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6db005c3-3e1c-430e-8d65-b5a7c3e07e55"
            }
          }
        ]
      },
      {
        "id": "67051495-8a42-4403-b354-33dc86c074f7",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f20cdecd-d0e8-4fbd-b729-e25e8320913f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "69e0e207-c09a-4c3f-98ae-c032688dcc6f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0bd80ad5-e605-40e1-9e81-a1400281382c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0e5765e-a9f6-4ada-921e-94179225fa7a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd47a900-3d5e-4cac-a387-419e8c48ee11"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "27e4b38b-3bbb-4099-baf7-89ee16edd8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc3e11e6-efca-45bc-9abe-582de2b4c308"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fc233cd1-7767-4bea-819d-bfda3eade619",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "067f11da-e98c-495a-bd77-f1d5a06c879a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33a4a10f-5eb9-4b48-b276-f0b59e814807",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c7814f9b-c5ee-4ea8-807d-63fd932dec49"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0f957f6d-dc9f-456f-aa7c-960c1674bd32",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "90279850-8896-48b5-a6c3-d5d096fe55b8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c1690724-9cf9-48a9-b9b7-90b0dbe2ec1d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69b71ac3-ab06-4613-9a4d-1bed8f85fe67"
            }
          }
        ]
      },
      {
        "id": "1d329b8e-57e5-4d43-8747-2c038ec7967b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2a61af63-2dba-4cfc-9e7b-dda36e3529f9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7ca903e3-08b1-4c0f-b379-10761fb02a2c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "95333485-aad8-4730-a2f7-4df43e609c44",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "132aed4e-53cc-4bfa-9eb2-ce71303623e9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab330b17-5622-4ece-a16d-5feaf4ed6abc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 58.74603174603176,
      "responseMin": 10,
      "responseMax": 638,
      "responseSd": 81.66632035960941,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1714178110201,
      "completed": 1714178133227
    },
    "executions": [
      {
        "id": "4d795bfb-94c8-4a0f-add7-ffe7d828d00c",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "d219934a-13c1-4b8f-a6c4-dc41e11b8d93",
          "httpRequestId": "388eedf1-bd5a-4f7e-9eaf-d5504184b4fa"
        },
        "item": {
          "id": "4d795bfb-94c8-4a0f-add7-ffe7d828d00c",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "fc63e22d-4917-4846-9ebf-9aad5313e4f0",
          "status": "OK",
          "code": 200,
          "responseTime": 53,
          "responseSize": 0
        }
      },
      {
        "id": "c7930ff3-9c44-4dee-9587-9551b8e37647",
        "cursor": {
          "ref": "24c6c8c8-07af-4a53-9a46-fef9672d1996",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "61235071-7180-4f8a-a7fd-2e5da79adfe1"
        },
        "item": {
          "id": "c7930ff3-9c44-4dee-9587-9551b8e37647",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "32e149cd-b28d-4c5c-a467-090eec03f2b2",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "c7aad645-7f34-4154-a66b-1921db419371",
        "cursor": {
          "ref": "a605a7f2-15d1-43a1-a9ab-9d7379c474dc",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "99a3a7de-5cac-4aa4-9c70-a6e114ac92a4"
        },
        "item": {
          "id": "c7aad645-7f34-4154-a66b-1921db419371",
          "name": "did_json"
        },
        "response": {
          "id": "de11cc50-9fd6-4459-94ea-55fe4507dcdb",
          "status": "OK",
          "code": 200,
          "responseTime": 374,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987d82f4-28de-41f8-baea-ddd0823ec47f",
        "cursor": {
          "ref": "d75c9b2e-81fc-4147-acff-ea197b2dad67",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "92d6827e-6396-4f91-854a-1f3db8cbbd7e"
        },
        "item": {
          "id": "987d82f4-28de-41f8-baea-ddd0823ec47f",
          "name": "did:invalid"
        },
        "response": {
          "id": "6bc6049f-0d2e-4c88-ad9e-217e46765d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "987d82f4-28de-41f8-baea-ddd0823ec47f",
        "cursor": {
          "ref": "d75c9b2e-81fc-4147-acff-ea197b2dad67",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "92d6827e-6396-4f91-854a-1f3db8cbbd7e"
        },
        "item": {
          "id": "987d82f4-28de-41f8-baea-ddd0823ec47f",
          "name": "did:invalid"
        },
        "response": {
          "id": "6bc6049f-0d2e-4c88-ad9e-217e46765d9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66031c2a-2126-4fb4-afd1-d9f8f9bead29",
        "cursor": {
          "ref": "39e40527-1612-4a82-8a6a-3f6fe2547f2a",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "84a75721-0933-4690-a5a4-f026325baf0f"
        },
        "item": {
          "id": "66031c2a-2126-4fb4-afd1-d9f8f9bead29",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "190747cb-255a-4c02-934a-b0cb6db3b243",
          "status": "Not Found",
          "code": 404,
          "responseTime": 84,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4c9f41-14c6-4278-b749-2f4dc011e1b3",
        "cursor": {
          "ref": "cc8b39da-2192-469d-ba23-28b129997934",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1fe25034-a0b4-4675-bbb8-b9fc02b800cf"
        },
        "item": {
          "id": "da4c9f41-14c6-4278-b749-2f4dc011e1b3",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bbb93bd6-70ab-4d1e-8454-8d1ec1561452",
          "status": "Not Found",
          "code": 404,
          "responseTime": 28,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19365d13-fc14-4b57-81a3-c54d10b86e9d",
        "cursor": {
          "ref": "3a138382-d2a6-44c9-b10f-640af57fb985",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0636739c-366c-4613-b478-b29c0576c50f"
        },
        "item": {
          "id": "19365d13-fc14-4b57-81a3-c54d10b86e9d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e8bc208d-3607-4917-9774-5c955581a7e8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fee2e4b4-0e09-4650-a886-5331b61785f6",
        "cursor": {
          "ref": "89d1a828-1aae-4ae2-bbbe-f2f525833fde",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a5df1965-757a-4b7f-801c-690025ee04bb"
        },
        "item": {
          "id": "fee2e4b4-0e09-4650-a886-5331b61785f6",
          "name": "identifiers"
        },
        "response": {
          "id": "4c98d691-873b-487e-bac3-fb603855a1f1",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cacb71f-106d-41e4-a179-f6d07ed380bd",
        "cursor": {
          "ref": "fff3dd49-ac15-4084-acfc-c48e7e8acf86",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5eb52044-eadc-4385-a975-832de0ce32b7"
        },
        "item": {
          "id": "1cacb71f-106d-41e4-a179-f6d07ed380bd",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "1f4c0a48-4057-4f68-b513-86207813002e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb20fd2d-cd5c-4871-a8c4-fc9030b685a1",
        "cursor": {
          "ref": "6d36503f-7ea6-48b3-a223-ff3e8679a196",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "c470cd44-025d-41c4-91cc-03965f0edc93"
        },
        "item": {
          "id": "cb20fd2d-cd5c-4871-a8c4-fc9030b685a1",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "8ea8e1d1-c39a-4952-81e9-f060437e3fb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38edb927-6147-404c-8b1d-47028f9b6bfa",
        "cursor": {
          "ref": "b2983719-74a7-4c58-8f85-e79c085abbf2",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c430addc-7aa0-41b8-9f31-90cfb7a63ebc"
        },
        "item": {
          "id": "38edb927-6147-404c-8b1d-47028f9b6bfa",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9c9fc6d3-4cc2-4a47-bd05-a88805fc3754",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6266f98c-054d-468e-9759-18b7b2b6ec2f",
        "cursor": {
          "ref": "669ab045-0347-4625-af8c-75268215f474",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8a8030c4-9293-4647-a053-74378166a426"
        },
        "item": {
          "id": "6266f98c-054d-468e-9759-18b7b2b6ec2f",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "bf1699a1-5ba8-43fc-b39e-797c4f89f4f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ab5ad03-1f10-45a1-87f0-cc3ce7985ee3",
        "cursor": {
          "ref": "9636bf6b-eee8-427f-9326-3d2b757d86ac",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "accce9e9-e00b-4dd9-a9be-5ba46bdd25be"
        },
        "item": {
          "id": "2ab5ad03-1f10-45a1-87f0-cc3ce7985ee3",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "70ca4d67-e785-4ae2-9c63-8b3c2fb8f3b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d01e077e-7637-43de-ac61-9e430d065085",
        "cursor": {
          "ref": "342910b2-b285-43f9-8dd2-c4e80b8f78a4",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b2949e9c-2824-4ef7-9938-8e05c3e47f14"
        },
        "item": {
          "id": "d01e077e-7637-43de-ac61-9e430d065085",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "74ec67d5-df67-47b9-8926-3a3873f0386e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ec410c4-273c-48a4-949b-046441dcbaee",
        "cursor": {
          "ref": "d965752a-b014-4213-b231-f8e1e37db58c",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "a7d01288-de47-4b03-922b-76c7ab6401e6"
        },
        "item": {
          "id": "4ec410c4-273c-48a4-949b-046441dcbaee",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4e15eda3-1ee7-4dff-b050-f7c9f04d21cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8edfe3f6-9e9f-45bc-bd5f-cd32397bf899",
        "cursor": {
          "ref": "3e3ccc91-0e92-4bbe-b62e-3044123f0c26",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "7528f2ff-8995-4a1a-afec-a2b5ca35ae8a"
        },
        "item": {
          "id": "8edfe3f6-9e9f-45bc-bd5f-cd32397bf899",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "e3e1f21e-9514-4d3f-a2f2-b80d9c282575",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0dd09b0-5d3e-4b91-af54-a1b5b1bfa46a",
        "cursor": {
          "ref": "8a2aa360-07ad-49ad-a0f2-dc719a319e73",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "cf997456-e14c-4608-99cd-5fb0a8d37d68"
        },
        "item": {
          "id": "c0dd09b0-5d3e-4b91-af54-a1b5b1bfa46a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "429c33d3-0290-4723-818a-ba030930c48f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d2d85c-d3cc-4d3e-b64b-41816c0e4fcb",
        "cursor": {
          "ref": "f577bb14-65a4-4f97-b471-7f84f17be244",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "f4f7ed55-b64d-4122-9c47-4327b453e69d"
        },
        "item": {
          "id": "20d2d85c-d3cc-4d3e-b64b-41816c0e4fcb",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cebab5ba-9ef3-4488-aeec-b1c8ec173828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f11838f6-b652-4f9d-a187-9e3c0f8b738a",
        "cursor": {
          "ref": "7c128799-b630-4edf-be84-be8fd2bd005d",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "56a4a96e-8c4a-4d64-b735-43f4de1b993f"
        },
        "item": {
          "id": "f11838f6-b652-4f9d-a187-9e3c0f8b738a",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "d9d279b1-3023-47bc-a550-a632b83e30f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35986df6-c680-4af5-8d24-85514ba86606",
        "cursor": {
          "ref": "cc6a3432-0f6d-4310-9a0b-834359fad7c1",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4e07cd67-b829-43f8-8ad6-2e75827a0829"
        },
        "item": {
          "id": "35986df6-c680-4af5-8d24-85514ba86606",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c18b268a-4993-4404-a330-f75bd12ec367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "009ec4cb-061b-4dd2-b5a4-af3fba9837d6",
        "cursor": {
          "ref": "7ab66c2e-103b-449c-880f-78ed500d5896",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "64ba7849-b620-4d07-8dad-ceb2953e74e8"
        },
        "item": {
          "id": "009ec4cb-061b-4dd2-b5a4-af3fba9837d6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "9a9c4c0e-d112-46d7-8fa9-f080f582a113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f045a2a9-6748-4b99-870b-f582d67f6647",
        "cursor": {
          "ref": "b976df12-aa39-4a1c-a546-6c8c210f23c4",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "01058e41-4c7c-437d-ba59-18262c1bfabe"
        },
        "item": {
          "id": "f045a2a9-6748-4b99-870b-f582d67f6647",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "4c7530c8-ad52-49c6-a1c3-0d82002a1137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d39f395-dff9-48d2-9e8b-2c2aa80c5665",
        "cursor": {
          "ref": "9f2b46e7-fa2e-4a5d-8757-8b22ee364f64",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "982c097d-97e4-4630-b093-586189957c8d"
        },
        "item": {
          "id": "6d39f395-dff9-48d2-9e8b-2c2aa80c5665",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "494bf0a1-df84-48df-9f1e-2bd186cfae14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68256ec8-6987-4e47-8faf-c315c21e244b",
        "cursor": {
          "ref": "099d8488-1bc4-4286-bdf5-5af12d2bfb37",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a311eeb3-fd3d-4bb1-a22f-3df8d1f9d4c1"
        },
        "item": {
          "id": "68256ec8-6987-4e47-8faf-c315c21e244b",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "a9856090-2cb5-4b1c-b0c4-21635fb7bc7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af83f67-dc7b-4482-b6a5-ba353aebe355",
        "cursor": {
          "ref": "8be3b1b0-8e3b-40b2-b244-bde3545854ef",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4c2b58f8-7ac5-4236-bea1-939afca63eb1"
        },
        "item": {
          "id": "0af83f67-dc7b-4482-b6a5-ba353aebe355",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "20065ee7-6fbc-4830-aa81-97c4a3c5773f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf5d33da-6c2e-421b-b9e8-bd48ccede955",
        "cursor": {
          "ref": "d215dea3-fba9-4266-8cab-39d6f778e96f",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "3b9dcb44-ad95-4f25-a2cc-40b9da46a84d"
        },
        "item": {
          "id": "cf5d33da-6c2e-421b-b9e8-bd48ccede955",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "26fba4c8-9d18-4820-96a0-78894dff3f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85bb9c35-0663-4b77-b703-81657e1dc16e",
        "cursor": {
          "ref": "5b3184cd-a128-4d4f-86e6-5351b5f423d7",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "b64e230e-1052-4c3a-81cf-15a5497a1144"
        },
        "item": {
          "id": "85bb9c35-0663-4b77-b703-81657e1dc16e",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "3bfed076-2920-42b4-9ad3-9785f22956c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0583087b-be42-4d7b-b81c-7bc5f851e986",
        "cursor": {
          "ref": "075e996e-9110-4068-8cd2-3dbe4e542106",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "be6c8081-49b1-4fd0-a608-e873fb389176"
        },
        "item": {
          "id": "0583087b-be42-4d7b-b81c-7bc5f851e986",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "fcf6a749-2bfc-417d-bd76-379238d36886",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faa72bd6-2267-405f-a3cd-5fb633426926",
        "cursor": {
          "ref": "0d8a3b7c-ee87-4aa4-a5ce-7344e99f4859",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "f764ada0-8b02-4b3a-bb18-75c4710a9cb2"
        },
        "item": {
          "id": "faa72bd6-2267-405f-a3cd-5fb633426926",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "920c5ee1-d15a-4548-8451-b44d2b09f4e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24b48bd-3347-4024-8544-86819896e72e",
        "cursor": {
          "ref": "32b0f783-836e-4804-bb15-f9ff4d117ba6",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "4cd92752-b3e6-4179-97d3-9efcbed4ce39"
        },
        "item": {
          "id": "b24b48bd-3347-4024-8544-86819896e72e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "995ac549-f5b0-47d0-96ce-c4a83ae55122",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04a3244e-5ed1-4cb8-920d-7c8441dfde25",
        "cursor": {
          "ref": "6eb00415-209f-4449-a0ed-41fb9d69bdbc",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "c41e00de-52ad-407e-8349-7240ad4043b2"
        },
        "item": {
          "id": "04a3244e-5ed1-4cb8-920d-7c8441dfde25",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "090b9550-4be3-4b41-864f-e6f8342253b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "182b8e2c-417e-406d-a305-a8b703583447",
        "cursor": {
          "ref": "34a215f2-3edc-4a4d-815c-5cb84c5cb812",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "fcc1ca75-57a5-40f2-8986-11c808e093a9"
        },
        "item": {
          "id": "182b8e2c-417e-406d-a305-a8b703583447",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0bc68bce-6e21-4bda-9c08-3367d03410e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9164df6f-d07e-4593-8de2-4ecefc854b40",
        "cursor": {
          "ref": "029be0eb-56e1-4df9-b091-7c924e25e7ae",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "8f896026-08f3-43bc-acab-51df24ce5faf"
        },
        "item": {
          "id": "9164df6f-d07e-4593-8de2-4ecefc854b40",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6eaa8c1f-2008-49e1-a053-76db0e753db8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8017d12e-bc49-44f7-9795-e14cce002262",
        "cursor": {
          "ref": "b4724647-bbae-4418-b0eb-39f2f0c9118f",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "441506aa-936c-423a-a3d7-10ae237e6d45"
        },
        "item": {
          "id": "8017d12e-bc49-44f7-9795-e14cce002262",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8040595a-3173-4f4b-a296-6299aab9df81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5476badc-83ed-4b14-91ff-19b57cbe2014",
        "cursor": {
          "ref": "21d949e6-3a30-4322-a79c-afa094d615e0",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d80be2fe-9abc-440b-adae-5dfc6bc69e1b"
        },
        "item": {
          "id": "5476badc-83ed-4b14-91ff-19b57cbe2014",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "b303aa23-69dd-455d-8545-3658417a06d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324f1e22-601c-432e-8b05-0c2a463b0273",
        "cursor": {
          "ref": "9d050495-037b-48a6-81a9-eb94952d774b",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "3a3271dd-23fa-48b1-a412-0cf2fd523e32"
        },
        "item": {
          "id": "324f1e22-601c-432e-8b05-0c2a463b0273",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "71375342-9e12-4a97-8b22-bb159de9d186",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5bb8b0-3e22-4abf-902b-a8aed5809aed",
        "cursor": {
          "ref": "25740383-bf93-49c8-9202-2d0756ba8743",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "f6eff928-687c-4afa-9f80-26a37bc9bc1c"
        },
        "item": {
          "id": "7a5bb8b0-3e22-4abf-902b-a8aed5809aed",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "e7abbbd8-b78d-4d97-8f95-ca0647b1b2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c225cc1a-1891-4d1d-af5a-a64a288705f7",
        "cursor": {
          "ref": "90d74b7c-01c0-4983-9c63-97f8e0e11002",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "7ff49f31-7920-406d-8441-6dd317eddc1d"
        },
        "item": {
          "id": "c225cc1a-1891-4d1d-af5a-a64a288705f7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "1cca47eb-1241-48b7-9264-0c12369ef85b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3702f6e5-9338-4f3c-8fc3-d2953221b851",
        "cursor": {
          "ref": "19fe8d43-15a5-44a6-9595-67d8e776d306",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b4f2ca0d-5222-4a72-9ac6-36e932a7ce46"
        },
        "item": {
          "id": "3702f6e5-9338-4f3c-8fc3-d2953221b851",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "b142faf8-499c-4c43-80b0-919032fa196f",
          "status": "Created",
          "code": 201,
          "responseTime": 638,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "ec79f3a6-6349-4c9d-a521-f44302732017",
        "cursor": {
          "ref": "9d56a844-b888-412a-ae82-95b707b807b6",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "3d125215-3ce0-4fce-be52-0acb9bb66497"
        },
        "item": {
          "id": "ec79f3a6-6349-4c9d-a521-f44302732017",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "eb3e51b7-d7ee-42b2-b7c4-cced6c67c21a",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "2d124e36-d764-4b5f-bac1-3fd2776267f5",
        "cursor": {
          "ref": "8290ee11-ec29-44f8-8b38-9de1c8dddb9b",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "7091683f-5d07-483c-8b9e-c8242a304687"
        },
        "item": {
          "id": "2d124e36-d764-4b5f-bac1-3fd2776267f5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "3222f6c0-79a8-4f92-a8a2-118d8a910643",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "202786fc-e906-44df-9808-8f6d8113f1d4",
        "cursor": {
          "ref": "d3fc3a06-5cd1-43ca-ad11-95612e3c89fa",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cab08d78-6f9d-479d-9140-f9e876639f35"
        },
        "item": {
          "id": "202786fc-e906-44df-9808-8f6d8113f1d4",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "e344a69f-08c4-4179-85db-9f8d3cf2abcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c84328fd-2342-4916-bf0b-3f21262eb6ae",
        "cursor": {
          "ref": "dc9d6bf5-50f3-421c-a71a-8b9f4681ad8e",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "076051d2-0504-4017-a51d-d828d99b07ce"
        },
        "item": {
          "id": "c84328fd-2342-4916-bf0b-3f21262eb6ae",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "ce1b2a82-2cf3-484f-8015-35dde887b714",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "1a51499b-cb79-428c-a2f7-d62b289c419d",
        "cursor": {
          "ref": "24ec41a6-62f0-469a-b9df-37004697527b",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "86a8bc95-83c5-4b4e-af79-6d26472a9423"
        },
        "item": {
          "id": "1a51499b-cb79-428c-a2f7-d62b289c419d",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "3ffd2652-68f9-4866-9d39-8780c3b8a973",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "add21cf7-f094-43af-afe4-4ef72e3a9147",
        "cursor": {
          "ref": "9adaf25a-7d5e-4684-8a28-b2c7760b2985",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "69f16392-eee8-4405-b468-17d5d6a03579"
        },
        "item": {
          "id": "add21cf7-f094-43af-afe4-4ef72e3a9147",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "5f198bd4-70f9-495c-9e98-f50e9a0876d5",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e8d436ed-db43-432e-b403-85564813b612",
        "cursor": {
          "ref": "38e25a26-5f7c-4f8c-bc56-a950b1fd9060",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "62fd95e5-5cd2-409f-a5c4-b0ad2b933e71"
        },
        "item": {
          "id": "e8d436ed-db43-432e-b403-85564813b612",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "a3970c3e-c1d9-49f3-be2c-efd18d921d64",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9971e9dc-e3df-4e79-b645-4f3b0da9195a",
        "cursor": {
          "ref": "a31a78dc-6904-4c6e-82c6-773633c0a3bd",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "be0a36cd-c0f8-4ed4-abf3-c9ac7cf31f66"
        },
        "item": {
          "id": "9971e9dc-e3df-4e79-b645-4f3b0da9195a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "69452966-7eda-4f98-8f58-8d1a491dcdd0",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "ab2ccfb7-8b45-4850-bfff-9728d1a94680",
        "cursor": {
          "ref": "948d6c6d-8910-4f26-89c1-94936ed314e8",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "49402f6a-31ee-4ba0-bda7-1d75b8e2b33d"
        },
        "item": {
          "id": "ab2ccfb7-8b45-4850-bfff-9728d1a94680",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "80f780ac-d053-4908-8878-2bde8db64533",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ac1f927e-0932-4d56-9417-0b7e1e8a4e65",
        "cursor": {
          "ref": "0cf5767c-1e11-4d68-8761-6c08d356094b",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "6d6b633a-1093-47e3-858c-69b111d70124"
        },
        "item": {
          "id": "ac1f927e-0932-4d56-9417-0b7e1e8a4e65",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "5ce203b7-8191-4b2e-b5f8-b8267325a491",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "f73fbd67-d442-44e3-bfa5-cb8bea56549e",
        "cursor": {
          "ref": "d39160c1-3dbd-4a2f-bde7-82107f0400eb",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "cd008711-3ec8-4d02-adc0-49d0ad390010"
        },
        "item": {
          "id": "f73fbd67-d442-44e3-bfa5-cb8bea56549e",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "5ca66379-c9e7-4c41-992b-631095985c10",
          "status": "Created",
          "code": 201,
          "responseTime": 228,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1731dd88-a135-4f81-a293-a5d3fa827464",
        "cursor": {
          "ref": "33606b26-b227-4b65-b097-e4555f0ced80",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "fda1cb22-8f5c-4721-b87b-a856f5998e39"
        },
        "item": {
          "id": "1731dd88-a135-4f81-a293-a5d3fa827464",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a5daaeef-2f68-412b-ad94-ec98ca54dfa0",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "cd5dd9dc-7c60-46b0-9127-9225dd6dcd53",
        "cursor": {
          "ref": "dd677d34-1632-46f8-869a-39233fe0b00b",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6a888771-8064-4943-a3f9-ac6d40039908"
        },
        "item": {
          "id": "cd5dd9dc-7c60-46b0-9127-9225dd6dcd53",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "cf4075f8-49e7-457d-b917-2eb90e53f566",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92a7ad24-8b89-4d88-8001-fd74c614fd4d",
        "cursor": {
          "ref": "8bcaf31e-3727-4efa-93b6-b477fb107d24",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "8ce446a7-9687-409b-9cc2-e3c6f5043487"
        },
        "item": {
          "id": "92a7ad24-8b89-4d88-8001-fd74c614fd4d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "5d0a8b90-446a-486e-9db7-adcaf412d8e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75747d5-ff79-47d3-9acb-734b4c3b8170",
        "cursor": {
          "ref": "892f14f8-4d54-432f-b596-1d3d699def4f",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9cc93a47-8594-450e-ba3e-e5871e705a5d"
        },
        "item": {
          "id": "c75747d5-ff79-47d3-9acb-734b4c3b8170",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "572ae9bb-56b9-4e93-9b07-c33d4dc38cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db170d3-7945-4048-bb21-f03c4b0fee9a",
        "cursor": {
          "ref": "cf9f7383-7b59-4bae-ad0f-4925d9598f6c",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ffd9b416-1799-4226-9d31-e0ce496b5a9e"
        },
        "item": {
          "id": "6db170d3-7945-4048-bb21-f03c4b0fee9a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c5b29d63-709d-4e3c-afc2-56078afbca34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b37ed7b-980b-4461-a81c-3fa2d05f90c7",
        "cursor": {
          "ref": "64cbbe4d-4452-467d-8f77-8b6c98634540",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "22367f96-7d99-48c7-b726-9bb71cbd697f"
        },
        "item": {
          "id": "4b37ed7b-980b-4461-a81c-3fa2d05f90c7",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c7d2a70e-990c-4477-8d04-e46260a88148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f04ee4-d0f7-46e8-8c20-2bc6472b6502",
        "cursor": {
          "ref": "7c4584d5-2a4a-4702-a75d-89b395f76739",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2a493597-5806-47f0-80d2-8d1c33bca770"
        },
        "item": {
          "id": "12f04ee4-d0f7-46e8-8c20-2bc6472b6502",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "01734fa3-550a-491e-931e-caf482aaf87c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ea4f64-4588-49aa-80d7-6fb4211a3d31",
        "cursor": {
          "ref": "a13821e2-1859-4d77-99f1-f238c33469bb",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "d0e2d2ac-8af5-4754-adee-d67cf6553823"
        },
        "item": {
          "id": "45ea4f64-4588-49aa-80d7-6fb4211a3d31",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d1f81e94-fa8e-4d85-9a86-8495896ae200",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5eb01027-b127-4bca-a8a3-9abb040698cc",
        "cursor": {
          "ref": "6e453005-3729-462d-b24e-860c1cdfa38a",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a089d06f-b390-4caa-87f4-915bf6bba992"
        },
        "item": {
          "id": "5eb01027-b127-4bca-a8a3-9abb040698cc",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "06c4202e-6903-4e7d-be21-4e83607a2827",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "835ea986-7611-429e-b327-3e08766277bb",
        "cursor": {
          "ref": "c7b35489-ed71-4568-9edd-c62ab4e66183",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "31b9bc92-8fd2-48b3-8fc0-02b94339462c"
        },
        "item": {
          "id": "835ea986-7611-429e-b327-3e08766277bb",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "94eebc8b-2b74-49f9-afd9-84fd0e2d0df3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ee32199-c869-431c-9da0-b6edca435cb9",
        "cursor": {
          "ref": "f3ee4133-c915-4a83-ac87-d7242ed4df15",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c9668296-2dfa-466f-84c4-003cfa668789"
        },
        "item": {
          "id": "0ee32199-c869-431c-9da0-b6edca435cb9",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "dca21ac1-b4c9-4921-b400-9be2eb3e808b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b6b95f1-0bf4-431b-8644-67104755e193",
        "cursor": {
          "ref": "a1597111-029b-4bc8-b4d6-16a831862267",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "ae891386-5752-4721-8b97-9a5b24a4297a"
        },
        "item": {
          "id": "8b6b95f1-0bf4-431b-8644-67104755e193",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "1cb06709-29d0-4eaf-8baf-0e0ba5a7e8fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41ccfa51-c5de-4cc7-9f32-412c8d8a2609",
        "cursor": {
          "ref": "bfb8118f-f5c7-4237-b24a-d00201897d5f",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "4c78dc81-1a18-410f-904a-a2648e6856fc"
        },
        "item": {
          "id": "41ccfa51-c5de-4cc7-9f32-412c8d8a2609",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bb2e5189-60c6-41bb-b9ab-5a0eb4ea3c3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfbd9b2b-5be0-4263-a0df-f3e1e2da00b0",
        "cursor": {
          "ref": "e9cef4b3-0c53-4899-a552-15fb4c0bfaad",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "766fa66c-ae2a-4235-9c26-c09d969c2bf6"
        },
        "item": {
          "id": "cfbd9b2b-5be0-4263-a0df-f3e1e2da00b0",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "28541269-25ed-4e50-a0ba-db671962335a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d475bb5e-442f-499c-bf1e-937be61d3bb7",
        "cursor": {
          "ref": "ad62a8aa-2efc-47b8-a28c-2e73f3d6f637",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "788edb13-f753-443c-bf54-15c0972c5c0a"
        },
        "item": {
          "id": "d475bb5e-442f-499c-bf1e-937be61d3bb7",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "a93aff67-1aa0-4154-90f8-b29dda3c1c03",
          "status": "Created",
          "code": 201,
          "responseTime": 345,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "5224692e-0010-4b13-9ac4-2d905cde232c",
        "cursor": {
          "ref": "e0708921-0ae6-463b-aa42-072396947df6",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c36a79d2-3dd9-4787-b592-d7a6722f90eb"
        },
        "item": {
          "id": "5224692e-0010-4b13-9ac4-2d905cde232c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "bfb74b75-8449-44e6-9292-2bd1f28bb414",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "3e75fbf4-335d-479c-9bb1-473c663330d4",
        "cursor": {
          "ref": "2180a0d2-8a27-436f-9255-2a8a465d4469",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e58273cc-fdc3-4547-9581-b8555b28b589"
        },
        "item": {
          "id": "3e75fbf4-335d-479c-9bb1-473c663330d4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "1ae8e8b6-08a7-438c-af91-fcb95216ae6c",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "5c497650-0a53-4ec4-9e8b-7c32db2770d3",
        "cursor": {
          "ref": "0ccb6956-e08d-4015-8acc-9f7c8f152a02",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "eb2c70cd-f50c-46e4-b03a-bbbf24dae30b"
        },
        "item": {
          "id": "5c497650-0a53-4ec4-9e8b-7c32db2770d3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f5989a80-1408-4922-8d3a-44ba1b6ca3dc",
          "status": "Created",
          "code": 201,
          "responseTime": 321,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "0b8051c5-b80d-485f-b317-dcdb95e1ab56",
        "cursor": {
          "ref": "ad61f6a9-8127-49c6-810a-55cd56f703f1",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "22329e15-9d18-4241-b955-3c5ace783773"
        },
        "item": {
          "id": "0b8051c5-b80d-485f-b317-dcdb95e1ab56",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "f2574bca-4879-4339-a318-71ae734a2a53",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "362b9dc4-13a8-48fa-8852-4e16f4d90072",
        "cursor": {
          "ref": "7f2265a4-ec71-4c37-96ee-6faac796c654",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "c34aec44-1318-4e56-8160-086c5d42d62c"
        },
        "item": {
          "id": "362b9dc4-13a8-48fa-8852-4e16f4d90072",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8c287156-1a4a-40ae-8334-fa8d144b6afb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e54bf7a-35d7-4054-93e4-5fdcd4e0fdaa",
        "cursor": {
          "ref": "d8573b45-9ade-441c-a1a8-d4ddbb8fcf9e",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b6958307-d5c9-4f6b-b5d6-a69700a9dd2c"
        },
        "item": {
          "id": "5e54bf7a-35d7-4054-93e4-5fdcd4e0fdaa",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "32ef62fd-adb8-48a7-aa27-27b5dbab394f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bac1bf8b-da46-47a2-a2ca-e45b75bf9134",
        "cursor": {
          "ref": "327bdd6d-2530-4b56-9dc2-96b006f3f83f",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a492374f-9010-4eeb-b844-2be24a2322ee"
        },
        "item": {
          "id": "bac1bf8b-da46-47a2-a2ca-e45b75bf9134",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9c6c7a1e-fa8a-4840-9e48-ec15ffd8ca29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d92c3c06-47e0-437d-819b-7dc71703bd6c",
        "cursor": {
          "ref": "9f473200-b3e8-4e88-9d4c-5af6f3fe2f19",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1fa28cbf-071c-49f2-b5c6-8aa571f042a0"
        },
        "item": {
          "id": "d92c3c06-47e0-437d-819b-7dc71703bd6c",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "470373eb-96d7-4c35-8be0-61ff4040cd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f01e3366-cc12-4c60-b6f4-c70534076704",
        "cursor": {
          "ref": "95158e01-e6bc-469d-a72f-2674746b4cf5",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "21a0818a-9eae-40fb-913a-93d536149cc2"
        },
        "item": {
          "id": "f01e3366-cc12-4c60-b6f4-c70534076704",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "eb0bf8f7-4324-40c2-a5c5-7196cb074cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "016c67f5-b1fd-4e4a-a997-b128f4813226",
        "cursor": {
          "ref": "4697e09f-41cf-429b-811d-ede4df9dc823",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5f577762-5a7b-4554-a4d1-c7314ec63f93"
        },
        "item": {
          "id": "016c67f5-b1fd-4e4a-a997-b128f4813226",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b615d68a-65fb-4da5-829e-00648ab210bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2466e7c9-4fe8-407a-9ba9-72ff26729be9",
        "cursor": {
          "ref": "4e0c614d-3b7d-4067-b9e2-34a13e9f0ab9",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "6c3fc54f-66c0-4123-a407-ce55130836b0"
        },
        "item": {
          "id": "2466e7c9-4fe8-407a-9ba9-72ff26729be9",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "c9b4dbbf-2efd-4e42-b4bf-22afaef89ad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f148879-d605-43e8-96bc-555cd4a923af",
        "cursor": {
          "ref": "396ade09-ad97-4944-bf7b-2d6a96e419c9",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "9f3324d3-a91a-4974-bbe8-353d00099b3d"
        },
        "item": {
          "id": "6f148879-d605-43e8-96bc-555cd4a923af",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "997e80a6-fc2e-41fa-8850-4f8c7cccb54b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e18fabf6-1bde-4f52-90c3-f15318875579",
        "cursor": {
          "ref": "47240d99-e661-4ef8-bb2f-30e6409c9825",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "a6c2397a-f89b-45f3-97d0-faccdff08a76"
        },
        "item": {
          "id": "e18fabf6-1bde-4f52-90c3-f15318875579",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "b5221445-39a7-406c-932d-92128b49e605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8294246-c3f6-40d0-84e3-f316d7bd278c",
        "cursor": {
          "ref": "16455ca4-270b-4a7c-ac2a-53f3500c929b",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "de9aa6e5-64e8-4e7f-8c6c-73a5574493fe"
        },
        "item": {
          "id": "b8294246-c3f6-40d0-84e3-f316d7bd278c",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "81b8d896-4f46-42ff-bcea-48d484111176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9512e1-e006-4569-b6d6-03d1d24a9f0b",
        "cursor": {
          "ref": "f5ae8a9e-6a80-4ee4-a853-928e23cb94c8",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "c93b169d-d3f0-4bed-8fc8-67eebb740aa1"
        },
        "item": {
          "id": "0f9512e1-e006-4569-b6d6-03d1d24a9f0b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "999c33cc-f75e-47da-af19-a4ac7d03679a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec2287c4-af54-41f9-bb59-5e0e3358fa07",
        "cursor": {
          "ref": "dacfc570-ca6d-4e17-9873-47cd66406d8f",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "daf7e51f-841c-4561-86e4-4191ff8c9379"
        },
        "item": {
          "id": "ec2287c4-af54-41f9-bb59-5e0e3358fa07",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ca9f6ae5-589e-4462-9059-2844a9053b39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7270cfb-5297-474d-bad8-77751a218bf7",
        "cursor": {
          "ref": "26657b79-f33b-49c2-a077-fa1dae57e670",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d5a42103-b989-4e3c-bdd7-fc402e95db7c"
        },
        "item": {
          "id": "a7270cfb-5297-474d-bad8-77751a218bf7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "530dc2f4-bc8b-466b-ad00-c7faf3ac3681",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23c1d68d-e76b-4e12-8ff4-8a74d58479d4",
        "cursor": {
          "ref": "416b7366-d43e-4b92-bef8-4bfc753db5fe",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7d55dd64-b72c-49e1-92e7-387580936ddc"
        },
        "item": {
          "id": "23c1d68d-e76b-4e12-8ff4-8a74d58479d4",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "35adeafa-62e9-4148-8300-c6abffac0afc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd6872b-34e1-43be-b351-5c67a186b3cb",
        "cursor": {
          "ref": "76e120b1-0b1e-4508-8c2d-dc92b8219cb1",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "933ee977-4dec-4514-ba76-4244307b12fc"
        },
        "item": {
          "id": "efd6872b-34e1-43be-b351-5c67a186b3cb",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "52e710fb-71c4-4d91-8664-d3f0941a8adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3f9ecd3-508b-45a8-b408-e66e28baf2f2",
        "cursor": {
          "ref": "70078903-1c91-4293-8177-fa9dda4a6747",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "2c4ce6a1-0990-426c-9d77-2c6d1aaa8054"
        },
        "item": {
          "id": "f3f9ecd3-508b-45a8-b408-e66e28baf2f2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "bc3a348e-c850-4876-a416-1509b6e04cd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b183c8c-e970-4f0b-aa20-68683a9cc316",
        "cursor": {
          "ref": "02354b7d-6256-4a4d-ba52-03a0a939b5b2",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "acafafd8-bf89-442a-931d-295604ccf089"
        },
        "item": {
          "id": "3b183c8c-e970-4f0b-aa20-68683a9cc316",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "1c2d1345-9fa1-4c3f-8d60-16f86f4880b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9dfee61-9960-4b0f-ba23-99c51fe855af",
        "cursor": {
          "ref": "1259e656-aa03-4e6c-99b2-67443e069542",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "abcbdfda-1309-4369-a81d-bfbae8c57089"
        },
        "item": {
          "id": "c9dfee61-9960-4b0f-ba23-99c51fe855af",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "2a1ba437-23ed-411c-8d5d-b6d22d3dbfe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "927a43c1-69d6-483a-8665-a3f5f95003b6",
        "cursor": {
          "ref": "7d50d3c0-001c-44f6-b957-d2652c447fde",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "ab726283-0340-47ad-b2bc-8c6604a71ff7"
        },
        "item": {
          "id": "927a43c1-69d6-483a-8665-a3f5f95003b6",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c88d2026-dd10-4834-8bf1-45aa0587b5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e68fa836-e5d5-493a-810d-fd9b9b7cca49",
        "cursor": {
          "ref": "b9030d5e-69fd-4b7a-979a-1126ab1abfd1",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "88fe838d-b156-42ab-9152-68fe8507a739"
        },
        "item": {
          "id": "e68fa836-e5d5-493a-810d-fd9b9b7cca49",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "49c77119-ac51-407d-ba60-dcb0abf8082a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a87bf6b-6755-4eea-a4b7-13788a78ccc0",
        "cursor": {
          "ref": "906bd68e-ad47-4725-9451-88d25397d795",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b847d2d7-bba4-4048-a37b-30b70dbc0195"
        },
        "item": {
          "id": "5a87bf6b-6755-4eea-a4b7-13788a78ccc0",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d657cbc6-8f3f-444a-ac34-23ec34008eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48dbb9a1-4e35-4005-b956-166428531fdb",
        "cursor": {
          "ref": "c0d8047d-e596-4d3e-ac65-73c4d8f61415",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "790ca194-7172-42c8-86ff-183e7cf99115"
        },
        "item": {
          "id": "48dbb9a1-4e35-4005-b956-166428531fdb",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "14b1e4bc-e238-44ed-8068-003bc5698bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "301a5af3-3643-45ef-8f61-8d9b83fe97ef",
        "cursor": {
          "ref": "8e491169-580f-4444-810e-38cd09b3b8d0",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "92133edd-b3f1-4ff9-a200-a0358ad44baa"
        },
        "item": {
          "id": "301a5af3-3643-45ef-8f61-8d9b83fe97ef",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "856491df-b02e-4474-ae57-86462779b20e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00619306-c479-414b-8700-aa13b8e16870",
        "cursor": {
          "ref": "f8fe1f97-8886-4ac5-860b-571b6a5339c6",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "b54c3d73-c33f-4ed1-8010-f95cbbac8fa4"
        },
        "item": {
          "id": "00619306-c479-414b-8700-aa13b8e16870",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d9370614-0562-471e-a333-bd9f9687f020",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba06ab80-6568-4458-86e1-55d1df120a5b",
        "cursor": {
          "ref": "92cb8060-49ba-4327-af96-6d2dea8356f1",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "88c37829-4e75-4d77-8664-5638e4ee1a60"
        },
        "item": {
          "id": "ba06ab80-6568-4458-86e1-55d1df120a5b",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "78190db7-bbac-40a7-a6b3-78a949575c48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dda05b0-9e9f-4277-a2b8-566e6535a066",
        "cursor": {
          "ref": "b99df4ba-26e6-4546-b597-46102d29b888",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aed3c73b-567c-424d-9fa1-edc2891d3a53"
        },
        "item": {
          "id": "6dda05b0-9e9f-4277-a2b8-566e6535a066",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d2b98983-31a3-431e-98a8-530d36c33c62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "924975f3-ed31-4e05-bfb0-0dd51594d023",
        "cursor": {
          "ref": "e4a3ebdf-34a2-4f30-9780-ab896bcbd5db",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "1265dcf1-5aa7-44c5-ba15-f89469d734ba"
        },
        "item": {
          "id": "924975f3-ed31-4e05-bfb0-0dd51594d023",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "a1cceb89-1256-4c37-aaf9-099b50c50ef7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df430fa-c5aa-4431-8027-92ab0704ab22",
        "cursor": {
          "ref": "f851130e-47c7-4a94-a7a8-c8f12f523495",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "72df632b-69c3-4c8d-be45-be1b7c5d82b4"
        },
        "item": {
          "id": "9df430fa-c5aa-4431-8027-92ab0704ab22",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "721d2a98-1a27-4e97-9687-a7d6242e7c27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae57344-b6fe-496f-b487-04771d9b8409",
        "cursor": {
          "ref": "c6441e09-4c60-4eb7-b3e3-2528d72a782a",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "f519f851-3bfc-4111-8a1a-6e9746ef313f"
        },
        "item": {
          "id": "fae57344-b6fe-496f-b487-04771d9b8409",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5de72e0c-0d6f-4169-8f2d-268d0d54e18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8bde77c-938e-49a4-9856-13add32ea456",
        "cursor": {
          "ref": "e02a1797-29f1-455c-9d66-3dadfca9bf2d",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "b90b22c1-d07f-4096-b588-b585ccb84f08"
        },
        "item": {
          "id": "b8bde77c-938e-49a4-9856-13add32ea456",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "9ce6b6c0-82d9-4626-b0c2-f66bdc75f924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f962b84c-76d1-4674-aa34-67d3e79f1b7f",
        "cursor": {
          "ref": "13830375-9537-4f2f-807b-fe1f5dfb76fa",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "260f8b1a-b510-425a-812c-df3f0e3bc210"
        },
        "item": {
          "id": "f962b84c-76d1-4674-aa34-67d3e79f1b7f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f0e58926-6685-4627-9a22-5ebf416c508e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23ab16ef-28f4-42bd-a37b-3359c765309e",
        "cursor": {
          "ref": "68cb1587-39aa-4a2b-8bbb-bf8b73ba039d",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bab51013-bfa6-4d37-8c71-c8f4e56eb98c"
        },
        "item": {
          "id": "23ab16ef-28f4-42bd-a37b-3359c765309e",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "9560f1e2-8ec0-48f7-ba4e-a6efde9640f2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624f510b-1749-4808-9393-8c05d7e84ee1",
        "cursor": {
          "ref": "64a3c66d-ebfa-4729-95c9-7af760569c84",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5fc3f517-0261-4c20-a651-bc6460ad8aea"
        },
        "item": {
          "id": "624f510b-1749-4808-9393-8c05d7e84ee1",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "13e99fe1-8ea7-45d2-b554-45274ff8c747",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "fe3c38b7-9cfe-4f2d-9901-d1c84f2c8c20",
        "cursor": {
          "ref": "e5f34ea0-c96e-4580-b670-07e5137f05bc",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "616569cd-4790-4a16-b58d-ee6e0b276d5c"
        },
        "item": {
          "id": "fe3c38b7-9cfe-4f2d-9901-d1c84f2c8c20",
          "name": "credentials_issue"
        },
        "response": {
          "id": "173475d8-9a10-414a-af07-7f4e228c8372",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "72c4a1f6-177d-4ee2-9501-a2a04941ad07",
        "cursor": {
          "ref": "3578aadf-fe86-41fa-aa38-d81d87a397d9",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "8ae78bb6-fd0b-4e8b-b749-a5fd6983227c"
        },
        "item": {
          "id": "72c4a1f6-177d-4ee2-9501-a2a04941ad07",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "d1ea1a21-cdb1-4450-96fa-8108ce5a7fd4",
          "status": "Created",
          "code": 201,
          "responseTime": 269,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d2ec90-8853-49af-86df-02dd199c56a5",
        "cursor": {
          "ref": "49771714-5741-4f8c-967f-a5ae16a244d3",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "57e010d8-b768-4658-9ca0-7dcab537ea2c"
        },
        "item": {
          "id": "78d2ec90-8853-49af-86df-02dd199c56a5",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "5bc83275-4cb8-40cf-a893-bc63ce71a40f",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8e471cf-56c3-4e60-9504-e85f9e7d65ee",
        "cursor": {
          "ref": "fb5f33af-20a3-4e5e-9245-3525f870bb9a",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "e990cb2f-2ab0-434b-a271-e29aca8500ff"
        },
        "item": {
          "id": "d8e471cf-56c3-4e60-9504-e85f9e7d65ee",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "939f7443-2d73-46e2-a053-e5303d1d4c59",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f3aa07-c566-41dd-806f-12ec7791fbb2",
        "cursor": {
          "ref": "61b6df69-3115-40aa-9fca-16db4d88fb69",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "22b22c4a-6a29-49e7-81bc-c33550921002"
        },
        "item": {
          "id": "98f3aa07-c566-41dd-806f-12ec7791fbb2",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a5ec1d78-a2e9-4d32-93b1-cfcf371664a3",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-27T00:35:23.281Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-27T00:35:23.281Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ec4f6f3a-b302-4c14-9d83-a87787886510",
        "cursor": {
          "ref": "b89a7230-f686-4968-a07a-b8a5cafe7ebc",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "2593f09d-4eb9-4df8-b916-869e457069de"
        },
        "item": {
          "id": "ec4f6f3a-b302-4c14-9d83-a87787886510",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "3004eb63-bb8c-4320-9575-0911cca95094",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e8af8cc-48a2-4d18-8dde-b11a6503b233",
        "cursor": {
          "ref": "4cc41c13-57ec-4aac-a4d6-b786f7d97fb9",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "98c3d2a3-7b6e-4dff-8ecf-01c3eb16fc87"
        },
        "item": {
          "id": "9e8af8cc-48a2-4d18-8dde-b11a6503b233",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "48e88488-a9fa-4504-924e-24cbf8975281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81672332-96d5-439b-b8d5-fe8a89b18df9",
        "cursor": {
          "ref": "66aa800a-b159-4deb-8e29-9322fc4a67b8",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b1b825f4-5e5d-4b4f-a58d-9c90a5b58e94"
        },
        "item": {
          "id": "81672332-96d5-439b-b8d5-fe8a89b18df9",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "cf72d6ee-ea97-44aa-8ad1-c97986e5eee0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3943dc19-df84-4b45-a96c-af966d719f83",
        "cursor": {
          "ref": "70d45838-3d2e-4e8b-a961-8c7197b5e967",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "db0645cc-313c-418c-9607-92ab1e49a8e8"
        },
        "item": {
          "id": "3943dc19-df84-4b45-a96c-af966d719f83",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "ee39f902-83fe-4089-9db2-8229cedf0de5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63402e3b-75ff-447d-9682-ca514931a9bb",
        "cursor": {
          "ref": "79d06105-7889-4ea9-bd7f-e4170a52857d",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "65104c85-b3d5-408d-b7e6-37f618f31d9d"
        },
        "item": {
          "id": "63402e3b-75ff-447d-9682-ca514931a9bb",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2c9c809d-755b-4623-80c7-93f39976b3a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a66d18b6-47ac-4ab3-8762-860d48930ad6",
        "cursor": {
          "ref": "688893fb-00fd-466e-b52e-a674dc9fd051",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "b18ed3ae-a05f-402f-a606-4108660642fc"
        },
        "item": {
          "id": "a66d18b6-47ac-4ab3-8762-860d48930ad6",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3d0323a4-0578-411b-853b-aa103a4ce015",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936aa995-322a-422d-8ce5-31983e779753",
        "cursor": {
          "ref": "3d716ff0-c7df-45f2-85ab-46fe91d348b8",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "218ac15f-a635-4ec6-bfcc-5057cdc5f22f"
        },
        "item": {
          "id": "936aa995-322a-422d-8ce5-31983e779753",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "c0aef784-a615-4e62-be7f-83a7740d5da0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d036a767-c714-45a8-80cb-37564c708d8c",
        "cursor": {
          "ref": "9cd9aead-a80b-4904-b6ac-1e5ad5749e3f",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "8357bd5e-eb83-4610-8b75-b14a90fee2fa"
        },
        "item": {
          "id": "d036a767-c714-45a8-80cb-37564c708d8c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "c13040f0-92a6-4438-bed2-62ae50f5e1cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1047e3b-e20c-4e9c-b50e-b307d60db97b",
        "cursor": {
          "ref": "60631199-a2d9-4a6c-abef-eee93555dd1a",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "87891423-f112-4a05-b9d7-89fdea04fcd6"
        },
        "item": {
          "id": "c1047e3b-e20c-4e9c-b50e-b307d60db97b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "68ec202a-4f44-4cfd-9094-d47588006c5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e35fb80-9f1e-4749-91a1-e16889bb536c",
        "cursor": {
          "ref": "de523f33-fc7f-43d9-b38f-083580665112",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "efc33e50-a11a-4de9-ae35-af18a42126fd"
        },
        "item": {
          "id": "8e35fb80-9f1e-4749-91a1-e16889bb536c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "73893a36-817d-43f3-b2db-a8fa62577789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e577f476-79d1-4d66-b4d1-f7f521490100",
        "cursor": {
          "ref": "80c8c1c2-92ed-43ee-a5af-fef86e7e2124",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "ba4c8088-a0d4-4022-b19d-ad1a0d7d963a"
        },
        "item": {
          "id": "e577f476-79d1-4d66-b4d1-f7f521490100",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "57194081-67ae-4dc2-83b7-8dc625662e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47a7b832-f88d-4f3f-837c-9139280609e7",
        "cursor": {
          "ref": "40fcd6f8-6464-4006-9659-cd25482dfb3c",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "a0c0754d-84a2-431a-8cd3-1b2d4e5af42c"
        },
        "item": {
          "id": "47a7b832-f88d-4f3f-837c-9139280609e7",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "d4ac537a-0d9f-4c47-a111-909a6cb7611b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "438ebe94-c957-4e5a-96ca-78b50fa75fce",
        "cursor": {
          "ref": "617729f7-a53e-4562-a3a9-903723150aa8",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d1e89eb5-302e-4f9d-9424-8b8aea5cc1a4"
        },
        "item": {
          "id": "438ebe94-c957-4e5a-96ca-78b50fa75fce",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "a601a030-0656-4225-9be4-eb0f5261a6ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11254737-3ced-441d-babf-2e35727bc2ba",
        "cursor": {
          "ref": "0a48a27f-6596-4654-9397-fe7dbcbbba8e",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "9daece5c-5685-431a-b08e-92edfac051f9"
        },
        "item": {
          "id": "11254737-3ced-441d-babf-2e35727bc2ba",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "770827fe-2aa7-4409-9524-6b633a6471c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b465fa6d-37b6-4774-b9e8-42bab4b30239",
        "cursor": {
          "ref": "0419299c-ff42-42e2-b960-ae8c442341c6",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0c419765-aada-482c-a16c-80cd7250845a"
        },
        "item": {
          "id": "b465fa6d-37b6-4774-b9e8-42bab4b30239",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "93970393-48c9-4d3c-b90e-c4de8d36bf78",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 57,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "a74ccf62-80db-49cd-af8b-31bf2cf4da33",
        "cursor": {
          "ref": "2b8e5248-00b5-45d5-ab6e-a843919bdb43",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "cb277de8-34c6-4648-bfbc-64396f9f9a23"
        },
        "item": {
          "id": "a74ccf62-80db-49cd-af8b-31bf2cf4da33",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "a9c575fa-3ba0-45a9-a27d-e39bc2473ffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00e4cdd9-2f4b-40b2-89c1-afc82bbb98a5",
        "cursor": {
          "ref": "73f5818a-9681-4df3-8959-b18404a3fb01",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "cb7d0272-9508-4eee-b9a1-653a8e1ac4f4"
        },
        "item": {
          "id": "00e4cdd9-2f4b-40b2-89c1-afc82bbb98a5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "dd94e4c8-3d7f-477a-8fb1-2d2a78f17f77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3e0dd8-b562-4202-aa21-9c18ad6394d8",
        "cursor": {
          "ref": "5857232c-0f14-40c8-be1f-f45856ca3caf",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "d1cb6e52-1a41-42c3-814c-30ddb3ef49ea"
        },
        "item": {
          "id": "8a3e0dd8-b562-4202-aa21-9c18ad6394d8",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e8fdd51e-d6c1-4c8e-9543-8c2bf93bcc9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9016ac8-5f06-4a1e-bca9-a904bfb9559c",
        "cursor": {
          "ref": "9fa39bfd-b150-4d03-9b02-6a3161694391",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "8111220c-0b0e-4e2e-a3dd-bd58838dc908"
        },
        "item": {
          "id": "a9016ac8-5f06-4a1e-bca9-a904bfb9559c",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "c7fd6098-5038-4499-9183-506ea90c4f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efae6b15-e205-4905-acaa-50e78314f5ad",
        "cursor": {
          "ref": "047b624f-0d9b-4b44-850d-646e2ad37154",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "2f1e13ba-4872-4d71-b6c3-d6427bb3572d"
        },
        "item": {
          "id": "efae6b15-e205-4905-acaa-50e78314f5ad",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "2ef7cfc0-792c-4a1e-8da2-9b9923a35554",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc3dd5cd-a9d2-48bb-8b91-9f388052886b",
        "cursor": {
          "ref": "b656cc88-16da-483e-ac58-9ee9dd0ae74b",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "eb1a0c80-5870-4e36-8c85-32e55f3c360c"
        },
        "item": {
          "id": "cc3dd5cd-a9d2-48bb-8b91-9f388052886b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f5e41aaa-7000-4213-a70f-b2f0d0910595",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c7032af-ba67-442f-8050-f9475afa90d2",
        "cursor": {
          "ref": "d685f38c-69e4-4673-81d0-3da052cb69cf",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "28a7a392-9833-49b0-9650-e4408d58b13b"
        },
        "item": {
          "id": "5c7032af-ba67-442f-8050-f9475afa90d2",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4c77d790-3d5c-4255-866b-5e0d8afd58c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f547f1a-3380-4586-8947-529a722f5ef3",
        "cursor": {
          "ref": "0e54254f-2fcf-4694-bb77-5846fd37fbd9",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "f8c99b47-968d-4b52-8bde-0b1ff8130fd5"
        },
        "item": {
          "id": "4f547f1a-3380-4586-8947-529a722f5ef3",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "71ebafc6-bb8e-4db0-8bbb-57acb657fe7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "092edd3f-9a9c-4304-941c-d38cf68fdddd",
        "cursor": {
          "ref": "2e013f1a-2ecd-4e48-85df-383b3410adb4",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "7638baaa-4655-423b-bff3-4eef70762140"
        },
        "item": {
          "id": "092edd3f-9a9c-4304-941c-d38cf68fdddd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ddf06e11-c6d5-4dcd-aa67-353ba9320ff0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e81456f8-c964-4315-9b89-47a1880fad87",
        "cursor": {
          "ref": "af348e81-9bd6-4c41-86b9-0f3872b6bc56",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "9bb4a981-aea7-48c6-a8ac-094d0e5b6a3d"
        },
        "item": {
          "id": "e81456f8-c964-4315-9b89-47a1880fad87",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "df5fc184-efb4-4a09-a2f3-facd890990c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd382328-fced-4563-a067-4d12073a8933",
        "cursor": {
          "ref": "15ef8adb-318f-4647-a547-3b8fe1f6844e",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "05c26985-f42a-4d7f-ae49-2b3fdceb0ad1"
        },
        "item": {
          "id": "dd382328-fced-4563-a067-4d12073a8933",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "38de0890-58d4-4354-a95f-af739f6a0908",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ad3de87-bfa1-457b-9acf-d9bdce4534e5",
        "cursor": {
          "ref": "6b24a4ee-98cc-4d89-807a-722f55ea7623",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "202790c8-6f58-4f9c-9491-1ad4f942399b"
        },
        "item": {
          "id": "6ad3de87-bfa1-457b-9acf-d9bdce4534e5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "b1dfc5c6-acca-407c-8abf-a109ac175d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a406428c-cc4c-4e51-85fd-9190058a2499",
        "cursor": {
          "ref": "953bbfd2-b787-415d-a719-34383fa8c412",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "ebdb9060-cc33-4d03-a77f-ea596a7a9d39"
        },
        "item": {
          "id": "a406428c-cc4c-4e51-85fd-9190058a2499",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c0e5eafe-c077-4d1e-97fe-43e5a94f1adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cfd2acd-3e2f-491e-b637-782cdd26eec5",
        "cursor": {
          "ref": "60613e0b-aa1f-4b70-bdb9-833a08df98f6",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a18eb579-649b-4dd3-ab73-89492ca3b95b"
        },
        "item": {
          "id": "5cfd2acd-3e2f-491e-b637-782cdd26eec5",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "5a09e60e-12e8-443d-9b9a-9075978fc98b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bff40702-5d36-40fa-b31f-ed737185301f",
        "cursor": {
          "ref": "cff0be08-2fe5-4f9b-a7eb-b4e88104b7f9",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "800a61ad-d302-46a0-a685-f20837bf1036"
        },
        "item": {
          "id": "bff40702-5d36-40fa-b31f-ed737185301f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "d22a36cc-e44c-4e67-8274-6719860eb1c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69381c2d-b1e7-4cef-8e11-1276047d509c",
        "cursor": {
          "ref": "6c5ad612-70df-47c3-a825-4be4462a01b3",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "f6745810-b926-4f8c-959f-51afa5cb32f3"
        },
        "item": {
          "id": "69381c2d-b1e7-4cef-8e11-1276047d509c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "2c089d92-b65a-4677-bbaa-77990eaae920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8138950d-3c00-4899-867b-c960f27782a6",
        "cursor": {
          "ref": "1c3d5d54-8f08-4f81-b544-ae06010d4221",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6cc63e18-4f6f-4a25-b23c-b4e99c3ef1d0"
        },
        "item": {
          "id": "8138950d-3c00-4899-867b-c960f27782a6",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "ee1d699a-0f29-4f16-b0a9-93c08eb897a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a396f4b7-9246-4d3d-b263-b925a158fa84",
        "cursor": {
          "ref": "f55a91c5-edad-43bc-af26-b59a7ebc9681",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "575e8ded-053d-4c9b-be99-435c75d736e5"
        },
        "item": {
          "id": "a396f4b7-9246-4d3d-b263-b925a158fa84",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "40775a00-ee0d-41a4-8856-29a8b739cf71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c803780-6866-4b34-bb80-11ed0cde024a",
        "cursor": {
          "ref": "b51702dc-b829-447c-b16a-7379150e128f",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7949b2cd-b6f6-452a-99e5-2d0b51981413"
        },
        "item": {
          "id": "9c803780-6866-4b34-bb80-11ed0cde024a",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5ec0501c-bcf6-4374-a7da-74191710f384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "345cd462-445d-40bb-a2f4-f79e8848b39e",
        "cursor": {
          "ref": "9861377a-7f8d-49f1-814f-16d0f5227176",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "82510b1c-4453-43c1-b624-e82f63d9e53d"
        },
        "item": {
          "id": "345cd462-445d-40bb-a2f4-f79e8848b39e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "3583b984-9bb1-404a-a556-f30a9ebefaa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d3035c1-66d4-46e7-8c85-b7c5cd9dcf35",
        "cursor": {
          "ref": "8cce67a6-77cf-4f39-b096-7d2db34f25cd",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "a86e2b83-8acb-440f-b4f8-0875eb870e74"
        },
        "item": {
          "id": "2d3035c1-66d4-46e7-8c85-b7c5cd9dcf35",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e10094cb-88d2-4396-900b-d383531551d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88e17ba6-728c-4a4a-bf0d-8946426b274f",
        "cursor": {
          "ref": "80c2c3f1-2efb-4028-8a8a-a8f8a85bce0f",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9d7a24ab-3384-441a-a3a0-a5f85c2674f6"
        },
        "item": {
          "id": "88e17ba6-728c-4a4a-bf0d-8946426b274f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "b45d3484-33c6-4489-96ce-9687d14c130f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de427ec0-1c85-48e6-93c8-0c1343730931",
        "cursor": {
          "ref": "8d47b102-fefe-4544-b933-0be691453377",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f7d31448-e9ff-4fe5-bfbd-022e903b3024"
        },
        "item": {
          "id": "de427ec0-1c85-48e6-93c8-0c1343730931",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "1132669f-73c9-47d0-a4d0-5266ffd82429",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd1ac9c9-3180-4216-94f5-214148d16f3b",
        "cursor": {
          "ref": "c3eecc61-5737-4515-8eda-498ceca8d9bd",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8366bb8f-f7b1-45d3-8a57-30dce75c1a85"
        },
        "item": {
          "id": "bd1ac9c9-3180-4216-94f5-214148d16f3b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "ae60b97a-c9a3-47a1-8ddf-951388dab6d4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9841530-51cc-4959-b0ac-bed402c5863d",
        "cursor": {
          "ref": "5f58e591-663b-473d-8903-f50207405ba2",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "6a20e0ba-1be0-444d-817a-083032f56431"
        },
        "item": {
          "id": "f9841530-51cc-4959-b0ac-bed402c5863d",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "1aa5125f-9812-4a82-890c-d5170842c9ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d825e6cd-0ca9-4500-a3ec-d3bd9b024e9c",
        "cursor": {
          "ref": "6564d305-e493-4dde-9232-34656481ae7f",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "65d77f9b-afa4-45e4-a10b-0ff824c87963"
        },
        "item": {
          "id": "d825e6cd-0ca9-4500-a3ec-d3bd9b024e9c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "03a47da0-c4f3-49ac-9ac0-2b507b4c7c9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "126804f5-962c-4fae-afcb-f4b000f0e0c9",
        "cursor": {
          "ref": "2d1744f7-99b6-416f-b384-daa6d7604824",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "34ce4aa8-d992-4b7d-8a4f-18a282c67a6f"
        },
        "item": {
          "id": "126804f5-962c-4fae-afcb-f4b000f0e0c9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "f9e43fdb-e5e9-465f-9428-c7884d8c3fe0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f5020e0-af19-4498-b6db-ec752f4d7f83",
        "cursor": {
          "ref": "a7045ae2-fe26-48b6-b6f6-9b737b5d2f56",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b5fde8ab-2ef1-465f-8170-4dc4b342f488"
        },
        "item": {
          "id": "0f5020e0-af19-4498-b6db-ec752f4d7f83",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "f54b8471-21d7-4d4a-93e7-76d949577292",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "252b07ff-cdcc-4f4f-87c0-b31fde869849",
        "cursor": {
          "ref": "3886e2df-0e27-4811-b48d-3e03ac8f16e1",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "96b24cab-2ed1-4ae5-9848-df8a026d1d0e"
        },
        "item": {
          "id": "252b07ff-cdcc-4f4f-87c0-b31fde869849",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e971cd1a-393f-4beb-b4a9-5719ded91d40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ee5a8e5-4868-4c4d-bc79-2a81feb41afb",
        "cursor": {
          "ref": "bc77f103-b8fb-4d6d-acd4-95adfd0eb527",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "333c8aed-8b12-4cbd-a2a9-d5e3e9c2605b"
        },
        "item": {
          "id": "2ee5a8e5-4868-4c4d-bc79-2a81feb41afb",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "10445b95-2903-4cf1-b63a-cb58a175ab2c",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "26092562-3d2d-4587-aa17-485dd3c81abb",
        "cursor": {
          "ref": "cfba002b-54b2-4d54-a83b-e6e55b45f598",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a48eb83e-ff26-4177-9a6e-6c212ead45da"
        },
        "item": {
          "id": "26092562-3d2d-4587-aa17-485dd3c81abb",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "04b01f55-b39f-4a9a-bffb-c66bba81a2a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4d51c0b-b04a-4be4-aae9-c3e63701598f",
        "cursor": {
          "ref": "fd74e949-2ca5-4edf-8be2-16b345f6feea",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "70ade305-b229-48eb-87bf-361a445f90b6"
        },
        "item": {
          "id": "c4d51c0b-b04a-4be4-aae9-c3e63701598f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "c1744caf-73f1-4dbf-9108-8419c3d08e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7a550eb-ebb4-4581-b5f1-b054130537ec",
        "cursor": {
          "ref": "f671ddad-fb93-4f20-99f2-a8b583977a0d",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f9744ad9-ab8b-42fe-a298-1dada35cb44a"
        },
        "item": {
          "id": "b7a550eb-ebb4-4581-b5f1-b054130537ec",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "11f1786a-332e-46d7-b358-3dc4336ba561",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8450b061-9c25-4f27-a5d2-f5db4342266d",
        "cursor": {
          "ref": "ae460aef-8e28-41ad-9cc8-ac3a72ed7b9d",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "425acc7d-ea1b-45a8-987a-e9bd98b72eec"
        },
        "item": {
          "id": "8450b061-9c25-4f27-a5d2-f5db4342266d",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "d0e3a0bf-37e3-43b9-af9a-841718aa8aec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87389447-9583-4cf3-a1ab-727ebb84fb8e",
        "cursor": {
          "ref": "400bc9b5-e05c-4ea1-88db-cf6411a7f839",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e8350bdc-6370-481e-ac56-1b8ab9f06413"
        },
        "item": {
          "id": "87389447-9583-4cf3-a1ab-727ebb84fb8e",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "b14a7c06-d5ea-4ca0-b566-ced5ba190beb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a65136f-083e-4500-a0e9-071cd9984f9f",
        "cursor": {
          "ref": "88b698c9-139b-4055-8d11-decf60a0727d",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "1e865e7d-5564-4b35-86b9-aec466f0a275"
        },
        "item": {
          "id": "2a65136f-083e-4500-a0e9-071cd9984f9f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "ff686a29-96a2-4d9b-bc4e-51431c309fb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "297ac158-b83a-43f1-9e21-2d3da147eb5f",
        "cursor": {
          "ref": "792be576-8a9e-42b5-ab93-d5b2dbb44b82",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "be91fea5-0577-41e5-9f23-45c27d77a71c"
        },
        "item": {
          "id": "297ac158-b83a-43f1-9e21-2d3da147eb5f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "e60a5d2d-a0aa-4ac9-8a56-f707531a3d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05eb271d-0f24-4e80-8203-def6a3b60878",
        "cursor": {
          "ref": "8043adfb-124a-4cec-86b5-eaa2656bf048",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ce827619-c4f5-4c7a-87cd-ae88579c2ce4"
        },
        "item": {
          "id": "05eb271d-0f24-4e80-8203-def6a3b60878",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "ff232e4a-753e-4f15-b2b0-6b25b9a6a7cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6957119e-9149-4cd1-bcc8-3890c826106e",
        "cursor": {
          "ref": "70d77aab-75c0-442e-a4c2-77c28083fb7e",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "542fab35-8e9e-4bf4-8298-b649738a96cb"
        },
        "item": {
          "id": "6957119e-9149-4cd1-bcc8-3890c826106e",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "386f2914-40a3-4b69-a9d8-f9a098fdc458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eecc9bdd-af45-4af2-a1b8-de9dd4d7ea10",
        "cursor": {
          "ref": "e466b5e9-0c3f-41e0-a87c-1c15f1c5a23e",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e906854c-8ee2-4814-81e7-1e53e13cd802"
        },
        "item": {
          "id": "eecc9bdd-af45-4af2-a1b8-de9dd4d7ea10",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "bb6d6fb2-2a30-419a-a853-7849b542adda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee9e3b1d-3169-4ae7-81c0-12f460c3b213",
        "cursor": {
          "ref": "77220fea-757c-4e37-b906-b2d4f8e646b6",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "c357d9e4-da66-43df-b22a-27dd44ae0a74"
        },
        "item": {
          "id": "ee9e3b1d-3169-4ae7-81c0-12f460c3b213",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "7c62c6fb-dfad-496f-9d52-3cc440be0611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2a8e53a-ef9a-45ae-ac98-e2529595aac2",
        "cursor": {
          "ref": "a8c6848a-5fd6-4103-b0e8-b227bf6427b3",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "db8b49f1-fc58-4c29-80c6-7aad4d693fdc"
        },
        "item": {
          "id": "b2a8e53a-ef9a-45ae-ac98-e2529595aac2",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "46b752c4-4472-4555-b5d9-f5ba98828f54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36dbe03f-5fa1-4181-b974-eb4050e8d026",
        "cursor": {
          "ref": "6b36aee4-3310-4207-95b8-f35ba6a4fc9d",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "ba681499-2a16-4ab4-9682-8fdb732a365b"
        },
        "item": {
          "id": "36dbe03f-5fa1-4181-b974-eb4050e8d026",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e35b7df3-21b4-4317-9186-21bc706d65a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7d4e566-8fc6-44af-9b04-5bde74126f75",
        "cursor": {
          "ref": "2937fab7-9b22-48eb-b3a1-ce1b45e37b6a",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "e29dc9d2-d22f-4346-8ca9-2ec38aee69aa"
        },
        "item": {
          "id": "f7d4e566-8fc6-44af-9b04-5bde74126f75",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "88fe1490-1102-4489-8ca0-8604eb479156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9de3aa8-8283-41c0-991f-f2fcf43d9e9a",
        "cursor": {
          "ref": "2c052fcb-3fce-4fc0-959a-a4d8ef51ee70",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "e33d3910-ef3a-4101-a969-1cb6bdb67ed2"
        },
        "item": {
          "id": "e9de3aa8-8283-41c0-991f-f2fcf43d9e9a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "5de7a423-5807-4ca7-8def-f032ba269290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d196eedf-32d9-4feb-ad00-17b018b6e09f",
        "cursor": {
          "ref": "06bae7ca-ce0d-4090-bd77-e402da969db6",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "58713650-887f-49b4-a8d4-c168a60eada1"
        },
        "item": {
          "id": "d196eedf-32d9-4feb-ad00-17b018b6e09f",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bf6b87b2-076c-4782-bf91-2606f397c917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee3217d3-4a10-4c03-9dcf-c8277aa1264c",
        "cursor": {
          "ref": "f9296725-4aab-492d-b763-aadfd6065c2d",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2f7a578d-f5fd-4335-bb58-979ea0f4f3d5"
        },
        "item": {
          "id": "ee3217d3-4a10-4c03-9dcf-c8277aa1264c",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "771b21c3-2fa8-460e-a20c-e919f85f5ea8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56881d68-4fb6-48a2-b979-77462be60704",
        "cursor": {
          "ref": "d775be58-479f-4704-b8be-cb58d17c207d",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "96b1b5f0-fc73-4704-be63-e09de5097bfa"
        },
        "item": {
          "id": "56881d68-4fb6-48a2-b979-77462be60704",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "209eb8a2-df48-4d0f-9562-c4df2e5e7c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c9400e8-19c0-4343-b45b-24283b72d857",
        "cursor": {
          "ref": "352f5497-200f-4a21-8321-db6a9d0b278a",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "6db8886b-8b96-4aee-81e5-f4024d13b3f4"
        },
        "item": {
          "id": "8c9400e8-19c0-4343-b45b-24283b72d857",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "702d32b2-b813-4f4e-ae2e-9f6da32466b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e67bc70-7148-45ee-a3e0-6914e3cfd1c5",
        "cursor": {
          "ref": "4ac20a99-5885-42b8-97b7-3e710fc3ab53",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "ce01f489-9db1-4848-9f28-6d19a0dce55c"
        },
        "item": {
          "id": "4e67bc70-7148-45ee-a3e0-6914e3cfd1c5",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "88dea3f7-ce31-467d-b05f-53642082de36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be9c2632-d45e-400a-b8cd-e21b2fa29542",
        "cursor": {
          "ref": "f6503e83-8bff-4595-b466-4834d0e72898",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "90a4cdb5-240f-4648-8982-619f7431d263"
        },
        "item": {
          "id": "be9c2632-d45e-400a-b8cd-e21b2fa29542",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "7c3b8e96-9ea4-4c6b-9754-9cd8bc43d6d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67eb8117-df78-48cf-ad64-571e59efbe91",
        "cursor": {
          "ref": "ee66bd27-ed7a-4731-8291-5d34fbbfe701",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0310c947-1f9f-472e-a2f9-90a6989dd23c"
        },
        "item": {
          "id": "67eb8117-df78-48cf-ad64-571e59efbe91",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a0ab3d2d-7954-4936-9c78-4cd7d7a56a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a3bd7e0-b7f6-4825-afc5-81de5f26f3ae",
        "cursor": {
          "ref": "5ad0210e-06e7-494c-becb-107964320f98",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "67946ff8-84c1-47b6-a112-44c680f27740"
        },
        "item": {
          "id": "8a3bd7e0-b7f6-4825-afc5-81de5f26f3ae",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3eebec75-51f1-46bd-9fdc-072c83de3a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "498b8743-89e6-411d-b247-75f272e8644f",
        "cursor": {
          "ref": "06aefbfb-1b6d-43a8-8a79-874c286e11eb",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "13c56df4-6b5f-4f1d-9a34-4ea616087999"
        },
        "item": {
          "id": "498b8743-89e6-411d-b247-75f272e8644f",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "e9fa388a-004e-4c30-995d-f3eac07edf5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29425064-16c1-4264-8034-930fd575b3bb",
        "cursor": {
          "ref": "31b3c16c-7a29-451d-a240-5e190b18ea40",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "42d9c41e-ea8f-4943-8585-8504734163fd"
        },
        "item": {
          "id": "29425064-16c1-4264-8034-930fd575b3bb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "54f1b47e-f63c-4d60-bbaa-1000dc61e351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d09b8e-ce03-4db4-8033-a50b5389cf07",
        "cursor": {
          "ref": "15daf21b-0089-4ad4-b932-f27a78df583c",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7e1307be-83ef-4484-9c21-76a864b1e967"
        },
        "item": {
          "id": "b4d09b8e-ce03-4db4-8033-a50b5389cf07",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "32f6a6b4-e02a-4a4b-a9f1-63e248ff0e3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4228f1dc-a515-40d9-8fce-fa27d291aed5",
        "cursor": {
          "ref": "920c3ed3-4ac0-45f5-a49e-d6a403eeb25c",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "fbbe4c86-8f7d-4491-a429-08fb4db0e643"
        },
        "item": {
          "id": "4228f1dc-a515-40d9-8fce-fa27d291aed5",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "75f9701d-1fb3-4673-8147-5bc2a8405040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ad0d3d-024a-4ef8-ad52-bc4bfbdcab81",
        "cursor": {
          "ref": "a7a2f076-b875-48be-91ca-d10eb0cd09b1",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "558b5bd2-4dea-49cb-aa2d-2224c2fbb36c"
        },
        "item": {
          "id": "69ad0d3d-024a-4ef8-ad52-bc4bfbdcab81",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "d01d1ef4-e394-4964-8c23-86ea443f64fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8a7629b-6801-4d59-b2ab-a97649a2c40b",
        "cursor": {
          "ref": "4e9a4417-5a06-4c77-989f-1821e0b22050",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "c4cd782c-ed9d-497c-b082-93e541c0a67f"
        },
        "item": {
          "id": "d8a7629b-6801-4d59-b2ab-a97649a2c40b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "3b333245-fa68-43d8-8b91-6b4e777b8939",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4788266a-08c1-447b-90b0-3bb9772d9e17",
        "cursor": {
          "ref": "947fa521-04ea-443e-b2a6-ac8cea7a99b3",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "b9743bc5-395b-4fab-80b8-cac7f1199f35"
        },
        "item": {
          "id": "4788266a-08c1-447b-90b0-3bb9772d9e17",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "b232ab95-9f60-41d9-af80-520e60fedb51",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "e3144752-79e3-4e1e-a0e2-de1b7f32b061",
        "cursor": {
          "ref": "d261331f-8056-4884-9ece-d6f3a0a75f92",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "cb96b803-78c1-482b-b200-e32cd9a6bc4e"
        },
        "item": {
          "id": "e3144752-79e3-4e1e-a0e2-de1b7f32b061",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "cbd499ad-72e7-4f43-ba0e-81a232de8a66",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "e2ed4f9a-445c-406d-808f-83b9a854ddaf",
        "cursor": {
          "ref": "aea9b8fe-aee2-4db9-9e1c-7c9bedd102ee",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "19c1b44c-9f88-46b3-8b43-0bd1406c8059"
        },
        "item": {
          "id": "e2ed4f9a-445c-406d-808f-83b9a854ddaf",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "2bf76c05-32f1-4095-9db9-b8416b1f9223",
          "status": "OK",
          "code": 200,
          "responseTime": 71,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "8aace75b-0eac-49c2-8448-5f0306cae068",
        "cursor": {
          "ref": "c55f531f-1ad3-4195-b3fd-f928c673f31b",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "220300d6-1174-4a89-b3c6-76c4dcaa016e"
        },
        "item": {
          "id": "8aace75b-0eac-49c2-8448-5f0306cae068",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "c5df8b48-1158-49a3-b1cd-5ae717753580",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6112a4e-113f-4ca4-988c-524433c1388c",
        "cursor": {
          "ref": "a7e02b17-aae5-4863-a4f8-a5c1787446c3",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "55e3fe5a-f860-4016-a92f-392986396835"
        },
        "item": {
          "id": "c6112a4e-113f-4ca4-988c-524433c1388c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "1ac66a43-db73-406e-9e72-97bb7270344d",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "c8ddb070-2330-4555-a8c4-5195244d4690",
        "cursor": {
          "ref": "1f8851ea-cba4-416f-be65-cc7a1536b516",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "78f18097-55ee-4015-bd86-a954105449a3"
        },
        "item": {
          "id": "c8ddb070-2330-4555-a8c4-5195244d4690",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "644549dd-7d7b-47d4-8d33-e09f9173c1e5",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "bbb378c0-2e5a-4471-8c19-e6644376dd6c",
        "cursor": {
          "ref": "0676b8cb-cd1f-4561-8e4f-79790918bbc0",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "95ea9577-dd89-477e-a7aa-e225a7e3bbe5"
        },
        "item": {
          "id": "bbb378c0-2e5a-4471-8c19-e6644376dd6c",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "648b6800-e3a2-4152-8021-d4f4e835fd6c",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "1e960114-12cd-4fab-b254-630c91a4c95a",
        "cursor": {
          "ref": "7beb2186-613c-4dd0-b4e3-92334f3339d1",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6178c8d0-ad38-433c-81f5-fd312d11fa4e"
        },
        "item": {
          "id": "1e960114-12cd-4fab-b254-630c91a4c95a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "ff18cc41-ef6d-4d78-b89d-64b854df5ea6",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "6cac0078-fede-4f85-896b-044bfafa0b74",
        "cursor": {
          "ref": "4d443c68-c5a7-45e1-bfb1-87db27bdecc2",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "fb754332-eb7e-47cc-b895-9d178484540a"
        },
        "item": {
          "id": "6cac0078-fede-4f85-896b-044bfafa0b74",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "6d21b163-9224-4568-8648-1898fd1d313d",
          "status": "OK",
          "code": 200,
          "responseTime": 66,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "c2fe2ceb-4635-4780-9131-3a341e683df1",
        "cursor": {
          "ref": "3588cf57-3bf5-4a78-9671-a60389273e44",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "31ba8c05-3c8d-42e4-8551-39c026759529"
        },
        "item": {
          "id": "c2fe2ceb-4635-4780-9131-3a341e683df1",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e0be90b3-ac11-4c26-9252-942840357f5d",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "ad983c40-f5f8-4dfa-929a-0e86fd2ec4d8",
        "cursor": {
          "ref": "59eafb96-9a77-4e9c-bb65-156bce4c6aef",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "dab683db-48c0-426b-b998-44f43956da2c"
        },
        "item": {
          "id": "ad983c40-f5f8-4dfa-929a-0e86fd2ec4d8",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "43e2340e-58e2-4694-9eaf-4ae9443235e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ae1de3f-90d8-498a-bdcd-333118a6cf84",
        "cursor": {
          "ref": "a616b7e9-72e9-4eeb-a0ff-4d1f78706aaf",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7fab9b74-a7e0-45ae-b368-030e446eb010"
        },
        "item": {
          "id": "5ae1de3f-90d8-498a-bdcd-333118a6cf84",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "1ecb0877-504b-4cfb-95ff-5e1d1ec367ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd3b0a3f-7e48-4b0d-b082-e357f38387cc",
        "cursor": {
          "ref": "35166e18-83d4-4377-bcab-1adf1479008f",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "34551a8a-b8e1-4361-a81a-127fc14f8c20"
        },
        "item": {
          "id": "fd3b0a3f-7e48-4b0d-b082-e357f38387cc",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "13653ac4-ca86-4a45-b3fd-f2562a73d678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0661f92-c5bf-45d3-af06-eb80579d03bf",
        "cursor": {
          "ref": "13e9e5a8-6216-4819-ad28-db50781dcb00",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "12e091df-6837-43e0-bdf1-57ad64070882"
        },
        "item": {
          "id": "e0661f92-c5bf-45d3-af06-eb80579d03bf",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "81f0c71f-f795-44f4-834e-05c3dd4899e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b297120-4444-4688-a490-c0fd68176134",
        "cursor": {
          "ref": "4a8ee9e3-8fb4-41ed-a20e-084c870b5825",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "a47ec0a0-e013-4932-b561-0f88155aaf3d"
        },
        "item": {
          "id": "9b297120-4444-4688-a490-c0fd68176134",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "5a2b21ad-0a3d-4699-b115-6ffab811e64c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db893c53-0777-48bb-8adb-b86f34aff7bd",
        "cursor": {
          "ref": "ca58ebd5-b0c3-44ca-bc0f-4299a5cb3e0b",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "57cc2a45-95f7-4b5a-a903-b2e915c7fa2c"
        },
        "item": {
          "id": "db893c53-0777-48bb-8adb-b86f34aff7bd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "00f64e91-b7ca-45e5-b769-b34db93292fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f251f31-7f86-4370-b181-f67b6f2ccea6",
        "cursor": {
          "ref": "9f6af6d4-d2c8-45e3-b669-353ad9d00da6",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "b2189ee6-6831-4656-be78-56f722f7a85a"
        },
        "item": {
          "id": "0f251f31-7f86-4370-b181-f67b6f2ccea6",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "ec225a8d-b0d5-43e8-85db-7e568d42bb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc4b5958-8b2d-4fe8-bcdf-22c1f068239c",
        "cursor": {
          "ref": "98d9df28-4b93-4463-ba3e-53a9481f4024",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "c34ef3b9-a4ac-4d29-8c76-baec0f36da88"
        },
        "item": {
          "id": "dc4b5958-8b2d-4fe8-bcdf-22c1f068239c",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "c6ac701c-4544-4173-9c2a-9213d5401b19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600e4121-750f-4d53-bec4-5b31cc2c5586",
        "cursor": {
          "ref": "8a347d3f-a73c-4dc5-9e3c-60e77eec91ef",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "07ad28e5-4607-4478-8deb-f1eaa8444cc7"
        },
        "item": {
          "id": "600e4121-750f-4d53-bec4-5b31cc2c5586",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "3fe897dc-ef9a-4399-bb0a-895e0ec498cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a739166-a319-4925-9780-3b8ce607548a",
        "cursor": {
          "ref": "36d1f9ff-12e3-46f4-8f18-4b9b8b15efce",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "efc0ab50-93ce-4512-9f05-10e82188abda"
        },
        "item": {
          "id": "0a739166-a319-4925-9780-3b8ce607548a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "507f9be6-f586-4e56-836b-2d06d985d72a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910529a7-a8cf-491e-8547-3b549a84230a",
        "cursor": {
          "ref": "1a49b00a-69e7-4b17-933b-03cff8cab120",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "ebe62c21-3e81-4bd8-bf10-bfeec1483aaa"
        },
        "item": {
          "id": "910529a7-a8cf-491e-8547-3b549a84230a",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "1dc7e88f-6c63-4362-811c-82e07fe579c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebac01bc-b9af-4d9e-a125-09ebfaad6450",
        "cursor": {
          "ref": "a5f91627-f665-4f1a-afe7-099ad1b98533",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "c5cc1007-df1a-430f-abbd-5d56cbd9f43b"
        },
        "item": {
          "id": "ebac01bc-b9af-4d9e-a125-09ebfaad6450",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "65dea9ee-b0f2-46c5-a170-c8d42d8c4264",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e6cd73ab-7124-4a05-8af2-149b69836029",
        "cursor": {
          "ref": "92b11622-3cdd-4023-a142-00e1c9c44ac2",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "28570a40-0e93-4d77-b8be-f72829e87d4a"
        },
        "item": {
          "id": "e6cd73ab-7124-4a05-8af2-149b69836029",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "e1d6f9f9-e8c2-4ed3-84a2-bb007589b848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5963f26-498b-4135-98ae-d435e9cf6514",
        "cursor": {
          "ref": "35eef976-fa64-4a9d-b92b-74b865c1f348",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "bde7713b-ff4e-4bd7-b956-d54ae4b96985"
        },
        "item": {
          "id": "d5963f26-498b-4135-98ae-d435e9cf6514",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "7bf8bf66-0acb-4515-ad0d-1cb86bd7599a",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "d67233b3-3acf-43d4-a872-e751fb9ba3e8",
        "cursor": {
          "ref": "c10e1fd5-1b20-40ee-9885-22f51bf61a77",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0e188e71-bfcb-47ce-9817-fba6b038298e"
        },
        "item": {
          "id": "d67233b3-3acf-43d4-a872-e751fb9ba3e8",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "5a949aca-c09c-4ae1-af42-a5cf96e35ecb",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "58644fb0-6404-4fe7-a2e2-7364dd3983a3",
        "cursor": {
          "ref": "519975dc-7958-4306-a9b2-d8213922173f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "f0458e02-29dc-478a-8bfa-8763037ef8f3"
        },
        "item": {
          "id": "58644fb0-6404-4fe7-a2e2-7364dd3983a3",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "0516f7bb-f6d3-4b88-9f08-cd9db0b066b5",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "40b9056c-54e9-43ce-83be-c64a44900478",
        "cursor": {
          "ref": "6836966e-6481-4cd8-b6d0-579d412f291f",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "60097c18-4367-4832-a625-be1651b94f4d"
        },
        "item": {
          "id": "40b9056c-54e9-43ce-83be-c64a44900478",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "bf64d1e4-483d-4036-9c97-79304cfea98b",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "c0e14ca5-4075-4a0c-af53-293e7b89fc50",
        "cursor": {
          "ref": "ac31196c-2a66-4a7d-890c-7cf6a6ca2457",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "8b069a64-6b3d-4ff6-91b7-6d24dee9bf96"
        },
        "item": {
          "id": "c0e14ca5-4075-4a0c-af53-293e7b89fc50",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "d407391a-10c7-4233-ac52-6b9e0130aed8",
          "status": "OK",
          "code": 200,
          "responseTime": 70,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "38b09939-49ac-4b33-956b-4d397e0b40cb",
        "cursor": {
          "ref": "1c1fd3b3-c52c-4cf9-a28c-a50c03cae106",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "3612dd1e-2331-434c-95f7-52a89e6c6e23"
        },
        "item": {
          "id": "38b09939-49ac-4b33-956b-4d397e0b40cb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "d8835e81-9997-45c1-94fb-1ca634a4695a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fe4ec13-97ec-4d5a-a5cf-3e9105693dc4",
        "cursor": {
          "ref": "497e74ea-a76b-4972-9f9e-86373e81e9e1",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "4c185bc2-a576-4b63-a76f-aa45e7f7e70b"
        },
        "item": {
          "id": "5fe4ec13-97ec-4d5a-a5cf-3e9105693dc4",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8f6acf09-38b5-4d84-b908-490793fafb2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2301fef6-7a08-4699-98f6-fbb49d6b34e9",
        "cursor": {
          "ref": "27cc84e6-b7e1-4ae2-9b9e-f9286e2d1d92",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "44b33470-4438-49ae-b5c6-d8b38702ab08"
        },
        "item": {
          "id": "2301fef6-7a08-4699-98f6-fbb49d6b34e9",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "2f44c548-c44b-45f4-a568-169f2d9e2b42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccb9aa47-eb16-4485-bdf5-faf0c5424188",
        "cursor": {
          "ref": "a18e660f-7c9e-464c-ae2d-8d294d7873f0",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "8d3fa988-0719-4162-8bfe-1333c6f804d4"
        },
        "item": {
          "id": "ccb9aa47-eb16-4485-bdf5-faf0c5424188",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6392b06d-43bb-4263-b8ba-82405156eaf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ccbc07f-8da8-47e0-a4ca-2c623ecab0ed",
        "cursor": {
          "ref": "5831dcef-f324-4c7d-85f6-4af23917bc2f",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e3cd9b32-35f2-4ff1-a084-02404c6f5217"
        },
        "item": {
          "id": "5ccbc07f-8da8-47e0-a4ca-2c623ecab0ed",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "438402c6-a9a7-4465-8ffe-c63af48e20fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e5a8c6c-e691-4f61-8216-de589b1ed84d",
        "cursor": {
          "ref": "7e84d964-3f98-4dc9-8452-ca78d81da993",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "3b86c9de-aa7e-452f-aa58-607f89c0e983"
        },
        "item": {
          "id": "0e5a8c6c-e691-4f61-8216-de589b1ed84d",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "099d561d-4372-4abe-9c6d-6ababbaf2889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c28da7b4-9aab-4a28-91b8-07a8bbd8af5b",
        "cursor": {
          "ref": "c866e996-6b8c-420b-adf1-e0a875a56724",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "944bd121-4d87-4f6f-abae-45d54b00e9ce"
        },
        "item": {
          "id": "c28da7b4-9aab-4a28-91b8-07a8bbd8af5b",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "6c28dada-4e7a-40a4-9158-369a90cb3ff9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14ed2002-46f2-4fe4-99c1-84a5a5a53130",
        "cursor": {
          "ref": "8eb91cbc-990b-4cd8-ae6e-0b69594ddc9a",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "4650fc0b-d782-407c-be2b-6c889c2a489b"
        },
        "item": {
          "id": "14ed2002-46f2-4fe4-99c1-84a5a5a53130",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "54d445db-9f89-4de6-b359-a4c067065ee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b301b03-918e-4954-8b13-33fa4bc15da4",
        "cursor": {
          "ref": "442f730b-c933-40f8-9713-191715007270",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "b848b168-b474-4b84-8c11-22ad63b9846a"
        },
        "item": {
          "id": "8b301b03-918e-4954-8b13-33fa4bc15da4",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "343ec4f4-ad16-4c88-a139-704bed47bccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b9b59d7-877c-4b35-82fc-8f74ece39adc",
        "cursor": {
          "ref": "d905c063-a8d5-40d5-98f4-2841f4a2447b",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "d6b1b2ba-f7dd-4527-9b56-6e53aa58c564"
        },
        "item": {
          "id": "2b9b59d7-877c-4b35-82fc-8f74ece39adc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "056a7783-a637-4a97-837a-276dd4b1c7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "076dac4f-3e01-4e7b-a8e8-e6c4c15cd4f1",
        "cursor": {
          "ref": "f0c5f3f3-e6b9-4ce3-8015-934703542c48",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "43f6d3cc-f211-4528-857a-b036f229ad55"
        },
        "item": {
          "id": "076dac4f-3e01-4e7b-a8e8-e6c4c15cd4f1",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "51dc32c6-520a-4ae6-a9c0-915fa22d9b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f476f2-763f-412e-a244-de6c01c209a0",
        "cursor": {
          "ref": "1d5b0739-aec1-4d18-89a7-31324bafe17f",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a0c5beb7-6612-40d9-aaeb-a0e03e345129"
        },
        "item": {
          "id": "82f476f2-763f-412e-a244-de6c01c209a0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "d76c327b-b8b3-4266-805e-5316df09297d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f751cbd-f61c-49bc-a354-ba8f3544753b",
        "cursor": {
          "ref": "64366241-3910-4eac-a10d-21b759df7096",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "9eae8fe0-42a2-4371-82ed-71d4c8e88be8"
        },
        "item": {
          "id": "7f751cbd-f61c-49bc-a354-ba8f3544753b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d384518c-b959-4ae9-8fe8-fbc905417f24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6d0a27-30d8-4238-b642-f681a46c7070",
        "cursor": {
          "ref": "12f9ca74-104e-4c5f-ba79-b4bbeececef4",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "026c049d-ff45-4b9c-88b9-6db084aa5ee3"
        },
        "item": {
          "id": "ae6d0a27-30d8-4238-b642-f681a46c7070",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "688d2329-49a0-44a1-a2bd-5b44109d7b80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ec0aa7a-9d09-483e-94eb-ad1b67d5f925",
        "cursor": {
          "ref": "55139bb8-8b19-4709-af89-a7b4a4152bb9",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "87981fcd-3dc2-45d0-8bed-f67c16eeedd1"
        },
        "item": {
          "id": "8ec0aa7a-9d09-483e-94eb-ad1b67d5f925",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "41c52e98-6b84-44cb-9de2-5167bfed1c67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0a1da2-c2f0-4a71-8fee-fcc2db3e4860",
        "cursor": {
          "ref": "b0244b9c-b5d3-457b-94e1-68723dcec9c8",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "45715b21-4d44-4487-9831-9aa2a21ec985"
        },
        "item": {
          "id": "1a0a1da2-c2f0-4a71-8fee-fcc2db3e4860",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c50e5aad-0b28-43b4-9b1d-5b2524a8cd64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faaefbd8-4c32-4e7f-a62a-3c66dc0a6daa",
        "cursor": {
          "ref": "13d39ffd-3af1-40f5-8962-f3f2d80c1be6",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3169f5d0-2aec-4a33-97f1-8a4dfdb95721"
        },
        "item": {
          "id": "faaefbd8-4c32-4e7f-a62a-3c66dc0a6daa",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "9299afd6-45e1-41f8-abb6-359558315900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371b4f74-bfe2-4520-a265-48f1259cb13c",
        "cursor": {
          "ref": "e2f74a83-9a96-4968-891d-5b877d6111db",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "f3c21632-2282-4c1f-a15f-3252ae7f0b86"
        },
        "item": {
          "id": "371b4f74-bfe2-4520-a265-48f1259cb13c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "1016b346-dfea-4f43-9235-72629677fd41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c1a449c-ce1e-44b1-b862-401ef7d7547e",
        "cursor": {
          "ref": "75688df4-58ab-4cde-a363-d5f8e8552de3",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "03df645d-f851-4401-bcc3-f39928edf01e"
        },
        "item": {
          "id": "2c1a449c-ce1e-44b1-b862-401ef7d7547e",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c8412243-f01b-4091-9ac6-a4a8408d24ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6efe4b4f-d6fc-4762-9954-777c2d8ccac1",
        "cursor": {
          "ref": "36686957-bb46-43b1-9618-5e7ae44a560f",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "18ebf4f5-3c2e-4fe8-b279-358028a23a93"
        },
        "item": {
          "id": "6efe4b4f-d6fc-4762-9954-777c2d8ccac1",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "82f8851d-f124-4c5c-b24f-c6e5c122308f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "903161e0-4a78-4f97-bb41-32e0ca0e88e7",
        "cursor": {
          "ref": "8741b877-369d-4ce1-bc8d-54ccd6794f58",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "0b2e2f69-e133-4056-9164-8b3eccad6eb6"
        },
        "item": {
          "id": "903161e0-4a78-4f97-bb41-32e0ca0e88e7",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "6c73d3cd-549a-4d4b-88f1-60e9dccc4ffd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e464cd1-35b8-4bf0-981e-04e7a56c1677",
        "cursor": {
          "ref": "5b2e0bb6-c15a-4538-bfed-653f756466d5",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "3339c2cf-fceb-4a34-8891-aa914b714015"
        },
        "item": {
          "id": "5e464cd1-35b8-4bf0-981e-04e7a56c1677",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "e714873b-3ea7-4c01-a643-0c1a976b62f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c92a9aa-5aa7-4049-a982-5ae4167767b1",
        "cursor": {
          "ref": "ee10afd7-3fc5-4eea-b2b1-16c6d0b90f40",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "01f1b504-b823-4574-8285-19d11294b0f8"
        },
        "item": {
          "id": "1c92a9aa-5aa7-4049-a982-5ae4167767b1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "a1fb17a4-b8ac-411e-b077-99bb1f61c3f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44ad07fb-7d16-498d-84b8-55c1006b5ad3",
        "cursor": {
          "ref": "ccd5fb05-a3b3-4937-a07e-e6329e621e9a",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "44e3a1be-9290-468e-b32c-de8654029094"
        },
        "item": {
          "id": "44ad07fb-7d16-498d-84b8-55c1006b5ad3",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "12e6af2a-068a-4ea3-ba49-c5eabfece3d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "784e518c-4db2-4b8f-a5af-77d350324a6f",
        "cursor": {
          "ref": "1287fa77-4001-49dd-b91a-832685627e42",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "1a9361ed-f085-4511-877e-101000763b72"
        },
        "item": {
          "id": "784e518c-4db2-4b8f-a5af-77d350324a6f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "3127ea0b-d43c-4bf2-9b8b-dc20e3c9a17d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "525f8c83-6fa0-4b4e-911e-0d68d3a4f09d",
        "cursor": {
          "ref": "4079d158-634c-4271-85f3-438eb8046871",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "1c4191fc-4007-484f-9f18-cdc57b940128"
        },
        "item": {
          "id": "525f8c83-6fa0-4b4e-911e-0d68d3a4f09d",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "43453e9e-31bb-4bd8-bc67-47a0c5010e23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 25,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3473f4ba-0e5b-4b5a-8d38-fb98e6780a56",
        "cursor": {
          "ref": "5e9f7c0d-e162-47f5-bd4b-531c0de34546",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "77c0f46c-fc94-4a0b-8661-88613785a7db"
        },
        "item": {
          "id": "3473f4ba-0e5b-4b5a-8d38-fb98e6780a56",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "b68f2f9e-3430-473f-9e28-31b091c6f67b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f2364a7-567f-40dc-8e67-8152557a192c",
        "cursor": {
          "ref": "dd15f1fb-3425-430c-a93a-ef72ebf00292",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "733eaeca-ae5d-49dd-a8a1-68b42d8f6870"
        },
        "item": {
          "id": "0f2364a7-567f-40dc-8e67-8152557a192c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "91497410-ff12-4836-a746-8243e17cdb90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 24,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf82c58-1812-4d44-a37a-da67bb99ea9f",
        "cursor": {
          "ref": "24c50828-d657-4ac3-b3e5-1c88f83b57be",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "7f70b7c0-3668-4e5f-85d0-036062103b6a"
        },
        "item": {
          "id": "2bf82c58-1812-4d44-a37a-da67bb99ea9f",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "18912017-a239-44aa-8a5f-72cd0e10f296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "127afa06-e37e-4e8d-8b9f-87d6b76132ec",
        "cursor": {
          "ref": "cd2942a5-257d-4cbd-9255-0a19b33acab6",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "af5cea24-bb5b-48b0-bab4-4e85de0ebf59"
        },
        "item": {
          "id": "127afa06-e37e-4e8d-8b9f-87d6b76132ec",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0a2fa83f-f717-4fed-8c8a-376715b7d57b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50791d06-c787-4a2d-b0a1-27a6a82520d5",
        "cursor": {
          "ref": "7a4e804f-95df-42b9-9ca3-ebd91f638cc2",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "e1380618-7bfc-4513-a785-d69905b5c2af"
        },
        "item": {
          "id": "50791d06-c787-4a2d-b0a1-27a6a82520d5",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "c3e2a705-4473-4763-b088-165b1ac9eaf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7d5850-9bf7-4f43-92d3-8b1433c8f398",
        "cursor": {
          "ref": "8bd5d42c-b70e-4227-8328-c66c03b92d30",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "df8775e2-26a1-427a-bc48-a1c79ad3677e"
        },
        "item": {
          "id": "5a7d5850-9bf7-4f43-92d3-8b1433c8f398",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "9142e68d-5969-4d44-a073-e27861498f59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8593ec75-3d4b-42c2-8dad-08b63b4ed998",
        "cursor": {
          "ref": "97b206e3-aae6-42fb-b0dd-2c297062ac71",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "19f063b8-8153-42bf-991e-ef4ead38488a"
        },
        "item": {
          "id": "8593ec75-3d4b-42c2-8dad-08b63b4ed998",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "29eb7b6e-209e-4d2b-b475-f6b25d6e11b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75598fd5-2dc9-43f4-bac5-b624463711ad",
        "cursor": {
          "ref": "abf18c39-6c69-49d9-9237-4143d84b9db9",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "b431d578-da29-4cf5-a0f3-3fa759884005"
        },
        "item": {
          "id": "75598fd5-2dc9-43f4-bac5-b624463711ad",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "44fddc3e-9167-4ae8-b5a0-b9cfea524e95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ef67cb8-5fba-47e5-aff3-9dfec36c6547",
        "cursor": {
          "ref": "c21800c5-6ccb-4621-9ece-58ce98202942",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "893f4d6a-c88f-4d34-a1f4-ebdef4b2b6b4"
        },
        "item": {
          "id": "7ef67cb8-5fba-47e5-aff3-9dfec36c6547",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "7dd7ded3-952b-4637-9407-d9f8f59c7b9d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 21,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "602e4e4d-2c3e-4abc-87b1-eefb9a4b9c2d",
        "cursor": {
          "ref": "3389c5ed-327f-4deb-9c17-c343c3ccacb3",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "1e08d163-03eb-4a4a-ad1a-13f5ea8d71b8"
        },
        "item": {
          "id": "602e4e4d-2c3e-4abc-87b1-eefb9a4b9c2d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "3ae25671-0a4b-4c78-8cdd-6b71865f1e9b",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "d6b12c4c-38e9-4fe8-abeb-a8e77a1d0341",
        "cursor": {
          "ref": "f0f5ae51-3325-4c0b-ada6-ccbc2e1bb4a3",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "8853562a-e78a-4d3a-b177-307c92da9dfc"
        },
        "item": {
          "id": "d6b12c4c-38e9-4fe8-abeb-a8e77a1d0341",
          "name": "credentials_verify"
        },
        "response": {
          "id": "f15f1249-9b92-4a36-a55e-aa4b5dcce4c2",
          "status": "OK",
          "code": 200,
          "responseTime": 74,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "555c0c78-02d8-4af4-baeb-4865188b04cb",
        "cursor": {
          "ref": "10460196-ddb3-40f4-a621-5e03063e99b2",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "a1b933b6-5ef8-4ac3-8702-78df97e7c815"
        },
        "item": {
          "id": "555c0c78-02d8-4af4-baeb-4865188b04cb",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "3102dff1-ece8-4e87-9644-ad5086b534d6",
          "status": "OK",
          "code": 200,
          "responseTime": 214,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d57ea87-bbd7-4a4a-83f2-143717b1ca7b",
        "cursor": {
          "ref": "1a291a10-fc9d-47cd-a5f7-6a6cec9a2885",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6bab3378-aa36-47d2-aa9f-74dbfd3b4fb3"
        },
        "item": {
          "id": "7d57ea87-bbd7-4a4a-83f2-143717b1ca7b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "88ae283b-ce14-448b-8c50-009ca674692b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d57ea87-bbd7-4a4a-83f2-143717b1ca7b",
        "cursor": {
          "ref": "1a291a10-fc9d-47cd-a5f7-6a6cec9a2885",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "6bab3378-aa36-47d2-aa9f-74dbfd3b4fb3"
        },
        "item": {
          "id": "7d57ea87-bbd7-4a4a-83f2-143717b1ca7b",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "88ae283b-ce14-448b-8c50-009ca674692b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a285716d-b6a3-48f6-bfc3-ac0c7edc6311",
        "cursor": {
          "ref": "212e1aaa-dff6-4f0e-905d-9711925cd559",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "630cbbf3-b55c-4cdf-9a42-aa0e972c24a6"
        },
        "item": {
          "id": "a285716d-b6a3-48f6-bfc3-ac0c7edc6311",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "6830203f-975a-4f81-8a4e-2b1461bca9f3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 20,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd80ad5-e605-40e1-9e81-a1400281382c",
        "cursor": {
          "ref": "9d2115ef-0379-4f64-8a55-ef85f49bc47f",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c18ebf3c-139c-4c60-98f6-7c5d06e34ca2"
        },
        "item": {
          "id": "0bd80ad5-e605-40e1-9e81-a1400281382c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f3b6c14b-1a9b-4bba-9b4a-4713c59cb6c1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 19,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}