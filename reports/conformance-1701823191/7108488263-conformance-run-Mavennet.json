{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "a8e464aa-00d4-4bc8-8765-5a671e5a2968",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f7fbfee4-98dc-4cc8-aa52-c5a2ea3b1071",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e44a7f5-7c8f-4e52-9eae-e09e7005f0a2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "405a0bea-81d8-4edf-8f23-479d67367f58"
                }
              }
            ]
          },
          {
            "id": "7b267eed-2ed7-428c-a41b-8e4414469cac",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "27fb2963-ca5d-4994-b704-36688359f339",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "bd7e4162-bd4e-4f23-83cf-81a844c3219a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "96f8f372-b0e7-42b6-a0f3-c50c0fa75e6c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "c8730bab-d865-4083-93e0-b25cbf5cebaa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "91a80f5f-fe1c-4e03-9d2b-74074a4ff6b3",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1926e0fe-a8b9-4b3c-861e-ceb135f5e5da",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "42abb0f9-4b71-4d6b-8f7c-0ed22a260ff9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "bd104d62-1208-4cf4-be5b-ea7a83a74423",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7f2b4b10-4416-46f0-9b0b-b9d6bf83690c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "32577e9d-8df9-4aec-9b9e-e5f758204965",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b6d756df-1d06-42a7-b59c-9c891b9829f6"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9720ea3c-9de8-4a63-8e03-5a0fda215991",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "6e29161c-5dd4-4265-8106-3d0286194a98"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f42a10c8-f38f-4ab0-b571-11071ab1ac1b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "48a73069-6db6-4d7e-8c91-683933d26b22"
            }
          }
        ]
      },
      {
        "id": "348a73f9-fa67-4fad-a250-b5f6c666129f",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "eee3b3ac-785f-4757-a53e-f43ab7c8ed2a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c0af3911-63e8-4ad1-96d7-c8927e7e2a12",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "b9c006b1-cf49-473f-8563-cb810f7bab88",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5ca96b8-57f8-4b5c-b903-97e6b0d56c0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d74278d-a02a-449e-a0bd-00ada9597b5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "756b41cd-a647-4de2-b323-d0831922bce0",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748dabc1-5470-4311-b261-3f508b3c504b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e92dc6c0-d7fb-478c-9610-7a3cb31ee842"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7851a6e-4333-4cc2-a119-54bc98225758",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f423c16-6042-4b21-b464-302cf317f408",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a238a050-04d8-457d-93e7-74209e22563b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "83dbe603-3b1d-4550-b8a0-0c8675ac57a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8029bb91-7ac0-4802-b433-52baaecd9414",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef5284ae-865a-4500-b02f-489ef600e371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32c13713-2095-41e8-8eee-5b188e7af557"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b2dbc8-b346-43d5-82db-522a0ccdce1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65208bc1-341f-4ae4-a1d5-29ae03b0f80f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2c750050-b407-4b24-afc7-e1b8654eff36",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d2ef56cd-e356-4fff-99f3-dedc5416c751",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "30ff066f-170d-4647-8da9-da7b936abbc5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "137b5d39-0250-409b-a68b-2f80e3244925"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bd4754d1-cd8d-4aa1-83ef-39da4803567b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "819ce9c0-461d-48ab-8cc5-cd3bac2ae1d8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6cd8d9b-2779-459e-aa1c-a2335e361626",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c5b21191-1832-43da-9a70-6662d330677d"
            }
          }
        ]
      },
      {
        "id": "21060a53-8cad-4eb3-902b-5f9dfaf08d78",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "dd487ba0-20eb-4d7a-b727-cf3acf87249c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "007e0c90-24fc-4975-aefa-17f07b0a2349",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "be883d91-06cd-4f4a-8658-5b165d6c1df8",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e89df969-0321-4ac5-afa8-0f84490aa111",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4091769b-1267-4002-b704-2e07973a1556"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47a8ed72-5e59-43fb-868e-b31101a2a0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "54f267c9-6c4a-4ca4-99cf-4955882926e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea146ca1-8684-4341-b715-0f8b2bda56bd",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "062013a8-582f-4fc8-a7f9-0b293c24fdf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48d56594-3807-4443-9be8-687471746c46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea0ae409-1865-4d4f-a1d0-1571cebb96a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "438a3d02-c9f8-4900-b036-ecc180b59922"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf74729-7efa-413e-b06e-3b0f1bfa4d24",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c0a9e33-eba4-4d71-a0b3-dc0f1736cb0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd48bb54-1ee4-4283-98f3-7c63c67304f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13308ac7-31d0-4b7e-b076-9dbeef0948c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "33ad58e8-8351-45b0-b3a3-4ed5e86a99b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb8f73d8-e4d9-4c83-aecf-3f6c0195a72c",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89838441-7a24-4acb-b15d-cc6bb5b288d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff293257-2db0-4cbb-82d4-1ddca81ceaa3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97513eb9-2fdc-47b4-b3f5-e0e818ab1ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3c365d5c-5628-41dd-8796-a0db233708fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cfb5c54-fd74-4bda-9db8-dc55ac0a27de",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "301577a7-8752-49be-b928-9780a50b3b53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e286215-ef05-4274-9ca4-9a07b2b51750"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22693e2e-ee3c-486a-9ba7-75dcf9435922",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "86b7bc5a-7238-4076-9501-d9f8af29f496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16163a01-14fd-4358-9159-015c63f2448e",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2c49cd-a221-45bf-971e-68620daed799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e244176e-f369-4ef5-aa6f-39fb1e317ea6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c55926-400d-4b02-bf21-46263e2fdb10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8854191a-f602-4e19-baa0-02115d4fb305"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2a83395-1594-432b-966a-e47ded42c8a6",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c76f1ea9-33b0-42ae-8d0a-54aa79b8b76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cdc35a8-2118-45dd-bb2e-5cccbdfe9a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf4282a3-5fa1-4d6b-a52d-01e8460f8394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "729d9563-88c1-470c-8381-89522d9b6971"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4b8d54-ad4c-4501-84d0-c730ab97104f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1465548e-39fc-4d5d-a30f-dc736147d500",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49c25ba6-550d-435a-8647-ad312d1707db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fdaa7c-abbd-49b4-8ab8-60a6ab7ff1b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17f08f31-b5f5-4787-a3dd-7f7978320f3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cc83e8-f4ad-45ce-995e-e0458a6d277f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adb56b87-8208-4320-ab07-e16c32caa964",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e30420e-2bac-4e8f-8106-bf27ae522330"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c39759e9-7be6-49e1-9e18-ba3add75a2bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dc516f1e-9b05-4a14-bad7-2873581942c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb343ac-7fb1-4064-af72-04a24e46fe3e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "448845ed-2bc5-4c40-aa64-e1607604d49f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fcffbc17-1f45-4f42-b997-5cf9d0b67c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a599b58-363a-4deb-8dfd-d4ed8b6d533e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4606b1e8-4489-4d86-8fd2-b95506cb820e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0748543a-436a-460c-87f6-3831b22a4f89",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35aad8ce-d048-4dac-b0dd-fe27c3e975d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "079e7a63-6cc7-4b32-b1fc-56417636e01d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8e8cf6f-6854-4efa-87c0-cc0ea1953c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f98b4d7c-771e-451e-a469-b34378b267af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89cbec7c-abc7-48c7-9453-ac1530fd14dd",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dfb89fb0-3e70-42d9-bb57-38b70e36b868",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecaf8b94-c563-4f81-b82e-28c2576a86ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61637053-6f39-4dd5-a26f-719b0e05ad4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccb217f7-fde1-4710-8807-8c96431de572"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eeddfc5-4f4d-447b-b68e-e76d4cd9cde7",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8c2b254-9621-45d0-8f1d-97b5f4b77aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6045c3e9-b83f-48b3-9914-cb22839cd957"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b32ece2-9e59-4ea1-9b7e-1a86354b0b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f638a390-f49a-4526-9abc-80ca6d90078c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee730274-100d-42ad-b56f-08a5a6cedd1d",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2834b4f-075b-4c56-af91-71fe1f7c8c59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2df541-a8b3-4751-918e-0e38eeea51f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85155857-0286-4441-be63-6a51f83b2383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4088b7a9-22f9-406f-9cd2-32942f3dc434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9251e6f-6f15-4c3a-99dd-010288694c5d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "222fbce1-456d-4db3-baca-487a87694091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac234597-f86d-4d8a-9017-0236972fd78b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6bbcd0-fc09-4d51-bb7e-5013899ca7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92469458-0df9-4988-bd04-cb6729a79338"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59098287-14de-4e3a-8579-fe81db63890a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "396be5b9-344d-47a1-8859-2f0a70a39368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35eb673a-11fe-4967-856d-5bc10a2246be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732d67fa-36be-49ba-b2ce-a49604cb45d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "860f2690-2c82-4ae1-9a32-a3ebd5beda77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bac83ef-8a81-4357-9a8e-76ca921fc07e",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "740589f0-c768-4ad1-8aa4-adef5a98ab25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0df69574-efb9-4d02-af50-d1fa87b30ef4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4545e6-b7c7-461b-bc20-de51f62e6c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99d2d48a-ed24-461c-b07c-8b744bd048a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6690480-2a98-44ab-bbc9-ec9764d71120",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab997463-16f9-44af-a82d-f86691020810",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f356c838-037b-4c44-b5df-e2012d175d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec0b0638-9d17-4aea-b9ea-fcdaa0e70f06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "09ca271b-e600-4990-966a-397a7b3d2a84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b27cd27b-6bef-41a0-9717-dc3727fe0d57",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb796f73-fdd4-443e-9480-025818258ed4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52a6127c-a0cb-4382-a133-ce06bd39c779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3becaf14-47b9-4473-9de7-338dece5883b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4618cfaa-4563-4eb3-9bdc-c20588c1366d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78986a3f-d34c-41e8-8af7-1afd1f9bcc15",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6c5ef81-3967-4b52-ac08-6518aa8b6336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1c72cae-fb60-48ed-b9b5-216587bd4217"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de5a850-9b5d-4735-83e6-3aaa836ac4ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0591ba00-4708-45d3-864e-8861bb3882cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d796e08-c13d-4031-a4bb-9d2723d90653",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8614e7f7-1b20-43fd-8794-76a2f3059036",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc671dfe-6d71-4c12-96b1-bb46bd2388d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db5bb7a-69cc-453c-8a6c-e45cd55fdf5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "548242d5-2d9a-4120-aadc-be15d383e8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0fae754-6cb8-4acf-bc54-5b731cb1938f",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9dcdbd-5afd-41cf-b7d9-fdf181659725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac65a855-c2c0-499e-af28-41b0bf00ac3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45bd4094-21e0-4301-b5cf-c5ea7d836d0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "891d737a-6d17-45cc-9968-81a6a2a1a48d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebcafc9-7833-4efe-8f79-1dfb34d30e55",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3761747d-a658-4f8a-97b2-c45c62285e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f49a02a-99e4-4a60-b678-767393420905"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cc1c2c5-08ac-46c2-b615-8e2af727ffe7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c2f3259f-32bd-4366-b338-7a51e5b15393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01fbd75b-a821-4acf-bb01-668953183e6c",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673775ba-a22c-4ebe-980f-769ccf2e90c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bbbac09-c2eb-405c-9e22-2f065071410d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6706079-eb8e-407c-b366-b2ed9a7d333b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "17798826-cb28-4325-9da6-577a9c2cf278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88951c8a-bcf1-4f1e-a7ab-902ec13e2a13",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b7eef5f-1dc5-4fad-a4a1-1d71f851384f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06674fbe-d16e-4313-8e7b-5f279bdd8e4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1df8de83-3daa-4705-8389-b5cb1188b19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "12bbc6f1-9399-4525-9bc5-a6be891b02c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5274b41-43bb-427c-9bac-199186488fc6",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e1b470f-e903-4917-98c2-d38510982142",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7abe5da7-5a89-46af-b95c-bebaaf1f553c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b253e40d-0825-4746-ba8d-d745c679b4cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1ece3af-8269-4ba5-b76f-2d03af6da14a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ebe5ad-4ae4-4e1d-ac28-cb6ec48cdb6f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06eb74e0-3adf-4eec-8e7a-e82bfa7e0696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3dd70a60-7a01-4fcd-baf4-5819695e6ad7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a483f060-df6d-4d5b-b009-58b924c4c484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4537e88c-996d-400f-92a5-d042a5c2fb9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62641875-f368-4e13-be88-81b296e7455d",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a19f9c95-acca-482a-92fa-839c710bd489",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c63e6ab4-1e2a-48c3-b3a9-59bdaa4b1365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1794617f-433f-4a67-8d09-5dfb87bec57a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8ccf95b-913e-4f94-82be-84f967660f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531d2161-5eca-43e1-931b-69e84bdee67d",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "667bcf7d-4fb9-4ae2-8eb5-2c88ab5d3467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b8be1ac-a9fc-4444-a02c-fef1cd0cc7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee6f94c5-7840-4e85-8cde-c15c3888a64c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2cf1c910-ad7a-47f4-ba8d-2022c704a66b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d42b740-87c9-4f45-9bd8-8e384b934601",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c28a6f93-2fa9-496f-9350-3344a01e6647",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "91f56070-bcbc-41a7-a9cc-f0d97789b1df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "658570ce-ba89-4b8d-b469-6123428945db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f2d7e33c-a8c7-44e6-abcf-5e0b38694e57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d18ed41-78f2-4bed-8d70-fa9131b43290",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e910e87e-5805-400c-80d8-036c8a1200af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "036bf099-05b0-4ada-adaf-107f7e52fcc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64bd0734-356f-4da8-a88f-f6a8b2c9135a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6c38fed3-bbb4-4dd3-b09b-78d504d8d951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de5b4082-d87e-439c-aaf2-9a1ab9a932b8",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "852e0263-f176-42c3-a416-6d28b68b6944",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e416e07b-d423-42de-a094-61d10b7d57d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f9b4556-0cea-4a46-baea-eb0bdefb5cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e097d3f0-4431-4a26-bfba-a2f0ddb1b2f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7c9c62-9e1b-4207-a7d1-d6e5e3f84699",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd563470-144e-4141-baeb-9cfcfe975caa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74ba4ee1-156f-4170-9179-3421c732675e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd675726-93ee-491e-9177-1b1490698764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "15dd8894-2793-4028-8444-53164450ebcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458f56b7-2805-4445-aa2d-2fb40d8bf4cc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b47dbf0-a158-49d4-8a31-9405089ade87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fd9d15c-3d7b-4934-9606-5b62921a631a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39fe0cc-c6d6-44d9-bb19-2bdf05c545bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1f3fcb8-0638-4194-8e93-179828c44411"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cd046e6-16fb-4aa7-b945-a07c8cc0d6a8",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fbe8796-1154-4a5f-aab1-138ea8f9eeb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10580b9a-eff3-4161-ad90-3ab426aa8354"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b7846e9-0e7e-4997-b41e-4d47933abc76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "eb7613e7-acf0-4704-922d-fd2e4d2b87bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288a3e37-5e3e-4fd8-8e8c-33311687355f",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b99d6e7-6288-4671-8c22-5ec6c40d0ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1a04499-2b4c-4c52-bbc5-1e8dc1eae360"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6739a1bf-dc13-4c3b-8ebb-808c7814b739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f2a242f-18af-42e8-936f-dcb15670da82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "890631c4-54f2-423e-82c3-4e2822cc8995",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebe41761-4fcc-4cd9-98b7-5a34778fa9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf32aadc-f908-452d-bad6-b37526a8338c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea788265-1a5b-49d7-b081-2bc75e4860fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "95247b23-1998-470d-b951-7b59e65b6f26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "212e0fcd-3804-45fe-b699-1d1c2458b26b",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43276f3-d512-432b-a3da-5c585327fd28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69c9d38d-cee2-46e0-9df3-ad03791ddf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597bfbbd-8dbb-4bfa-aef5-67fc9da8ea0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8b2b108-b931-41cb-867c-2e7637a2bff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9296b7df-5e98-4121-9112-ce26ea3a3f5a",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9fde5a6-bc72-44d6-a77f-545dc75ff8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f4df42-bd77-4e4b-bdec-e92f4930006c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a6e9d1-b50e-4ecd-a054-c77d448c9ae4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "094dfdf1-4fee-4b76-b9e6-fde7446397a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "374b52f9-df74-4145-b293-52281ea6157c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd8817c5-cf5c-4c30-9cd8-f2519f32af8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea94064-88d0-4e55-9237-987cda0e57b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4320887e-d321-41c7-85e6-8f62022c8b6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0e0488a8-f583-4e7a-b3c2-d381360f5a38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa055f32-bd6c-411f-828f-f69c8543476f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e5a581a-d086-4e21-8902-fe550ee1d6d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d0462d5-7ccf-49b3-92af-ae4a204f0936"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "541044a4-34b7-4497-83ac-fa5663cc1aa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "06dff366-a1c4-4df0-ae31-d789192541a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed431c0-caa9-44a7-ac0d-685f99e59f43",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267f94a6-5432-4383-b5c0-ef3857691ad2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8feed922-d97b-4555-a699-84ac58e45eb0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bb34797-455e-4dcc-bdb2-1600a6ef50ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "eb4309ba-5468-4a1a-9b6b-28a8e270943c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb273ea5-6c95-4ad0-8968-11448e0e457b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a13e876-a3f4-4ec0-be04-de27e46668f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06ed5067-93f5-471a-88ae-e0fd9ff04a77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8dfa02f-2b29-4188-b750-4ae78e13f73c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "e452b540-0ae9-48f6-9d4e-5b8881a747e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c41a3c3c-5ff6-4c5f-920b-d71ad92e2591",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d1e7a7b-07b0-4f8b-9b2b-3bca37e7fdd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7fe990-9a82-48de-9c10-f3b20a044de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6825889-6681-45b6-a954-4b9e37862ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "37f13bd9-1b04-4b52-9234-ca64e582aa56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4b4b64-bcfe-47de-a080-b0f69fb8e88b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "812495a4-c51d-4ff8-89b0-3916f2da3d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d0fd63f-60d5-4c0c-a93c-bf54e0461282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857aceb7-4aba-48a1-9227-faad8827d3ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "51787a41-e468-45b0-aa1e-56060a6c8d68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaecb871-f1b7-4d4f-b9bc-ca33d5ee5536",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90e0341-bc4c-4587-937c-84fc9246a54d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cf0809a-59f6-4701-8a33-a5bef25452d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2567d43-4eaa-424a-bb2d-d204c375eeee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "268d9970-df28-4166-b4ef-10dc6090d19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e904da25-62cd-487a-b85d-ce6bdc1555d5",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad5a9c92-1f81-43ae-8882-3d18daefd6a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2cb9a75-57f0-48a2-92c3-dfcab68dfb65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307eb158-c04a-4c5f-b184-909d2cf4ef53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f92e1e78-d442-45c0-b9b1-28eb3037a57d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0b4085-90a4-4658-8a95-555e597c5df5",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba08190a-cc77-4780-97b8-35dea7cd7448",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e4e651f-84e6-45ab-a4bd-2b6f3c7cf2c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c5dc2b-f3ee-4f2e-af2d-64c95add79f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "446be47d-1c4b-4254-acab-58320804c2c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7db8cca9-001b-492a-a3d6-b64fecca0958",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33a98ca0-2b76-4597-bdb6-ec6304bcb1bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef66444-fdeb-4cb9-a105-dd166912efe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06fc831e-ecb9-4fcf-9cde-ea7a1b7ae23d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c1500d8f-eb78-4883-962e-907e2e6c6b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9233a0b-16b4-48ef-84cc-3c7d86cd9203",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56072593-2308-48e6-a6aa-7e6eb1d4ee61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19afd93d-ccfd-400e-a6d3-fe2f53601b05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b63133d-dbd0-46e4-b53a-d6f7adc6e756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "98d95543-9dda-4ec2-8b29-3d4ae52bc976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3965fa-59f9-4f3c-b1c2-cbfa5633776c",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75afcb5c-0dcf-4ace-9f1c-4f4368ea336d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63e37e85-9d21-4125-8a2e-c487f43bd76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00f661a3-c791-4fb7-bf82-fc8bfaf7f237",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "322da3ca-64a7-4326-a935-c39cce522e6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2987d771-aa39-429f-9c39-262c6dd35d40",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f7089e-eea2-4170-8e35-70f6c3db3f77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a2007ff-1503-43c9-95ea-e6e43e501c3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c12e7cbd-a3ae-42b0-994b-4abec4ff824b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0f7ef2-43a0-42f7-9eda-6ee92b328a57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27289c79-dba4-42a6-8e5b-655ac18227f7",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8434dc9a-406c-489f-a062-1a7b5373476d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20af33bb-d917-4a13-8fbb-6288eb22e983"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67dce2d0-dce8-490e-b4de-7bb797c90614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2297c928-cffb-4d51-9597-29e22a4efce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef2017d3-1770-462a-b4db-758b2f8af59a",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d91e332f-0d28-43f0-9b2e-dc2c16e13bd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7a8058b-6fa0-4d6d-8bb4-bbef8cfa1bb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f6ca5b2-ba5a-477e-93c4-5816b91a6695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ff39a29-d83f-4b60-be91-a316ce6eef00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cf726e6-ec9a-4648-be2a-129d59e76e1c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d665d4d3-98ab-41b0-bb48-7225274ccec5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6475b39b-2358-483a-9a0a-f673259e4086"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afe068f3-2761-4e1b-a159-a5c45ae6cf4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bded434c-cb16-45cf-8eb1-c903db920ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec46b9d-0857-44ed-bdcb-52571c412da7",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c8886a0-faf9-4443-ad2e-335487692776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb8d860a-f4ba-481f-bec6-0550619d4884"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465a2d9f-ad2e-4f49-891b-d372a785bfee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "604774cf-2723-4b76-aff5-30b6173a1f2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0da975d9-ded7-4083-912c-ee0cc7d80bc1",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3a5190-5ce5-4b38-bbbd-800d0b43fe91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d9b9b82-328b-4149-9315-7be07d6930d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25f3c52a-4767-492b-8459-c06c0d750b85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "50ee0058-8432-46ef-902c-be329574ad93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fcc5071-fa90-4e31-bbf7-f64f7545f4e9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec34e03b-61da-4a13-b4fc-64cdf48a15c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86595313-0f38-46f7-8606-106d7b100e27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f864226-f941-4f79-a901-44da3415d94a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "5a082d7a-a030-422f-a21d-602bcf8834df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851f5fd9-d87b-4f77-b253-129d63ba1257",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11650dcc-ccd2-44a6-bb41-c4a9c01546b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5883258-bb97-4fcf-bcd0-d2d139027ddc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e0b492-3bab-4541-80c8-88fa0b512497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "68a39ed2-1749-40fe-bda2-e0fe518b0f19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "225f9d86-514d-44ef-90e6-1ac034ac1dbd",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c3ae011-6813-41d9-8b49-6b89c214803e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e162d702-bc03-4ace-9d82-080b3660a5be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc03bf31-87f8-4097-b7e1-139d974cb3f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "beb87bb4-e7ac-4707-acd3-1a9f5c61339c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101aa08c-a482-4d92-8d45-5eb3087d9f0e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9ddffb9-3a1c-4ea8-a0ec-2648de6a4d24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c127d61-ef02-4219-87b3-5ee701f12424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8519ff25-93cb-4b0d-8132-b2b844fc1dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c42dd1c-7715-452a-a496-1b7ee4f695dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a6d080-052b-42eb-b25d-20b7c05385a3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a905189c-36d1-4786-93b4-341e193a3381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7598b35d-ac55-4f80-b22a-1773a966d787"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8701b4b-ec60-4823-8810-9d12f848bab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "877095ab-ac2b-4b14-9780-2f64ad00f394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "603a8722-dbde-40d2-8be5-0c5dafd4dfc4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31bb6d50-7b87-44ea-a7cc-821d28015747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3903566b-9504-4f83-92db-ed0862680151"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bc3266e-339b-4a5f-9176-d75cd6fc2e2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fa6c923-3469-4492-8364-1763a8055dd5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d87549de-417a-4c06-a430-403a98126a6d",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3e7182f-79c8-4f58-8565-9ad8c4f0f6b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b77dc7a-cb2e-4a87-903c-0a9221646315"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "885640f4-03e2-4c3a-a666-ed0c5bb8e63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2361108a-33f1-4181-ada6-343c8f495c7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ddfc90a-c6f1-4bec-9811-baf59006ac69",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7f6458c-ae0a-4f45-8dfa-87da14a6567c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77fe62d5-c7bc-493d-b9b2-5d3224372e51"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "628ca659-c2aa-4ad9-b746-528e02ef7d82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8613ebce-f1d8-4e8d-abd1-8beac64aa294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0fbd8282-917c-4926-b7d0-f61608881468",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "429f5c40-ed1a-4e2c-8751-93e859cd7b6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "402f4542-9d0d-4469-ba0e-a1c19f55fc02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab03d3ce-78f0-47ee-a8e5-772dc12339c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a34c143d-f287-4440-8a65-425b015ecf49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22eba173-e37e-4274-b36a-77f18890cf73",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffb4cb8e-9dae-4e69-97cd-94d64b24f71d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "060c41a9-9a58-43bb-9c5b-eac0ef4a934e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3b15279-1a3c-40f3-bc5f-9d2709bb28f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "78a9dced-d7fe-431b-a517-d02187018064"
                        }
                      }
                    ]
                  },
                  {
                    "id": "373cff41-5be2-4377-84f9-3e1f7939721a",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "233c11b0-07a8-4940-a098-2d85a36192a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55a3b215-4e0f-480a-b90f-a1de22d677c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980554eb-e76b-4bd6-8afb-f328d00dd14d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5487176-9d1e-420f-91d8-7f080097c1ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "330e879e-445a-48f8-bbba-1d3840098bc9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c926864-aecd-4640-8b73-1de9f013bee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f353ea2-f28a-4f33-b3f8-d29b6ed681da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf11567e-0c38-423d-ba86-c8a6d9a3e368",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e81f30fb-48a4-4dc5-bd9e-40d6e28cdf66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd34f4ba-2885-4fed-958b-14f2887e3836",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15da979-558f-444c-af5a-3aacbc84d68c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1ba4a30-1e89-49a3-995d-c3de4fea3065"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02304d5e-715b-427b-99cf-f7e317ef4c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "15adaa37-8e98-4640-acb7-a642ddeb3715"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2577c83f-dc80-4c6f-beff-20d5f287ce7a",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0fff498-6d1d-467e-aa0b-577a298c87c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8aaa36b-8e77-4cca-8867-4fb1e0b08c9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e7bad2d-5e12-4b3a-95db-d0f3fb1e30aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "bc086a0a-4574-4022-86cd-fe1d6e96e38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7396c03-6b25-4c0d-b9ac-9bfb09c11f63",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1919ded9-733b-492e-957c-42051398af61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6db075-532a-420c-8d6c-3a1fb12d2697"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b6422d6-6b49-459f-8aa6-3f9f1c190d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6b90cc07-6bf4-4882-8c1d-1b8726ea7084"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f04d85b-4ec1-4975-9bdc-861e2aeac6ac",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ec2661-f5b2-4d56-9459-2b1c8a3f1fe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4697feb7-a310-484b-88b3-0aabeee7e41a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9dfec1a-010a-45e6-a671-aa450b97e523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "dc88325a-9e4c-4a88-9681-94664a43cc8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9605e9d0-565c-40a5-a439-07170ea19909",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55be65da-b2b2-413b-9f91-2754d6ae9ce8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5a058bf-500e-4553-90e0-66ea6ed16cba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65fd7736-bb12-412b-bfd6-930b4923f24d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "61c0c855-32fb-43d7-a266-db1b6744fc0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458c9d9b-4a59-437b-a7e2-aa2bbd8a07c3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a106f33e-022b-43aa-b4cb-c731d709a247",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31fe8167-4e19-4417-b9e9-1a0315cb9d32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2a18b9b-263c-4723-8478-4b367f899b7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9d89c7b7-0f80-4c32-97d4-f2cc307c046e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09c32e60-7303-40d8-aaca-8d2d55bf7ae8",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b8b608f-daed-4c6b-8d16-f7cb8c1e3ad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "221f65e3-fb21-4177-a568-a746ddec0ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5f69ccb-4890-4745-8afd-f9da0facc795",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7dba6b4a-ecc2-46ac-bfa9-409e0e16098f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46eb854d-180e-41a0-b03c-b26d87a9abd3",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9a5e71-90f4-4ef4-a9cf-b94fa24c0a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d072af-8db3-4e41-913f-b5e460344952"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "436dcd83-ebbe-4ff3-ad74-c3769835c3e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "10b65b73-3f01-441c-869a-b8cd317c7d1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "646874cd-593c-4c91-807a-3cef5c0bf46c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b47f632d-fcb2-4c94-b0f6-8d72305bb241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d13a487-94cd-4540-af05-3dcfb068b5cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b21f422-2604-436f-ae5d-c9d744bf98cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f98e368c-cbb5-4795-84df-7d5806e4afac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5d9ab0f-cfed-4526-b241-a0ef34303ee9",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61fc94de-f404-4aae-8170-c9ac045ef804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ea91f6d-4a6e-4078-b642-7699b00db104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb472653-cee3-4568-9284-d6b23d747d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc8c337-6ac9-4875-b391-d416e3255425"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29b4cf8f-a2b9-4e88-a0bc-498997b05389",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dd73d2c-daa7-4070-8c9e-2e139e6a7a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38e4250e-df77-4ffd-96f4-9985c593c937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82fc5f09-c8df-4538-a024-fd2cf127f29a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8049295d-aed5-4aa9-a25e-365535055754"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9478259c-befc-4377-a2f0-6afd679a0840",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30bf6203-563c-46c1-973b-e1d76c4fdae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80197a0d-a1f8-43e9-85fb-8d974e1b968d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dce38b8-8479-4c1a-9ec8-123e2a2ac58d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3de7989f-1895-4c35-88f0-216ad1bff4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25636f8a-34c3-4ab2-a8f4-dca843bf7791",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "379bef18-5e4e-4054-af80-8e5929212aa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d97c8f-e073-45b7-b48d-4fa096201cfa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35e15131-6e54-4549-9a4f-1358f36fe4f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab52dcd3-f25f-4e9a-968b-94d33fa893c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "939a9809-28a0-4db2-b7f2-88cbd23c644a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38cf15ff-afe3-4759-b6a2-4fb0a7f842eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08be574b-1313-4dd0-a827-91c0a9d4093d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07191bf4-5fb9-452f-a43d-0dd49b41c331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec4eae3d-aac5-4933-8cbc-479821fcf361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88bc31c4-59a1-4cd1-af68-8a8640a58916",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d22c0bc5-7c32-4669-9415-343c2d05d707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d2706e5-5cff-41a4-8b53-99930037cc8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f0edb2-ba9b-4174-ac55-53cb88e1bc0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "19f976f3-1522-4224-aa7c-bbd89542b928"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfa6a85-abdc-4927-9718-e7f3716f926e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "019e7027-e538-475e-9aa5-af42e8c41bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f647ef8-7a76-4f21-896b-f43bdc662583"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e78dd4c-2059-40b0-9fd2-24aa6f4f8f12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bb95c346-6ee7-4fb2-a2a4-95a5bc764d6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0c42bd-a614-43cf-bcae-300bdb3436c5",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb125ef2-905e-41d6-8e5d-07bef45dde7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea09ce53-0ea2-4f03-8fbd-1c9de9c16f26"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f60549a-0dd0-48bf-aad0-ad311cff9f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "30e80445-b664-4a86-bba5-072d54a943be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6472811-49ba-47fd-9124-60f3f7c7f146",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba1d31ab-7370-44df-97d0-e69ff9b1435f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eab4c5e-6b19-406a-bd28-8528954a482f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "903830cd-7e15-404a-ba20-530e84cd5969",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "335cb1b9-4f30-4d32-9008-f91b6e52892c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77134bc3-3e4f-40b9-8343-3e739379201b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07dc077c-0185-4522-9e4f-6d2233f89fae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "59e46ab1-3a72-439f-a309-9630895f5f28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa091880-b3a0-4588-8daa-c312f5bd524a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "671fdc84-f1b5-4344-add5-43c268a37d2b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd7317cf-739c-4c61-b607-7237cf53e624",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ceab874-32e4-4785-af9e-64fcbe7b25a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbff79d1-3775-48a3-b3a9-9be5bf6ada7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e893d71-1c60-44a3-a6f4-1a4d948032b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "8249d1af-07e8-452c-b729-18d8567f8f00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613d6f27-eebb-46a5-9ad1-d52f77519ac0",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a32516c-1e37-417f-a305-065233797526",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24e35df7-8e2f-4fba-99c2-d80ae518deec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "220b9935-aa9e-4033-849e-91c9de554055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "83a521ca-cab0-4b88-b396-5fecb60b6955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3948e0d-e007-4c16-83f1-661784e06839",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8bd5512-e635-46e4-9d99-f87aa7076469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3fe6f8a9-121a-493b-8405-a8184e6e6237"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cc2d769-fd51-4eb4-aa70-db0927fcbd57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "cbacabca-05c1-49bb-976e-3d484bf8bcab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c539504-9f09-4294-ad3f-ed5619e33c7b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7451c39-c6ef-416f-90e9-d77c798fb5e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7bb49013-9322-40f4-9568-2392a605abcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "342ca9ae-d70c-4d38-8e44-056c64d00129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a939d26d-6bb9-4e2b-8f20-0a01a45d27fd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f988ae15-d44e-43e1-b656-35db626b7dc2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "192a8f76-4a4e-4721-b204-8a21e7af8b1d",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45346342-e09e-4028-a1a2-2c0fa5835802",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c300223-6dfe-45ba-9544-51a313acbb33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "100cb50e-bedf-43a3-a9a1-978693f0ae86",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2abdba58-4aea-4506-8c62-5b937ee89e7c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8420ce86-cbd9-4fad-875a-e0502a220849",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7ae3724d-ae04-4645-abf6-fdda10fd72e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "77ff859e-db94-4cde-a55e-e657b97cac4a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a6e49047-791e-44df-9417-de880d8f8dd9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "53e41f11-af59-411c-87b5-b9a1d30ea791",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8d9bc5d5-cc9b-44a9-9037-7afc9905f9ce"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "1d4246ac-4201-43b0-a2b4-89ad776a03a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "00709b52-3890-414b-8081-d86ce4baa81c"
                }
              }
            ]
          },
          {
            "id": "649e51a8-3ef9-4292-9ff0-ea13b72008ba",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d07aff6f-b4d8-43da-bb7d-0bc8c08dfc86",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "422cbcf4-11d0-4728-ad26-705c62038e61",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8002acd-3c25-451a-a058-879d4ce5bb6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "666e57a6-934e-4f1b-b9ae-06369b4ab196"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc23a354-31ec-4776-87fa-bccacbc50d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a15a9b2-b0d1-42d8-9206-03ce7c42e608"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "02cf4876-512f-42fb-9a2c-febcd4af7bd4",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4600aae-08e4-46a8-866e-bdca7d63ea7d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2b55014b-57e0-43bc-b075-418fe7262609"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c78b47a8-a9c9-47fe-8d40-288378b22fe4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d67ef701-5f06-4a17-bbbd-97bf4d4da793"
                    }
                  }
                ]
              },
              {
                "id": "d6fd8bdf-79c3-4e81-8e39-b99ee011d366",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5ca8dd2-4983-4b00-8608-8a8868a682ec",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6b6cf1af-dc9f-4708-af81-e13aa8f6c772"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82a31921-2262-4593-a56d-66b36aa4744b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f9fb368f-9331-43a6-b227-37f7587d17c8"
                    }
                  }
                ]
              },
              {
                "id": "47ab0a9d-bd6f-4855-9913-05f5053558d8",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d9d74b59-0992-4142-b5c3-5feec2a39681",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da771095-afb1-4289-9a9a-b1dca5a5478f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9f11a67c-ac17-410e-bfbf-592440cabe7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6edac6e6-fda9-4bca-9604-7203476eac35"
                    }
                  }
                ]
              },
              {
                "id": "ba5ec339-d491-47c3-8c29-912f3400ae82",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "31a63175-f227-40cc-9b09-36cb73374a79",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a1c99d6-7392-49e8-b1c4-458ffddfa8ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8c146a14-374a-4a06-9944-12cc2b96f749",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5acbc751-31b7-4ecd-98f9-c684d472c484"
                    }
                  }
                ]
              },
              {
                "id": "cce08c0b-dc4f-420c-a766-c7412173fd83",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2b8516d7-4c00-48a9-a632-2e03fb0d700d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b6746b9-b061-47be-bcee-dfe3e172dbf0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "17652165-c836-4593-9f9e-2f282d4bcd62",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fa8fb1f4-3113-486d-8550-9c3f4242ae6a"
                    }
                  }
                ]
              },
              {
                "id": "cb215d40-9ca6-443e-b9bb-861223377a38",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "315fe7fe-a6ac-4f4f-9611-dc1dff2d9ecb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "bf6350a6-02c5-4d87-bcd4-e320aeb419ec"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22802c54-c7a7-49b7-b8ee-148f7dd00218",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ecd069f9-62c0-4888-9cc0-df82e52eb1c4"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8cb8f365-41f1-474b-8551-e9e3bdc7dc32",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "36ef7cb9-11a3-4a4a-80eb-8006d69ed8a9"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "5f6fc4b3-8293-42e7-8ee6-ca17b2b2723c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0c2648b9-1a57-4175-8571-d6e4b29354ea"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1e32101-7ff2-4c3e-9d27-40d0b8241c8a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "115a9697-9bb9-4ab6-b90f-9f1322411a28"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6851dfc-bc65-47d9-969d-f59e70ee7fa4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e5cebff9-a567-4cc3-8eb9-1ed35c815b33"
            }
          }
        ]
      },
      {
        "id": "88951ddb-d8e4-417b-bdc2-c0dde9c35f7e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "ee4bd403-1b08-4111-84a5-da1283d22709",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8ca05b19-e08e-435a-b0af-1e826b302b95",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aa9420b1-ad62-4472-9aaf-6e1d021a9bc8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db82ce0c-ea43-45f0-872c-e36946067881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e0e10a-59f6-4495-9a3d-87852c69b909"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a90769ea-224d-4682-b1f1-6ee18cb8f562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3867597-cfaa-44f6-913c-73a2cfd634b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b983d11-453e-469b-a4d3-270ab4b502be",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cabaf732-ca87-4d2b-b83d-9899576e9273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f6fd9dd-1f56-4891-ae4f-8d0a1b64b8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b81a51e8-3292-4f52-b304-e7523b7b3a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aad04c4-4097-4977-aced-96c9a6857a23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c914c98-d006-40d1-8912-be5167f703a1",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf660e75-a3c6-4860-8d2d-07e04664ada4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fd529e7-aa7e-498f-90d0-c4cd5949c42c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53dcdc3d-32db-4c5c-a0a4-fff933e65eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a44d54f3-7b6c-421e-b36e-06d3a383cda7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6cfbba6-c81f-4b42-aa7f-9e03c95a4509",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deccd7a9-72b9-49ac-821b-bd258f25fe68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f249295-7675-4f5f-abac-851eecd23ffe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c38e21a6-559e-421f-8ec9-d68692f61d9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ebdb1aee-17b5-47b2-9f76-6866c8ea5af6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bad0f17e-2ea7-44a3-9fc0-04a91ece5837",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "befcd4e0-87e9-447d-b7d9-d5a2c45e4727",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3b97d5d-65b2-4e36-882b-1e05b044b0fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6771384-f216-41db-b2f0-581bfaf4bb9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4468f11-5489-49e6-88ea-4d5f6a48edde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d47cf0d-59e8-453c-a2ae-05258d5433ea",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "862208fc-667d-450c-9c2b-4f2c37bca5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12600b4-ae16-430a-b4a9-c693f8d268c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49ea09f-3be7-46d2-9b41-2db37be64f93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "522755dc-5a76-41a9-8290-1cea1dc7f9b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b5e0d0f-7695-42d3-937f-7457846bc04e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07510fae-f79d-4361-9aa7-e8effb380c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a17f0493-5ca9-41c2-89c6-d5b06cc4b99f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "229dff16-6e7d-4000-8d58-eafe71f31950",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "725a2689-a913-4661-9eec-7e26416b2462"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc4a67d0-fc8f-4486-917f-fecd280eaa3a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc83e34c-612d-4da8-8436-19df457a0a94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fa4e064-46c4-451b-bb3b-b87f25cb804b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29da9193-eb1a-4aea-995c-bee8182fdddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4f080e6-fdcb-4175-8b22-166dcb330fca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e962acc2-8aa2-459e-b853-a8b3f3d155ac",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3703d26-7e95-42a8-9421-837d2e615086",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9396cef7-84ab-4772-abbd-fc994351462c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d24124ea-c158-4ff6-964a-f4eac6928a30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9469ca1d-eb1b-4049-84c6-802421080ec0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdff00f3-a951-444e-945f-b5bb3264099d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9d34fd-28b2-4676-be2a-509447656956",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7036b95-11f3-49c3-bf9e-933655c358e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f573f533-058f-48b4-89b2-317fbf783fa8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "953fd592-ce99-4fbf-90f1-36bc7d2e7db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21091215-5387-4769-ad17-e12364ab8f19",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a09001f6-a5d4-45ef-89fa-f1070715c3eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a5866b4-a556-4e60-a3fc-e794df8236db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41aabd41-883d-4905-95c8-ff5e39f3200c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "dafd8984-361c-46f1-b9f3-b96e3063d400"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e3ad02-0250-4812-aa83-5574052416c8",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dc1f1a5-5fb4-49fe-865b-07e5f2ef9741",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ef8e086-38df-477c-bfb8-b4fcee2408da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91e1c07c-ccb5-4094-8daf-0a4dd5888eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "65b7ae5e-31e4-4c98-a2e5-53630a6bbc6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "813dccc3-3e4c-42c1-9525-911ef347b4b3",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "611a7cdd-71cd-4508-86ba-09fb57319f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbb241cd-d841-4e8e-8b5c-3d9716a9e02e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bdfaf35-2037-4fde-ad51-d52a7617b8a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9015edf-bfd9-4b24-aba9-ceab7b209e07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b99316b-3161-4122-b31b-88eaff597e9a",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71081210-a83f-4f42-aa9e-00f4830ff09d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00a04f7f-7a55-4a9f-bf96-577ac8dad6d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86465d87-d374-4ef2-b70b-aec3fdefad80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "52a52c59-abf4-4751-a196-447ef2845bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bd0e53b-ea40-4b6b-95f3-96e0821a0934",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fee9927-10bc-44a8-a3ba-6e1accc33bfb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa857675-e7f8-4fa0-b2bf-2f1006d23fb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "145fe2e9-645b-4129-94b2-ba10559285e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1cb8f4-67ad-4100-a2dc-bc6b59e50be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ece9359-379b-468c-b2ce-5a2b4257b574",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd78dcf2-4055-4336-b086-1cba737c4a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7ee82ad-2c91-4546-9cb8-b445a5cc9324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "973a40c8-71dc-499e-99a4-61fa32f89816",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b0aa8e7-ab2d-423d-bb16-24f0b6043f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02f75676-a9f5-49f3-81a9-59cb4e66da84",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a00a7b8f-b1a7-4c1f-9ff1-49485d909ce7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af9467fe-1d52-4e13-a836-a9fe03fe63e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bae4cb85-a896-4d37-8bc6-621959f4daeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "f04fc399-1cdf-445f-b4ee-446c4d3c5b30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e24695-686a-4d59-94f9-404254ce3d02",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253e2e4f-0fea-47a8-b025-7776d65707fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b427dcfe-eacd-4168-93b4-1a7de7f3fe96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00bb9bb7-1e0d-4e3a-bd94-a6da6a714cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a32e02dd-093d-4961-a073-01931a577298"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e472564-b63e-46b7-b379-b83266db7c23",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90ddde3c-8a31-4bb6-84a8-5c6f39c93857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c2ed1da-2c8b-44e4-adde-252c972990bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164072b1-766b-4dc1-9eb7-f6c89f435a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "40fed318-05b1-45f7-a06c-79820517bd6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "381708ac-30e1-4779-91bf-da3eaa154a17",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1380f1-e2bb-4a3c-adc6-a92d161c3d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a7359e1-e92d-448e-b058-795a4e3f8291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7625c634-bf1c-4992-836d-b7c30f9f1de8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53333850-2cb8-4ee2-be54-6f3a9206aaf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0847eed5-0f55-4cd7-aa95-9856f473d89c",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1641b3b-23c0-4a59-93fb-a224408b24ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5ed313eb-0653-4a9f-b65d-a458e036b33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0adffa2-ddab-4ce0-8617-41390fb0c14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7451d60b-277f-4961-9f57-ffd63a537427"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9eb690f3-5531-4f09-9a2d-2ebbf0a2f724",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc4a7a6d-405a-4050-babf-aa2e60d4c19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "997bbc9d-87f0-441b-af7f-b57f68b1b74c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964f30b6-1e4f-4c0b-8ae5-b47f4412b916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41ffc867-6689-4fff-a909-af203ee256c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cff8399-557e-4517-81e4-186d8e863f7c",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "990e242b-6fa7-4d62-be70-3c06fe24027c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8d3468a-2251-4c8d-9ffe-ba0308228b2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f49f64c3-a2cf-4a75-a646-c50f9fbdbb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6f0fba6-f533-43f8-88e5-870c313d7038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5f70f81-219b-47f9-8446-79b64b50dd5c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00901513-eda3-469b-b7f7-ad9b1ebfc037",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60a17af5-d5bf-4bf6-ac1f-1af2cbbf92ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b93b846-403b-473b-b920-7c871edf995b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f79c229-b284-4716-b569-f7617031d40b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14d5839d-f290-41c2-b6df-afffd34f71b0",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb3278f-dc33-45f1-b136-d93f8b7e3bf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6657c9db-197c-43fe-af79-ac22ba1bcf05"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcad8dca-7874-4349-98fc-04b7393f4f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdc6c331-3f4e-4582-8c6a-3310ae331a86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94218e71-a09c-482d-9f1e-f2f36d4c672d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c7481ba-1845-4974-a4e3-87e69df13314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e7592a0-bc2b-4ade-afde-7104b1528fe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdbf98e6-f574-4c93-968f-74d8a97f51b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "63d5fb43-ea99-47d4-af5b-43b7c54bc0f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbee01ec-6c48-4102-9368-5ebaea689f01",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ecea94-3066-4163-8a6b-eea85150089a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "917faa45-b1e3-40b8-9064-6a4cb0532f79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "784e22a0-3b6c-43d1-934e-940b1833e3b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "83685ac2-505d-458d-b843-8ffcd63c4002"
                        }
                      }
                    ]
                  },
                  {
                    "id": "916dd797-abb7-430f-a4d5-03c264636c87",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a422829-c27f-4526-aa35-92a7d0b3698f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c333ccad-f92a-4626-960f-f537c9065588"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fda38fc9-ff64-477e-8f7e-4b60b06c9b87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7be5ac58-fc51-43f9-a78d-6d7db441b841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8161d76c-c942-4067-8708-32d98d7d882e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a1f4c20-bbde-463e-8672-5e09a59eddc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20bc0d1c-08f9-4872-a575-8c7ba28a27c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a891b630-fbfa-46be-95aa-a5541b615d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2230046d-1328-4437-818b-0b3b3752f955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d93e886-dc5a-47a7-8223-37278190582c",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "039dd512-1ba0-417f-a54a-eb910e208c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2ef22bc-4a06-4dd8-a19a-03003e329e77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dea0cee-5d39-4b37-811c-4f7e83618d90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e18eec31-3edb-4353-92b0-e98f79f4a3a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1616fdbf-4b66-4832-b4f7-8f7aa05eb5eb",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b212d54b-1a69-4d33-8711-20213742d45e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05eaf449-6ad2-4382-a4a1-d16f125c5e3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e9ac679-8686-4d81-83b4-558edf9e2fa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25992112-84fc-40aa-aabd-e989d191dc6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1e36293-68af-4036-b551-508f4b75a348",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45cddd78-5c2a-4e06-9b4d-40b99bc889d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41f210f4-c6da-43b2-bd2d-36f4e38e123d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88add112-8ebc-4dc0-b113-675cc1de3271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "717d0fa1-3b58-48c4-b22f-b5a92dfb259c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4fa971ea-8173-4caf-ad47-492b0931f536",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "01a7e96b-dd35-42e3-af84-ecf706ab95b3",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4584a673-243b-4bf4-ae45-7d956c6be2e0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "d2530d48-5505-4be1-b8ec-62cd4490e61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5300fda9-c4ef-49b8-b975-df29c1e11285",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9fd672cd-2a2d-43c6-a215-d9f36a7986f2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f1355200-3b00-4962-a198-ae6a484c16b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5913ee20-3c1c-457f-8e6e-d16422b26b19"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bc7052c-6c40-4e6d-99f5-167c8e391995",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc48407e-451c-4988-8c9b-e8ac53d3c9fa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fee7dbdf-143a-4291-b371-7836493a84e1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "34907531-eda9-47d2-9552-5222636252f1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "701232c8-47d2-415d-b58d-8917c9605f70",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c59b2c5f-b1bd-4d0a-af26-a3021b38b658"
            }
          }
        ]
      },
      {
        "id": "dda6b586-c9e4-4ba6-b53e-b724b1b75f97",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "25d2a36c-173c-4c4c-ad2c-9aeb2b2f9670",
            "name": "Negative Testing",
            "item": [
              {
                "id": "656b13af-45dd-4b4f-8e62-84e3b87b1571",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "77889fcc-5076-4a75-b3b6-f547e8125317",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "897af57e-86e7-4c79-8ee5-09e7848c708e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1bec9d1-0150-4be7-9d0b-d01d50f18562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b01e56bb-6fb7-403c-909d-fa88b027cddf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "89e89452-e07e-4992-bbac-47aea64c99ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca686ed1-da14-483b-8bcf-3f1d0f62f4c8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5c23d60f-d264-4088-b84e-298594aec849",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a157769b-3282-46a3-aee7-9f2c07cd5473"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0dcaebe-16f7-4a3a-a2a0-7905804d7a9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29569fc9-bec4-4860-af93-da12612d720a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96b2e403-b8e3-4447-87d0-b957d3047136",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c39bebf-79e4-461a-aa3c-bdb9fd4f22fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0357919-cea4-4fb8-aebf-4c485e964945"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "319e5fca-e4ae-48be-b788-e86db06442bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74cb49d1-e041-45a3-b20f-4f8efde29c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eea2e2aa-81ce-492c-b455-7ba7b947bbb2",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5147ebec-4d88-49d4-add9-6727e76b0467",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01ca4e0a-4a0d-4645-803f-cac2a4bbc2fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb81222-2468-4fb3-9e8d-91838e524b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "133eda49-ff66-4979-aea3-f76eb855d794"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57d42ace-a509-47be-9fa3-a97fd673790c",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36484b4d-a6a2-410a-9ba3-fc59d8780ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "566438c0-0a90-4ff3-ba4f-9a567e462e38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f3bc3ba-af04-4bf2-bead-800e30aabf7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "75339e6f-cc06-4fb1-8d2f-698c018b659e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdce86d2-083b-4b0b-82b6-af54b1bc2f60",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57ddb063-4e6e-4952-a5f8-1edb041f6957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "686420c7-5083-495e-86b5-a05205871a24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0ad648-ceeb-4977-9665-493ce1ff6a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28dd1393-ba2e-44c8-a1d4-c6b8186d6346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206b1e5e-0fff-4bfd-ac15-a5922d22ec9e",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc48282e-edef-45b9-8816-df87eafbe288",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4d18a0e-b0f6-4149-9415-e97dcf32f29a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "910f6392-a1e1-4db1-8c0b-3caa736f5f60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "70b97f4d-da88-4b61-b427-d9e1fa8a582b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764ce14f-ef42-4e48-acf5-e66990a3adea",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0659d75-5710-433e-a211-48924e91ee81",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1597bc6-4b40-4423-965e-710c65fd9a72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64be3d11-7943-4ca5-9500-7e9840c7c4c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3276f5f9-202c-4aaa-b41c-82b1d123b638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f9dddb0-cca6-4186-ac7f-ec194e4ef220",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aa52b9d-a426-40c9-8e4a-e247fa48db77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1cf36d0-6315-4541-ae07-0993e13141a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd9241da-e65c-438d-92ed-c86574e752ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccccbd40-e247-4f58-a0ef-98abdd7522cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7000f241-5720-4f71-8a6e-f1e302e77d18",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f60db05-2a12-4489-9987-f79791b2c79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54c2b326-fdb5-47c5-8af8-0786af986204"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bcd5a97-c9b0-47be-8ad8-7ac23871b110",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba4328bc-2438-4a7b-9fb9-1b6cff167306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed617b3b-a804-4001-bd02-7f8a7ff23407",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "742739f1-8f8a-447c-beca-aab0c83b7fcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd4cb58-66ef-4855-82d1-862a2c16d1cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02b5bfc3-fbd5-41bb-a81f-8dc39f6973c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f6115d5e-2a20-4148-808e-4fa20c7e0aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f9dad4e-8b21-4c71-bea2-67c31e7a840e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b732ea-3f53-442e-be48-0a4ef99acf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6edffc55-cd8b-451e-8fce-9b308aed735d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e0047c-1ce0-44f8-b89a-1fbe07883d30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c32b74d3-6d42-4b2f-8318-f11875a2e15f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cff63833-4873-44ff-aee6-5524bb17d83b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2919d3-4436-4f02-9ee3-aef24e92589c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1d2894c-4c60-4db7-841b-754af00e9d1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87ee273-0687-4648-8054-8742031612a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "51bf90b4-3457-4ee3-8a32-6c488257d9ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0767bbae-e2c6-40e9-a222-ccb4d64f9600",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eb05deb-edbd-4c1e-9a22-b01441ed69c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92090ec7-fa75-4dde-8323-70e6985f87b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32b77818-6f80-4811-a1bb-b0b24b207834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1b0061dd-7271-4d75-9f8c-2da1d82f3d95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e1d7899-cfbd-4bf3-ba23-6991266d47e0",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "760cb562-0489-4967-998a-9c434a6bd509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed15914f-d331-428e-848f-fb4d00f98558"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4229d8c-04d0-4c2d-a5c4-08388c2d0591",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "e223de6d-ee7e-43b5-bf15-8aeb0eaeeb21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4b96530-8836-4f52-9afb-5b6d6b6e811f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "106a5693-6edb-435b-b9b0-767b21c457f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "575cd461-14df-4bc9-8c13-6cdaabd654b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9419a1ea-caf2-4fd6-acee-ef0adbfa34df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "98c66c4a-daad-43fc-a0a1-c23e9db2a2aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d3fb4b-c7e9-4534-bf27-35fef8a1c180",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6651a1fb-7527-436a-a836-77a8dfb2e8d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8488ebf-65a6-4d93-a0ab-d60037568207"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7445c757-6c95-4b56-ac63-3d155f9fe69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a549dc93-a441-4453-ba7c-4ab7cfd190a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d73a483-6d8c-4bbe-b703-459153348f5d",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bac76055-219d-4f93-ae21-e081bf54c4f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe41a5a5-1992-48f9-9416-3078edaf67c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e672f288-c10a-4a82-9b50-6ce4ffad9c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bdf71e43-cf5c-4c1a-8c42-cc53fe3ec6bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9a2fed-996a-4e4a-b21b-9ced4d3a2fc7",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b564157-f0e7-4159-91a0-e24fc8baf365",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba8997a9-bfd2-49ac-bb88-cd7f60c94412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91eafc8-4837-405e-bf7d-945c93aa7123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "13c7b613-1936-4207-ac56-94be45310676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6805a507-aacf-4b34-9bde-b7711a641829",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d26bd1de-3f63-4777-b966-e28568f468d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3ab13cf-c5c2-4fbc-9252-388a8affdf46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62db2904-b776-4e32-8c2e-c641eea914fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e24d8259-e59f-4db1-a377-7afe3af969fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcd941f-6bb9-4191-9134-fe2741c7237e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0c684aa-5030-4894-83b4-0498ff926e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9749b9a3-c2ce-419a-a09e-8685ee4e44bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40b08426-0139-4894-901a-3500c21d619c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "895f337e-623a-48b5-a72a-1812ec7b1c44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f240df8-ac92-45d2-bedf-2d115cdf030d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b31762ec-e557-4fb8-a628-beffdce47f78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4652f0ce-ed30-43a5-9449-f7b093d7335d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4dab58b-34f9-4bc7-a01d-1a7c5f624109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e46e953-97f6-4bdd-b3af-e366d34b5393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73cfaa9-22c3-4f8b-a681-5300922251c4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0a0585-c099-4f5f-a278-785e98a9af3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc0c214-a21e-4127-a7c7-74588dca225c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7f30ac7-23cd-468c-b369-f27b50b295eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f4df5d95-a89d-4640-97b2-f92098523976"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23e1a5b-9b76-480e-8e19-2f32e553ada9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1d5378e-a5a6-4ccd-9ca4-84baf85126cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85e696be-d238-4ed8-91cf-d5be4f8ed255"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7602cab4-286c-4ee6-8e9d-63edf91fc32e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "414ee788-f7c7-4868-a319-1632f7bdfa98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9fd5f79-b8df-4016-8213-30a598e83ae8",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c38ec74-89e0-4bc6-9721-8ae449f4be9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5249b162-8aaa-47c6-aa55-677c2d7d1dc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85d1035b-7988-42f6-bc50-46f4b5e57a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b49b579f-dae8-42d5-a2cd-75cb23d1fec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204f42cb-b7bd-4a10-a351-c0bf8a21199b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d023c026-c984-49e7-8886-a79382a3da08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47f9d043-e979-480c-8489-129cdef71772"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6d7e372-6926-4d2f-96e4-1513122dde5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f51ab704-dcfc-4a15-965a-a8f94781962a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77126335-5970-4948-9ae2-d8425e3090b2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e9fca4-9e6b-4895-b036-cf8da66e1397",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018b6237-22f5-4d75-b594-78b87f074c74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44482f65-35aa-4215-a065-66bdae11af44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65eabe52-45de-4895-8657-ec923cb97d6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2bc5197-2ba2-46bd-b46e-21dea503a77e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f4121e2-9e28-4cdf-b832-feb75be1aa1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90fae4f2-02d8-4955-a62d-1b0f30ef885a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71ce3c8f-8e19-4ac4-8fe6-64fab08b7f4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82f8c419-6af1-44b7-bcdd-4a224a3566e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47e03e53-e4a4-4666-afb4-f865ce496a50",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd435766-5a9d-4a20-89f9-fc1b699fb1c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8683e36-189d-45dc-8408-80fd1f6a9693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f037eefe-a71d-4817-bd6e-1cee7c84cd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a3f99b7-541d-439b-8fe3-cfd6f131c734"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d98030-fb85-4ac6-aa10-85a505f481ab",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd73aec-857d-42dc-a5b4-53028dedf1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3afd1c5-7b9c-4db5-b371-dd79de7e1e31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0073e3d4-2b69-4be0-8acc-ff439eb4c6c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b12f1af0-d60d-4823-a480-d57cb7a5d9d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf9ebf4-ceea-4040-84dd-9e605f968a82",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60e11d66-8749-4430-a6e4-090321d1d317",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49df97a1-22da-4982-923c-15f9ec757e59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "447c0cca-fc8b-48b1-a0d7-85557b746ccf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ddbdeb7-319f-4394-8450-506824d053e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c6ed81d-51ec-4965-9c51-8736e56b2142",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "330360ca-afb4-433b-a02a-0ef797e3d81f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "061af3d6-145f-4bd1-8ed5-9e40e55a6061"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d46c5f5-c918-4dba-bd8e-b70a899f4ec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dd8fa5dc-b533-4506-84be-7169413eaaa7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aac0c58-4029-4e94-b46e-79644352bc0d",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "866c18b5-d9e0-45aa-a712-26fd98ad210f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "018c6403-108a-47b8-82db-d8f5604e6814"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5550acb-c82b-4750-a65c-5a46a986c00c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e677b8ae-7e0c-48c9-8639-3ca0aa0ee738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e408c701-d79f-4fc9-a16d-1893c2b123e0",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef13b0a0-676e-4eeb-877e-cb920a30f90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a6b19f-8657-45f3-aece-e973bd5f970e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "570cdcac-167f-4292-9267-ffb0140fb863",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0513ba31-f905-4f56-a05d-90a2f457d4b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b0370d-a011-433f-8411-fb9b6d7bdebe",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19619baa-cc31-46f6-a19d-62f3fdbca316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d24075-0996-43ad-b359-023f2c63ccc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870786e5-8297-4e56-8a99-1bcb0a5336ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa25d66-0923-4117-97da-f41484ede824"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a01ba971-8bcd-4710-a896-1d20718b4e9a",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be879cde-c7fb-4379-9198-43ba3fd4fc58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25c7e099-2968-4490-bb65-249caf7adb66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9b254f-5995-4b30-ad3b-d0e43b7952ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45272cee-d9e0-4a6e-ab9f-d695dab2196c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71c0c8e6-fe70-4a46-9a6c-69ca9a049e0f",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61ab47fa-94c0-4b8e-9106-2e8d3a975bbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b300241a-6631-4f84-8eec-a90eaca83a88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcd1f4ac-c583-458b-8223-60f06093bd01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9868d0e-849f-485c-9608-55c1fa665756"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "868c43b8-f2f3-4cea-bd65-d67c6d7417b4",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4a6be258-6826-48ae-a69e-a7729076533d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a45650-e199-419b-bc67-15db569a8415",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a2a5ef3d-c8d7-487d-97e1-5d7ad0386d1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "957582d2-8790-4ed4-b4a0-a91c3b62ab54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e25c39a-2b60-476a-abf6-d707a23cc797"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "056e6336-c104-4252-b03a-23a21d6daa1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ad2b0bb5-5815-40cb-aa67-b25d6a42fa07"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "86b49c29-2c58-40e1-b9e6-695898b274ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ba393e66-5837-46d6-aa23-521f104ec041"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "90e08bdd-2a72-4df1-b669-2395dd741881",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "20330e0a-54ff-4713-963a-fd7a81032849"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "60f07f3e-bf82-481f-b903-c011155ba400",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9766c67-3147-4082-954e-48304d2f7ee0"
            }
          }
        ]
      },
      {
        "id": "1e174b84-ff02-437b-a5f5-91762c26cde5",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "cd9a6b07-344f-427f-9f7f-ce2c2d414286",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8657349b-43c1-4dda-89d4-ea0c173f879c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "5079a293-9dbf-4be8-8027-c9796b834cfc",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f3cb2db-9553-41ec-96f5-a5d993ead2b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a9cb43e-04b2-4ae4-9062-6b8d4d596beb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03faabd8-932a-4c0b-8996-0ad879c4e666",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdec4c11-d458-42f4-8710-6e9445878bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a697421-4492-4b46-8168-5976ccbbe21e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45923706-fb68-4876-916f-91b34c527cbd",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96f5ca71-13f5-4cc2-8455-2832ea45c1cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef75c6c-dbfb-4eb9-9f97-57799f030164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "730ea7dd-7b50-4d8d-a1ed-a2779e7ca203",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4e9e6d3-66e4-4472-919f-6a95ad1b3f55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac57d925-c6ca-4096-a754-80cbda0020a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d772b5-aef5-4b26-bbe8-65e95062f5c3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5ffa9a-49ee-454a-bbb2-80fb3b91b72a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42f2e107-22f3-42f2-8383-43ee85aa2de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd8f6df3-c714-43f0-8254-60f8dd0d2310",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1566501-4b97-49c6-a542-b2de39f03f99",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b748b6c-2d63-45b8-aeda-c2556aa9d510"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b49f83-ca9d-4041-94a4-7ee19b05f4cf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bf51552-d8a2-4331-82e5-6f012f9a6a7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "923c258d-7694-4acc-9450-0aaf6cae3038"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "860b687c-e50b-460d-878d-cf7a861157a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a57a2b6-56ad-45fc-bdac-68925a7c0274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d88b5cef-7794-4738-a63f-f2369809d988",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9ffbcba-99e2-4aed-9945-a96c4f6da3d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c3e3557-dbbb-4b60-a7a6-13686c8eb1c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf854183-8abe-4dad-a915-666458464979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "143fd41d-17b1-4280-8f6b-58aed24d4e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aebab03-5955-46c8-8c9d-cb1d7b9a5f82",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4742ea09-e305-49c3-9e31-302b97b1acf3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1b8ba72-e0c8-424f-af5c-41990d73d987"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4707316c-bc2f-443d-95a2-7eb98df18e2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e8a4c53-a96f-4d82-b0a4-20be90bc2221"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c822d40c-43ba-4c87-9f0d-0ca38fee6c20",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e59714c-de6a-454b-832e-a6780819242c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5e7940f0-fdcf-411e-8cec-c45d939b3c68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294f3b60-59ce-4a0a-964a-17a1bba9e275",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abbe4dbd-a9a9-45aa-a3f6-c304ce6d9c70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db793787-bbc1-498f-9721-5c7225933339",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b7fd7fc-740e-4ce0-acd1-ae8a10cf4f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "471fd755-bd05-4be5-8e3c-a736469f6fb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f284765-014a-4b1c-9d2b-d63ce3b55a7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ff41edd-eda3-4c6b-9b2e-1a5c74cd2b18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "545be20f-f8af-4b1e-b974-af3eab88c181",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af399b20-fd84-4c73-b164-cc6fea2f32d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c608da4-0be3-4380-961b-794c3208112c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b84f04d7-260f-4bd1-be52-9b03d3c5db73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "579557a4-f3ca-4e94-8547-38dba5aa7a44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b56f037-61f1-4ea3-80b0-79854dda2064",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63d96821-6bb2-4385-9049-243ec4d99184",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bccf8d2-18ef-4057-b04d-1c3b65185dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7b7fca-3e9c-4c8d-a412-e4156371072a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7827266-2fb9-423a-8c21-e2770f21244b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "571b9634-3f78-41b9-8a16-0b957b39b09a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee549629-9351-4aa2-a3a2-77f4a8c1986c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4dc91c-7f84-4847-b1f5-02677426854f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7da4b161-cc24-4d01-8d66-780c5b4ffcdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17fdb73c-8cce-433f-8b7f-52e9168615bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f47a2dd-efc0-4625-9ba1-dc5a474c8cfb",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "460daa13-1283-488d-b53e-c1c22e4f1c15",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "770bebd3-01c3-4662-ad04-27025100efb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fb6a4cc-6eba-461b-882d-a27fe8d70e71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c24bc9b-4a9f-4af0-9298-ddf9e92758cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfce938e-7ada-4ecf-9bd3-ce666f9a6e32",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2495d809-59fe-4111-bcff-36c4fd859117",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "458797e7-f64f-472f-ad3e-a4a6b3fccf67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "454511fd-8fb9-462c-8343-da1aa692eddb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0789ae81-cc23-4041-b2d2-881a5849d9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27e8d204-ace3-4531-9952-058d8d1ccd9a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1d160ca-2470-4ad4-b2a9-e146be29d3b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce80e1a6-fc7f-4c7a-812d-05ebe7d9b471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3270bf76-0a41-46f3-90e4-84d91c59fe2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56646836-3835-466b-b9c2-3d9e59b36b5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec687d3e-b1f8-4666-b86c-ccd72a9569ff",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0584882b-cc4e-4284-a38c-e3243f166b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "026fc527-881d-4c2e-a5d7-248240bb74df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c62a0ab-ec94-444b-aacd-5afbf133afaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8f153e1-a8e9-4408-89eb-8cbb5bd5843b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8cb2f70-73f8-4441-a5db-f8f53f991fa4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39235b8-4c7a-4fc2-8280-7ecd5b48504a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d942a76c-8112-41c0-abba-cb5aab813bf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "899953f5-7918-47b1-a756-2906fc7e2b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8802e78-e325-497a-9109-108b60c84c02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ef17b82-53ea-4433-a3c4-87ad6a038ab7",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48c3dcf9-b7f3-4e6e-8055-caa6cfd09694",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d448452-587d-4d2a-a168-74c5ecd06d9e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a43ee79-df0e-4fea-9b1a-7ad3eec6d90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca426d4b-7279-409d-a74d-28a225c454b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db79439-569d-4fbf-9bdc-6600346cf3ec",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59c569f6-d682-4248-9e79-630ef31e39f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be8b56af-c553-42e4-bafc-f0e8429d4865"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fa15d14-224b-46a3-ab1e-94bbf9d22668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c968210-37de-48eb-a9ab-dbe7112744bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d4fbc4c-e9a8-43fe-a97e-a748245e1e40",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e03e3fb9-3790-4895-a782-301b9b189377",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5672c1c3-e670-4790-999d-b5f9598b578b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9782224-b7d2-4367-ad87-e031e9f90c31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4a08761-9549-4f2d-ac61-16e1dbf16f12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0966596-d962-4e5f-b799-71681f9095ad",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e67ff0de-a23b-47f4-b719-23bcecfe00cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5c2b5d9-ed41-494c-ad30-a1e5467d216e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "14530d27-ce53-4ae4-b46f-40a3895f35f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "60ee1491-c908-433d-8c11-839c86556136"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e5c0dc-2c0e-4206-8b50-696d8e41c5a2",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4f75334-afa7-46dd-aaa4-26a2ea25551b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "318526d8-e363-4520-909f-9869f6751554"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98284005-7709-4dd6-9e97-59928097a0fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838c3634-790a-4ae4-9abe-d988bafda3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420abf74-0482-4793-8e7b-52528e542bbf",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8053a935-19b7-492b-953f-16dcbd84b5c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a603282b-fcf8-4966-8374-cde532552b15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e9d977-dee5-4d9d-8701-46110fb569a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3023ee-663b-4cb5-96d7-d5148541de99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "460b5aa5-c895-490e-b002-f10bbfcc8b9c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e871ac6-9268-488f-bfd9-219eb4c5f6d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "702d9dda-47fa-437a-9952-d747dc35b931"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7f0acd0-aa88-4b89-a8b3-3b17c31f647d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f7eb41-bb04-476d-90ba-e87225c2a737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13639cf8-5b55-4c4a-a053-cfeb5230156f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f816678-58bd-4ffb-a1cd-ad588d334aad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea3eb6b7-e543-4394-8e87-def9396ffdc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c986c5e-6fa3-4a50-91ac-f45d8875df8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6095bba-4186-42dc-aa79-f65afcca9a75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78061615-58ae-4593-9ca2-351329dcedd2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b242744e-3c3a-4c64-bbd7-a6df79b7f103",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd990b2a-690e-40ef-9642-0013a2ea1a1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21917264-cd89-449e-831d-43e09136620b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c2bad55-dc4c-41c5-808f-808a0914d655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24ddf1e-4029-4e62-a183-65e40c1debd5",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aec5fb79-66b1-4039-9d8b-a3b5bc59ce17",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b4e433b-c5c9-4540-9b94-3bc4dbe205a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "469ea8a7-e235-463d-8330-f91b0e95b775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e224025-6063-4114-8131-f08ead0a33dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46263e88-520c-4fee-8af9-8581c83828c6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9102a269-c2a8-485e-81ec-6bbd1cacc6ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "48c7f8e0-ff1f-4e4a-8e51-f4d034a52cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c59fd5e9-fc7d-4bfb-9c48-8418b87c8f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40e1856c-a208-4eca-a3b2-8ec90d08feab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c07d02-dbbb-4724-9b16-4507602d13a1",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d13ee3-d086-459f-b902-7065f95e0445",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6ade790e-8797-4cdc-a48b-de86f55e4374"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16166501-c773-45bb-bc9c-9a3d1a026b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c0074ae-e935-47f3-a503-7ab30fa64725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa79cb35-db55-4c25-905a-f771eb37d2cc",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe35568a-38f7-4e37-a971-5bfa1fd4e28d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1aeda77-6bcf-4fd1-aee8-0dd595a9b421"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e93bbd7-e2e9-4e22-a928-86b6697d6935",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71cb9270-2562-46cd-a8a5-37ef734ba6cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7087209c-1ecb-4c82-b750-6788ed67cb8e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b89f0b5f-9a7d-4ed8-b516-44f710e23504",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fb437add-a3e4-41db-a4a5-74e2e34c62d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c0690b7-00dc-4efe-8505-bcd8d3e8a038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6de28aae-75db-4e80-829b-c5d818da27a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2addca3-4458-4054-ad29-7647db38ce51",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96f86dd1-55bd-47bd-b4df-8f9b60971d75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ef0fc2a-0e1d-4c35-ba17-e98ddb465155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69ad617-0946-45a1-b7b6-cb4aebe02b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5029583-7c91-4fd3-bfcb-e919e57065da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71812425-5570-4ad8-ac5f-423d60dc1e6b",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b0f4592-e8d5-47c1-9055-d6ce03b5e860",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a81c180-a06a-436b-8427-8c67ef8a079b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "353df38d-fee7-4ae9-a64f-a78d2928a6e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "224b61b5-19a2-45c7-bd4f-9a4204c3afd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f9f32b1-53c0-4c1a-bd47-d02187ab7b37",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c550e261-56e9-4389-a109-8833e7d215c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbf5779-2043-47d2-9b05-c395b2c85ecb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e9621c7-7d47-4deb-adc3-bc2d0b3f8b9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13bf0973-19cc-4b6b-9a45-18aebafb82b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e90ee01d-85eb-415a-88c2-444096acc795",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee3598e7-11cc-4e55-84ca-6cfc49c1f19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d9920d-42e2-4c1d-8511-3d9c98616aac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8f38bec-d450-4f76-adbe-694468d6a682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b90d81d-caf6-48bb-adc9-67d42e7e22d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01331d61-7ad3-4964-8eac-ab1caf2eccc9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ed23f0-788b-49e3-8801-c9a77e86c6b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3197abd0-3b68-4ebf-a13d-86f0fe77c0f8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b64af4e-2b59-4e59-aee4-8a9fad1131f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8ccd55e-9798-4d51-8243-1feb5a57f978"
                        }
                      }
                    ]
                  },
                  {
                    "id": "059330d4-9d8f-4cfd-aabb-e5e66a3bca28",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b4c573-2a17-4c48-873f-041eb79f8ee1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d7ff342-7ad6-42d6-8428-3d4a86b7f4e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df70a382-7617-414b-a540-e240ec4dd4d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a64083e8-c8b8-4a3f-92fc-e832c3a381e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7967967b-d50b-42cd-9d9f-432c25892d91",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0346866f-cd3f-41ae-be57-7c11a534c948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fb1f7174-50ab-48cb-af06-dea60f63db1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecf7c59-2e7b-4a80-a010-a82aa3c56bfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "340b7957-7cdd-42f9-b1c7-1b2a2e3c8ec4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0152a6b-bb1c-4889-b96e-0cc0f0c7ed6a",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f94e64-c49c-4b35-a5a9-57e85aaf277f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a09901c5-5cfa-46c8-9442-9a9fa3745ff5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a5e4215-7dfc-49b0-8c93-0849125441df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3518dbc0-64a4-427e-89c4-4c7bfbcb36a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1116e336-db43-4ea5-b09c-396f1ce1159e",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41853aec-1cd4-494f-af5d-dd53ac2c4ec5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b359d03f-1e23-4a19-a7e7-0af9afe82133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "764077b1-bd04-4c02-a3f8-7e40e0cdd18b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c800c98-3a24-4076-9dda-dd59a73651fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51997273-0624-40e4-8e91-f060a5d52e5a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d7e9892-8b04-4c1d-bce6-8a9f52be08fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc9c1f5-51f6-4888-87ec-00d4d06fadc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a34de3-78de-4c74-b01c-01e02ec19566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ae46b8f-afce-4976-8dfe-c4ac623c3728"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67ffc489-2520-4827-a02b-1cc018e5b0eb",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80c29d0-5b88-449e-9b31-1429a1c9cf43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf77b94-216b-4525-8124-8204acaf17ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fc24130-8215-4ab6-8bb3-57acc2106385",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18f11239-570a-455a-bb41-b350ace1dbf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5136873-963d-4775-92bf-8632396e9ead",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a7d576f-b5f6-4ca6-a79c-d43d42723462",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845d76e3-3c87-4fc0-bffd-35699c96fcef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "924d790f-5c45-4ab9-97c4-469f8a88e84f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dad8b6c-d1b2-4acc-8d76-2d56c4f3b2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254dc480-ffaf-45bf-8aaa-9b78526d54d1",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67d29706-5eac-4105-80c8-bb9aa70feef2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcb69b46-57d4-41c5-a4d6-6f7b29522933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90e9630-a72e-441a-9d35-19e145226c35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34d631ef-d061-4d7e-88f2-ceba45ae648a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe17bb2f-4295-4854-8129-e8667ed02fc1",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8292d56-cee1-4563-b580-3c5daf8d9820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4babbcf-6739-447f-b5d9-c5048b01389c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0dae276b-4cba-42f6-a871-f8954d579cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d232bd1-a476-4132-a27e-2bc640bfd4fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9644479-1069-4e49-bf91-f01d125444f8",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7486d60-52d9-4d0a-93eb-e18890b8816c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a05f8a70-5f90-4dc3-a8be-2df0b600444a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9a5257f-98fc-4432-9905-eb53b82db51e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2070ba38-4669-4923-bf25-a8287b069e47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca232077-3102-4248-a56b-77a58a6f30c8",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc94f3a1-5516-4ba2-91b6-ac1054efeb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b200966f-0bdf-4975-babc-9b417f649a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "91762ef6-cd62-411b-b6d0-be7f7102e955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16d8000b-968a-4bdf-84d4-947a3b42c535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d592d4cd-6482-4e9a-8fa0-df7c4adfa640",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdafecd7-142e-4ec5-b61e-9bd0728f6399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c145e25-84fe-484b-9588-32e1de2b2052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5457a9a9-3e3c-410c-a80e-b8eb60338eae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a85b9af-941c-4a7c-8750-da0feb908934"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ca5e7b-fb0d-4089-82f3-fbcd24d0109f",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e36ee9e-fb00-43ff-b558-e0550d606230",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa07450-63d4-41e6-9c20-e8fc72a704b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ed39db4-4adb-4fda-ada7-2b97f26a4717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4845dc29-0b42-4ecf-9b87-56bc9433c01d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e80f5b84-9d17-4a18-8c7c-6f58c424e260",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffca1c5-8861-4ced-9a80-de2dd1783de1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095a2b00-8137-40d2-a1a6-bf00905a8f63"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff961849-b0ff-4653-99f9-198afd94f932",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32438670-c9ba-4212-9cf7-3cba9b4bf36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f80dbf-c30f-4c6f-ab25-5fcd10cefa23",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08df35c3-88c8-4508-8d2c-8ec97412a799",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c9d6e90-ef0e-43a5-a110-65a889030bfb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97b6dd9-2353-453f-9044-e154e8c34097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2ab796a-6189-4431-aac6-b05910b33b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3dde3be-392e-4a04-84e1-afdb3d7f7a64",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1726fab-8d9c-46c2-9252-7f311bdecfe2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eae16e25-90fe-45f0-8e1a-4cc3644289a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ec36283-e349-43a2-9bad-f1d64d589088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8ca9718-70fb-46c6-b371-c558c067056e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4951fb22-7b05-43ba-82a4-186a92790b0d",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d20acab-02a6-407b-ab9e-e261aae739b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "420061e9-3a27-4e5a-a281-45e6dd5b09f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16f19f43-f05f-494b-8492-72f02830e01a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b6b3d99-b41f-4e1b-a5cf-12769a51ea3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c8df973-3c5e-428d-8878-aacb571ef239",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bbb793-e65c-4612-9301-b1da400aeb4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cecd4a08-ca0c-4e55-9506-1682e5f925fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8909394-fec5-44fc-87ad-ed0b8b5bf243",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69baf5f5-50b8-4f38-b0b2-6e665884df3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7eb22508-f82c-4846-807c-8931b5856880",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42011d66-41ef-404c-bc4a-a53a71f0f7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "584fe5ad-86e4-4db1-9347-f5a812bde2cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64abe899-cba7-43eb-8b61-c5a130a39ae5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fae487b4-39a2-4d0e-9a34-5d7a79265534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2b6ec33-223f-4069-85d7-09e26bc8d932",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae437b8-6677-4d5d-be4f-c980d2656d9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2323650c-3b45-42f6-b711-7573c6d9b100"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d23b6d9a-9b0f-4779-9ed9-06cc2de6a87f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b1f5bd9-0d55-4953-9fd1-b72eb4b02c30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c398676a-11f4-4477-b144-b6f368b26e82",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42e7068b-3cdf-4345-bb1d-9e53de3f7a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b571b09-80f9-4839-8147-e831c0426fbd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "824fe420-2a8c-4a5c-a6c8-df42b5efc57b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ba4468-8c32-4115-bc38-bb5a4e32d7db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5143ecf3-87d2-4528-bc93-1c99b2eaa4b4",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e8290e6-d863-4150-84b5-083702ff7772",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "522194a1-be84-4c69-b96a-574c88f89fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08deafac-0a5e-437e-8f76-3c41655c7d1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7151b6d2-1d30-4cd6-a6e3-493a26f39c73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e569706c-0d87-4b8f-8922-6c07edaf5567",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a9e37d9-f889-4ec7-9874-bdfb9619dc2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84aaae72-d4a2-4eea-8db7-f371f8be2e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d830f641-a3ce-4dbd-bb14-6dd6610c6ae0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c91ebe41-a408-4c94-a94f-2dcd395ffeb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53b64add-e828-469a-b018-e836e88d009e",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f8fb90-ab7f-4370-8f52-0255a8d36c4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9c33b95-053b-47d7-beac-e75d95b2e1c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7522a9-f30f-4439-b443-c9ff37fd5a21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b516d6e4-ead5-4d5f-92e5-bbe578b58344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcfed73e-6000-4d44-b354-7ac6021f5fe1",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc41bee-e3a4-4339-a11a-33feb190bf8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965834e6-5ea1-4109-b9ca-cb7a8c6ad759"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "913b7ef8-9def-4b1d-9ac5-9be0cd5e8d29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "573ce46d-67c2-4974-904c-4c2f9bd50f35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0e3c99d-38f5-43f6-b037-f7b606026c88",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a8cedfe-3e98-44b2-9c8a-bfcfc1320cfe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eae8f56-8c71-4cd5-b026-24e06ada3456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb2aa9e8-9c0d-4d4f-928c-2bf60a8fa030",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d8fa1a-1487-478f-82e6-dafed0ec8302"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eda15091-d89a-44d8-9bec-b5bab2ab35b0",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb703267-4f38-4a88-89d1-abdc906ff015",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bea2f270-3a6a-4bd6-bf3b-747e6a92adc0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a0bf478-93c7-45ae-a8d5-3051ce6cee21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c3e6dc98-548e-4401-b600-86f43fd29bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5815c370-6da3-49c3-ac64-b1f228aacb47",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe706ae9-8aad-4036-ae80-cc1fffe438f2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9b1a4a1-d9a7-4b95-babd-3296dafbcb47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c02f4fd3-40ab-4e5e-b818-6f5dacedc214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "696c1998-71f3-483d-b16b-fb7b06954f07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5986d238-9031-4fb4-9918-025d94673c89",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b7231f-3f46-4a43-9afe-385a98b0f71b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3604a48-c508-4362-a0b8-eda26ce06688"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6e97514-a0ba-4b7d-82c0-71852e6a7e26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06548603-12d5-45e0-8b79-aba72bc064be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57c6e2ff-4714-4415-b362-053c18a5851a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0dc0885-59e8-4dcd-9a6a-8e4b4021b168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "993865f4-20db-48aa-b459-4d2c0cc1cb91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7c91012-79c3-4f38-9691-7fed920b769d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1f462fc-bff1-46d6-9eed-23cafbb0fd57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a504f8d-4321-4696-aee1-c2d7561a503a",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "266748c1-0f0e-4816-83cf-2e3bcd4016e7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83ca8298-df14-4bab-b19f-00395039a661"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450dc645-8218-41f5-b8f5-98038830549c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bfa69da-133a-4ee4-bd52-6eff0b9604cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0e72515-0638-4ba0-874b-018010261072",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e29889c8-c718-4533-a384-6ef8c749c049",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "22a10562-b5cc-4ed7-88e3-642fb32b2d8c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b164bf96-d3ee-4532-9426-1a388ee3d6a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c109fd-72d7-418c-909b-3235cc88530e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d12f32dd-52f6-435e-ab7f-ec08eb5e210f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399b509d-fd03-462e-af16-c0701488a783",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd2003ef-b6f7-4c8c-a403-7e8fb298a32b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "790ce598-b56e-4f09-92fe-df9c644b6c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d0d863d-6660-4493-963d-507cd0994c71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ea81289-9fd0-4041-9d82-54bdd2b5ba98",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a27d2a-3d7f-462f-a86f-afbc6d822064",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4c672b4-3845-4a22-87ab-9eea751d8077"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ab22122-5770-4519-9b8d-37f2fdf7d21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea02e3a4-08ad-4e60-8836-13cfd995a017"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5b073c8-e20a-449e-9960-e92a325006a7",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ead18d1-c7fc-49ca-bcbb-236fa606df3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc07ed0a-2e34-4548-aab0-6e452b77e448"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7475e393-8ec1-4bbb-b99b-4c4989df21a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8e8ef52-752d-4e6e-8e86-8f2ff766137c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ead4cb-e551-4e56-89e7-c5bf7f9b3cf5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "695ad8f6-3968-446b-ba5c-3975b9373183",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "44388e3d-059d-4b08-9d01-8747fd5999f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36dbd859-db58-45a1-abe0-c1ec9dda69e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3a3177d-9bf0-4172-b6a2-5b874e5f2cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85e8cabb-187e-479c-9dbf-4e94be40d24e",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe52e89-8739-4711-b40b-d993066f7e37",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fd7603fb-f315-4771-a737-4a4f58c25d23"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fb0b0e1-ff35-4a10-be66-e458261ced12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93c06c90-0796-401e-b7f5-af09052d67b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b513f95-0cd1-4170-9f36-5020b7205e43",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ef6cfd-ae10-4829-a78f-a14fb5b93a30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a5eb1427-3634-4c0a-bfe6-900d35107b41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c549b25f-fe57-4abb-b42d-c9ce4acb8820",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85e05e87-d39c-4f91-99f3-7b5f474abb47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6748ec58-9ca2-408c-a0ef-6951bcfdf4ca",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb9b9d43-34fc-434a-adc1-0f5300f64e52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d736cbf-7e44-4bd2-b1fe-c031d636cae6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a98c62-a4d4-4dfc-8f0a-2773652c06cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d852a9e-1b37-4036-bafb-ed2cde84aab7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26481cf3-8627-48ee-8128-2e8a079351c4",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe1a6027-2868-4935-90ff-74060ba0d05c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "da554a5d-27cb-4d15-a535-123949df6aca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd048c36-4ad7-4510-b139-ac017944b601",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ddcdaa7-c6c5-4f5c-9fd0-4c9a993a644c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06382fa3-ed89-4eb0-9be6-22f5f0b025ac",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "597a2d9c-3d60-4b37-8b77-1a544eeea6ce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5210e93b-fc3b-41e0-aa95-c72a3440d9bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f24adf81-dd9a-4626-9271-158e052d1eec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80ac4088-ea51-4bdc-a064-e5ae67853365"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3edbd182-bdf2-4c28-94eb-ccb50bc581c3",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cb0f0f1-d3f8-4b4f-98e5-a96cca3156da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "553c0df5-f7a7-4475-876d-261d3660dab9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f8862be-1948-474c-aec8-545e5f75732b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e2c994e-2d96-49a4-aea0-2471be7c397a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b452d00c-fae6-46b2-a92c-32bf59a1497c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2c5421-019a-4682-b163-d536c5f4b459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0dee4da4-54c7-4aa0-9029-4dc0c69c2823"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8056e270-c66e-4207-8dcc-334d56982359",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96e55895-d279-4f75-99c5-50b2c9b942d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "962f938e-f737-42ed-90ce-79693a159a64",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ecff3eb-ae79-4430-93b4-cb7456e02f9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04529aac-57dd-4edd-a063-4aaf5eb5dd8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd23afc1-cb3d-41c8-93a4-ba2540f7aac3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d5859bd-55e8-4d6e-8fef-119b67bd4e5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "304e6ff2-b6b9-43f2-84bb-1beba61d6f13",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96bd4fcd-32d1-4e3a-8ca3-3b567911cacf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c7637c3-3bf3-4305-852b-73252397820c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec73ff68-1eb0-41da-b475-ddc540064e5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db1577b6-9a9b-409c-bd3e-e9132339a9e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32fdf370-ea5a-4646-8d4e-485147744e85",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de8a716a-f7f9-4304-be07-b564db28e45f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0277bc71-5f1b-4b27-a056-1bad49683760"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fed192fb-4bdf-48d9-b09c-2e78241a4ecd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26220bfe-2698-4eb3-8743-d42ed0618f4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21a873ca-bdaf-4799-99f4-70d1b08a851b",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81c9ee7f-a6aa-4afb-ab47-9c07c21a8345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "71bac9fa-d8f1-46a1-909a-0b348592d1ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee22edc5-a3c4-49db-9b5d-28602250edcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1cf66621-e0b9-4a94-898d-8dc13b597e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2cf51e-6367-4913-8e1d-296e6415876f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ed7cf3-5322-4834-9fb4-517978b8017d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c994fa80-8e29-4ee0-83fc-25add44c018d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e20a05e4-bf7e-4c9c-822b-decc7208da07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e06319ed-74d4-4b65-a832-f54fc89bf1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7f74fd-ddfb-47ca-832d-2418275a8486",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "558320bb-bc5a-4acc-b34e-d29e70dff5fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5dd11752-4f71-4c8f-9ff3-6f8a91bc5907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709f9084-3d02-478b-949b-a93a9f025880",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "096f18bc-6f72-4380-81bc-b3c88b582255"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc069148-86fe-453f-92fb-221a47d94f76",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0af74154-b37a-4b52-94ee-1f5b0050a5d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc42a2a7-6f38-40dc-b441-e4f71b830f6d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af6cb74-17cc-4d20-a821-b165a7626cba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb6b84c-ce95-4dbc-9f9b-c292372f7b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a24f043a-65ee-4c4d-ade4-ec69b6261a0f",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3729445-27e4-402d-a2e8-6abd516e92b5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "60dcb2aa-7901-443f-9c01-291622701471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "571f3a0d-97e8-4d19-95fb-ddf1f2f62b09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4205321-afc1-41f9-96b7-2aecdffe5a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52546efa-85e5-4428-8f9c-024fc4a57ecc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d829a2d8-2614-47b9-8ca0-ff0120def954",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01ff1906-c5af-40a2-ba5d-5f82389a38c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d04ca58f-ada3-4694-9236-665202d173c2",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e351703-cc15-4bb5-b2ca-717406dd3c41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f2ee787-3730-44bf-b546-21b2eaa106b6",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa8d2d9c-64cb-45ba-b1af-b322eb9f7d9f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd2a926e-11c6-4cca-aa9f-c8ac3115cacc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12046ea4-fd71-400a-a840-50c4b2b3e312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e7ad235-d625-490c-a0ca-4f8a9ff0ef93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56aab540-78e6-412a-9ca0-9787142b4716",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ad761e1-fad5-4e55-836a-acb3d769aa01",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e84ea8b0-0c48-4bdc-aca4-d792a9b912d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a97af8-bd8a-4d1b-93df-d25ea3033d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff35ddfe-c14e-4321-ab73-088fdad3dd06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b68183d-0ec7-4fc7-87d8-271ee4d3d5a1",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc7910b1-6d45-49ac-8bf0-0a5ded91dc7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7886b42-172a-49b2-bef7-ffed101cc87f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "822c63fd-b2f2-4600-b220-cbcb5c35009f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "891aa877-54bb-4bd9-9c05-f179de45f81e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2e2828-bee0-478c-8532-e45b5fdfa8f6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f62183fb-a112-401c-8652-c1f6d95b6a88",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c69e6f72-6b9e-4dc6-888e-9ca8cc4e9a6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9bd3bc8-f56f-4191-b058-66d1f4a08c80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2676872e-68dc-47b4-94b5-412f07a885dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf5d194-d5cc-4457-87ac-1f831d4cc74a",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf13a009-b31c-4e68-bb6e-ff94c4fa7e69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2b30521d-c749-4370-ae84-92e400603842"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41f0e8db-e7d3-4d5d-99fc-969d17ab7e93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5be93ad-17ff-4850-a754-cc52ebde4e0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24ffb47f-f67e-4c4e-bd6e-1ed4651fa5b6",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d8d71a1-6fb9-4ff4-a044-03937fe2c9df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80eb1ec1-fc32-4095-aa65-4c6c9392a8d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbd3229d-c7fc-488f-a7dd-4233c3e5be98",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de56ce39-6387-455b-960a-3fd17d73b82f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9615f82c-d649-4ec3-84f4-062e8c699303",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62f602cf-75d4-487e-896f-b6155c34f79a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b280a281-fe90-427a-bdb3-8e177391c720"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec739ed-9ea1-4d21-ba68-ac977e7e8185",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d346542-4c03-4195-b377-d911839a1a09"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "29263fe1-487b-4ba9-b4f3-1a0170822cb3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b716a6c0-af70-4304-ad10-324efd9d781f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "62fa8179-e0b2-443e-82fe-50feb53c8273",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "50ce33e6-fbe9-4908-acf7-af9a6c20ae41"
                    }
                  }
                ]
              },
              {
                "id": "e48d9a89-78aa-45b9-bd18-3a8e22ea5e7f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3e533359-0385-4e98-baae-90e720852110",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041685b4-b344-429a-bb65-adca39faadd2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c649ae6b-3c50-4635-b36a-30bb597ba345"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc590c7b-86fe-403d-8865-57f09feda21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "12ff6f9f-68e1-4d70-8a1f-8059e60ee5c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6f7722f-b1fb-47bb-90a6-bbeb32e475e3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "52e32cdb-8015-439c-890f-113c89b502ef"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3e30c13b-2dd6-40a2-bc78-9bcf52bc2a75",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "67ad7cb3-98b6-4f9c-9cf2-ce68358399ea"
                    }
                  }
                ]
              },
              {
                "id": "bb1f8554-296f-494f-b897-4fd95c19d5a7",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "a43f5545-3601-4298-a8e2-08d382d0608d",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa1c7275-90e9-4ff4-b9bd-66ba20f475ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "b20da670-ccdf-44af-91dd-efb7116ad104"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6600942-1b0a-4809-b806-50561d16c1a7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d65bd795-07e9-478b-840d-1346232ad89e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "d7dc733d-369b-4303-bb24-db8400900c4d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e0585c11-9290-4cad-b487-7c1af2878421",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7eed7ecc-0d70-4fdd-97b5-5672067d4438",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "bdbc4a4c-fcd7-4f52-813f-de9c0f34699b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "19320268-48bd-4c60-804f-46caad3723b0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6edc1c1f-99a8-4bc6-b668-5d9ee7650df2"
                    }
                  }
                ]
              },
              {
                "id": "e1231266-09a0-45bd-8062-ff1fc124f403",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9b6e527-d9d9-48c9-a4fd-8baa980a544d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9d423157-e3ca-42c5-9c82-e8608a759e6d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a40a6dc6-4bf9-4047-bf32-5663c1ee990f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "151dec3e-2b09-41fd-8cd4-f52a2b7f418f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85943f5a-f47d-4b8a-bf8f-39ef5cc6ed38",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "3cca1545-d94a-491f-ba19-b4765249ff32"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40acb1ca-f66f-4939-80be-f97cf7011c4a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "43139929-eb78-4425-b364-4bcbb593e86c"
            }
          }
        ]
      },
      {
        "id": "2490bc64-2b00-4b04-9f32-5745065e62a1",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "0b1d409a-6c15-4d24-a643-a3a609146018",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4baedfc7-bb2a-4c56-a61e-cdd473419829",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "141a7675-504b-4ebc-bc64-cd37cba30617",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5463287-2ed1-4408-8a53-6e099e382789",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "576a4cdb-eec0-4ec0-ba49-89cfe3c79332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c616bd27-af60-4b0f-a2a5-e3b2299cc007",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c96482e-cffc-4e6d-b684-78abfe0180be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "11a22db4-163e-4c0c-bfa5-40e0efa829b9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6d5da27b-1f36-4770-a7fe-f6deacbef3a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2ff1d698-10c5-4a8c-a94a-b39ae039f5a0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c623638a-d76d-4fe7-83dc-b1a98dc5edda"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "63721564-dec7-4188-9921-af7fc675a415",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "639823b4-c26c-4165-a7f7-2fb9110a580f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72c7629c-79af-4f2d-a844-8195f4496229",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "adcdaffc-d1f6-4479-b69d-8ec970bd3d53"
            }
          }
        ]
      },
      {
        "id": "052fd28d-100c-4fcc-948d-d492516ad21e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "3d264256-8669-4585-89d9-eb5e040d3366",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8e18ed57-90a1-428b-b847-9b39dcba84b6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2d891e10-517c-4db4-94cd-11c39cac5593",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53005ea6-7047-4d25-9aeb-e11510b4e05d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d663df48-ab4b-4c38-886c-f6a51ae0e3b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cacc5524-9f27-487d-989d-a772c22e8f59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b7ca61cf-7fa3-4f5b-b7e7-9481247043e0"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "633c7f8d-0974-4309-a490-5133c9c1fe7d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c697d1c6-8a93-4f73-b638-63af0726de59"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1666fa78-0af4-4fae-97ca-ae34f177e09b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "425745c5-96ce-44f8-a24f-e9a093b33f83"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c27576fe-8e25-47ec-865f-72ddd8da22f0",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3226589d-9999-40fd-bf33-4762f95bd6fe"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "45528638-b79d-49a4-982e-59103022495f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1fb1a718-b2d7-481e-983e-7ebf93e0a0b7"
            }
          }
        ]
      },
      {
        "id": "864f1e8e-634e-463b-80d5-ab095064937a",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "f754fe0b-b157-4908-957f-c03dab746add",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b8b06acc-4cf9-4e78-916e-c348bf604b8c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0bdb90a3-fd7d-4176-b44d-e12c4e431781",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca00fb86-6c94-4187-b550-74c3bc6034bc",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37348f5e-b62a-43cd-b206-321d2d53d083"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5857d153-7f25-4ad5-9850-a1b6732450ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "452ed966-6ab3-4e56-8185-46104e639094"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "64c8ad8d-ee86-4ff2-b687-dccdd19769fa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "08c352eb-ae0d-42b1-a872-0abae4e41672"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "6ef942ad-0f16-4848-b42b-4235d41119ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f13580a-1be8-4b10-aaf5-b6a6c5756e50"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d93add2c-4fb7-4ee4-add1-3e3f2f550a31",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "de0e0ccf-2588-4bd5-94ef-b0f4f568e07c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "28ddcc1d-e8c4-4da6-8f07-7c57ab6f87be",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0f4f6274-ac3a-4466-97b7-1255e5435ac2"
            }
          }
        ]
      },
      {
        "id": "8435014d-6187-42fc-889e-1b103348a978",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b046c208-d2e4-4ab7-92c2-4bca5b2331c6",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3fc50b78-a3d5-4ac0-9ebd-3e1a93c0f251",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "4f409c8d-b5eb-4daf-9352-ea98121d9c0b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8fcd13e3-91fd-45dd-a0cf-f45a47c80e73",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d57cee4-00f1-4271-b90f-d48c378e42fd",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 64.9543859649122,
      "responseMin": 7,
      "responseMax": 530,
      "responseSd": 73.00705101774206,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1701822982129,
      "completed": 1701823010351
    },
    "executions": [
      {
        "id": "f7fbfee4-98dc-4cc8-aa52-c5a2ea3b1071",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "938f27c3-ce3c-4456-b32d-c1836776d661",
          "httpRequestId": "d3cee763-0456-4e05-bdfd-5df768d7f052"
        },
        "item": {
          "id": "f7fbfee4-98dc-4cc8-aa52-c5a2ea3b1071",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "27e3b4ee-5c8f-47a3-bba9-0275de8db13e",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "7b267eed-2ed7-428c-a41b-8e4414469cac",
        "cursor": {
          "ref": "14ba1cde-8a3c-4132-9df0-fb5bec37ee04",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "2876cbff-b2d7-44b2-8a41-a7729b138c3d"
        },
        "item": {
          "id": "7b267eed-2ed7-428c-a41b-8e4414469cac",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "d068d6e5-4e32-421e-b9e6-adad2b3ef981",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "91a80f5f-fe1c-4e03-9d2b-74074a4ff6b3",
        "cursor": {
          "ref": "a54b30ea-39fc-47e2-8af3-b5254ac5dac1",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "094016eb-0846-4266-ae62-c576f1b1a523"
        },
        "item": {
          "id": "91a80f5f-fe1c-4e03-9d2b-74074a4ff6b3",
          "name": "did_json"
        },
        "response": {
          "id": "5ea16686-1f2f-4014-b500-3cfe92a70625",
          "status": "OK",
          "code": 200,
          "responseTime": 530,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c006b1-cf49-473f-8563-cb810f7bab88",
        "cursor": {
          "ref": "672723d2-dd76-4a13-8cf9-8a36de471f85",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "39e3e18c-56e1-4030-9e6a-3afe9160d463"
        },
        "item": {
          "id": "b9c006b1-cf49-473f-8563-cb810f7bab88",
          "name": "did:invalid"
        },
        "response": {
          "id": "a17a5c74-3bf3-4c9f-8bff-13697be44a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9c006b1-cf49-473f-8563-cb810f7bab88",
        "cursor": {
          "ref": "672723d2-dd76-4a13-8cf9-8a36de471f85",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "39e3e18c-56e1-4030-9e6a-3afe9160d463"
        },
        "item": {
          "id": "b9c006b1-cf49-473f-8563-cb810f7bab88",
          "name": "did:invalid"
        },
        "response": {
          "id": "a17a5c74-3bf3-4c9f-8bff-13697be44a69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "756b41cd-a647-4de2-b323-d0831922bce0",
        "cursor": {
          "ref": "d0d30784-fd8b-4f25-a5a9-ffd89d1f2f79",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2b10c23f-8dad-424c-8946-0c8cf743f81c"
        },
        "item": {
          "id": "756b41cd-a647-4de2-b323-d0831922bce0",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "1b7f4376-e473-40de-9647-3c90d3c14c83",
          "status": "Not Found",
          "code": 404,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7851a6e-4333-4cc2-a119-54bc98225758",
        "cursor": {
          "ref": "de32d229-6f94-4769-9941-fa2bec772e83",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "204acddd-3540-4629-a6bd-15d92ee3bb74"
        },
        "item": {
          "id": "a7851a6e-4333-4cc2-a119-54bc98225758",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "ba0d0c71-acbd-4cdf-8ef7-feab315eade7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8029bb91-7ac0-4802-b433-52baaecd9414",
        "cursor": {
          "ref": "23efe7c4-fd18-4069-aca7-6b98fee88f29",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4d36e4c8-b242-40af-b4f7-f4fd961dfc9e"
        },
        "item": {
          "id": "8029bb91-7ac0-4802-b433-52baaecd9414",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "1c996d13-9847-405c-9cb4-68dda1c68c22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ef56cd-e356-4fff-99f3-dedc5416c751",
        "cursor": {
          "ref": "ba8e038d-b5ab-41ef-8110-7f1c3c5f7f5c",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "da3e59b8-f393-4b38-ad49-a22ec4948b1e"
        },
        "item": {
          "id": "d2ef56cd-e356-4fff-99f3-dedc5416c751",
          "name": "identifiers"
        },
        "response": {
          "id": "505ab5a3-f0ce-4b97-a445-d9682ec130a4",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be883d91-06cd-4f4a-8658-5b165d6c1df8",
        "cursor": {
          "ref": "ce53dd3f-2e51-459f-b493-5ef615624ef3",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "80e18f4c-47c2-4213-8a8c-9082e2d5176a"
        },
        "item": {
          "id": "be883d91-06cd-4f4a-8658-5b165d6c1df8",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5ddc1ad7-97b0-4c51-8a18-d8ea3ee94b58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea146ca1-8684-4341-b715-0f8b2bda56bd",
        "cursor": {
          "ref": "3f1cec47-86e0-4675-a693-197737be3817",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "99f52a98-c748-47fb-92d1-b26931277735"
        },
        "item": {
          "id": "ea146ca1-8684-4341-b715-0f8b2bda56bd",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "47e577a0-af4e-443d-a25c-72a5e7632b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adf74729-7efa-413e-b06e-3b0f1bfa4d24",
        "cursor": {
          "ref": "e4fc54ef-5eeb-4a25-a9c0-85a9b8b1901d",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "08db8a0e-f4ea-4397-8d15-b4d1b4ab8be7"
        },
        "item": {
          "id": "adf74729-7efa-413e-b06e-3b0f1bfa4d24",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "dbf38db2-33d2-4dde-b645-8d8dcc65d718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb8f73d8-e4d9-4c83-aecf-3f6c0195a72c",
        "cursor": {
          "ref": "63f6f092-c26a-48ca-ad0d-f402fa6ee86d",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1ce068c0-54d5-4e5d-8c87-6691a4cb3ad7"
        },
        "item": {
          "id": "eb8f73d8-e4d9-4c83-aecf-3f6c0195a72c",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "56a15924-833c-4e1d-8afc-6f6d09b31d33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cfb5c54-fd74-4bda-9db8-dc55ac0a27de",
        "cursor": {
          "ref": "39f64359-9034-4313-8ee6-30dd96889e5f",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9db5f71b-e345-4fc3-81a7-be128fe7f826"
        },
        "item": {
          "id": "1cfb5c54-fd74-4bda-9db8-dc55ac0a27de",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "7f9ebdb0-dda3-42f1-ab70-b2ca48d3fa81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16163a01-14fd-4358-9159-015c63f2448e",
        "cursor": {
          "ref": "e032c88c-3135-4a88-acfa-d0b9dc9a41c3",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "61632c80-9f5b-477c-81b3-8e6b83b44027"
        },
        "item": {
          "id": "16163a01-14fd-4358-9159-015c63f2448e",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b4838f2e-5dcb-4e7c-aea3-2df4d0340ea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2a83395-1594-432b-966a-e47ded42c8a6",
        "cursor": {
          "ref": "574ee8fa-e1d6-41b5-8d0c-e5a642af9c9e",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "9604ee2c-7eec-467a-bc52-8eb1fe4ed20f"
        },
        "item": {
          "id": "a2a83395-1594-432b-966a-e47ded42c8a6",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "bcd6f1c6-d89f-4ba3-bfa5-6676a0404f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4b8d54-ad4c-4501-84d0-c730ab97104f",
        "cursor": {
          "ref": "1a7fd6ff-eea0-4b35-990f-1a73e93a7783",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f5cbe8db-e95c-48cc-91db-cb54530062e9"
        },
        "item": {
          "id": "ff4b8d54-ad4c-4501-84d0-c730ab97104f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1f328b3b-589c-401f-a11a-7f263151200f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cc83e8-f4ad-45ce-995e-e0458a6d277f",
        "cursor": {
          "ref": "cb7d8107-5e4c-4b80-add7-7918b35a357d",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "bc6740f2-ee9d-4377-b7b3-43502176771b"
        },
        "item": {
          "id": "e2cc83e8-f4ad-45ce-995e-e0458a6d277f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "1a7ea094-607c-4ed1-bbc5-df88c0b22eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb343ac-7fb1-4064-af72-04a24e46fe3e",
        "cursor": {
          "ref": "76babfdb-93a7-4721-b163-a0408cc421cb",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "86d96585-b1b7-490c-a6b1-c151789a591d"
        },
        "item": {
          "id": "deb343ac-7fb1-4064-af72-04a24e46fe3e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "e97c334e-3ed7-4040-92d5-f5771906aff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0748543a-436a-460c-87f6-3831b22a4f89",
        "cursor": {
          "ref": "0c67564e-6280-4cb1-a977-4fa81e426742",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5e541049-644f-45af-835d-72bd28d673e6"
        },
        "item": {
          "id": "0748543a-436a-460c-87f6-3831b22a4f89",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "bfc57363-066c-4e2a-b762-533583bec9f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89cbec7c-abc7-48c7-9453-ac1530fd14dd",
        "cursor": {
          "ref": "26cb389a-8ad0-4586-8e5d-53bf35344916",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "8c2f693b-50f9-46a3-bddc-d4ca3309f3ec"
        },
        "item": {
          "id": "89cbec7c-abc7-48c7-9453-ac1530fd14dd",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "bdaaa6f1-557f-405b-9969-68e0f9282526",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eeddfc5-4f4d-447b-b68e-e76d4cd9cde7",
        "cursor": {
          "ref": "cab007e1-30b7-4603-9eb5-b0ebee647109",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b47400b0-3768-45fa-96d5-525e148c87f6"
        },
        "item": {
          "id": "1eeddfc5-4f4d-447b-b68e-e76d4cd9cde7",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "6a210289-7322-4a74-8636-448c534271e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee730274-100d-42ad-b56f-08a5a6cedd1d",
        "cursor": {
          "ref": "67221f17-0cbd-425a-9546-8ab7659a993a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "c3459abc-640b-4c0b-a3f4-18b700c44e28"
        },
        "item": {
          "id": "ee730274-100d-42ad-b56f-08a5a6cedd1d",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "45a0263e-108e-4968-9ff1-e3f90e32da4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9251e6f-6f15-4c3a-99dd-010288694c5d",
        "cursor": {
          "ref": "44e8e8a5-8d7c-41a8-91f3-73b6601e8701",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "f2bda227-2a7f-4051-b0b3-c64771495e79"
        },
        "item": {
          "id": "c9251e6f-6f15-4c3a-99dd-010288694c5d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "cd3012e1-f89e-4f96-8783-43eb143b4272",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59098287-14de-4e3a-8579-fe81db63890a",
        "cursor": {
          "ref": "4911040b-30a3-49f0-90bc-84d4d82d1685",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3d9bae71-9599-4a0b-8ecc-8c1715a36c97"
        },
        "item": {
          "id": "59098287-14de-4e3a-8579-fe81db63890a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "bc2d0339-6dc1-413d-b339-070d1b8b09ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bac83ef-8a81-4357-9a8e-76ca921fc07e",
        "cursor": {
          "ref": "345dbdce-523e-4d1a-990c-42a0bcd73a01",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "a759d1fb-5184-4791-9b6f-7c5f4707c0a1"
        },
        "item": {
          "id": "8bac83ef-8a81-4357-9a8e-76ca921fc07e",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "95fbaf20-030a-4245-81f2-dda06604573d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6690480-2a98-44ab-bbc9-ec9764d71120",
        "cursor": {
          "ref": "c2efebe8-25ac-40f0-b79d-bad9df80ede4",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "279bcf30-8495-428e-8ac7-35ab5df80122"
        },
        "item": {
          "id": "f6690480-2a98-44ab-bbc9-ec9764d71120",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "9fdfd2e7-1d10-49c8-8345-dbcd0628ae26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b27cd27b-6bef-41a0-9717-dc3727fe0d57",
        "cursor": {
          "ref": "95ea9d30-dd86-482b-a57d-0fd8d9207ba3",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "d120562c-47d4-4035-a8aa-9f4b81e94d35"
        },
        "item": {
          "id": "b27cd27b-6bef-41a0-9717-dc3727fe0d57",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "46535597-f6db-410f-bcfe-528feae5be4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78986a3f-d34c-41e8-8af7-1afd1f9bcc15",
        "cursor": {
          "ref": "1115b9c5-8a49-4bc4-b26e-00fad30528fa",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "2e8ddb23-4aed-4f1e-a4da-3bbd5be96769"
        },
        "item": {
          "id": "78986a3f-d34c-41e8-8af7-1afd1f9bcc15",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "e99212f2-0f78-47fa-9b5c-ce4280327dea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d796e08-c13d-4031-a4bb-9d2723d90653",
        "cursor": {
          "ref": "199b79eb-b6c2-411a-b82c-a4349a815ab9",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "db1bf4ba-cce8-47b3-90af-940220ba9fb0"
        },
        "item": {
          "id": "1d796e08-c13d-4031-a4bb-9d2723d90653",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "732e4fd1-0c84-49f9-b0ab-1ea35ff1ac17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0fae754-6cb8-4acf-bc54-5b731cb1938f",
        "cursor": {
          "ref": "f26078fd-5f0e-4dc4-9212-00a7506b705f",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "13db9133-1de7-43ce-8e17-b9baae012087"
        },
        "item": {
          "id": "e0fae754-6cb8-4acf-bc54-5b731cb1938f",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "f19d1e83-65c4-4019-a848-e64fc3cda1bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebcafc9-7833-4efe-8f79-1dfb34d30e55",
        "cursor": {
          "ref": "9eae9f29-04cc-4c18-9f0c-da2175a49097",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "428ee57f-c7a1-417f-ba60-4526709f3736"
        },
        "item": {
          "id": "6ebcafc9-7833-4efe-8f79-1dfb34d30e55",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "cb453a5a-c9b0-4a52-8929-2cd40aad3a49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01fbd75b-a821-4acf-bb01-668953183e6c",
        "cursor": {
          "ref": "6fd935f0-291b-4150-9553-b6ece7be9865",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "70c069d0-09ce-460c-a5b3-3dabc9901042"
        },
        "item": {
          "id": "01fbd75b-a821-4acf-bb01-668953183e6c",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "0e1b3c7f-9289-42ad-a960-79bc21aa06b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88951c8a-bcf1-4f1e-a7ab-902ec13e2a13",
        "cursor": {
          "ref": "c6bcc596-f117-4e9d-a504-fe326497b25c",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "af103062-bd9d-4786-a50e-22fd97de0fe3"
        },
        "item": {
          "id": "88951c8a-bcf1-4f1e-a7ab-902ec13e2a13",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5312ea61-9317-4b5a-9be9-b34ddbac8e52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5274b41-43bb-427c-9bac-199186488fc6",
        "cursor": {
          "ref": "7025238c-a5cf-4d60-94ff-bd93c2a8e405",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "a674b9ca-d497-493c-aa97-27838973578f"
        },
        "item": {
          "id": "b5274b41-43bb-427c-9bac-199186488fc6",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "afa5abf3-ec40-4ab2-8f6c-3ee74098ec1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ebe5ad-4ae4-4e1d-ac28-cb6ec48cdb6f",
        "cursor": {
          "ref": "d1e3e794-6f6e-4efb-88a2-6dd782a625a2",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "d2b82660-d560-48de-8e39-bb7ce521d77f"
        },
        "item": {
          "id": "78ebe5ad-4ae4-4e1d-ac28-cb6ec48cdb6f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "d5491602-2b3f-4adf-91e9-ce0942865ede",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62641875-f368-4e13-be88-81b296e7455d",
        "cursor": {
          "ref": "78186d1f-5425-4e6a-9e63-6a93baaa51c1",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "0eea5045-5483-4972-82ca-c43389eb5043"
        },
        "item": {
          "id": "62641875-f368-4e13-be88-81b296e7455d",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "77ce8854-6db9-4dc8-bb76-35c0535cb3fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531d2161-5eca-43e1-931b-69e84bdee67d",
        "cursor": {
          "ref": "ae5f90ff-cd4e-4704-920b-3a58e7601674",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e4f236d4-989f-4fe1-bd29-cd49ed0cae17"
        },
        "item": {
          "id": "531d2161-5eca-43e1-931b-69e84bdee67d",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b3c17190-e0d5-4cde-bd10-8d216bb6bd40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d42b740-87c9-4f45-9bd8-8e384b934601",
        "cursor": {
          "ref": "35551488-8244-4467-a420-8c1ffb47f799",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "1dac99d8-94d7-4325-aef0-c7f32f31915e"
        },
        "item": {
          "id": "0d42b740-87c9-4f45-9bd8-8e384b934601",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "863f6d91-cc88-4666-b17a-2c9d3cd2ba55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d18ed41-78f2-4bed-8d70-fa9131b43290",
        "cursor": {
          "ref": "cdbcd96a-109d-499a-b3d5-4564d4c5cf11",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "f330aa18-8819-42ee-92a8-4244f26b3d37"
        },
        "item": {
          "id": "8d18ed41-78f2-4bed-8d70-fa9131b43290",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e9d77d77-943f-49d4-8ba1-5bb2fec7c2f5",
          "status": "Created",
          "code": 201,
          "responseTime": 528,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "de5b4082-d87e-439c-aaf2-9a1ab9a932b8",
        "cursor": {
          "ref": "d6f522cf-10b4-4b69-b38c-c95f8896e2bb",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "260804ee-bbce-4e1c-8939-77fa19e61906"
        },
        "item": {
          "id": "de5b4082-d87e-439c-aaf2-9a1ab9a932b8",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "138102bd-e007-402d-be1d-cb2cf20fd3f8",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "fb7c9c62-9e1b-4207-a7d1-d6e5e3f84699",
        "cursor": {
          "ref": "1c6c9104-787f-4eac-aff7-a7e8398d8865",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "938ae028-d03e-4999-b035-2d2f43f9d13b"
        },
        "item": {
          "id": "fb7c9c62-9e1b-4207-a7d1-d6e5e3f84699",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "32dd4db1-8aa6-4b4b-a9f4-33e2db5944fe",
          "status": "Created",
          "code": 201,
          "responseTime": 315,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "458f56b7-2805-4445-aa2d-2fb40d8bf4cc",
        "cursor": {
          "ref": "fdc47525-60e4-45f2-9789-26f19b056078",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "2157de69-866c-4365-b232-0c4d029f60bb"
        },
        "item": {
          "id": "458f56b7-2805-4445-aa2d-2fb40d8bf4cc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "25599452-8acb-4f66-a4af-6ab9a2ff119d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cd046e6-16fb-4aa7-b945-a07c8cc0d6a8",
        "cursor": {
          "ref": "51a111de-3044-4812-b659-f013b5975cac",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "2509f54b-239d-491a-8c9f-fb07e8842da8"
        },
        "item": {
          "id": "5cd046e6-16fb-4aa7-b945-a07c8cc0d6a8",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "a86016c4-b568-49bf-b198-f254d45e47e4",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "288a3e37-5e3e-4fd8-8e8c-33311687355f",
        "cursor": {
          "ref": "08ff2ff1-949f-4fc2-b4e2-06ed92355128",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "439ce818-987a-4e84-95bb-ff8b85073da1"
        },
        "item": {
          "id": "288a3e37-5e3e-4fd8-8e8c-33311687355f",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "ccb91e2d-64ed-4b09-a872-428be2109279",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "890631c4-54f2-423e-82c3-4e2822cc8995",
        "cursor": {
          "ref": "ae160fe8-ae77-4953-8561-5b5998ebb77d",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e1f4bd23-ab98-4ca2-b90f-8706530ba431"
        },
        "item": {
          "id": "890631c4-54f2-423e-82c3-4e2822cc8995",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b1bab5a1-2ec0-485b-80de-bf8062e30d6c",
          "status": "Created",
          "code": 201,
          "responseTime": 239,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "212e0fcd-3804-45fe-b699-1d1c2458b26b",
        "cursor": {
          "ref": "b16f609d-ce59-4eed-97ad-63fd17bb12b2",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "ed9114fc-19bc-4959-b70f-28d9c4a02e0b"
        },
        "item": {
          "id": "212e0fcd-3804-45fe-b699-1d1c2458b26b",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "f0e81c0a-1d55-40bb-ab17-f49903a3fe8b",
          "status": "Created",
          "code": 201,
          "responseTime": 256,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "9296b7df-5e98-4121-9112-ce26ea3a3f5a",
        "cursor": {
          "ref": "7938dd5f-0ef4-4bbf-9142-0324bd4d904f",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "7226e8d1-7e8c-4d61-91cf-2f4aacf66442"
        },
        "item": {
          "id": "9296b7df-5e98-4121-9112-ce26ea3a3f5a",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "47c847cb-f549-4121-830d-00218fff2b21",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "374b52f9-df74-4145-b293-52281ea6157c",
        "cursor": {
          "ref": "b8ac776a-7602-4087-8171-01eeae28af9c",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "91a4e61a-b9c1-4e3f-a64d-b7b4e8f41678"
        },
        "item": {
          "id": "374b52f9-df74-4145-b293-52281ea6157c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "c2f5ad80-76f9-452f-9b80-ed7c9802cae3",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "aa055f32-bd6c-411f-828f-f69c8543476f",
        "cursor": {
          "ref": "9348eb24-0ebd-4aba-b4fb-a060a3ddd795",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "657c3eaf-53a7-4ea5-ab45-179b30ff0d89"
        },
        "item": {
          "id": "aa055f32-bd6c-411f-828f-f69c8543476f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "571e0c21-7b25-4bdf-9459-a5ac576c87ac",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "7ed431c0-caa9-44a7-ac0d-685f99e59f43",
        "cursor": {
          "ref": "30282918-382d-4f78-ab0f-d57c7802aff5",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e13d4bf3-e6ba-452f-a199-e2cbe0568b91"
        },
        "item": {
          "id": "7ed431c0-caa9-44a7-ac0d-685f99e59f43",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "bdb82386-dde3-454d-a792-52aa786b18b0",
          "status": "Created",
          "code": 201,
          "responseTime": 393,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "fb273ea5-6c95-4ad0-8968-11448e0e457b",
        "cursor": {
          "ref": "1387ea4c-4d8e-44b8-9457-15df5b882d39",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "64b1c36e-5093-4a3d-bbd1-d1419f1bb411"
        },
        "item": {
          "id": "fb273ea5-6c95-4ad0-8968-11448e0e457b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e72fefbb-5a4b-4410-bc62-881dc883cc59",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "c41a3c3c-5ff6-4c5f-920b-d71ad92e2591",
        "cursor": {
          "ref": "b3025088-b9d2-4720-8631-ac98a7e3afde",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "e756521b-c7c1-4d2a-a448-18d88cb0f257"
        },
        "item": {
          "id": "c41a3c3c-5ff6-4c5f-920b-d71ad92e2591",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "f64e2ea5-1680-483f-996c-f283f28ccc36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc4b4b64-bcfe-47de-a080-b0f69fb8e88b",
        "cursor": {
          "ref": "96a886da-f730-4e1f-881d-621ce8ad8264",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "d614843a-6d28-48c9-9aea-ee43df8e5f1c"
        },
        "item": {
          "id": "cc4b4b64-bcfe-47de-a080-b0f69fb8e88b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "55f0c7ae-c8da-432e-b394-2e47a13eecd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaecb871-f1b7-4d4f-b9bc-ca33d5ee5536",
        "cursor": {
          "ref": "16a4e3fa-2795-4491-aa09-e8ee0234f753",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9d34041d-8e5a-40a6-82d3-c23ea3bd8a1a"
        },
        "item": {
          "id": "eaecb871-f1b7-4d4f-b9bc-ca33d5ee5536",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "30762373-8f48-4259-a148-8a304a5cc6c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e904da25-62cd-487a-b85d-ce6bdc1555d5",
        "cursor": {
          "ref": "ab113390-a03e-4141-918a-8e58311be9ad",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "09cb0560-426c-47ba-acdc-32662bb7148b"
        },
        "item": {
          "id": "e904da25-62cd-487a-b85d-ce6bdc1555d5",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "0d6f70e1-e4c0-4fb7-a7dc-567ec9e53384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0b4085-90a4-4658-8a95-555e597c5df5",
        "cursor": {
          "ref": "d0efb4fc-614f-4514-94f0-c3b5ad4c9da2",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "50349aba-ccfc-48a2-a021-122f5cf861e2"
        },
        "item": {
          "id": "1e0b4085-90a4-4658-8a95-555e597c5df5",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "c49b715b-1f73-4e3e-87cf-405380cd2a24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7db8cca9-001b-492a-a3d6-b64fecca0958",
        "cursor": {
          "ref": "513c9c05-e59f-498b-b39a-3cea708567be",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "5bee9164-c772-40e9-ad0d-04eb105304f2"
        },
        "item": {
          "id": "7db8cca9-001b-492a-a3d6-b64fecca0958",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e59bfd87-8fc1-4d32-a183-842c84bd55f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9233a0b-16b4-48ef-84cc-3c7d86cd9203",
        "cursor": {
          "ref": "96ed73d4-bd63-4ab1-acd7-fc5708c604d8",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "7d7550ab-8ed0-42a0-914b-746f452e568f"
        },
        "item": {
          "id": "c9233a0b-16b4-48ef-84cc-3c7d86cd9203",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "be886b93-5dc6-420b-b35e-b3eaab67b460",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3965fa-59f9-4f3c-b1c2-cbfa5633776c",
        "cursor": {
          "ref": "bc45a09e-7d6d-42e0-adf0-9810a68f9083",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "f9d5ff70-5a25-49c2-b775-a0e4d7ccf944"
        },
        "item": {
          "id": "1f3965fa-59f9-4f3c-b1c2-cbfa5633776c",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "a332cc90-bd42-4c5b-b67a-5fcfe26d7f8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2987d771-aa39-429f-9c39-262c6dd35d40",
        "cursor": {
          "ref": "93c06e6d-b6af-4157-9251-b1b742eceda0",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "cd32d692-451d-4be1-92d4-db55d5228c1f"
        },
        "item": {
          "id": "2987d771-aa39-429f-9c39-262c6dd35d40",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "3ac907eb-9980-4a0a-b31a-08928afbe960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27289c79-dba4-42a6-8e5b-655ac18227f7",
        "cursor": {
          "ref": "4e81827e-253c-4da4-94d3-415e34833ad3",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "8bbde6bd-e4e2-4952-8e2f-8214919e635f"
        },
        "item": {
          "id": "27289c79-dba4-42a6-8e5b-655ac18227f7",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "442d5f3c-bcdf-4a5f-bd77-246101dbc9f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef2017d3-1770-462a-b4db-758b2f8af59a",
        "cursor": {
          "ref": "91a825ae-9c8d-4281-afb9-066aef0220f2",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "d1936a4d-7369-4de6-bb75-e0efc769e294"
        },
        "item": {
          "id": "ef2017d3-1770-462a-b4db-758b2f8af59a",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ff8c6718-c3bf-4cbb-99db-1e6e759fe366",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cf726e6-ec9a-4648-be2a-129d59e76e1c",
        "cursor": {
          "ref": "fd422971-e949-4890-adb3-261a26a202b2",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "a820ead1-8217-4dd8-9ca7-bc9a7e621815"
        },
        "item": {
          "id": "0cf726e6-ec9a-4648-be2a-129d59e76e1c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d27ad782-b6b8-412d-ab38-d1b0b107617a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec46b9d-0857-44ed-bdcb-52571c412da7",
        "cursor": {
          "ref": "87eeae0e-cd77-4759-be9a-84f5a154e447",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "bd642597-21cc-4a88-a329-cdff51da9b48"
        },
        "item": {
          "id": "eec46b9d-0857-44ed-bdcb-52571c412da7",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "775bda54-f5a6-446a-84ba-e8b30a751237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0da975d9-ded7-4083-912c-ee0cc7d80bc1",
        "cursor": {
          "ref": "7842b78f-4999-4a04-b482-e2abc93c0575",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "caf67633-2c0c-49e7-9321-058ba930ea27"
        },
        "item": {
          "id": "0da975d9-ded7-4083-912c-ee0cc7d80bc1",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "72b06e29-5e05-485f-a407-4aea917711dd",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "8fcc5071-fa90-4e31-bbf7-f64f7545f4e9",
        "cursor": {
          "ref": "9d48ff72-aa6f-41fa-9882-9e65d934999b",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b15051f4-70f3-424b-8729-450f02fba8fd"
        },
        "item": {
          "id": "8fcc5071-fa90-4e31-bbf7-f64f7545f4e9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d373c9f9-59f3-41a7-8fb9-4d614b3f61b3",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "851f5fd9-d87b-4f77-b253-129d63ba1257",
        "cursor": {
          "ref": "03b8c85f-6f77-4ea1-b263-482782b92661",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "c8b4046a-df55-4186-b96c-eaec42d39c24"
        },
        "item": {
          "id": "851f5fd9-d87b-4f77-b253-129d63ba1257",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "4a46381d-cc76-4e96-a15b-ed40234a199e",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "225f9d86-514d-44ef-90e6-1ac034ac1dbd",
        "cursor": {
          "ref": "a385b846-3551-44b8-88fa-9d95a07c6129",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "69aaf4eb-9b57-47bc-af17-ff193a709e2b"
        },
        "item": {
          "id": "225f9d86-514d-44ef-90e6-1ac034ac1dbd",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "e73709f5-e36f-4520-b60b-32202fd387df",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "101aa08c-a482-4d92-8d45-5eb3087d9f0e",
        "cursor": {
          "ref": "971d04bf-f891-47df-b0dd-b167eac0725e",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "8afe9a3f-ec21-45fb-8c86-e656b42f81c3"
        },
        "item": {
          "id": "101aa08c-a482-4d92-8d45-5eb3087d9f0e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "d56c6536-938d-4dfa-bc0a-7f4d6b19b32d",
          "status": "Created",
          "code": 201,
          "responseTime": 243,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "85a6d080-052b-42eb-b25d-20b7c05385a3",
        "cursor": {
          "ref": "fa5ce976-08ae-4290-99f9-5be4a583a181",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "934fef42-fcd1-4822-91c2-fe4cc3203c32"
        },
        "item": {
          "id": "85a6d080-052b-42eb-b25d-20b7c05385a3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b3952a99-9a78-406d-ba1a-3e87f79cbdcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "603a8722-dbde-40d2-8be5-0c5dafd4dfc4",
        "cursor": {
          "ref": "08a78b9c-675e-436c-990d-036a6f81a0cb",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7805bfef-8691-41e9-be3e-3cd431fabc69"
        },
        "item": {
          "id": "603a8722-dbde-40d2-8be5-0c5dafd4dfc4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "9842e4d2-a7d7-483a-94b5-2bf1d243247d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d87549de-417a-4c06-a430-403a98126a6d",
        "cursor": {
          "ref": "f4b674f9-532a-417c-a6c7-86e86b4b91d9",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "80887b66-ad8f-4c9b-92a8-912a3192a7ae"
        },
        "item": {
          "id": "d87549de-417a-4c06-a430-403a98126a6d",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "3b58a354-6440-4f9a-9807-51b5a9d764cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ddfc90a-c6f1-4bec-9811-baf59006ac69",
        "cursor": {
          "ref": "24d93efd-131a-4282-83f3-a8d812ce26be",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "20b7e9ad-2df5-4cac-a5d7-645c383f74af"
        },
        "item": {
          "id": "3ddfc90a-c6f1-4bec-9811-baf59006ac69",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "3c730bed-08e2-41eb-a5db-24ba00a0898a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0fbd8282-917c-4926-b7d0-f61608881468",
        "cursor": {
          "ref": "acc9461e-7e2d-42dd-bc11-bc1737b3dc0f",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b53c8993-5ca1-485e-ad44-b3e69c41c171"
        },
        "item": {
          "id": "0fbd8282-917c-4926-b7d0-f61608881468",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f2c0fd32-4e34-449b-b1d7-126862d278d1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22eba173-e37e-4274-b36a-77f18890cf73",
        "cursor": {
          "ref": "4bcc2b33-4b72-442b-86d5-c7f744f8a3e5",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5e2ba11d-7abd-4b47-afb7-7acb0ea58441"
        },
        "item": {
          "id": "22eba173-e37e-4274-b36a-77f18890cf73",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "e9d29eff-5397-4a39-890d-a63ee3f1676f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "373cff41-5be2-4377-84f9-3e1f7939721a",
        "cursor": {
          "ref": "daff7f24-6627-4a91-be6b-e51d0e13cd5f",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "00a93649-b0b5-4511-98e9-9f7833258336"
        },
        "item": {
          "id": "373cff41-5be2-4377-84f9-3e1f7939721a",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "463afe79-2c6a-4b18-8f8d-b511ba2f0c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "330e879e-445a-48f8-bbba-1d3840098bc9",
        "cursor": {
          "ref": "7b681c5e-71b2-4103-b1f7-2c24f9a31802",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "1a4cf3fd-fedb-4f86-9ef6-65a80cc7f155"
        },
        "item": {
          "id": "330e879e-445a-48f8-bbba-1d3840098bc9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d4a926c1-d816-47b8-a3e3-4b8bc79df7f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd34f4ba-2885-4fed-958b-14f2887e3836",
        "cursor": {
          "ref": "75fd59ac-3457-4ef0-b8a5-e102b87643af",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bb2ac9a0-ed8a-472d-a15a-b510074ef4a6"
        },
        "item": {
          "id": "fd34f4ba-2885-4fed-958b-14f2887e3836",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "bbdf8326-7703-4bbf-a273-3592e8c3ba48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2577c83f-dc80-4c6f-beff-20d5f287ce7a",
        "cursor": {
          "ref": "44aebebb-9231-4ee4-86f5-1b1f72a2b4a8",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "019e4b4f-e18b-43e9-bf69-37648dd4ec04"
        },
        "item": {
          "id": "2577c83f-dc80-4c6f-beff-20d5f287ce7a",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "55bc5e60-e729-45ac-818f-a503bebfed6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7396c03-6b25-4c0d-b9ac-9bfb09c11f63",
        "cursor": {
          "ref": "8411ce93-0864-420d-b7f4-333b25c90a6d",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "e7c1dfa3-c206-42a0-889a-d1f5ba32d396"
        },
        "item": {
          "id": "c7396c03-6b25-4c0d-b9ac-9bfb09c11f63",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "e93c00c2-41cc-4a45-a4ea-26bc86bfc01b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f04d85b-4ec1-4975-9bdc-861e2aeac6ac",
        "cursor": {
          "ref": "ac64403f-4f17-4495-867d-64e8a459f5c4",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c48ff5e8-1a1d-49e2-967f-e226bfc30cc2"
        },
        "item": {
          "id": "1f04d85b-4ec1-4975-9bdc-861e2aeac6ac",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "c89c0ab6-1943-4f4f-9663-b99bf065045f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9605e9d0-565c-40a5-a439-07170ea19909",
        "cursor": {
          "ref": "b50d13ea-963f-436e-bb5c-bf463ae127fd",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "64f17ad5-6484-4a38-97b4-820f4b233aaa"
        },
        "item": {
          "id": "9605e9d0-565c-40a5-a439-07170ea19909",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "9e3725ba-6656-4293-a826-7161556d471a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458c9d9b-4a59-437b-a7e2-aa2bbd8a07c3",
        "cursor": {
          "ref": "5a46cd2c-405e-4e60-bfba-d9c9d0c2a50c",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "b01bc578-6bf4-4328-a17a-ca24694fe812"
        },
        "item": {
          "id": "458c9d9b-4a59-437b-a7e2-aa2bbd8a07c3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a077b2f9-295a-4e24-8e09-3c6f0cf5e404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09c32e60-7303-40d8-aaca-8d2d55bf7ae8",
        "cursor": {
          "ref": "0563a80d-e38d-4969-82e6-4b5fc12ded6d",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c637bbf5-c46c-4841-905e-34944b3a3a40"
        },
        "item": {
          "id": "09c32e60-7303-40d8-aaca-8d2d55bf7ae8",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "230d7214-d994-4f1d-8579-dd27e88a37d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46eb854d-180e-41a0-b03c-b26d87a9abd3",
        "cursor": {
          "ref": "4491ab08-d0f0-4347-b37d-5dd0fa4d14ce",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "b2452dbf-e6c8-4690-a689-5a1146bb1fa4"
        },
        "item": {
          "id": "46eb854d-180e-41a0-b03c-b26d87a9abd3",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e288b149-d573-464c-8fd2-782c48d0c93f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "646874cd-593c-4c91-807a-3cef5c0bf46c",
        "cursor": {
          "ref": "dc355e4d-51dd-4b02-9899-af883a3a58eb",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "47a15b5b-dff5-4182-acd4-8824dec22cc2"
        },
        "item": {
          "id": "646874cd-593c-4c91-807a-3cef5c0bf46c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "306b8ae7-bb82-4d7b-87f8-cbd01ca0d8e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5d9ab0f-cfed-4526-b241-a0ef34303ee9",
        "cursor": {
          "ref": "81e94d4c-43ef-422f-a8ff-822d720e9d82",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7f82e5db-bcb9-4757-88eb-1436e007d3c2"
        },
        "item": {
          "id": "e5d9ab0f-cfed-4526-b241-a0ef34303ee9",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3083df6d-48d5-4b83-acff-87591101c42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29b4cf8f-a2b9-4e88-a0bc-498997b05389",
        "cursor": {
          "ref": "e6072f5f-99f8-4404-8846-bef6840acc92",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "94b1b559-afde-467d-86a9-86795aa5199f"
        },
        "item": {
          "id": "29b4cf8f-a2b9-4e88-a0bc-498997b05389",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "1d390126-f318-4f01-9c81-291bfb8af5bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9478259c-befc-4377-a2f0-6afd679a0840",
        "cursor": {
          "ref": "ee6286af-f126-4943-9774-83a2b20b4036",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "4328c420-ea07-4155-9361-943a4434298b"
        },
        "item": {
          "id": "9478259c-befc-4377-a2f0-6afd679a0840",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "16e59847-110a-4fb9-93a7-16f3a943079b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25636f8a-34c3-4ab2-a8f4-dca843bf7791",
        "cursor": {
          "ref": "ec976321-1ecb-43e5-a772-276e0ab18d49",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ae89fb30-b8be-4023-9edd-57ea41628d4a"
        },
        "item": {
          "id": "25636f8a-34c3-4ab2-a8f4-dca843bf7791",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "f7f0ef40-d951-4ff5-946e-e01401a8ff4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "939a9809-28a0-4db2-b7f2-88cbd23c644a",
        "cursor": {
          "ref": "df738196-b672-416b-adb0-d92a06dc5959",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "feeadbeb-7987-4990-869c-4fe205f0b677"
        },
        "item": {
          "id": "939a9809-28a0-4db2-b7f2-88cbd23c644a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "454f1f5c-6244-4e9b-8489-eebc6f453f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88bc31c4-59a1-4cd1-af68-8a8640a58916",
        "cursor": {
          "ref": "da151ded-51d5-4400-9b33-fd32436ff06d",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f70d402b-8853-471c-add5-f868e4c285fe"
        },
        "item": {
          "id": "88bc31c4-59a1-4cd1-af68-8a8640a58916",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "39139fa2-7b72-4d94-9693-a02f01f90b9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfa6a85-abdc-4927-9718-e7f3716f926e",
        "cursor": {
          "ref": "29cabd1c-a139-462b-9116-6e8c4c1aada3",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "0e72d8e9-fcd3-47a0-bf1f-172a0e3055c6"
        },
        "item": {
          "id": "9cfa6a85-abdc-4927-9718-e7f3716f926e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "65c4e26d-ce5f-4db4-9236-19ad8c911b78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0c42bd-a614-43cf-bcae-300bdb3436c5",
        "cursor": {
          "ref": "dacfa2c1-680a-4c16-a00d-f4c2a050345c",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "d956daa9-5d28-4812-bb0a-714ffbf08b63"
        },
        "item": {
          "id": "9e0c42bd-a614-43cf-bcae-300bdb3436c5",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "88ed24f9-e954-4576-ada7-4590f125306e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6472811-49ba-47fd-9124-60f3f7c7f146",
        "cursor": {
          "ref": "6e084195-5d57-4806-bb36-b9a510e2b4b0",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "7df27a26-4434-402f-aa51-f885d358a498"
        },
        "item": {
          "id": "f6472811-49ba-47fd-9124-60f3f7c7f146",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "95630e77-e489-4537-b7ef-f9b7e2e2775b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77134bc3-3e4f-40b9-8343-3e739379201b",
        "cursor": {
          "ref": "fbc8a476-4712-4623-a15c-d8abf81c07fe",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "14bfbcd4-c977-4383-ad34-f4f3536c612b"
        },
        "item": {
          "id": "77134bc3-3e4f-40b9-8343-3e739379201b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "d6a31ed7-8dc7-473e-944e-31c55023da66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd7317cf-739c-4c61-b607-7237cf53e624",
        "cursor": {
          "ref": "58d8c7b4-f17f-40e5-bd9c-3d0776a486db",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "57208b27-33ff-4571-9470-47a6efa486a3"
        },
        "item": {
          "id": "cd7317cf-739c-4c61-b607-7237cf53e624",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "17a02265-e21e-47ed-b226-3147922b4419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613d6f27-eebb-46a5-9ad1-d52f77519ac0",
        "cursor": {
          "ref": "86bac804-8d45-4a10-a63f-69847e6b7d32",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "76de57bc-3cbf-44b5-a7ed-ab84b00688a2"
        },
        "item": {
          "id": "613d6f27-eebb-46a5-9ad1-d52f77519ac0",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "480fa153-8b83-40a9-a743-71feac40b36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3948e0d-e007-4c16-83f1-661784e06839",
        "cursor": {
          "ref": "f4e250be-0cec-4425-a510-ff1b80c4cbe5",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "94824fec-b14d-48fc-90b8-c924aab0f83a"
        },
        "item": {
          "id": "b3948e0d-e007-4c16-83f1-661784e06839",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "42daf86e-8e2e-4151-bd5c-0a04072950d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c539504-9f09-4294-ad3f-ed5619e33c7b",
        "cursor": {
          "ref": "08b9313e-95b2-4f26-94dc-5345718e4d7a",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "69fbdd7e-ca4f-4ee5-80db-d4fd6374e879"
        },
        "item": {
          "id": "0c539504-9f09-4294-ad3f-ed5619e33c7b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "f2cadf4f-e072-4315-80f1-24b60338d9e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "192a8f76-4a4e-4721-b204-8a21e7af8b1d",
        "cursor": {
          "ref": "02c7add2-8a5a-45ad-b14b-97f732721afe",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d3e1db1f-233b-42f9-ae03-f3559e893fbb"
        },
        "item": {
          "id": "192a8f76-4a4e-4721-b204-8a21e7af8b1d",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "1234c888-fbf2-41cf-a9bc-0473dfbfe8e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 26,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "422cbcf4-11d0-4728-ad26-705c62038e61",
        "cursor": {
          "ref": "ce3b3262-0b1c-4a23-9a52-56c01b9c3ebf",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "91f78230-40da-41de-9b9e-c0b13701dffe"
        },
        "item": {
          "id": "422cbcf4-11d0-4728-ad26-705c62038e61",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "e49072f9-5617-44f7-b960-2b0333ed063f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "02cf4876-512f-42fb-9a2c-febcd4af7bd4",
        "cursor": {
          "ref": "2bbccdec-108f-4615-b4df-6da95408b70e",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "3c804a2a-75ae-4e0c-8d7f-de7cdb9b3cf7"
        },
        "item": {
          "id": "02cf4876-512f-42fb-9a2c-febcd4af7bd4",
          "name": "credentials_issue"
        },
        "response": {
          "id": "089df824-35aa-46ca-981b-3a22420f9be5",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6fd8bdf-79c3-4e81-8e39-b99ee011d366",
        "cursor": {
          "ref": "59efc17e-95b1-4985-bf93-cc5ef153a47c",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9b889a1d-8da5-43a7-b644-713c53222831"
        },
        "item": {
          "id": "d6fd8bdf-79c3-4e81-8e39-b99ee011d366",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "6150c986-fef4-4f38-b8dc-c38e945db3f5",
          "status": "Created",
          "code": 201,
          "responseTime": 246,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "47ab0a9d-bd6f-4855-9913-05f5053558d8",
        "cursor": {
          "ref": "9180574c-893f-41db-b736-94a3770225d0",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "917e0a4f-0fdc-4bef-84ba-a6ca7c6a9957"
        },
        "item": {
          "id": "47ab0a9d-bd6f-4855-9913-05f5053558d8",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "9c700571-04d0-460e-851c-dfc1e57ee0b9",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba5ec339-d491-47c3-8c29-912f3400ae82",
        "cursor": {
          "ref": "4d6d0c43-89f3-46d4-ab40-c8156c796945",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "7ca31afe-451e-4a1c-b746-0f99f6763a1d"
        },
        "item": {
          "id": "ba5ec339-d491-47c3-8c29-912f3400ae82",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "9c8da34c-21fc-489d-b0fc-213a65d2849a",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "cce08c0b-dc4f-420c-a766-c7412173fd83",
        "cursor": {
          "ref": "158d6276-2006-4a1b-a606-3792e8338ec7",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "4e4f16a9-6fa4-4ce1-82a0-db46418d6f73"
        },
        "item": {
          "id": "cce08c0b-dc4f-420c-a766-c7412173fd83",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1a128add-5be8-46e0-a767-68e475913053",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-12-06T00:36:36.358Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-12-06T00:36:36.358Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "cb215d40-9ca6-443e-b9bb-861223377a38",
        "cursor": {
          "ref": "e05a4439-132b-4834-ac2f-a5449f7631ca",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "718a358a-3543-457f-8c3d-acf977a7ce10"
        },
        "item": {
          "id": "cb215d40-9ca6-443e-b9bb-861223377a38",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "523d85e8-72af-441d-b1fd-72333e3ac9a9",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa9420b1-ad62-4472-9aaf-6e1d021a9bc8",
        "cursor": {
          "ref": "34f6d268-147b-4522-b6f4-4d6884f7eab1",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bbf7ea6d-7d4b-41d5-a920-17133f7c5152"
        },
        "item": {
          "id": "aa9420b1-ad62-4472-9aaf-6e1d021a9bc8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "5a40d331-bf0a-4145-ba05-b7fca0acac29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b983d11-453e-469b-a4d3-270ab4b502be",
        "cursor": {
          "ref": "0df99c60-40c2-4d23-9662-b3e80d62a361",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "e5a84fd5-70d3-4053-8efc-a2a976dab10e"
        },
        "item": {
          "id": "7b983d11-453e-469b-a4d3-270ab4b502be",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "5aa2e1be-8ed8-4f69-bb24-7931f54bb64d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c914c98-d006-40d1-8912-be5167f703a1",
        "cursor": {
          "ref": "c9eaa411-2b9d-4cdc-9ec8-6cff9d1247f2",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "2a905a83-50f6-45df-a44c-194fe68560eb"
        },
        "item": {
          "id": "2c914c98-d006-40d1-8912-be5167f703a1",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "9f8fb5dc-a645-48ce-ac76-705bf1898731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6cfbba6-c81f-4b42-aa7f-9e03c95a4509",
        "cursor": {
          "ref": "3788766e-ee09-49f8-9e26-3617fa1170b3",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4ac00934-6b58-4894-8a59-20b7fcd16fb4"
        },
        "item": {
          "id": "c6cfbba6-c81f-4b42-aa7f-9e03c95a4509",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "60949fb9-86fd-411c-9591-383652e3502a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bad0f17e-2ea7-44a3-9fc0-04a91ece5837",
        "cursor": {
          "ref": "efd865a1-8fe8-4387-b332-c8d4a1cc88b6",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c9ae7f2b-d6aa-4b66-a6dd-d51452fcad34"
        },
        "item": {
          "id": "bad0f17e-2ea7-44a3-9fc0-04a91ece5837",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "40774f64-7169-4668-970b-35755ee2f4da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d47cf0d-59e8-453c-a2ae-05258d5433ea",
        "cursor": {
          "ref": "736da038-18ab-4b8d-be07-cf14d2112d6b",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "75dd1e99-eb1a-489d-9616-ac9030c3d2fc"
        },
        "item": {
          "id": "4d47cf0d-59e8-453c-a2ae-05258d5433ea",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "26fe7a89-2f73-4a2c-8beb-ee605a4935e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b5e0d0f-7695-42d3-937f-7457846bc04e",
        "cursor": {
          "ref": "17ad84c3-5dfe-4e72-a70a-c65d752ff2f8",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "85756abc-0e2c-476c-9e6f-895697f7dcb0"
        },
        "item": {
          "id": "3b5e0d0f-7695-42d3-937f-7457846bc04e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ec63000d-b434-44e1-87c6-b48e3c5da085",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc4a67d0-fc8f-4486-917f-fecd280eaa3a",
        "cursor": {
          "ref": "a2ddc0b6-e82f-4891-9a0e-c0406353e61b",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "dd8d5324-4129-45d4-a7eb-7ce7e4fee9cc"
        },
        "item": {
          "id": "bc4a67d0-fc8f-4486-917f-fecd280eaa3a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "e55d4395-42ae-4855-89ca-82aafea234df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e962acc2-8aa2-459e-b853-a8b3f3d155ac",
        "cursor": {
          "ref": "7a5df0b2-5877-43f4-a350-422421052576",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "059bf461-2cba-4146-9417-a9cee1d9a587"
        },
        "item": {
          "id": "e962acc2-8aa2-459e-b853-a8b3f3d155ac",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "3f97132f-babd-41f5-b795-b15ace2e6dac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdff00f3-a951-444e-945f-b5bb3264099d",
        "cursor": {
          "ref": "a208ee7c-b267-42ce-b455-d0e073f2c2a4",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a007cf56-406b-4f55-8320-2b451d5409fe"
        },
        "item": {
          "id": "bdff00f3-a951-444e-945f-b5bb3264099d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c64a3693-b456-4de3-8d01-7d8968f8eef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21091215-5387-4769-ad17-e12364ab8f19",
        "cursor": {
          "ref": "015a5d94-73af-4f6e-b062-3d5a7c36b603",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "636ee130-40a7-4cd1-8b89-dd41579c7acd"
        },
        "item": {
          "id": "21091215-5387-4769-ad17-e12364ab8f19",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "6e1a7d2a-fb1d-43ba-9d4f-f1bece9634ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e3ad02-0250-4812-aa83-5574052416c8",
        "cursor": {
          "ref": "9eca640c-db21-49e5-84ad-90c728d0f12a",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4bb95c3f-7289-4147-9f7c-2817104179ce"
        },
        "item": {
          "id": "32e3ad02-0250-4812-aa83-5574052416c8",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "9bf9dd78-eead-4106-b8b1-7700965f5d97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "813dccc3-3e4c-42c1-9525-911ef347b4b3",
        "cursor": {
          "ref": "bc31bc45-4c69-497d-abd0-f9fafcd4d823",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3c573303-fad8-42f5-a8b1-ba87a57309a6"
        },
        "item": {
          "id": "813dccc3-3e4c-42c1-9525-911ef347b4b3",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "02522d10-f197-4c75-b4ea-1d0b369fb928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b99316b-3161-4122-b31b-88eaff597e9a",
        "cursor": {
          "ref": "93431139-c993-4e18-8896-f4bf58924c0f",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "17adf40a-c859-4419-b7d6-fb59d4860f4d"
        },
        "item": {
          "id": "5b99316b-3161-4122-b31b-88eaff597e9a",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2c383e89-4e1c-41ad-aee9-a62c6350fe3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bd0e53b-ea40-4b6b-95f3-96e0821a0934",
        "cursor": {
          "ref": "cec84c0b-0b12-4f19-9148-28e57e567a96",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "034ad84b-2b14-4482-a95d-5e06fe57c4b0"
        },
        "item": {
          "id": "9bd0e53b-ea40-4b6b-95f3-96e0821a0934",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dfdbe7fa-192b-4cc1-94c4-4d599d06cc76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ece9359-379b-468c-b2ce-5a2b4257b574",
        "cursor": {
          "ref": "0788f72f-42cd-4ca9-8dd6-4fac1a72b18c",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "28d58ea2-fd2f-43ba-ba7d-321353d6cd56"
        },
        "item": {
          "id": "8ece9359-379b-468c-b2ce-5a2b4257b574",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "04e95cd4-471e-4deb-a361-ce59a4c389e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02f75676-a9f5-49f3-81a9-59cb4e66da84",
        "cursor": {
          "ref": "464e910f-ec7d-4104-b040-d0130eb927d5",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "55a541db-90e2-49d1-8096-81f6a4d95634"
        },
        "item": {
          "id": "02f75676-a9f5-49f3-81a9-59cb4e66da84",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "be78298c-7ba4-4624-b67c-dadae5b3b371",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e24695-686a-4d59-94f9-404254ce3d02",
        "cursor": {
          "ref": "ecb07f31-091b-4c71-871e-f64bcd7fe583",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "7bd206d6-8930-4415-9040-1f658f5639ef"
        },
        "item": {
          "id": "56e24695-686a-4d59-94f9-404254ce3d02",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "1e8089e9-92c3-4e62-b5b8-cccd760acb24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e472564-b63e-46b7-b379-b83266db7c23",
        "cursor": {
          "ref": "0ec95040-0ca9-4578-b615-e57c152b3912",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "e5c6b409-71a6-4395-a303-b2ac3f32c980"
        },
        "item": {
          "id": "0e472564-b63e-46b7-b379-b83266db7c23",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c1e300fb-03c3-4ea7-9f2c-50d91389b6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "381708ac-30e1-4779-91bf-da3eaa154a17",
        "cursor": {
          "ref": "09c444ee-4ff8-4035-b4f3-2248701992b4",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "c2465e2b-6049-4be1-82eb-515ee365aa57"
        },
        "item": {
          "id": "381708ac-30e1-4779-91bf-da3eaa154a17",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "133bb3a0-4d3f-4e89-a86e-8740c3874c6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0847eed5-0f55-4cd7-aa95-9856f473d89c",
        "cursor": {
          "ref": "d04cf439-712e-48d4-9fea-72fbdca98979",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "282463a9-67dd-413d-b42b-1ed07a63f820"
        },
        "item": {
          "id": "0847eed5-0f55-4cd7-aa95-9856f473d89c",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "90b78872-79d8-4037-9dd1-e8294f1dc94a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eb690f3-5531-4f09-9a2d-2ebbf0a2f724",
        "cursor": {
          "ref": "0357f125-a9db-4247-8cbd-6cbd2be64f7f",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "6f0860f7-6dfb-4b5b-bec5-3eb3162ede98"
        },
        "item": {
          "id": "9eb690f3-5531-4f09-9a2d-2ebbf0a2f724",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e36b7bad-2a5f-4caa-9e0b-63f89a8f257a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4cff8399-557e-4517-81e4-186d8e863f7c",
        "cursor": {
          "ref": "9c370956-9007-424f-989b-e3c7d71ed8ac",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "97fbbcbc-7db7-41a4-897d-464a8d25817a"
        },
        "item": {
          "id": "4cff8399-557e-4517-81e4-186d8e863f7c",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "56bcc28a-cbf0-43d8-9ee8-128eca08e9b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5f70f81-219b-47f9-8446-79b64b50dd5c",
        "cursor": {
          "ref": "eae7e786-1f63-49de-af53-577da05e6b5d",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "923437cf-06e1-4d1e-8655-5065dfb741aa"
        },
        "item": {
          "id": "b5f70f81-219b-47f9-8446-79b64b50dd5c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "48baaade-59e2-4bca-9414-66ce2bf21961",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14d5839d-f290-41c2-b6df-afffd34f71b0",
        "cursor": {
          "ref": "a38608b4-1ff9-436d-a409-0fc46debbf4d",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "6bcb0adb-13e2-4510-a567-14d9c0c17f54"
        },
        "item": {
          "id": "14d5839d-f290-41c2-b6df-afffd34f71b0",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "39d470d2-d285-4197-9597-2527dd0d19d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94218e71-a09c-482d-9f1e-f2f36d4c672d",
        "cursor": {
          "ref": "edba07c4-ca70-4b0b-9904-2b64b4cefc56",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "8f9bd1e0-14b9-44ad-9ee8-dd17d3969293"
        },
        "item": {
          "id": "94218e71-a09c-482d-9f1e-f2f36d4c672d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "dc46ebd0-b5ed-40e8-8435-59a0046c34da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbee01ec-6c48-4102-9368-5ebaea689f01",
        "cursor": {
          "ref": "24a6bfec-6a63-4c04-b45f-b813a370eadc",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "936aec07-576f-47cd-86ab-6061e163feed"
        },
        "item": {
          "id": "dbee01ec-6c48-4102-9368-5ebaea689f01",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "92d8c05e-09fe-4b09-a644-a0a1bddb42ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "916dd797-abb7-430f-a4d5-03c264636c87",
        "cursor": {
          "ref": "fff35c1f-7741-4cb7-974c-a0f6f60e02b1",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "636e1d22-6a13-4702-8d35-25c9cdc0c0cc"
        },
        "item": {
          "id": "916dd797-abb7-430f-a4d5-03c264636c87",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "90eb62ec-9893-416c-85e1-a35894584ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8161d76c-c942-4067-8708-32d98d7d882e",
        "cursor": {
          "ref": "55302f56-30fd-4ca8-8bfe-a9c4b146aee7",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "eecb61fd-dce6-4e29-a6f1-e1462f515453"
        },
        "item": {
          "id": "8161d76c-c942-4067-8708-32d98d7d882e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "b10cef28-3e71-4ad8-a320-e7407d8d7d87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d93e886-dc5a-47a7-8223-37278190582c",
        "cursor": {
          "ref": "daa63ec0-478a-472d-9b4c-ea1c5f08f784",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "838ef908-a33e-4a53-a77e-53bbe4d7757a"
        },
        "item": {
          "id": "0d93e886-dc5a-47a7-8223-37278190582c",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "e1ade7cf-d857-497c-9df4-88d477b7c976",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1616fdbf-4b66-4832-b4f7-8f7aa05eb5eb",
        "cursor": {
          "ref": "66b95e8f-ab90-4b6d-bd54-addd1db20eaa",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "af28eafe-41ee-4ec6-acac-6e424531c68a"
        },
        "item": {
          "id": "1616fdbf-4b66-4832-b4f7-8f7aa05eb5eb",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "745e620b-f770-4aee-bc62-858ba85eb02d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1e36293-68af-4036-b551-508f4b75a348",
        "cursor": {
          "ref": "8a82946a-fa08-43df-acf5-0ba956aa4782",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "5d3fc3a6-f1c4-4464-afb9-be907eac854c"
        },
        "item": {
          "id": "f1e36293-68af-4036-b551-508f4b75a348",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2b11527f-5c01-4732-b9bb-3de46a4d9d29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a7e96b-dd35-42e3-af84-ecf706ab95b3",
        "cursor": {
          "ref": "18e1d42f-e531-439b-a319-dfdc68202281",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "088ff992-b700-4b60-8471-26eb2ab23bc1"
        },
        "item": {
          "id": "01a7e96b-dd35-42e3-af84-ecf706ab95b3",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "3aed6143-0af2-4575-b4d6-565e7a83499e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77889fcc-5076-4a75-b3b6-f547e8125317",
        "cursor": {
          "ref": "2d945632-d1c4-4e89-94a0-adb1fdd392e9",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "305902bb-ce7b-4562-911e-a3c98b7e6b75"
        },
        "item": {
          "id": "77889fcc-5076-4a75-b3b6-f547e8125317",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "4c0f5433-0355-4af8-9e29-6ef15af48f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca686ed1-da14-483b-8bcf-3f1d0f62f4c8",
        "cursor": {
          "ref": "08277d74-a973-4d4d-8469-72556d382439",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "ea6178a4-8416-4d9b-8b92-3cafa6f80d3a"
        },
        "item": {
          "id": "ca686ed1-da14-483b-8bcf-3f1d0f62f4c8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "826d300d-177a-41ab-8645-9eeb28884c97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96b2e403-b8e3-4447-87d0-b957d3047136",
        "cursor": {
          "ref": "fc9405da-79b2-4e4a-baae-f5a1839db39f",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "975e630b-f59c-42fc-b0d9-619fc5ccd54f"
        },
        "item": {
          "id": "96b2e403-b8e3-4447-87d0-b957d3047136",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "107cc64f-454a-48aa-8bae-7ef4df5e9516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eea2e2aa-81ce-492c-b455-7ba7b947bbb2",
        "cursor": {
          "ref": "72231ea0-ee4e-43a4-9c3f-81298275705d",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "c5ccea50-4403-49f7-9a0e-8afc36b3adf8"
        },
        "item": {
          "id": "eea2e2aa-81ce-492c-b455-7ba7b947bbb2",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "022bd19a-e249-4361-aa98-54179fe39a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57d42ace-a509-47be-9fa3-a97fd673790c",
        "cursor": {
          "ref": "2634ebc5-f915-4058-b087-b50654dae6e5",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "89342004-cd9e-41c2-b141-713dd372e9d6"
        },
        "item": {
          "id": "57d42ace-a509-47be-9fa3-a97fd673790c",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "601b937a-8b04-4cd8-8b7e-b93396d304e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdce86d2-083b-4b0b-82b6-af54b1bc2f60",
        "cursor": {
          "ref": "6bd61cab-0a17-40a2-84ba-de95dfcc6eb8",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5bdc7957-a41a-483c-a7b8-cebcb92c1a2b"
        },
        "item": {
          "id": "fdce86d2-083b-4b0b-82b6-af54b1bc2f60",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "af130531-1a38-4157-b600-99419dc7da83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206b1e5e-0fff-4bfd-ac15-a5922d22ec9e",
        "cursor": {
          "ref": "ac751c13-4d48-4810-8787-8a44046513d4",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "f3ccb0ec-e4cb-4098-b55b-3eb99a238330"
        },
        "item": {
          "id": "206b1e5e-0fff-4bfd-ac15-a5922d22ec9e",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "ea499fb5-acf0-4496-9bd8-6ebb394065b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "764ce14f-ef42-4e48-acf5-e66990a3adea",
        "cursor": {
          "ref": "aebd5062-695b-40a6-b80a-5703446765d7",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "6d601fb5-9ec5-4271-a3e8-2e399cbdf0a9"
        },
        "item": {
          "id": "764ce14f-ef42-4e48-acf5-e66990a3adea",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "70ae5563-db19-4d9b-84bd-a8cd4edaa2f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f9dddb0-cca6-4186-ac7f-ec194e4ef220",
        "cursor": {
          "ref": "a4892889-3ef3-4ab7-84c5-dbed36f77340",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "acf347ef-57f8-4cc7-b9fa-cc7ec1881468"
        },
        "item": {
          "id": "8f9dddb0-cca6-4186-ac7f-ec194e4ef220",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "01ed8b05-1433-4a80-8452-9c552fcd2666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7000f241-5720-4f71-8a6e-f1e302e77d18",
        "cursor": {
          "ref": "b8dd4b17-418e-4419-91f7-69ee0562079c",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "70c5866b-ea90-4347-a82b-af3a29df7044"
        },
        "item": {
          "id": "7000f241-5720-4f71-8a6e-f1e302e77d18",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "7359cf1f-942b-4646-a9af-9538846deaef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed617b3b-a804-4001-bd02-7f8a7ff23407",
        "cursor": {
          "ref": "ccadb263-a4a3-4143-9656-b60e08fb4eb8",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "19b8330a-de68-42b8-9f63-c90905a03085"
        },
        "item": {
          "id": "ed617b3b-a804-4001-bd02-7f8a7ff23407",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "06469870-a698-4eb4-9907-06694575576d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f9dad4e-8b21-4c71-bea2-67c31e7a840e",
        "cursor": {
          "ref": "2846f2e3-16d2-44da-90f2-6cdf2f0e8f4b",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "a0a0dcc7-a341-4c95-ae72-441af3f55feb"
        },
        "item": {
          "id": "0f9dad4e-8b21-4c71-bea2-67c31e7a840e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8188b61f-d436-4cff-a4b3-940b6e357016",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cff63833-4873-44ff-aee6-5524bb17d83b",
        "cursor": {
          "ref": "d35ec051-f8b2-4c14-89c4-dbac87a51271",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "a005d15a-c5a2-4f2c-9791-4f3745e81903"
        },
        "item": {
          "id": "cff63833-4873-44ff-aee6-5524bb17d83b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "d1cea8be-42da-4d41-9c2f-b0e46e699c12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0767bbae-e2c6-40e9-a222-ccb4d64f9600",
        "cursor": {
          "ref": "f2ef92c8-5260-4114-a75b-f1c2c8b559c3",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "403c6915-2b6f-4adf-be68-a2f07250b02a"
        },
        "item": {
          "id": "0767bbae-e2c6-40e9-a222-ccb4d64f9600",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "bccd8539-970f-4588-bcda-43081b5c0f1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e1d7899-cfbd-4bf3-ba23-6991266d47e0",
        "cursor": {
          "ref": "ceba45be-482a-4ab7-8be0-357082aa443f",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "475a34f9-2770-4a19-ada3-70821eb666f5"
        },
        "item": {
          "id": "4e1d7899-cfbd-4bf3-ba23-6991266d47e0",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "fe67ab94-7418-4217-bb4f-b17389840620",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4b96530-8836-4f52-9afb-5b6d6b6e811f",
        "cursor": {
          "ref": "8ef9b3bc-a4fa-47e9-9847-5bbf2d406c24",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "4f71722a-f7c2-4884-9a18-47cb8ec16cca"
        },
        "item": {
          "id": "e4b96530-8836-4f52-9afb-5b6d6b6e811f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bea2d2d4-b263-4c17-857f-4566e99a13e8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16d3fb4b-c7e9-4534-bf27-35fef8a1c180",
        "cursor": {
          "ref": "45bb450e-401a-453d-8ba8-ef93e197a4d4",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "553bbb80-79d9-4e95-9063-f60d4030519a"
        },
        "item": {
          "id": "16d3fb4b-c7e9-4534-bf27-35fef8a1c180",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "aa0af294-090e-46a9-aca2-4f40e500c612",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d73a483-6d8c-4bbe-b703-459153348f5d",
        "cursor": {
          "ref": "5f9a42ad-1fcf-4aa8-8dc1-8f3d7270a2e7",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "24007e44-b492-4e55-a641-dfbf124ce85f"
        },
        "item": {
          "id": "8d73a483-6d8c-4bbe-b703-459153348f5d",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "9dbdb787-f3db-4713-a97a-167c25519af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9a2fed-996a-4e4a-b21b-9ced4d3a2fc7",
        "cursor": {
          "ref": "db770679-87b4-45b2-9c56-535afadfe227",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "4628bbb1-f9fe-4505-a590-118f98283b5c"
        },
        "item": {
          "id": "cf9a2fed-996a-4e4a-b21b-9ced4d3a2fc7",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "104e6cc8-1cb4-427d-94c5-2f3739a190ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6805a507-aacf-4b34-9bde-b7711a641829",
        "cursor": {
          "ref": "0fb08b61-5915-4484-a530-c661d8df2fa3",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7ae18edd-9ca7-48e7-b488-330672fa9114"
        },
        "item": {
          "id": "6805a507-aacf-4b34-9bde-b7711a641829",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "037f74fe-5888-45ca-8361-6203ae96e418",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcd941f-6bb9-4191-9134-fe2741c7237e",
        "cursor": {
          "ref": "b959042a-5bfa-40ba-a23e-7401d21a1258",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "bb0b115e-46f5-4d43-9281-7181b2f7d074"
        },
        "item": {
          "id": "cbcd941f-6bb9-4191-9134-fe2741c7237e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "fd64d383-74e8-4edf-9eb6-726033d1e88e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f240df8-ac92-45d2-bedf-2d115cdf030d",
        "cursor": {
          "ref": "0cee4170-813c-4dca-95ce-20d2169b889a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "a9896cc1-564b-4815-95f5-586dec95e8af"
        },
        "item": {
          "id": "0f240df8-ac92-45d2-bedf-2d115cdf030d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c1be2339-04ed-465a-85c6-f38d4345e41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73cfaa9-22c3-4f8b-a681-5300922251c4",
        "cursor": {
          "ref": "30ac5b72-1114-4d55-a569-76e0b55b8478",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "bed3df4b-ae52-4055-a674-82d167408a9a"
        },
        "item": {
          "id": "f73cfaa9-22c3-4f8b-a681-5300922251c4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d514a276-ce40-4a32-930d-43c61f2ef1ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23e1a5b-9b76-480e-8e19-2f32e553ada9",
        "cursor": {
          "ref": "d1b084e9-7d64-4a9e-88bd-8e8bf50b15be",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bdb0fc87-8da6-4a9b-b8d2-fa3ce7fb4961"
        },
        "item": {
          "id": "f23e1a5b-9b76-480e-8e19-2f32e553ada9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "404c9d05-e6b6-4223-910b-bf7279e8854d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9fd5f79-b8df-4016-8213-30a598e83ae8",
        "cursor": {
          "ref": "59c47f93-e864-46a9-b168-d91b9bacc3e1",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "bd15d060-3029-4afa-bfea-39b8d1084acc"
        },
        "item": {
          "id": "f9fd5f79-b8df-4016-8213-30a598e83ae8",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5f33ad12-ca47-4d63-b818-32672d529e8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204f42cb-b7bd-4a10-a351-c0bf8a21199b",
        "cursor": {
          "ref": "e171f443-aba0-4dbc-9fab-2fc1dfb76d3a",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "09e30ecd-e0f7-476c-be02-331a96413c71"
        },
        "item": {
          "id": "204f42cb-b7bd-4a10-a351-c0bf8a21199b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a5ac0e79-3d85-40b3-aa2a-bbe6c8ec63c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77126335-5970-4948-9ae2-d8425e3090b2",
        "cursor": {
          "ref": "ec109c89-64b2-4c5a-974c-9598fb1715e0",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "00799f0e-5338-449a-b0ef-d23a76fab9d1"
        },
        "item": {
          "id": "77126335-5970-4948-9ae2-d8425e3090b2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "d6f69ca8-df3e-4822-8105-57fd23ab4ae6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2bc5197-2ba2-46bd-b46e-21dea503a77e",
        "cursor": {
          "ref": "1f651921-6a5d-40e6-9b3c-babcbd13cd3e",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "3e859962-f4b7-4ca6-a042-d1163a794316"
        },
        "item": {
          "id": "d2bc5197-2ba2-46bd-b46e-21dea503a77e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6baf246a-5765-49fd-a1d8-66d1b0ff4389",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47e03e53-e4a4-4666-afb4-f865ce496a50",
        "cursor": {
          "ref": "1ed0ec3c-90b6-49e1-891f-435b1a4cb05e",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "585cc1a4-6b5b-4e7c-afa8-3ed0f73721b4"
        },
        "item": {
          "id": "47e03e53-e4a4-4666-afb4-f865ce496a50",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "408c09d5-e3bb-4a43-8e0b-081cc3ccfb57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d98030-fb85-4ac6-aa10-85a505f481ab",
        "cursor": {
          "ref": "9c91d0e0-ddc8-453d-8fe4-2c400792dd6d",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "0e4143df-8f28-4466-a20e-11a52ad7667b"
        },
        "item": {
          "id": "92d98030-fb85-4ac6-aa10-85a505f481ab",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "f611b095-5025-4e71-ba4e-a2a9add3ab43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf9ebf4-ceea-4040-84dd-9e605f968a82",
        "cursor": {
          "ref": "0f842c06-1492-4f5a-8ed6-54ad7979aa4e",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "d191f097-504d-49ef-bce1-cb21c824bc15"
        },
        "item": {
          "id": "0bf9ebf4-ceea-4040-84dd-9e605f968a82",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "8eb6ab93-7c8b-4bf1-a7ae-91b90a046a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c6ed81d-51ec-4965-9c51-8736e56b2142",
        "cursor": {
          "ref": "3882a81a-dd7b-4466-9254-04cd3c1e249d",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "0418bdf3-8b4c-4681-891e-fae5b95c17a8"
        },
        "item": {
          "id": "6c6ed81d-51ec-4965-9c51-8736e56b2142",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "0447ff67-eaa7-4746-a654-089f2ad123f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aac0c58-4029-4e94-b46e-79644352bc0d",
        "cursor": {
          "ref": "9a123c58-3441-42fc-ae09-895a5dbe001b",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "6c937f8c-08f3-497c-9b21-98fcd6536ade"
        },
        "item": {
          "id": "4aac0c58-4029-4e94-b46e-79644352bc0d",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "a752ff85-1eb2-4733-9175-33a2bd8218c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e408c701-d79f-4fc9-a16d-1893c2b123e0",
        "cursor": {
          "ref": "aca49dc5-f6ac-4b78-91cd-e35687502089",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "860ef7d2-069c-468d-8e84-01a5341763ce"
        },
        "item": {
          "id": "e408c701-d79f-4fc9-a16d-1893c2b123e0",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "7d3f7100-fa9a-4b68-9058-928d5fa4cdc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2b0370d-a011-433f-8411-fb9b6d7bdebe",
        "cursor": {
          "ref": "cc589dd3-9bb4-4d33-8fb2-8b54457d6f25",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "07dbf1b8-fdbf-46fd-91af-78e90bbb04ab"
        },
        "item": {
          "id": "f2b0370d-a011-433f-8411-fb9b6d7bdebe",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "9fbdf620-b9fa-4cc9-a57d-e17643923914",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a01ba971-8bcd-4710-a896-1d20718b4e9a",
        "cursor": {
          "ref": "86768419-a112-4dd6-90d4-bb2b83ae6860",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "890c3ab5-fd7e-4455-b2a5-1eabefe87ce3"
        },
        "item": {
          "id": "a01ba971-8bcd-4710-a896-1d20718b4e9a",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "9df2dd0c-8d6b-4de8-aa61-53183058c05f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71c0c8e6-fe70-4a46-9a6c-69ca9a049e0f",
        "cursor": {
          "ref": "cdb2a609-272b-42ae-b55e-0c89e1b798fb",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "712899ea-6474-4c3f-aaec-d5663dd0dbe3"
        },
        "item": {
          "id": "71c0c8e6-fe70-4a46-9a6c-69ca9a049e0f",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "cf177206-b103-4ff1-83fd-1b3cd99236c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4a6be258-6826-48ae-a69e-a7729076533d",
        "cursor": {
          "ref": "edaea317-5ec8-4e25-bdbe-3e70cbb60907",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7a9bb706-0be2-4220-8cab-e629bd0f73a2"
        },
        "item": {
          "id": "4a6be258-6826-48ae-a69e-a7729076533d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "054529b6-5ee9-41e0-8020-280b64901183",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5079a293-9dbf-4be8-8027-c9796b834cfc",
        "cursor": {
          "ref": "b9a85815-de01-42d6-9f0c-033a33bfddb8",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a90aa6dc-88b8-4cf7-9547-7ced6a5ebd76"
        },
        "item": {
          "id": "5079a293-9dbf-4be8-8027-c9796b834cfc",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "53d9118c-0eb8-4d5e-8e75-c8cd5a95c0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03faabd8-932a-4c0b-8996-0ad879c4e666",
        "cursor": {
          "ref": "304f1cb7-143d-4248-9c04-6ff1e7b25801",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "cb81fc58-5c33-49b6-bf61-a737acd1d089"
        },
        "item": {
          "id": "03faabd8-932a-4c0b-8996-0ad879c4e666",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5eaa8e14-ccb3-4299-bfd5-4a441af761d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45923706-fb68-4876-916f-91b34c527cbd",
        "cursor": {
          "ref": "080f30d2-0410-4ea7-9903-53c0280def90",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "4d751e19-010f-424c-82a6-230a479b26fe"
        },
        "item": {
          "id": "45923706-fb68-4876-916f-91b34c527cbd",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "867bcf09-568a-46d5-a7ba-e06aa2b848a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "730ea7dd-7b50-4d8d-a1ed-a2779e7ca203",
        "cursor": {
          "ref": "bf480ebc-0831-461d-8971-b29533087c59",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "45c8a692-92a5-408c-a60e-58a59e2affcd"
        },
        "item": {
          "id": "730ea7dd-7b50-4d8d-a1ed-a2779e7ca203",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "dbbb889d-351e-4d73-a843-0ac47c86ffb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d772b5-aef5-4b26-bbe8-65e95062f5c3",
        "cursor": {
          "ref": "3ae8be56-494a-48af-a0fa-38117fa18937",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "63f72a0b-de19-4994-9669-a056153440b3"
        },
        "item": {
          "id": "d7d772b5-aef5-4b26-bbe8-65e95062f5c3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1bed3929-f723-4d7d-b959-37eb04870f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd8f6df3-c714-43f0-8254-60f8dd0d2310",
        "cursor": {
          "ref": "2a4be02f-d2fe-4498-8f06-1c32f6102aa3",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ae83861e-2dca-4d6c-af98-e32788087aaf"
        },
        "item": {
          "id": "cd8f6df3-c714-43f0-8254-60f8dd0d2310",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "6d9598d1-0684-40ec-a51f-e1fe2a601a4d",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "f4b49f83-ca9d-4041-94a4-7ee19b05f4cf",
        "cursor": {
          "ref": "ad6730f7-dc68-44a7-8f8b-206daadadf38",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "9fb89a58-e7aa-4a74-ab94-27d433ec501b"
        },
        "item": {
          "id": "f4b49f83-ca9d-4041-94a4-7ee19b05f4cf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "350b705c-0f87-4f97-8e21-31e5894fe1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d88b5cef-7794-4738-a63f-f2369809d988",
        "cursor": {
          "ref": "cde0ea76-379f-4151-a2ad-405d2e5aed49",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "dbedc6f6-7e46-42f2-af0e-56ed36c7e7a9"
        },
        "item": {
          "id": "d88b5cef-7794-4738-a63f-f2369809d988",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "ac69a2da-36b1-43c3-9bc2-84d7a886c29c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4aebab03-5955-46c8-8c9d-cb1d7b9a5f82",
        "cursor": {
          "ref": "50f2f71a-1b52-409c-a14b-ea1fadf2c566",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "0942a725-6a9f-4727-a30f-1a47fd88aa6b"
        },
        "item": {
          "id": "4aebab03-5955-46c8-8c9d-cb1d7b9a5f82",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "b6cf40ea-e267-4481-a190-fa274fb3d8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c822d40c-43ba-4c87-9f0d-0ca38fee6c20",
        "cursor": {
          "ref": "6bd290f9-4b60-4880-b537-66d375b11ed2",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "02b4ed5a-1c37-4de6-8037-17987e1d8690"
        },
        "item": {
          "id": "c822d40c-43ba-4c87-9f0d-0ca38fee6c20",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "65c5ba59-0ce4-4d02-9d7a-466b4c77da38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db793787-bbc1-498f-9721-5c7225933339",
        "cursor": {
          "ref": "fcac3f82-e0e9-415e-af37-ec37bc8e0e79",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bf2468af-460d-4778-9ee0-7cdbdc17c815"
        },
        "item": {
          "id": "db793787-bbc1-498f-9721-5c7225933339",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "2db2fc8b-62d1-4693-a35d-49c284ee0f57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "545be20f-f8af-4b1e-b974-af3eab88c181",
        "cursor": {
          "ref": "ccaa6363-0c89-4143-8be2-40874a16ba5c",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "0bd4e9f5-8fce-489c-a744-ea9164dd3a9d"
        },
        "item": {
          "id": "545be20f-f8af-4b1e-b974-af3eab88c181",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f25525bc-18e0-40a2-9999-83e0ccccbdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b56f037-61f1-4ea3-80b0-79854dda2064",
        "cursor": {
          "ref": "66c087ac-a17c-43d1-adda-47dc64b9a8e3",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e123414f-741b-410f-9a15-c520ee52504b"
        },
        "item": {
          "id": "0b56f037-61f1-4ea3-80b0-79854dda2064",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "c72df2da-daed-4a44-b404-5b0b1c04ff80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "571b9634-3f78-41b9-8a16-0b957b39b09a",
        "cursor": {
          "ref": "4b8fb756-84b8-4c6f-9ed2-2ba4a2e4f6ce",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "f728fb51-de19-4f2b-a4ff-1e9408fbfd48"
        },
        "item": {
          "id": "571b9634-3f78-41b9-8a16-0b957b39b09a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "5bdd5e0b-406b-4f4d-bf4a-ccf9af38d90f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f47a2dd-efc0-4625-9ba1-dc5a474c8cfb",
        "cursor": {
          "ref": "dd0a7a03-f608-4362-9113-b61b519e78e4",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4cef3484-71fd-4248-b92c-5aaa9a0c4061"
        },
        "item": {
          "id": "4f47a2dd-efc0-4625-9ba1-dc5a474c8cfb",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "04b9dc88-ef7c-4781-abc0-9add45166ec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfce938e-7ada-4ecf-9bd3-ce666f9a6e32",
        "cursor": {
          "ref": "d18e5e8b-e115-4270-b172-1f5e5ae32df8",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "709ed83e-def3-47f6-a957-3f096a92d708"
        },
        "item": {
          "id": "dfce938e-7ada-4ecf-9bd3-ce666f9a6e32",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "4ff5ba3d-356d-47d1-a468-9299b81a2ff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27e8d204-ace3-4531-9952-058d8d1ccd9a",
        "cursor": {
          "ref": "70e8348d-3593-4a7c-8bb7-d65fec4a305a",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "53839e2b-fbdc-4833-ab05-8d5e44fb50ed"
        },
        "item": {
          "id": "27e8d204-ace3-4531-9952-058d8d1ccd9a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "9071da71-2780-4324-89d6-2d3c77a04fdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec687d3e-b1f8-4666-b86c-ccd72a9569ff",
        "cursor": {
          "ref": "ade110f7-b9f6-497c-a958-b9a680f89700",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a927ddbe-69bf-44c9-ac89-819586822a52"
        },
        "item": {
          "id": "ec687d3e-b1f8-4666-b86c-ccd72a9569ff",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "4821b861-c41f-4343-a46b-48572526afd7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8cb2f70-73f8-4441-a5db-f8f53f991fa4",
        "cursor": {
          "ref": "c1c8e8fd-0f59-4075-b48a-9e6103e1b07d",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a452a9d6-edd0-4f8e-bddf-13f30ead73ed"
        },
        "item": {
          "id": "f8cb2f70-73f8-4441-a5db-f8f53f991fa4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "5d0acbc3-15ae-40b4-aa0a-3956fd194f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ef17b82-53ea-4433-a3c4-87ad6a038ab7",
        "cursor": {
          "ref": "b77c8fb7-4fe5-4254-866e-c894be530884",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "57cc395a-1bc5-4a0b-aae7-87750a392559"
        },
        "item": {
          "id": "2ef17b82-53ea-4433-a3c4-87ad6a038ab7",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "37f2a83a-27bb-472f-94a1-506a0f344e5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db79439-569d-4fbf-9bdc-6600346cf3ec",
        "cursor": {
          "ref": "8c2829e3-453b-45ce-832d-6ae3c75442cd",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "68c2d058-b151-45f2-bc61-9909d74e09b4"
        },
        "item": {
          "id": "2db79439-569d-4fbf-9bdc-6600346cf3ec",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "c46202e6-593e-48f5-8af4-21a9d03693e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d4fbc4c-e9a8-43fe-a97e-a748245e1e40",
        "cursor": {
          "ref": "aeb7d4ec-3f68-449b-b6f6-36991ffb0963",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "3bff35b6-e513-4ff4-9a38-a2c07d51de87"
        },
        "item": {
          "id": "6d4fbc4c-e9a8-43fe-a97e-a748245e1e40",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "27d8e5ed-d2c6-4b2b-a8cd-9c49bb2e670f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0966596-d962-4e5f-b799-71681f9095ad",
        "cursor": {
          "ref": "0ed13b9c-9bd9-4c8f-b717-53a43fe5e19b",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "008df0ed-6a2c-4dd5-a959-7c895de5c0b4"
        },
        "item": {
          "id": "f0966596-d962-4e5f-b799-71681f9095ad",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "bb54b362-4937-43d4-bcaf-e59124bf16b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e5c0dc-2c0e-4206-8b50-696d8e41c5a2",
        "cursor": {
          "ref": "76959cc8-1bb9-4570-bfbb-240da56a700a",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "72f92c3f-755a-4f1e-badd-af45861c1151"
        },
        "item": {
          "id": "b6e5c0dc-2c0e-4206-8b50-696d8e41c5a2",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1d105d3d-5fd1-482a-b96e-3c4d8f179dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420abf74-0482-4793-8e7b-52528e542bbf",
        "cursor": {
          "ref": "c238ee11-aa08-476a-bc65-54de87a54320",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "54b66044-e17d-4bd1-aada-78e358f0e447"
        },
        "item": {
          "id": "420abf74-0482-4793-8e7b-52528e542bbf",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "cae7125e-16c0-4f77-8e85-b0c241ba3917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "460b5aa5-c895-490e-b002-f10bbfcc8b9c",
        "cursor": {
          "ref": "7d5e8a84-03c2-44a9-b07b-8f7027f226a1",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d8a10f42-6f16-4824-8837-c903eb3f1cad"
        },
        "item": {
          "id": "460b5aa5-c895-490e-b002-f10bbfcc8b9c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "eaaef2ce-2a67-4de0-8e5f-97513371e3f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13639cf8-5b55-4c4a-a053-cfeb5230156f",
        "cursor": {
          "ref": "b8bb5b2f-9ddc-40d8-a8c3-72faccb76063",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8238cc12-9b37-46df-bca6-f5ed8d2cc63d"
        },
        "item": {
          "id": "13639cf8-5b55-4c4a-a053-cfeb5230156f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "22a5dae0-1948-4cc9-9cbd-5991c63f2eb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78061615-58ae-4593-9ca2-351329dcedd2",
        "cursor": {
          "ref": "f95dca62-f198-4074-b4d4-3030d000e0fb",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "fdcf63a0-12b0-4922-b034-241739b8002f"
        },
        "item": {
          "id": "78061615-58ae-4593-9ca2-351329dcedd2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "a499f122-a017-4315-962e-fe0016d98064",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24ddf1e-4029-4e62-a183-65e40c1debd5",
        "cursor": {
          "ref": "0f472b18-40a8-48e8-a705-82c508bafc5f",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f6b73121-7986-4eb6-b7c6-5f0fa98013e3"
        },
        "item": {
          "id": "a24ddf1e-4029-4e62-a183-65e40c1debd5",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "2aa2f2d1-3086-474a-a3af-9d06caec1d13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46263e88-520c-4fee-8af9-8581c83828c6",
        "cursor": {
          "ref": "d7df39a9-9fca-4c4c-884e-e5fa73d91f98",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "80cc0a91-04ec-418e-aa18-2ef28f77fd5c"
        },
        "item": {
          "id": "46263e88-520c-4fee-8af9-8581c83828c6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d78ccd15-ede9-4839-be7d-46b9bbd868d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c07d02-dbbb-4724-9b16-4507602d13a1",
        "cursor": {
          "ref": "e08a6cf6-0321-462e-a7ba-7021064bcdcb",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "29a01b75-fc00-4fd0-8c60-ef2d2bb7a335"
        },
        "item": {
          "id": "d4c07d02-dbbb-4724-9b16-4507602d13a1",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "6faddd3e-1742-415d-88ca-b0ee542b259e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa79cb35-db55-4c25-905a-f771eb37d2cc",
        "cursor": {
          "ref": "68f4d10b-0555-46a5-ad83-0cc186b2bfe5",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3c35ffed-f731-41c5-8541-5d823ca39418"
        },
        "item": {
          "id": "fa79cb35-db55-4c25-905a-f771eb37d2cc",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "6ba50b02-6b84-42c3-be53-a3ff163c9659",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7087209c-1ecb-4c82-b750-6788ed67cb8e",
        "cursor": {
          "ref": "473ce210-45c8-47a6-94b9-561479dd3f19",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "5511a393-44ac-4db9-b787-e9407edffefb"
        },
        "item": {
          "id": "7087209c-1ecb-4c82-b750-6788ed67cb8e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9a27d55d-60dd-43a3-8bb3-caf1c5e0c920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2addca3-4458-4054-ad29-7647db38ce51",
        "cursor": {
          "ref": "8d739644-9a8f-425e-aafd-0f7fbf1e8bd0",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "c4094ad3-f67d-4da0-8a56-a3e8b675a7a8"
        },
        "item": {
          "id": "f2addca3-4458-4054-ad29-7647db38ce51",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1a35d1da-cf29-4648-a616-3798cbaf4f37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "71812425-5570-4ad8-ac5f-423d60dc1e6b",
        "cursor": {
          "ref": "b5ab4ea2-4ce9-4bb8-88bc-638e90876879",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "cef51c49-1bf5-4503-bf40-b38e2af11817"
        },
        "item": {
          "id": "71812425-5570-4ad8-ac5f-423d60dc1e6b",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "914b85d2-82dc-4a78-b174-930701a232ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f9f32b1-53c0-4c1a-bd47-d02187ab7b37",
        "cursor": {
          "ref": "1fac0acb-4a7e-4457-bf70-cfcb53e535a6",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "454d05e0-2fbf-460e-b062-fefc03be8f30"
        },
        "item": {
          "id": "6f9f32b1-53c0-4c1a-bd47-d02187ab7b37",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "acca4eaf-f320-4bd5-85c7-0e38e09826c8",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "e90ee01d-85eb-415a-88c2-444096acc795",
        "cursor": {
          "ref": "c2fd0df5-4d41-4ef7-b214-aae8491162f3",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3f90e472-c005-4631-a7f4-871a01777a34"
        },
        "item": {
          "id": "e90ee01d-85eb-415a-88c2-444096acc795",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b2767874-e27f-4eac-b474-3f475d30e931",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "01331d61-7ad3-4964-8eac-ab1caf2eccc9",
        "cursor": {
          "ref": "c1822536-05d8-439d-9398-e9884f725755",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "5439cd31-42e7-4dd8-b338-e545069f8d03"
        },
        "item": {
          "id": "01331d61-7ad3-4964-8eac-ab1caf2eccc9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "7ddc5683-7780-4c58-8d93-abdaf25ced87",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "059330d4-9d8f-4cfd-aabb-e5e66a3bca28",
        "cursor": {
          "ref": "1e337e30-4330-4e42-8501-dac9c605416d",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1cf6f8f6-6871-477e-8d2b-6ef4d7790aba"
        },
        "item": {
          "id": "059330d4-9d8f-4cfd-aabb-e5e66a3bca28",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "d0b6087e-737b-4ea9-b1c3-26e4c3eff65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7967967b-d50b-42cd-9d9f-432c25892d91",
        "cursor": {
          "ref": "085c9508-064e-4d4f-98d7-5f4c2a6c0944",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "054e03cf-2808-40d3-80f7-49702c690c04"
        },
        "item": {
          "id": "7967967b-d50b-42cd-9d9f-432c25892d91",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "e5e1dce4-d73a-40cd-be99-48104ab3e4a6",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "f0152a6b-bb1c-4889-b96e-0cc0f0c7ed6a",
        "cursor": {
          "ref": "336bd13c-26f6-453b-b2e9-bce3409f6c47",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "91353d5c-7e03-4c6f-b154-f4d12f89f2c3"
        },
        "item": {
          "id": "f0152a6b-bb1c-4889-b96e-0cc0f0c7ed6a",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "f0ba01e7-618a-4e9c-a952-20ddf43f0eab",
          "status": "OK",
          "code": 200,
          "responseTime": 84,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "1116e336-db43-4ea5-b09c-396f1ce1159e",
        "cursor": {
          "ref": "1e220511-93a9-4f9c-bca7-aca466f0ae58",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "7a0ccc82-57b9-4801-8eef-1baf793d5a23"
        },
        "item": {
          "id": "1116e336-db43-4ea5-b09c-396f1ce1159e",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "a4c795fe-cb47-4728-a1c1-1fd03d62cfaf",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "51997273-0624-40e4-8e91-f060a5d52e5a",
        "cursor": {
          "ref": "57982459-3c7e-468a-9a55-0a1d19acbc9f",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6ec83343-7a03-40a9-a21d-f46df3b6f213"
        },
        "item": {
          "id": "51997273-0624-40e4-8e91-f060a5d52e5a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "8aa08206-3db4-407c-8f93-47f0a9275fa2",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "67ffc489-2520-4827-a02b-1cc018e5b0eb",
        "cursor": {
          "ref": "a8b86e42-451e-438e-b079-8523626878dc",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "f5685c47-6928-485f-8634-42a5405f850f"
        },
        "item": {
          "id": "67ffc489-2520-4827-a02b-1cc018e5b0eb",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9a42053c-f583-4db9-b42d-339880de1f3c",
          "status": "OK",
          "code": 200,
          "responseTime": 85,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e5136873-963d-4775-92bf-8632396e9ead",
        "cursor": {
          "ref": "40b56ac9-e0a7-4b18-a8ce-17225efca54c",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1bb1a3db-3070-4950-a759-8f7dde3776c1"
        },
        "item": {
          "id": "e5136873-963d-4775-92bf-8632396e9ead",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "27bfee8d-cef4-4f37-b1e0-bf660977db87",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "254dc480-ffaf-45bf-8aaa-9b78526d54d1",
        "cursor": {
          "ref": "36fdce5c-c6fb-4f9d-81eb-f27fa6066943",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "f836ed3e-167d-420f-9150-bca45b382248"
        },
        "item": {
          "id": "254dc480-ffaf-45bf-8aaa-9b78526d54d1",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "dc06e892-34c6-4c90-b3c2-49e66f04ac34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe17bb2f-4295-4854-8129-e8667ed02fc1",
        "cursor": {
          "ref": "eeb4c361-cfe0-46e6-a811-71b809886d8b",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "a9edacc6-a42d-4588-9478-a531ba2c3afb"
        },
        "item": {
          "id": "fe17bb2f-4295-4854-8129-e8667ed02fc1",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "947826dc-68ea-43fa-93f9-4850e1d72b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9644479-1069-4e49-bf91-f01d125444f8",
        "cursor": {
          "ref": "f13932d4-c271-4974-aeae-d0bc7eba2e35",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "9276bec8-6001-42b3-83fd-585de778acf4"
        },
        "item": {
          "id": "a9644479-1069-4e49-bf91-f01d125444f8",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "a8d0f5c3-cdc8-4b85-b95c-61a6e628d444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca232077-3102-4248-a56b-77a58a6f30c8",
        "cursor": {
          "ref": "49ad8d8e-9488-4e6c-89b5-f8cc894c9e3d",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "8d932ba5-45b3-4239-990d-20c0f38320a6"
        },
        "item": {
          "id": "ca232077-3102-4248-a56b-77a58a6f30c8",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "00c6a6e7-26e2-436e-a326-84ca18358c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d592d4cd-6482-4e9a-8fa0-df7c4adfa640",
        "cursor": {
          "ref": "9e2feb24-1d0e-43e5-af06-16a051a49b95",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "f567e92f-9f09-4492-ade3-267739cfc88c"
        },
        "item": {
          "id": "d592d4cd-6482-4e9a-8fa0-df7c4adfa640",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "6e484c73-66d5-49bf-828e-7502480fb839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ca5e7b-fb0d-4089-82f3-fbcd24d0109f",
        "cursor": {
          "ref": "73ef7ef7-1576-4a50-b10e-ff4f0915b7b3",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "c39e833c-19ca-4a44-aa6a-54a7e4bcf0ec"
        },
        "item": {
          "id": "b7ca5e7b-fb0d-4089-82f3-fbcd24d0109f",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "ba5a6b8b-e621-4aa2-a0b0-3bc455a0647d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e80f5b84-9d17-4a18-8c7c-6f58c424e260",
        "cursor": {
          "ref": "6927e68e-c63a-494d-a9f3-062e820019b6",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "6972a3a8-d06e-4545-b48e-0d50799ec618"
        },
        "item": {
          "id": "e80f5b84-9d17-4a18-8c7c-6f58c424e260",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "238eab92-a1f8-47f8-9fb0-ff2b3f9403e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f80dbf-c30f-4c6f-ab25-5fcd10cefa23",
        "cursor": {
          "ref": "099ff484-9a94-44bf-ad6d-f0c44eee88b7",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "40ff4b7d-8e4f-4e13-afb4-da82378b3f12"
        },
        "item": {
          "id": "03f80dbf-c30f-4c6f-ab25-5fcd10cefa23",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "cb417084-ab63-4bea-8d70-f8627c8a3c79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3dde3be-392e-4a04-84e1-afdb3d7f7a64",
        "cursor": {
          "ref": "b1dd9229-1ca5-4205-98a3-7387654be46a",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "15f59fe6-cfa1-46e2-a266-dd6494299278"
        },
        "item": {
          "id": "c3dde3be-392e-4a04-84e1-afdb3d7f7a64",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "c66711e2-83ce-4045-995c-6a5e7e5dcb68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4951fb22-7b05-43ba-82a4-186a92790b0d",
        "cursor": {
          "ref": "c2b200e9-251e-4863-b171-b8ef8d3445c5",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "373dc426-d685-449e-8bd4-1fc11a4fe983"
        },
        "item": {
          "id": "4951fb22-7b05-43ba-82a4-186a92790b0d",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "6fe7c208-466d-4c5d-acba-cf79c6f0e290",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c8df973-3c5e-428d-8878-aacb571ef239",
        "cursor": {
          "ref": "717e528e-bcb3-421a-aa92-b8e221822e5b",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "94ff0a10-e8a9-493e-a515-6689dc47120f"
        },
        "item": {
          "id": "4c8df973-3c5e-428d-8878-aacb571ef239",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "25fad094-b805-400d-9515-877303c8be78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7eb22508-f82c-4846-807c-8931b5856880",
        "cursor": {
          "ref": "ced9d7b6-f801-4c2c-ab38-5701caac3097",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3f969551-3176-430d-8a19-00f20c26f997"
        },
        "item": {
          "id": "7eb22508-f82c-4846-807c-8931b5856880",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "30871062-15cc-4b75-8fe5-8529ac9d015f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2b6ec33-223f-4069-85d7-09e26bc8d932",
        "cursor": {
          "ref": "8ca9ce71-184f-4296-9ef9-2e609ff7b183",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "bda43422-9c52-4eff-a366-0008fc4b0271"
        },
        "item": {
          "id": "b2b6ec33-223f-4069-85d7-09e26bc8d932",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "cceee1c2-aecf-4c8d-a827-fbfee41ced82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c398676a-11f4-4477-b144-b6f368b26e82",
        "cursor": {
          "ref": "eac682c7-61a5-4232-93bf-34097b151611",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "ce1f733b-5975-4167-9525-c859ecf5be1d"
        },
        "item": {
          "id": "c398676a-11f4-4477-b144-b6f368b26e82",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "cfcda7eb-8a30-4ae7-9817-861c5fd2443a",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "5143ecf3-87d2-4528-bc93-1c99b2eaa4b4",
        "cursor": {
          "ref": "77b47afd-3a19-4e7f-935c-acbe88c3cfa6",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b7838aeb-6103-40bc-b5bd-8f68cf7131df"
        },
        "item": {
          "id": "5143ecf3-87d2-4528-bc93-1c99b2eaa4b4",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "6f7cfed4-34cb-41b5-8c26-23db563f5ad2",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "e569706c-0d87-4b8f-8922-6c07edaf5567",
        "cursor": {
          "ref": "2367f143-19dd-49eb-8b7f-353976e6ca6a",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5d3fb80d-0f75-4425-ba31-1e03d38c96bf"
        },
        "item": {
          "id": "e569706c-0d87-4b8f-8922-6c07edaf5567",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "e3409bac-d680-4422-982a-d2b7d952cfbf",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "53b64add-e828-469a-b018-e836e88d009e",
        "cursor": {
          "ref": "484fc98f-d1c3-4316-bcbb-c8dc7c2c0db4",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0ae4c0a4-f306-41d6-b4fe-f6a3e65d5e66"
        },
        "item": {
          "id": "53b64add-e828-469a-b018-e836e88d009e",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "f70b747c-0ea5-4a55-bf50-cec932dfa469",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "dcfed73e-6000-4d44-b354-7ac6021f5fe1",
        "cursor": {
          "ref": "7397c28f-e302-4bf0-abc5-570b530c15c6",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "4a497967-616f-4820-bee6-43d03901c9dd"
        },
        "item": {
          "id": "dcfed73e-6000-4d44-b354-7ac6021f5fe1",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "5b5cfa2d-e406-4f61-946e-91b8023d3791",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "c0e3c99d-38f5-43f6-b037-f7b606026c88",
        "cursor": {
          "ref": "1d29cf9f-4c81-4f26-87be-a58c2cea9a11",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "43a7b784-c225-41cb-9776-f8258b8e6b17"
        },
        "item": {
          "id": "c0e3c99d-38f5-43f6-b037-f7b606026c88",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "1d79d004-c301-4dbf-9690-1ad164f310ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eda15091-d89a-44d8-9bec-b5bab2ab35b0",
        "cursor": {
          "ref": "9ae9add0-5708-45f6-b5e7-a63e6127bd87",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "eae8ac9f-e7a6-4e9e-8580-8000ddd174b5"
        },
        "item": {
          "id": "eda15091-d89a-44d8-9bec-b5bab2ab35b0",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "f41bb459-2f0d-4de6-a5f3-78b626805ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5815c370-6da3-49c3-ac64-b1f228aacb47",
        "cursor": {
          "ref": "f379f048-239d-42a3-a97b-62337d115c67",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "45fc6ba5-dd32-4076-860a-1a6f06bf2d1b"
        },
        "item": {
          "id": "5815c370-6da3-49c3-ac64-b1f228aacb47",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "e1efe2b8-7868-48c0-b14e-075dbce00b75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5986d238-9031-4fb4-9918-025d94673c89",
        "cursor": {
          "ref": "8512c38f-279b-493b-b1be-7b03d73dd5e4",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ff7420a0-46f1-4adf-9d81-0ffb40a22488"
        },
        "item": {
          "id": "5986d238-9031-4fb4-9918-025d94673c89",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "041f5a6a-6083-4554-acae-b165886494be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57c6e2ff-4714-4415-b362-053c18a5851a",
        "cursor": {
          "ref": "0f676281-193a-489d-a048-08efee5f90e2",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "84c78b4e-ce31-4835-9309-c07ec66a382f"
        },
        "item": {
          "id": "57c6e2ff-4714-4415-b362-053c18a5851a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1cc7f3e5-7ace-4e50-b7b8-8fca8f13bfe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a504f8d-4321-4696-aee1-c2d7561a503a",
        "cursor": {
          "ref": "3ca4b4b1-cdfa-4298-8222-6d3d7bb389ba",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "4076a5b0-37d4-404f-818a-c06407388827"
        },
        "item": {
          "id": "9a504f8d-4321-4696-aee1-c2d7561a503a",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "2cd8b0d9-11af-4fbe-bb2c-5ac5b2380604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0e72515-0638-4ba0-874b-018010261072",
        "cursor": {
          "ref": "12b5b4c4-9f6d-46bc-bf0f-affc50e9ba4c",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9befd3ae-2e67-4e86-b796-b7096fe2708b"
        },
        "item": {
          "id": "b0e72515-0638-4ba0-874b-018010261072",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4499f83b-df80-4b8d-9bb8-124a4bc43368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d12f32dd-52f6-435e-ab7f-ec08eb5e210f",
        "cursor": {
          "ref": "ce1837c8-9579-406d-8f0d-8e35f7302c9a",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "20c4e0b0-ea5c-4921-b3b1-1a11290dcf4d"
        },
        "item": {
          "id": "d12f32dd-52f6-435e-ab7f-ec08eb5e210f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "0a4e9258-97c3-43ad-9e90-c3ced40c262b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ea81289-9fd0-4041-9d82-54bdd2b5ba98",
        "cursor": {
          "ref": "5d97cc32-c49c-459e-89ab-c4acd04fcd2a",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "087e540c-058a-458d-a228-48f7c40bd985"
        },
        "item": {
          "id": "0ea81289-9fd0-4041-9d82-54bdd2b5ba98",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "56366a36-d4ba-4151-9dcf-da425712db49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5b073c8-e20a-449e-9960-e92a325006a7",
        "cursor": {
          "ref": "c49fed51-8135-4074-b7c7-ffe5478905e0",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "58d7da22-f451-4861-800f-099be4b68a11"
        },
        "item": {
          "id": "a5b073c8-e20a-449e-9960-e92a325006a7",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "15e0efab-dad1-4d4d-a526-ac4d126f15c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ead4cb-e551-4e56-89e7-c5bf7f9b3cf5",
        "cursor": {
          "ref": "e68bd50b-56c3-4ff7-9e5b-842a391b4634",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "cd7531e8-b6de-452c-8e04-2d1e45d7d013"
        },
        "item": {
          "id": "34ead4cb-e551-4e56-89e7-c5bf7f9b3cf5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "03a4e484-026a-49ea-b344-dbb573af57e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85e8cabb-187e-479c-9dbf-4e94be40d24e",
        "cursor": {
          "ref": "527a5fb5-526e-4b15-97df-d82821e25ddb",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "b4151472-67a2-46df-8b71-130889252bbb"
        },
        "item": {
          "id": "85e8cabb-187e-479c-9dbf-4e94be40d24e",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "15c65187-de58-4533-88bb-0dd2f925ff55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b513f95-0cd1-4170-9f36-5020b7205e43",
        "cursor": {
          "ref": "18ed131a-ed86-4f34-a78c-105219d0a041",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "fda7d33b-3f14-4a72-b3e7-e1b6792f508a"
        },
        "item": {
          "id": "7b513f95-0cd1-4170-9f36-5020b7205e43",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "26566987-937f-4bd8-b743-477116d710b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6748ec58-9ca2-408c-a0ef-6951bcfdf4ca",
        "cursor": {
          "ref": "5001ee99-02ca-4ff2-93c4-c74d571afb65",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "0c8653ce-e017-42b8-b44e-9544d841d60d"
        },
        "item": {
          "id": "6748ec58-9ca2-408c-a0ef-6951bcfdf4ca",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "2d00d260-0abb-43e6-ae83-981fa5526799",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26481cf3-8627-48ee-8128-2e8a079351c4",
        "cursor": {
          "ref": "de975c97-b5fe-4c5c-8228-cd91b42968bd",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "6d7b1988-9c39-4177-a657-0c80997f8f84"
        },
        "item": {
          "id": "26481cf3-8627-48ee-8128-2e8a079351c4",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "56db2fd2-e45c-4f80-aea3-58931100473f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06382fa3-ed89-4eb0-9be6-22f5f0b025ac",
        "cursor": {
          "ref": "b9895127-2373-4a3f-bb44-6b5923318307",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "8e1fcfa6-f6e7-46f7-9eaf-bea3dc34ab43"
        },
        "item": {
          "id": "06382fa3-ed89-4eb0-9be6-22f5f0b025ac",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "c9d50ee7-666f-497f-9e25-73969ce48529",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3edbd182-bdf2-4c28-94eb-ccb50bc581c3",
        "cursor": {
          "ref": "9e498195-d94c-4f3a-bbda-76219834c55b",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "6a27d7c2-6e01-4a50-99aa-68a5e19b048b"
        },
        "item": {
          "id": "3edbd182-bdf2-4c28-94eb-ccb50bc581c3",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "4260da53-5b0c-40c7-97c3-11c2e7b91bdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b452d00c-fae6-46b2-a92c-32bf59a1497c",
        "cursor": {
          "ref": "088113bf-ced6-4450-8b12-bc0655592225",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "37d1faef-5b16-48f1-9e80-43329e8a462f"
        },
        "item": {
          "id": "b452d00c-fae6-46b2-a92c-32bf59a1497c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "bd039c0f-dc3f-4b8b-8221-65e86e13da10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "962f938e-f737-42ed-90ce-79693a159a64",
        "cursor": {
          "ref": "0aaa489b-d912-4bd0-9563-1a9435a87c9d",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "ba705596-af2e-4f18-9382-371d9a1ca49d"
        },
        "item": {
          "id": "962f938e-f737-42ed-90ce-79693a159a64",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "18e2dc66-94d0-4b8c-8b5c-8bae907b44bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "304e6ff2-b6b9-43f2-84bb-1beba61d6f13",
        "cursor": {
          "ref": "1651700a-cb35-4505-82df-900c9e948363",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "80dc5c9d-3d14-453e-b038-811a5ca331ca"
        },
        "item": {
          "id": "304e6ff2-b6b9-43f2-84bb-1beba61d6f13",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "8ac22650-3e7a-4c1b-a217-8df65190fca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32fdf370-ea5a-4646-8d4e-485147744e85",
        "cursor": {
          "ref": "e4a53c77-a721-4fb9-b085-22b742ed41b0",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "85ef7098-2d5d-4a02-8265-950cf834b860"
        },
        "item": {
          "id": "32fdf370-ea5a-4646-8d4e-485147744e85",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "363d974e-5bd3-43f9-a558-a877f4f2c2d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21a873ca-bdaf-4799-99f4-70d1b08a851b",
        "cursor": {
          "ref": "de702c37-78f5-4cbc-85fb-5027ff0ed159",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "07716f7a-5039-4905-8fe0-0417687ab1ca"
        },
        "item": {
          "id": "21a873ca-bdaf-4799-99f4-70d1b08a851b",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "a5f94227-6cb7-42cc-bc4a-8b1eeab33702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2cf51e-6367-4913-8e1d-296e6415876f",
        "cursor": {
          "ref": "b47c39f0-cf19-4e2e-9f78-c405015c9263",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "4d3bdb82-f2d6-48f3-9d5e-7430052155e3"
        },
        "item": {
          "id": "ee2cf51e-6367-4913-8e1d-296e6415876f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "29915560-935c-4504-9fb4-e3f169984bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7f74fd-ddfb-47ca-832d-2418275a8486",
        "cursor": {
          "ref": "de50e2bf-44a9-4411-a832-655746d29731",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "e52fc6f5-edd4-4f1a-85c9-aaca450b4115"
        },
        "item": {
          "id": "5a7f74fd-ddfb-47ca-832d-2418275a8486",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "7db25110-8d2d-444a-9a60-8d2b79963a22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc069148-86fe-453f-92fb-221a47d94f76",
        "cursor": {
          "ref": "be87c982-05e7-4332-8c42-67d7aabe8bfa",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "a888b2aa-10d5-4b99-8e10-e50642632e80"
        },
        "item": {
          "id": "dc069148-86fe-453f-92fb-221a47d94f76",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "f1150bcf-b679-4163-9864-86246a9134cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a24f043a-65ee-4c4d-ade4-ec69b6261a0f",
        "cursor": {
          "ref": "b898a428-8cf4-4eb2-bcaf-1176b4fc53f5",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "63198ed8-fe2d-40b8-bc7a-82cbd4784e7f"
        },
        "item": {
          "id": "a24f043a-65ee-4c4d-ade4-ec69b6261a0f",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "dc41d983-0297-46ba-b901-07f986929eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52546efa-85e5-4428-8f9c-024fc4a57ecc",
        "cursor": {
          "ref": "3a6f56ad-fa77-4b75-a748-cd2edf8f3a56",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "f16e3931-6609-4e4e-babb-34645169f0a5"
        },
        "item": {
          "id": "52546efa-85e5-4428-8f9c-024fc4a57ecc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "0c311817-bdf6-4242-aeb1-1d63387cd2ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f2ee787-3730-44bf-b546-21b2eaa106b6",
        "cursor": {
          "ref": "177a9de0-7771-4789-8af5-6a7e174629af",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "f02c08e4-f005-45e2-a4f8-5fc933059c4d"
        },
        "item": {
          "id": "5f2ee787-3730-44bf-b546-21b2eaa106b6",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "6bbd6be1-ae85-4c34-8a26-da81e9a7f22d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56aab540-78e6-412a-9ca0-9787142b4716",
        "cursor": {
          "ref": "a2844cb1-6254-429e-9178-d1166cef8371",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "1897e5a4-34f2-4f9c-b35e-8d4b8f54413a"
        },
        "item": {
          "id": "56aab540-78e6-412a-9ca0-9787142b4716",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "129d99d9-80bc-44fa-97c7-f60f81ade0b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b68183d-0ec7-4fc7-87d8-271ee4d3d5a1",
        "cursor": {
          "ref": "a715cb6d-01da-40c2-8bb3-0b085657a398",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "c1c58e8e-2c40-43d8-8005-192bc796cad4"
        },
        "item": {
          "id": "8b68183d-0ec7-4fc7-87d8-271ee4d3d5a1",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "33973a53-ceee-4b6f-a628-cc3319bab126",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc2e2828-bee0-478c-8532-e45b5fdfa8f6",
        "cursor": {
          "ref": "d45ac9d5-51b9-4409-8163-39dd648e1a56",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "19a326c6-974b-4a63-83fd-27cffae17785"
        },
        "item": {
          "id": "fc2e2828-bee0-478c-8532-e45b5fdfa8f6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "ba7be114-7d8b-4f07-b93e-487e376bc899",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf5d194-d5cc-4457-87ac-1f831d4cc74a",
        "cursor": {
          "ref": "b88f1a6a-bf95-487c-878a-f41c10013407",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "50ce5cbe-36a9-4e5f-b02e-08185745573f"
        },
        "item": {
          "id": "dbf5d194-d5cc-4457-87ac-1f831d4cc74a",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "098b28f4-8904-4e15-bc61-fc03ccc7535a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24ffb47f-f67e-4c4e-bd6e-1ed4651fa5b6",
        "cursor": {
          "ref": "f0ff2f76-9f18-4780-b6d4-a40ed1718942",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "9f3bd9b6-d7ca-4210-a661-ae5f80f85fe1"
        },
        "item": {
          "id": "24ffb47f-f67e-4c4e-bd6e-1ed4651fa5b6",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "042b50e8-2c0c-425c-8218-61b87706166d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9615f82c-d649-4ec3-84f4-062e8c699303",
        "cursor": {
          "ref": "d2d7ff01-efca-4ef7-b8ad-e3359bdb800c",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "157a9c1e-9d20-4232-b15e-eadd77471984"
        },
        "item": {
          "id": "9615f82c-d649-4ec3-84f4-062e8c699303",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9283a168-1f30-4a06-b932-40295162948c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e533359-0385-4e98-baae-90e720852110",
        "cursor": {
          "ref": "655682cf-0305-4153-8e0e-f5baa3cac875",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "2f395108-6b8e-4bda-87d7-964b6b67a121"
        },
        "item": {
          "id": "3e533359-0385-4e98-baae-90e720852110",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "2837ab59-ecec-41df-a4da-5d65dc44ca37",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a43f5545-3601-4298-a8e2-08d382d0608d",
        "cursor": {
          "ref": "fb38156d-e393-4a3d-9792-ed71af63713f",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "5af2fc97-6210-4d11-b389-50e13a3686cc"
        },
        "item": {
          "id": "a43f5545-3601-4298-a8e2-08d382d0608d",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "554e6877-45bb-4226-91e0-b7ba8579d178",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "e0585c11-9290-4cad-b487-7c1af2878421",
        "cursor": {
          "ref": "df5c3dfa-61c4-4d83-b035-4cfcb826afcf",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "cee5ce12-4246-4482-8ee9-dfb7c94e183f"
        },
        "item": {
          "id": "e0585c11-9290-4cad-b487-7c1af2878421",
          "name": "credentials_verify"
        },
        "response": {
          "id": "cca47b9f-cd1a-43b9-a7d5-7040546186bd",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1231266-09a0-45bd-8062-ff1fc124f403",
        "cursor": {
          "ref": "3d37d09e-c6c3-4084-b241-fedaf9a61dc8",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "d593a2a3-1970-4d7b-9c2a-2a3767b69a83"
        },
        "item": {
          "id": "e1231266-09a0-45bd-8062-ff1fc124f403",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "94644f7c-cb44-4984-8186-85d13055eb67",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "141a7675-504b-4ebc-bc64-cd37cba30617",
        "cursor": {
          "ref": "4e073fee-bcc7-4e00-b399-425474791897",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c15d5f8d-5ba4-449a-8bf0-cbc041ffa3d9"
        },
        "item": {
          "id": "141a7675-504b-4ebc-bc64-cd37cba30617",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6c8065e-ac9e-46ed-9910-fc68c86c2cb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "141a7675-504b-4ebc-bc64-cd37cba30617",
        "cursor": {
          "ref": "4e073fee-bcc7-4e00-b399-425474791897",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "c15d5f8d-5ba4-449a-8bf0-cbc041ffa3d9"
        },
        "item": {
          "id": "141a7675-504b-4ebc-bc64-cd37cba30617",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e6c8065e-ac9e-46ed-9910-fc68c86c2cb1",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d891e10-517c-4db4-94cd-11c39cac5593",
        "cursor": {
          "ref": "d00297c6-55c2-4eb8-bc54-967849b2052d",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "6dd7809f-d97c-4c07-85ee-49bc56ea7261"
        },
        "item": {
          "id": "2d891e10-517c-4db4-94cd-11c39cac5593",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "498d7bde-33d9-436b-9b8a-b03c132c9a74",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bdb90a3-fd7d-4176-b44d-e12c4e431781",
        "cursor": {
          "ref": "7e997cf3-a6c5-4862-b32b-83c4c9b3df55",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "e18d10d6-0a74-4717-976e-8ac15af7bff7"
        },
        "item": {
          "id": "0bdb90a3-fd7d-4176-b44d-e12c4e431781",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "f4c6ed11-d46c-4b63-b3da-9cfa9af9364e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}