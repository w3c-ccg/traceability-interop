{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "9da98b64-3818-44b5-af9d-c9bf52e760ff",
        "name": "Clear Cache",
        "item": [
          {
            "id": "2f46cb12-673d-4ec6-bbf7-8ae496064270",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ceee544f-8501-4eb1-948f-cf2f348e6212",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "0cde748f-2847-47f3-baca-8da214072f3b"
                }
              }
            ]
          },
          {
            "id": "f0245883-adca-4cc8-809b-47dba1a9dc92",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5f344e3c-2e2b-42bb-9962-d8ebcd645b8d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "77e76630-2211-4711-a5b4-e7cae3661d4a"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "aea02d7d-2794-4184-bce4-91abe5a7812b",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "1a563875-9a08-46da-8c39-7297d0819215",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3db483df-ede8-414f-96a5-c667f495c4ef",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f129ae5-8368-4161-a9bd-14c500fb2fab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f2c2664a-1b6e-4f94-9592-0c37747721da"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "41c970cb-b3dc-494a-99df-58bd90c8fa5c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d353e99-f3e8-4156-90f1-eb8c7666470d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "be7c3c05-0b69-4b1b-bd18-8907e291ef89",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d3cc7da-a0bd-412f-b72d-19ca2b0fcf86"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b82adab7-48cb-4d0c-8129-26a51e30962e",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "444be3bf-6c29-4087-9aff-be4fbcd4d0da"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d88388a7-00a1-4534-b1d7-da1ada1375d5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bca8f9d1-1eb6-4f9e-81ef-01f90809008f"
            }
          }
        ]
      },
      {
        "id": "6da82038-dfd3-4f27-9e30-76b53863cbdd",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "e295e16e-b04e-4611-9136-a0371975f789",
            "name": "Negative Testing",
            "item": [
              {
                "id": "892f6f1c-d4ca-4905-b780-74b36e75cb34",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "cd44b399-5c2e-4801-92be-a5b7c3e85a7d",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "470a137c-ccaf-43bc-934b-a748d9735b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4cc17b24-920b-4efa-bb4f-297364827faf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ae8e67c-7be0-4a72-b5c0-2535bd25731c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20d3909d-a6d4-4d46-9968-ef5eafa35383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13743b13-3b1a-46df-ba46-0159e1cc1b45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdaa0337-1ef6-42c5-b542-7272aa30da10",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7cde291-d8f8-48e4-8617-4c38457b515a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4651e999-1523-430e-8b03-ec50acfc3011"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "a0251574-9970-42ef-9f93-771bbdd98539",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "52c4857b-04d8-4717-917a-b8ea7434afa5",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3f80a06-de91-4165-9649-3a5a9060ad30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f2291357-17ee-4795-ab48-db51af9feae2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa532bb-dca5-4714-85ac-d09665815046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0ab0545-6707-47ef-8a92-4c4718b9b6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d9b8e0-456f-4553-93e3-7e6522550b6f",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d672c5-e185-4cbe-97a4-803a7c04abf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae0bcbb2-2a3f-4217-941e-e24641a46b53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555bcd5a-7a70-4415-8cef-d665fe217e35",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "29fb27d5-6300-4eb2-a1c9-f8e1357bcc8b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "2fe7aa50-e0aa-4a37-b72c-c7a25fb016b0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "72a49708-2449-44b8-88d3-165941b6efa4",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b16d1c0-c97b-488d-9917-eebe6eeb7cf1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "659fbccd-bbd1-4ccc-818e-eb935a6bf6e4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2bc6566d-22a2-4e3c-88d2-acb7a5e6b470",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "12be0600-d176-4ab5-a5f7-841473e37b15"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e59553af-3bd9-4e53-b383-a277889b1997",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e29d5421-bb97-4485-88fb-9d4dab2d6687"
            }
          }
        ]
      },
      {
        "id": "e0e80eb5-6ddb-4e28-ab21-8986603071e5",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "83183ad8-97d8-491a-9458-81e08da8247a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d1cff69-91a6-4359-95a1-f50d2a81f94d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "ffbb9173-058b-405a-ab6a-b8e28d0bbc53",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33e50c8-d4ca-4149-a86d-e32cf29d1632",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bb17cf9-c33a-4b33-ab37-7f7a8449adfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9129b38f-6cb4-46ca-a42a-e69bd9dafb7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f42737b-9523-411b-b45f-abd9bc02c3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b15f83-b199-401f-985d-19e3c975d217",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53e44b11-ec76-4e71-9686-7f5a19025d6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42e86755-edd6-41e2-a0e3-f8b77ac609ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9f9d803-1377-422e-9988-e494fab8f5ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5dd50382-85af-48d4-b062-fcd02e7e3ca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6233249-87b4-4594-9e03-620002b70fa8",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71960f88-d2f4-4cb5-b36a-fa66c0e7a608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1616bc-f824-49cd-b6d0-e10ea70fc060"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a58c5e0-6128-4413-83c6-c8f3f4f0a3f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2e3618fd-dcdc-4ae2-bd4d-eccc9a6778d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32956a95-ce8d-4af9-810d-6dcecb2a51e3",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ace53ed2-a7f6-4f87-a026-0cfac27a1c8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de1a54d4-efc5-4426-a4ea-159dcfac8960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ea8aa4-7369-4e36-a276-0866f2ab84c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7aba169b-9d8d-4a2c-a741-01ef3d6002a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0dd61f2-3748-48d6-b8f7-2133e117b9b2",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2a8ba90-d564-494b-9ff8-f0e97868fc6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c020aa79-0945-43b8-9072-17212aec83ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19799e38-3cc1-45e4-baf5-bbc0fd6d69cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5fc8e28c-5aab-4030-8418-72da17b81597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ea2a9e-e366-4ef6-8bfb-6890a33457ef",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4186f39d-71f2-494a-ad03-4e9298af3049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0802d0f3-1013-4d33-8b01-fdb2c7b6daff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a06a20bd-eca8-4964-ba09-d32b3cb5d7e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "224419a0-be6c-4cfe-849e-b10fac3af30f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a305c690-b47f-4f20-abbc-2d98f41e60bd",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "faf8e731-cfcb-4ce1-b8ea-1a2105c3f96b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "912f4b47-586c-4a26-a919-f89a8e869d1b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79acc8e6-d2f1-43a7-a7b2-1f2006f2f923",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f513679-cad5-4f9c-bd79-3a6123dcdcbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd170ec9-94c4-4a6f-aa58-d180b737f313",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8acdd742-7134-4c81-8526-5429d7940a12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf4c7cbd-2837-416a-b9fe-20ee037ed2d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b933ed3d-618a-417b-bd92-75c54d904295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12070c30-f23c-4f11-acca-245a70082614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e89cdb6e-d25a-4e24-a9b8-afc5db581bd4",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536b96d7-c601-4f99-8014-24c28ff9e525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46af6cf5-a415-4103-a00c-dc835374a2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3080e5eb-ed24-4b91-a4a8-f6524a1f88d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3429ca85-bec8-4d6f-92d7-bbd3dacb2324"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2498c00c-96b3-4d0e-a9a4-b353e6871ffc",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92e762e1-2723-4b82-9ea2-8f62e83de6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f8c021d-59e6-4fc2-a1f7-519194529c36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bbc2f19-e340-4f17-83e5-c90261595bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5909f975-af9d-4d3a-806d-2c4ea6ff7556"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7eec100-46d9-426d-83e6-08d3140338c6",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be0d75a4-f6fc-4e2c-8594-3c283bb0bc89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7da526b5-e789-4dfb-bc66-0c0e2ae7566c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "612b6bb3-2b96-487f-bb7f-222866b0ffad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0a05536f-4401-4638-87dd-f67c7a777cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12f385ff-5c40-4ab5-803a-87e260cc32d3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6d6cab2-87f4-4c3e-a528-8005bfee5758",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "728c2e62-578b-49d7-9548-93b428e7bb79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a29f0375-0587-4711-a2c6-d298583eb2f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee342867-9740-41f0-914a-fbcfa821cdf2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07455f83-ccab-4e3b-84d7-f93278891829",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de5e2e8a-b201-45f7-96f5-4276bdf4057f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5943c6e0-e9f8-4fd2-bb50-f68dd00892fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c482bb48-237d-4258-8df5-fc7fd401dc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9464788b-bc16-4234-9920-2e917a15a69b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a65c99f-3f04-48ec-8666-4f5dfb6b5104",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c40709d-0eee-4749-b7c1-0c332d219a5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14192c12-a21e-4034-873f-423f40c1697b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd30abf4-3f1c-48f9-ad58-aa383901f148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "51d69fd2-222e-49af-ae95-712161422803"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc4136e8-1085-4adb-a889-f01ecf7e0ce2",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c964b04a-18f1-4852-ba99-51e27b65edea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67af670d-afea-41b2-a35c-e3a6cab742ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "139533a3-c38f-44f7-91d3-b9b929c5c09a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b6591f8f-0cdf-49b9-b6c5-242e4c38cee3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4cc05c0-6662-4f8c-9063-ebe00e46fbc4",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a93f35a3-3c3e-404f-b005-d67ffffbf21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18c6b74c-5029-430c-919f-76c97c058f8f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15c48e9d-c203-4833-a0f2-fffb414232d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f8e03827-0c53-4370-9cb6-41fcf2845f5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f06487-b236-4710-b854-8e0325fe8830",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2a785f-d8eb-45a7-b725-8a5483e604ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cad1fc5-02bc-474b-af96-1301d6f66469"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aef2c5d-4b31-48d2-84e9-8c236108c614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "43de75fb-0227-48ad-9448-f96dee311716"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446192e4-5655-422d-8baf-2dbab9a0226f",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1692715c-9f9f-4bff-8735-bf67eb920b39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f92e6e94-e4f3-4c00-9207-f1ebd832730f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b09b8e00-1b94-4933-9320-53fd5d0790f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "de86b94b-9ce1-4f25-bebf-e62e241eca71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a2a651c-a801-49c5-b08e-c6b831a728d6",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "560ceff8-7bc0-410b-8b39-3ab683c1dd86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5f08cb-e547-48c1-9452-4e84de902139"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f6d2767-e84f-4641-8a7a-c00aeba22a28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6506b74-7efa-46dd-8220-bf6d6c1d6c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5d85763-c271-4c2f-a4a9-50aae9522a68",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e220fc28-a2a7-43eb-b696-43b94f2a9d9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5488b01c-39e5-4710-919b-24b73073871f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a87ef422-41d9-41fd-b7b5-a57b76ab0bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6184c328-5314-49fa-9aa2-37d86dc73526"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec1dee7f-1aee-48a2-9a3a-bf830e2fc08e",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "909fd521-d882-4181-903a-24dd1e1cfe32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2b44ef0-35d8-4a78-8a3e-596d65701566"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "484c900e-4cbc-423f-bb6f-4f124f05338d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "341e3a2e-23db-47c5-9807-d37043e9c449"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f17aa0bd-fa12-4174-ba6d-0f622376a161",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab142fad-6c23-4412-9458-7e79ddf5ae36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1df9a4e-be68-4346-ab89-51755673810e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c21310a9-2c3b-48a2-9e9b-14bd90910721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3d697bb9-9315-46f9-a5f3-d568110f1c9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ed55c6a-8acb-4530-b7f8-4bfa8e8edbd4",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68e57cd8-e574-415e-a677-9183351d3b42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906dfbb7-7c72-49af-8e74-fb6fc28e7d52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48512582-0a05-4f7c-b689-9f8b189427cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b69131a1-1774-4611-912f-4cd390f972f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e7ef33-3d82-48f1-b571-d0cb0f44eed3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c8ba1d0-dcc5-4373-a34a-91858de020bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d43e02d2-561b-461b-b7de-bcad8a464c20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6069fcd3-b944-43b0-9c7d-b3b15eb054e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf65583-5842-4261-899a-29327e308cfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e639f55-d9dd-458f-88f9-12c87d2a3c98",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21fc5112-85c4-4abc-8dd3-0ad60c2e7fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19da9f32-6a7b-4f7b-a7c8-fbc9300e1cee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a5c0f89-5886-4a34-9860-ed9296c2ce83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "37dcd2e6-eace-4bf6-a725-8d6e17cbc2b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7027f2b-b4b8-46b1-ac28-6744915361c5",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66bed505-0e2c-41c6-81ae-bb9525de1eb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa041e0d-42a2-4cbb-8803-394168a0d358"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87628258-a18f-4000-98b6-018b3d72335f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d9c232cb-e428-486a-8503-055cb5730058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4be7f5fa-5057-4478-8dee-a85a62f4cb09",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86fb33f3-2abd-4262-b54f-63ca762fc72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7249b6f5-30d4-47ce-a379-1a87b7631fec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3de861b7-1142-4e6c-a3a2-dbf7bb04f0cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9a1adc3-982e-4458-a7ed-522a0f558680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0844526-afdc-4ea9-9900-40e0be0d88af",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93433489-c182-46be-b20f-422f8684a796",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "962b99f4-be3a-4c8e-8536-e7adf7f64be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0216f73-236a-42e4-a7d7-8e2a8cf53219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6dcdd3a-c9c6-4fce-9287-6e769cb9b91b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5a1ac84-c6e5-44fa-b395-60e06f17ca10",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b850186a-5458-479d-9f07-f909f0592ee1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd18fe4a-9b1a-4208-b678-b39783781955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1674d65-cca9-4326-acf3-c019ab3c24d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40622aad-e8cd-4ec2-98e7-96f593f9b04f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f840b5-3b70-496c-bb95-def0d10dbbaa",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00316fed-537f-479d-8dc2-fdbaf7fd2a95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a4d424b-5692-4266-a2fc-f0a464ab63e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1cce6d-62ba-4b23-ba0d-61e792ccffa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "eacb9c4f-7b80-478c-9a45-90d6b9ef761a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28361586-fe24-4eef-b44c-ec42fb4926d5",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcf982fc-ceab-4f83-8029-bb1256a39878",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9afb76c-7d65-4fe3-b05e-83e76524120a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90801153-505b-477f-9afd-16eee3928180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29aa0e22-5739-43ce-8011-b52e649f7bc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5a5d24-3ff5-4fd2-a407-7d0264776a15",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8afd242f-a105-4cba-b2a6-1b246e81fb8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e90c19-8986-4770-ab0a-a4af2c06fc09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81d5a0a5-38be-4506-8579-7904c95c5a3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "accd13e3-19b0-4e71-b929-58fcc851f04d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3fe62778-02d9-4e1e-ac19-d038cc7fe8aa",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "091f6964-f303-4908-9edc-7b9136c6f90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0d058e9-f7fa-4169-9c1a-ea25a3d05c9a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a2615f1-3701-4ac5-9f67-5ef516669d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9cebb5a2-a891-4bb4-902c-d358fbe457fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fae498a0-73c3-48ef-a686-91da3df6b8d9",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56f97fa5-42a4-4fb4-b645-13452819ae77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7250d464-cad5-4545-8766-ace57525c506"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc21bb5b-0521-4193-a371-e43e8cecadea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bca799f7-f2c4-4fb9-a351-0ca76b7d14fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54238a1-a2d9-4e2d-934f-187a05bf1b11",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58766420-e2a6-473d-901e-50b266332a38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51740f37-884a-4bac-9f87-c35bf90dd0e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6540535f-81e9-40ef-b5c8-bb99f1e01876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "8582d542-dac0-4130-876a-9b02ab433b43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b9483a-7801-467c-b640-ab02af6934aa",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a569e00a-648d-4de8-ac84-69a82d53c699",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb2d9273-028e-47d0-a41f-fb9e7c268fe9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e6bc766-5d93-419f-ab1f-32ede81d84cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b152968-172c-4055-8eb5-f7f5757d5fea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e872fe-a9f3-4140-9471-cacb9b290821",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a288883c-7186-41aa-8ebd-b89f53e2a34b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f055e59e-daee-4b2a-a697-1d8aee5e7c7a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1592422c-5510-40ef-95ff-7a9482b05b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b9b22d3-149c-4235-9024-9047e9603d64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f148ce5-ad74-47b3-8006-dbc7a0167368",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da87162-573d-43fb-a7ec-b963109a2701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73d435c7-6930-42ef-bb55-38c6f7c3aa34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbaf3014-92d8-4b37-bc60-62803c67b0c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "11acf863-d5a3-4f2e-915a-af2846380d60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16de441d-47b7-47f4-bbbf-1a020b3f4bf4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73561271-453b-4c72-8973-c064fe02ef09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0178b15d-f6aa-411a-8dd2-8249eb7551ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a01739a-94ce-436e-a8f9-73cb82125d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e7a60ed1-7117-4523-b601-a5ea3da1054b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caacc3bf-93af-4036-8f87-89e2d60a3f12",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f7f4b20-c44b-43d9-a1fd-b6121e2dae35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "059cd739-38c5-4be7-b645-480a2e9d4cb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adc36798-6bca-4561-a8cd-92977a9ae712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b1fd716-7b13-4ffd-aae7-1b2b8e4c1c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b7d3467-6397-4f6c-8d2a-6bb5f60bb358",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09f7bfbd-1353-4000-b98f-b8ea593ba000",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "94b06a75-8bcc-4a8d-8e32-912cad15095e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4d4e29-c7b0-4fc2-82a4-9aef9464b41c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecb37659-0d7d-40d7-b672-5c8a5514ed8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25be3d22-3c51-4050-8a2b-0ab84a2321d5",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5349b4fa-8ded-47b2-82ee-f24508c7947d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbb8eb12-2f94-4d95-8693-fb587fde9530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "758c2086-ce72-4eca-bb52-57f39f7cb4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "167785f1-3c84-422f-82be-5be4f1bd1936"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42fff9b1-fb91-44d2-9d03-1b5ce95fe4b0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ca5f28-74ae-4005-885c-224bddfba452",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e01da1e8-eca1-45c4-aad6-cb1bdcc14241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "945b1504-66e7-4a5b-ab53-1354e3c0ceae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "b8a9417a-61dd-4f70-9624-8587cd32dc45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cda9efd-995e-4728-b8bf-d980c525265b",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f968253-54a3-4aee-8d40-40eb6e6612a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a04ab3c-749b-4a60-9198-b0fc22358a8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e63f9c30-4af4-4864-aa2e-bce4a6933ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "82bafbe1-c159-4def-9445-c4e3e312a84e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49a4cbe9-21f0-4e28-98f3-db62754786dc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d5c9d2-bd1d-43c5-bbb7-1b142033ca8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e84643d-8066-4b00-ad6f-8e873af5c438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb2af84-419f-42be-9303-151e361a56b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "eb34f727-ebf8-4286-ae97-06ce5b4c343c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced618ef-a873-44ff-9558-5e7e2230b725",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f3c9aad-44a2-4800-8bfd-db97afe240a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3ebdca7-9763-428b-8be3-87657a490cd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d21a0e3d-8efd-425d-97ec-a914863c6507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "90428899-6056-465c-828e-641d04582ed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b193ca7-8ceb-44d7-ac5d-2d29f3503019",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3bbc6d9-e13c-496e-ae76-3b21e899f4ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "982d7f10-7ef6-4597-9676-60c7898ce001"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11959ad6-5de0-463f-a6ce-eb68a8475f4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "71bf41f9-1fb7-43c7-8e13-a680c826eed3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b1a988-5b00-4e97-86a8-2ceee8c1085b",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67cac897-da03-4f8a-be04-a603c7bfc276",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "695edbb3-77b9-4791-b10a-7e5b7879c0bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a036af7f-360e-4a4d-81cd-b6ddc901f562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "927a257b-01b8-4515-b359-95ae378d6336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f9bc9e-b63d-4933-80fd-6b747782e068",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca1ce83-ab2a-4aea-b8d3-8a5b473eed2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8fce2d3-f9ca-4586-a471-c8de76ca32d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "706a363f-4bd8-4202-9103-3c552539067e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "36b3f2cb-a3c3-478f-81f6-0525475aa445"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a1124bd-195d-41c5-8e57-f6176fae29ff",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918000a4-0252-4d8d-867d-8a19110358b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0169c24a-c714-46f2-a6cb-4a8381037338"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4feff9af-c927-4ec1-ab19-e8fbc6f46f75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "99426764-a8d9-4904-b436-f69d870751df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecd3e2cf-1004-4498-a44a-bbff110fad54",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "351dd16a-3fc7-4dc0-aa77-1004293ea22d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93f694b0-62a8-42a9-945c-b83222944ace"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e911d86e-3604-4608-8ceb-928f10c405a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fef3f5b-e54e-49d3-8e7f-1eca7e898008"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bf9bed7-1527-4806-9248-cdc7648b468c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ad3b37d-4cec-4d09-a01a-a924c29aac6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69ae07f8-2f9c-4664-86c7-205eaccaf68a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f1c705c-fce8-48e0-9daa-acca968772c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "300d4beb-791c-4c2d-9a33-9c296974cf29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca39f08-1176-45c9-9601-28c947156819",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d33b4aa8-ac72-4f63-9d52-599ceea9d643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7083df85-dad1-48dd-8af9-5dce2ebfffce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0b978f2-9010-4da6-add3-aa1d69a3dd14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c34da41a-160d-4836-867e-4fde68bdd1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e58bc74-c241-4ba2-ac87-606c11871c1c",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a64d36-6327-4925-aaf9-985abf5d7077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "906ced5b-aeeb-4195-9e48-679bfe0de987"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3329ee16-228b-41ef-92c2-1fdff6adaee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fb4d3ad-eb26-4f68-8621-0f7bdda459b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc04e3b-dbed-476f-a574-1ef37f6edc16",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b91fcbe7-5ced-4ff6-91f4-cfa7980f9bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "252a8842-5da7-42c3-900a-16f03df58c1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a30c708b-4d73-43ec-ae1e-95436263c766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f59480a1-31d0-41b1-9c81-df872c048517"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6943e94f-4bdf-4439-8b60-f0f5cf86e762",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e12c1a-816c-4dbc-ab9e-407cfd6955f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "459ceb56-47f0-428e-aec1-b734fbc6c20c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea7e6f3-ffcf-4da7-9b44-7196c2ecb024",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5bda68ad-68e6-421a-ab97-1ae8799f091a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6e13d7-a372-4175-a588-13549a306f32",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8067b400-fbec-4cf5-8b0b-b01df56def42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0439ac17-1b19-49f8-b37b-46eaf2801a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c36361e-8933-49bf-9220-96099e84480d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b94186a-57ca-46f3-87f8-be5e7744b648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d66985-ecc8-4332-a80c-9165e4ff7c90",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7eba466-128e-4487-b1ce-827248706979",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86a26056-40a7-47dd-9480-0a0e5d50e124"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c989e8-061a-49a0-8e20-a05fe342bc05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c6fa87f-26ca-4918-98e8-1b5ff1b25ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2f83a66-1fbb-4e94-8f79-ca8200ea6e2b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599f66bd-dbdf-4888-856d-3091233c3410",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fc05c6-9e00-4aaa-94ba-ed1a7e811412"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a8631f-101a-41a2-8d5b-c6b5122f3440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "68be4532-702e-4c75-afb8-1eee3738ee30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "501c0d33-0a98-43cd-bebd-d28e89d9916e",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4d8f6e-66c2-49c9-9ebb-cac4c2d56e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37d30846-4a2d-4dd9-8106-d70d187563ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06787ffb-54d8-455b-a935-a43ab35734bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "b9b77d33-2d0b-4c08-b5ce-acd758ca7ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af5e47e-6a89-482b-a777-d6ed5518dfd3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ac9baaf-e3d5-4289-93c2-126c42ee0099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e595c513-e272-41ed-a7fd-87e783c34191"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19a292eb-6deb-43a1-8ed4-75003a669851",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "d745f311-4f3f-4807-8916-e738ccedc2bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14c61d64-c737-4f09-89ab-fdddb64528c3",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "454d7518-9537-4d82-b52d-b4fec4cf9ca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "193e51bc-6ea2-48bc-ab1e-5d825311475b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55462224-db77-4089-8355-e01f955bd697",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbd05499-e2cd-47b3-8e38-74440f9fecda"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54a48182-ae46-4445-a8d0-3091cd64959f",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bc669b-9e43-4357-a29d-8f68a4500630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9d0485d6-837a-41a1-9473-253bd749592d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719d2027-fed2-4d0f-9c16-38e27ecc38f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "62049afb-87fe-4212-8c3e-7bb117a25c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4c26072-4d41-4ded-845d-a9b7500365c1",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf7a4b26-cb5c-4fea-be3c-e09967ce8503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb84e509-cfb3-47e6-b726-9e62860812db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db8e1d4-73a6-4d66-8bc2-e5f47f400c86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fd574a5-49f9-423e-afc1-82e7c63a8b2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4470cfc7-0a83-4642-a956-699e3c88e8d3",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8150bd1-fc4e-4d62-858c-79f4026e5701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8df7153b-7e5c-484d-98fc-b510f634463c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94ecd2b2-83aa-4857-b1e2-9e7d0e3b796a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5bdbae4-db5d-4e49-96fe-9dc67d999b6e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca931449-88b3-4b27-a32f-f6882c354643",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44be3359-442e-4663-b7d8-155ba6e11622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab9154c-05d0-491c-8945-9edfcb3a48e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "524e6e55-e095-459c-88f0-0e68ae90c6f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "344cd68d-f38d-4d2d-9575-4aa60db8e530"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77c1042a-16d2-4f0a-a1b8-47a963678c7a",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ef999f-0e46-4dca-ad62-f7e5de9371b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7a53417-88dd-4225-9085-5df751b0bb79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d73c7e1d-fd83-4159-8d63-1cf3f6928d72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1eb02b79-5434-42b8-9b90-bbabd62d7e27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "976732f7-1fe1-4c45-9f03-536f9b813368",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4e3b741-fac1-45bc-9d41-c31f729b0062",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af571722-f307-4e10-8557-93dacc59704d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61181f01-01c8-454a-961f-34eef4f4b5bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ddf03cda-ddca-48cb-988a-e7d8833364ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "383c924a-2115-466d-9612-426af4cbdd82",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a53bd115-d667-403f-8a22-87d8a5793a6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03971a6a-713e-4c61-a468-884e29bf796b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f38ace-fe4c-4a3a-b03d-043f88d57ed3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5fe47604-48fb-4f07-b24d-c0544162cfc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a750dbe6-9fea-450c-9d48-250858b95534",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36aff4a2-1adc-4b3e-9a45-65dd52cbf393",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "256dd0e6-efd9-40f0-804d-59da44e778cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538179fe-6fb0-4d81-b203-bfe8d292c19b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0204204-886a-46f9-8f9a-d9e04aa80dc3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7e62c3-c806-444a-84ed-5bdd86e0c2bc",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db86fe51-bdb8-4276-9441-7a12f83a78eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a80cdd9a-7929-49aa-8c02-3687c1dd9ec8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4074b1e4-9541-49cf-bdb6-064fb0e4945a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4cf52b28-c57b-4c2f-bc37-617c7114359b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0af86fdd-5148-4fb9-8cdc-d4ef089542de",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f7e9990-5882-4c3a-8f88-154489ec25ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b082edba-9eac-4bd6-90f4-3ccb7e4cc4ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "678e2e81-122e-4219-a610-d9195610a93f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6544b31d-3f01-4f68-afb6-39347027d6d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8d1e17-f8ea-43f6-8d64-ff662098eb82",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1803f74e-f2e6-4761-b58f-e8e86b5d0d8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49b6389e-54b9-4996-ba92-a62c7782083a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa07219e-f787-46e4-b822-d5f70a4b5294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fd05c83b-fc7f-4bad-b8e9-011a5a32279e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf20844-1a5b-46ff-8a3a-05e587c35232",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd028ccc-3fc4-4a6e-bdbf-110d6752a541",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fd23b60-b37d-45d3-9276-edb27aeb6a38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96be2d69-bb90-4f1d-b955-7327fba21d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "57a01759-fe7b-4697-b69c-cb13c2f2af39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c4af776-9b95-49de-ae48-ad6eccb2137b",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf5485a0-81d7-4443-a45b-a169a55ef3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d95a566c-2f2a-4786-a272-9aeaac92b4bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dcd48c-72a4-4adb-b29b-675f95e27dc2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f290dc17-d243-48e7-b831-c100f767596d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6d67d15-abba-4553-9495-144c0d574730",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fad89568-cd17-4167-89bb-3077a12dd7cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214ac021-d8dc-43ce-ba29-271b7c4f5487"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91ad4548-4a18-4a15-a462-e28f2a96c249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c7a6281-6330-47b7-9911-ca56d91fae50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d722023-31a1-48b2-85cf-cd2ad31a42a8",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef67bec2-32c4-4b13-adcf-db6f8928cc79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd4cf7fe-46d9-4230-8200-65ee024db413"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31df4748-5cea-4282-954b-f36acbc95910",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c827ac54-f7f6-4e47-9f82-231cf1fef75f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c71b38b-811e-4ba3-9100-f33e6e5bddf1",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89349c8f-f68a-4dce-b5f8-6c99f558e3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97368306-0a03-43a5-b1d5-c468353b394c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca9681b-d9fb-4f4e-bb6a-002a2e3290e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf0918fe-04c3-4e18-92f1-3877292728c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08901b48-bf58-46d7-b494-3ca78100cafa",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09851c87-9e50-467c-872f-18d501b81dfa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c6b3e2-2672-4cdd-a95d-ed8e8e8e1e89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e44272ae-8e93-4429-a300-1a9c6b39e27c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "2617b010-8d6f-42d1-9306-dec19c1f27de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7545872-0a1e-4758-a119-209ee6b49f56",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5229362c-c472-499c-86c2-7f3b15327c24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20ac38ee-50f1-4afa-a524-077876e6923a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78564081-1e53-4780-9cb0-bc7ba0c542bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5bfeb4cd-68c1-4232-945a-fb013e47c9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be47ecc3-d020-4d06-b084-ae979e905218",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cba173ac-912a-4beb-9dbb-7957b9ad4714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8109b174-271b-40a3-ad9d-d4ed1e602b18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2256eef6-b059-4934-854f-6436ab2052b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "09fb434f-85a3-4c17-8b49-452a6742acee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7204ad4c-7211-475c-9d7e-24850b05592a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6307a104-56ef-4aa6-8a53-363dc8db453a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b9abb67-d7ac-4cf5-b604-f63c8e8d2c8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ebf282-887e-4b05-b3e2-120a01f65c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "95ed43ae-9647-40aa-a6f0-05bd45f7e49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "637a6ecd-5c7e-4458-98ff-fafa375a7a54",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fde8a3c-41d9-4122-a6ba-23b4a3872ca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e765e3b5-d95b-475c-9da5-9285f286cf1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cd139e6-cb49-41ba-b930-76f796c1aba1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ec2822d7-c28c-480d-8d99-427698d8f152"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af34ba2a-dd9c-4067-a5bf-c1800b0bbe37",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18552f09-ec64-4004-b73b-fd1d4170d367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "612cb252-5d48-4ddb-b20e-19020014bca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "147ea136-c9c0-4f21-8e7b-02be3b58e31c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ad41e74c-84e4-4c57-9216-58032e704cc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "08f11083-1a05-4b2c-b69a-d222fc8d9fc0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "478aa6f2-f16c-48ea-9b9f-51a1f2a7aaab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65149023-0397-4055-8a2e-c92335723ddd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3535454-08ef-48ce-8651-79cddcc4f577",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "29a663f2-2405-449b-adcb-ffe8bc4b01ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6d47593-5bf5-429d-9e49-dc466c192c8c",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d831710-f8c1-429c-84f8-2e143c40ddf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "acc40e94-79d3-41de-b694-149d8e527dac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "decd97d7-262e-4a5c-9194-1d80cd2210ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "876712e2-9879-4ec2-9018-2af2a28cfa2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e748dc6d-40d3-4b31-a159-d5ad9ddcf93d",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da54cd6-4161-4ffc-a6ee-cd92353d3708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fda9a68a-30a2-4ada-9a94-e7c202846347"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d673e9b1-6a31-40df-835d-4d5e1dad8334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbaa07fa-47a6-42d2-b9c1-b11aca287d11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53cd80be-9c54-451c-b817-9fe279090e6f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2874049-4b6f-40ec-8d06-313101c26aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e597cdf2-0c92-4fe1-a6fb-60a05d4898be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26db2e3c-4b24-40c1-932f-21d866e231f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "45a636ac-b3e2-4cf9-b5f7-05217706297e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a05dd1-fa07-49b0-bce3-932b452365f0",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a63592d1-fa5e-4069-8c71-a037d9a60b46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9794d22-96c2-4903-958d-ca0283b22fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c867115a-0a58-45b5-94c2-229951d97e28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd64a50-c7dc-423e-8065-9f5a9a7ca92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd1961a6-d530-4018-85b5-06318a5ee59e",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6c7d215-5a8e-423f-b32b-150a2449908e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f943a29e-8243-4af8-b69e-aa7e7aeae93d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39efb525-b20c-47af-b269-c6a42f347414",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "58c81668-f483-4cf0-aa58-d960a66173c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "420c4c77-ff52-4642-b789-04231d788bca",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "195b371d-e6c5-49d5-a640-de56040674c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c294554-a7ef-4493-8508-df0fe8b3e75d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75bcfd70-3f45-4c88-aad6-9b2b20a018e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "2cdae827-d4e4-47a7-a7e5-208c555bc657"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62141a59-ba89-4f67-98b5-b2ea0bdde004",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be8a2029-774d-406e-9883-065b5c398348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d4e8f4c9-1ee2-4c6d-b719-96cf47024025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78b72185-01c8-44af-95e9-e29c9f16c7bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "487f12da-3077-495e-ac19-f7b7f0d33267"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ab457d6d-b579-4f33-b4d4-08087e388979",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "070001e4-9c52-404a-9ee6-3f9fb757c74a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57bed777-94d6-476a-9267-6760dfe57b5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "43836035-9a3f-44e1-b4a9-81885fa3138e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca9c141b-8945-4a39-888c-ca7bbbebae7b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0641e34a-1706-4713-a852-f7f4ed0a1c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dcd0ea4-2a39-4b97-9e42-ff77a4d7af33",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d36e3681-171a-40c6-a49b-020f5d6c51e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bb73caae-1ba0-4395-812e-86c564b5be18"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b799d4c-950c-41d9-8466-5e3fe27985c0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f873e4be-e578-40f6-8d1c-4b15188a501e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81082dfc-34d0-438c-9ee3-10e72630c5bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f1234733-42c0-46a6-bd4d-ee69c5d7e660"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca4b97df-10a5-43b0-928c-76adffe3165e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4b65a39f-8fcf-4bbd-90a2-79a0e47945c1"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "69172444-73c6-4343-a029-f581df729310",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b27a1f6e-4c6f-49e7-b5f9-e23030ee185c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "151825d1-ea98-47cd-94f4-cb7a8bf2039c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0d5f7a9e-a886-44dc-9e1a-829cd3f6bfb1"
                }
              }
            ]
          },
          {
            "id": "4ca73248-4882-4db0-b4c0-e42cf5dd2e8b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6513e614-b820-422f-942c-dd2970e4e682",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aba4a539-1d04-4a94-9c50-945f01feab06",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "896e3faf-d4d4-4fd2-8b0e-6436c5c2f1d7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7d71fbfc-df36-40a5-a0c2-1b7aec230589",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "db795af4-5ae1-4cb6-a610-2c3efdb57851"
                    }
                  }
                ]
              },
              {
                "id": "ce4698e8-9e95-4994-bb78-28778a56e1cf",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "45f39c77-ab63-4a46-a52e-efaada4f9ac3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c9e9678a-c707-4cc2-9dde-9732a71296ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21968217-da2e-487e-a2f0-ea9517acd63c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ad6f5d1d-01da-4c6f-9dfd-998db26f6342"
                    }
                  }
                ]
              },
              {
                "id": "6f404f0d-d947-4df3-8992-f7548dd09eee",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f219a15e-41b2-4ea2-9f3f-a923b5f95ab7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "da8e0043-7b29-4ba2-92d2-b53d6d76f733"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b216c97-8bdc-4c6c-951e-d80f352253ff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ba06f11b-3431-41b6-bb27-0bc473493ad0"
                    }
                  }
                ]
              },
              {
                "id": "96217321-ec99-4dad-8b08-6e1cf09de01e",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "04266132-c082-4b7a-a817-d668046a9e05",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8779bb2-8b05-4895-8598-8a27878d5a7a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "410144a2-c7c6-4e82-879a-96a2da6cd931",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9213788b-805f-41f8-9f16-7d7faf00ea34"
                    }
                  }
                ]
              },
              {
                "id": "f9dc56d4-05d8-4aeb-89c9-7d72eeae16f0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e652ce6a-340e-4eed-82b8-3c1b1bbd6763",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "76334b66-bf97-4274-bbee-82d111e3e8ac"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "74617b7f-b800-47e3-9ce9-2c80cac158ab",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1ed4f695-1120-4e41-ac42-88f4020efb87"
                    }
                  }
                ]
              },
              {
                "id": "3ffb0fe0-3813-4dea-947b-0b59501eb4e5",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7130ddd8-2f13-4000-9a18-91f7e34f64d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9b2c6a8c-3b40-45c0-875d-9b7d324d8c57"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2b3e5f9-b152-4f98-b020-fe8df61ff71b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7d9934a9-dea6-4d67-a4be-67dd1f380140"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e55cf314-e551-4e9e-8fb7-1c1461fe3fcb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6d217783-a0cc-4f16-bb4f-ab791e32acfa"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "31cad8fc-3e25-4b23-bc2a-02e97d53822a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "139376df-cbd5-4b2a-8033-73a9c39d71da"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd0a9c89-b31d-4416-a5e7-bcc8763d8637",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "bc035081-15f9-441e-b7b9-126db4df2ef9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7d8c5892-c3d3-43db-b635-73dacea17540",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "94bb8d28-7d13-40f0-bdb3-e66c9ad3a641"
            }
          }
        ]
      },
      {
        "id": "adbca2c6-4038-4c0c-830d-64e64c417d84",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "60fd5709-03ba-4285-b0e5-e901a5bc89da",
            "name": "Negative Testing",
            "item": [
              {
                "id": "62504672-6789-4343-8400-bcec53edab7a",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "0771d0e1-2289-4699-8e9a-b31ffee3e797",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6b9b214-e2cd-43db-9c5e-4d155126d9d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ec3201-e35c-4b88-ae3d-715869270e41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfcb54f5-6fef-4106-87b5-da2f51adde5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "62afb95c-d0f6-482e-ab71-7178cfa93d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6008706d-5107-4b27-be35-63794950bae4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7d7fd9-c455-4da5-84f7-2115fd916f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f83ab88c-f5ce-4cbc-a2f7-c2cd9fea6213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3d67554-92fb-4a25-9a45-ee8969c76bbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "54725b4d-de66-4040-bfcc-3ebdfb562354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdc8e63b-890d-434e-88dc-866b3967f9cf",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c69d8516-a965-4de2-9405-d3e25064cbc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a70efd3-2f76-46c0-bb38-1abebdc05e92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b22f6d29-5bef-4cf6-9152-d3d1c5d043b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ce580b7-9df6-4c31-9df0-5f386051a08b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39b6f1b9-ce87-4e22-bb1b-6c133c7eb023",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9db3d229-5b50-4413-a88c-140cf58e7f48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63726913-ed54-47c5-8f55-748c32d203ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea66dd13-88b5-41ec-83fb-f38fb3047f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4a551406-6342-4c0e-9f18-dd096836c006"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9cd8b8b-859e-4587-8428-3b6588e3a135",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca3d0ab-afda-488e-aa59-41464c33f7dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2771d807-473a-4158-bf52-cfdaacaa8d90"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b75227c8-63f5-43e9-bdf4-d17843c54f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a01e9626-279e-46ad-b1e3-4edcf29f928e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4294e7fe-39f0-4474-9613-579df0b8a020",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ace65f-4c4a-468e-8a79-1dadfc810a61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "450664d0-951b-4199-81c7-a7095cd55bcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed47140d-b7ff-4a75-b69b-bc5c1fafeee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "20b133f1-28ea-41f7-ad2a-dbe6242fe3d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aeb8107-34cb-4d03-a8d7-e3183f721358",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdfbc6b5-a829-4055-a126-8da9d727da68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3599c615-f709-40ab-8910-4627705b75ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d0e0846-416e-4fd7-9f75-fc2dc5a635df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f0a42fb7-1eb4-4e85-abf8-16f81a406403"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4099a270-3f91-44a2-86fb-af23a7f66c58",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61a2bc38-3cbe-4758-829f-479992169523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "111a3556-3f60-4676-b5e8-5a542fd544bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7053d89a-2123-4ed6-8e80-de2fa7dd963f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c8c2de6-27c8-4b13-b9cc-9922a6db94c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd88696c-cb45-4081-8b49-2667b8e8e55b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de95a515-2fc4-4ed5-adcb-b945052fdc96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738a8eef-8336-4648-98be-0428f277754c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16cdff57-8391-4324-8297-8ab9e41d7aff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "28d71fd9-1c3e-43d6-9352-04fc96393ce6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c779e8d0-220e-40c2-bb65-4c906172626d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69121300-ef1e-4784-bc50-d272c9a3c294",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ee3df22-1213-4cc3-bff4-826a012c2df0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "180b1e4d-e39c-4388-8962-e4c2d177eba8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "87a4b378-ab3e-4ff0-b6d1-951047a44cad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb102050-6bdc-48d3-af8a-fa84a07c94f1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51fff0ee-edb3-4d90-a8f8-34060da7bee3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf896b7d-c1dd-4814-9b0c-7dd2314fbef0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a604439-a295-4aea-8860-bcda16dd1ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4900a8dd-70f4-4711-bcdc-2c4257cc1031"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f86f0a6f-d62c-463a-b0f5-56a06d679dd2",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6bf4dc3-0ad9-4da5-a37b-6916a5e94c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aab9552-499f-4c61-974a-401b8f0b70dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "629f499e-8c07-4a6d-a21f-326fdc7472c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "79048cbc-e4ba-452d-9034-0fbef9e1d3af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ef0c008-5ec8-430d-a68b-7aff0cb32f09",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e6cb88-46b5-4601-8975-0f20ea3f7d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1cac90e-1889-4787-ba39-598e52035fc7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "855d0d45-179a-434c-8411-894309fcf064",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c3e332e-909b-49ae-bdeb-63aaf62cd905"
                        }
                      }
                    ]
                  },
                  {
                    "id": "089ca030-4f7b-4e1b-b4e3-ca9bd21147f7",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e5d1223-114f-4b3a-891b-ff4a9e9edb8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6878555e-eba9-4373-b5e6-5a810d6a4f38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6310b481-8c1a-47ea-8625-10d611cf32d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "2858db99-f821-4c94-be99-b99461e8a9ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "892c8913-ab33-45b1-8a06-4eb2c85594eb",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b09b13ed-afb1-4813-ba5a-84a570f2ea3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f617e38-4780-43b4-a260-6b6b034b61b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51cd1a74-9d02-4672-b425-5cafb7604bbf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "9e1e9fd3-3d2f-41e2-bbcd-88fcb3aee27a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75875a68-7428-44f1-921b-9fceca4cc245",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2826ca11-d1d9-4716-8644-15b5c8a952b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5f6ef3-3c59-477a-944f-462d3f34aa07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0791095a-e7ec-4577-9f47-4ff19af480c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "8278945e-c0b9-4dd8-83ba-03a1e1e1007f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cdb084-b6e4-4a63-8c1d-edc8b49c6ee5",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ee9956-f254-4538-b68a-2e39ba7aec41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1bbaa2a-4443-4b2a-8b3f-d7217d056e52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b118f142-6913-42a4-bab6-053adaea8fa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "28f33491-dd35-4991-82c7-c8060ad24f21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc1fe76-174a-412c-b715-44d48bfd9224",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5b5a8f2-15bb-4275-89c4-d5ec063a311d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9fcda47-f5ac-465b-b46d-179052c84fa9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7383c65a-f3b5-4f91-87c5-4f461dc73c6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d27d0c7-57f7-4b6a-a34b-a1198c03150d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4fef33c-5240-4016-acda-ec5b88026264",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552a46e3-39f2-437b-ba07-44ea5ef4d599",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab3abb6c-10da-49cb-a89a-f2ced5c22198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8fae013-aa46-42dd-81ed-5225a5d81c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0b816220-1271-4c8f-a2d7-b4a3c0f79cee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "354beb27-8037-4b10-a693-f5998251c199",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f641b1f-a471-4dd8-bf27-4d453c6d10ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d84b7052-f5cc-4f9c-bb4a-04294e55a7b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ccf8c0-cbc6-467c-8697-6d6e349569f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa9f535-b11e-4375-94d0-625225eca454"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f82049d-8869-43d0-a3a8-1e5f653d06bc",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a92ad432-0f0e-48ed-aba4-9c595fb3d2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c6fbb22-06d9-43be-8744-e1a0b29b8435"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c176c6d1-4287-4dc3-afcb-952144a9beb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2b376858-1e83-4d82-8f98-dee2246ab7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66203ebc-66f4-4cd4-a9ac-8b480f1aa866",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32e0dc5f-6261-470f-9b2f-46a27d354a88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fbf3b4b-81ce-42a9-957e-db7e4c38d285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b12cb97-df54-4408-8be5-6df6c90e64fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "25b702a4-2b65-4ab3-9eef-7680266a90ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d87b54-f18c-4b4d-b67b-d9fa6cccede4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438a937c-a8f2-4383-baf8-dd8823164198",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3dd0452-6ec0-447d-a30f-49d456a1bf3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "200ffc63-ba9a-4caf-b601-c263d34d043a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c52f367e-edce-450d-b49b-f5f8e7919dc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b16f14aa-c6e6-4c65-8df0-447b666611c0",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f9d27d6-5c15-42b9-8027-c494133f5c73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adbc82fa-b629-44e8-8de2-1cad082e1bbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a064c315-722f-4fa9-bd7e-87e70c7defa9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f293768-db23-4225-a9d5-10576308926a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5be11b36-d2b1-4047-8885-11b1d3217848",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f7f0a9c-a3a4-4f7b-9ee2-d73f4f038327",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44d9b526-0a63-4cb6-9926-ebd3db93f33f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f58d4dd-4675-4398-8069-77151b279f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b17758d-f93d-45de-b459-68bb639e107b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b28054-5f1b-4a14-9d41-c747106da75f",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca258ff-22b7-428d-8db4-bb296daa8c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "95057fd4-4ced-495c-aeb6-7549c3151688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6365d707-f290-4050-a4f7-8f0a310fdeae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29cddcf1-d7ec-4aac-b367-1a731486763e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3677f03e-f739-4435-9901-5e74f3d58c37",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "446825cd-fd22-4aa4-b3fe-a088129f80df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3122f645-47e9-471c-badb-f5570ecfef77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e218e5b-c719-4baf-bad5-a675827fd22b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "37d06015-446e-4cf6-a406-fd3d641f3b07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94cd0a11-d7ef-4402-a70f-87bd1bb75363",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d82e676-3d23-4981-ac05-da36c71c10d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "684366dc-5be7-4cb6-8a6f-f0ab2298dbf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed9b24d-1efb-4839-8746-fe7989c34abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f5d1f1e-0b60-4a1b-97a7-f636eb4182b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ddcba8a-f05a-45e3-83de-add6683c6fe4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb045577-f4df-4bb6-9741-8fcba360e641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8874b74e-cf1a-4c3f-ad73-fed0b00b1ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2524889a-d7cd-40d8-8193-1bb50da05a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a47b1b-069d-4c36-ae1a-981d6bcf9b9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fe5f09-8555-46fa-a92b-74bf31bb5865",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4eb9c46-4987-400c-b9ca-35eb3260e48b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "110545cd-2ef7-40e3-8e86-89b1129c6896"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b658cf6-ac33-43c0-8502-8cd617d1246e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4be23854-8820-4508-b535-07231b895bbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1f52d29-7b99-4976-b2e5-b200009f7654",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecacdcbd-caa7-49fa-a0e6-e6ac287afd4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2943706c-70d0-4275-8c73-c397c4aebe1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8690e55a-f8b6-421c-a6c3-4560f2270c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ed56457c-befd-4bf0-b98b-a16fd2b5b07b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c5c90a0-d315-4641-b281-216997cb690b",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "253ca668-9668-4622-b877-a2522427a5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5d5f69a-d7be-4e74-aa6e-4ab5c59dadd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ffcf0a-f3cb-49a1-8bc9-d55cfa874864",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "00719763-d4b9-40d9-b54f-75eb9a943d70"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "5a763067-d0db-47c5-b12e-7ce9f8d6d383",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "074131ae-358b-4dec-a7b2-4a7344afd879",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec6c993f-59da-44d6-a4bd-f361351ef01a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "da360a20-1813-4205-a446-9e33de7c00df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d0bf5ac-5a2b-42b5-81f2-da194b16e53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c64515f9-8346-40ae-aea6-68c6bb633e78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5053e8de-1c67-45ef-a5a8-9390032e91f5",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "892674ae-c0cd-4723-9af3-61520274176c",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "023ce342-88e0-4a5e-a3fb-943e4c47b9fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f3e080e-7941-4372-88fa-d9a4ff030d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0d089192-8b7b-4f66-b61b-3c7ddbf175bd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3ffb3232-d211-4af9-95f4-f9f289ee07c2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a43cc02b-3d1f-48b7-90af-363dad916045"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "38feaf44-88c1-4e89-bb76-62abbeb516be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f26ac2ef-0bc5-4d0b-b4bf-4d5fbe2a194b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "912042ff-b9d2-4c77-b8f4-60eade0c5718",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "424904ab-76eb-4d81-9b55-41267733553c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ed16dfe-6d41-4742-a061-7a755592dd54",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "dc838c11-8f45-451a-a7ad-c5dfee969e60"
            }
          }
        ]
      },
      {
        "id": "331d6573-9e87-42d3-ae1b-947f23e9db78",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "33cf7cf4-4530-4d63-a99f-6b487cb670c5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "95aff048-9c16-4e98-80f9-970d9889cb49",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a73d7da3-a5cd-4ae0-be09-cc6a583e5a4c",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe27658-d7e5-440c-8344-61faf71af2fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b03c493-f6ad-4346-bb7e-ab27c4286413"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69311504-3006-46f5-a1a9-748f2ca115d8",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "212a17f1-a9fd-4c29-894d-9f307655e6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "229fb455-cfa3-40a0-80d0-aca89089d1ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a82d3e14-a2ac-4575-95ae-e351f4916e91",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235bbfa1-1092-4f4c-8d64-740ec8c113f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "476aca4a-38fd-430b-9a5c-97165163f3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f7662a-cf5e-4907-a298-9cec182dd1f9",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47acbe24-a251-4bf5-83b3-2118006d6a4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f550ae3f-9897-4853-867b-66547c0c29a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c92248-0d75-452b-92ea-62a8a7696670",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ed504b-b579-4008-b55b-1a10c3b9e54a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57903415-91da-4d34-aa7a-670112dfde2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8c952c2-083b-4629-968a-a6da0c855685",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4dff5b8-f340-4da7-ad0a-dbafd7653bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1771e9b-9d7d-4b69-8cfb-7ce30df14949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6bbaa47-8fc5-430f-9888-78248c4b2cc0",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a2c9849-4a98-4d61-9489-404730ee5e5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "559ae482-8307-46c0-ba28-d7bf05dc6855"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed015f96-a026-4064-a08b-e5e233cd7792",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34a951f4-4e9b-4461-aa68-52a8286d4d5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf32883d-42f3-488a-b6a8-60c8c242186f",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dc1002-c66f-46a2-a700-ffa27edd5adf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "26839db4-a299-4446-bd93-ab42b68bb92d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "13159837-95ed-4058-9e5b-cc1175efa729",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c95f6526-aaef-460d-bea3-9f61d7298487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e65559b-0893-497e-a0c4-ff260562ad7e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbdd94c4-9eda-4c1d-ae00-4e0fc69c1561",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d7c222b-cabc-4d2e-abe7-a5cc104fe202"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dab949e-64ab-4af2-a366-dd4a293bf19d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2fc4e50-4358-4e7c-960e-ecc788050bd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f19a5e6f-7f6e-4b75-98e3-a6d4c8a9f5c8",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b2d34f-49f7-428a-a041-01662ea4fff6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c48d3a3c-0ea7-4787-b731-b0c3b38f811e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "438a150d-e069-45e7-aea4-a9134cf171c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a695651e-6942-45c0-a056-b3212d6d3e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11b1bba7-c349-481a-bbcd-7d0ad8b3f7e8",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6d858f7-1aa4-4937-9e6c-63b6831c0de2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f6c55f-a46e-46df-b02f-a300f8043f9d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0a2e018-dee9-4a9c-90f3-3a47ebfaf5f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47ee3f2a-6b31-447e-9735-dd8aea5e6741"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b77041-90c5-4922-8a74-3770bdff3b27",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2613835-1630-437f-b6b4-74eb671b0fc9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf03868b-ad6e-4652-ae0b-fef6a4af7573"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9309ef55-42e7-47d3-953e-1916d012463e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5a1e025-011f-43ff-b4ab-2e197c60a5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6da81fb2-4d7d-45c3-a6fc-b1f040bdcd0d",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b05f06d-edc9-4334-9c52-8a0291dfa02f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d5e7e55-31ec-4041-a75f-f3e83791c8aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8eaaf6aa-e829-43c6-8753-4ff402a2841b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d59947e8-177f-411b-808f-0dc624f1d19d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0185f83e-ecfd-42f6-8442-42907e5a97ac",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "714c8406-b384-464b-b251-7967a384fd35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96e8a6b0-20b3-4a2f-9820-e3b0ddc1ce64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b50cacc-1aff-48b4-b535-6608cd644a12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b17f063c-3f2c-4341-94a9-83c56384e344"
                        }
                      }
                    ]
                  },
                  {
                    "id": "801121b4-349f-4646-9f22-4e8f4db03c0d",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c2d8482-fc55-4c47-9f3f-6e086e01e01a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "221f717a-04fc-4fe9-8b83-f5a3c0de8c4c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6f9f7c-5775-4d97-8c86-82aa43c52bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97759f9-a85e-4c5b-bafe-c8d32ed7f3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93d040ec-a0de-4816-a8a9-028221ab7f90",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fc5d491-3b5e-4bcb-88d0-8e8157955816",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84c3cc82-2e7d-4a33-9f74-eb5ce74b2aa1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e47f01a-9954-42a3-be2a-fbc951f9e495",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "657e55a1-8ab0-4771-8722-5f7a1dc828af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066f5221-f0f8-4993-988d-7580be1e5321",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acda9457-027c-4708-bba2-2689d846b4f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e98d65f-1074-449f-9128-a0120945c570"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67da5af7-e89d-488a-a3ea-6ac7b283f498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f23a1cea-e7c8-4a27-b07e-23288ecb8177"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4e7dbe0-9291-4260-9d90-7adb7396a535",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6171516-b23e-400e-89a9-69e4f790b717",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828a3f24-9820-4c41-8ad1-4594c4ca19d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bfd95d4-75b4-4860-967f-cb85772a1d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d003eb43-fabf-4e91-84be-d0bf46071aa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3e5da6-d297-440d-88ca-15bfece3f238",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e85ee3fc-e8e0-4143-840c-76b0acba0c67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8973e7d1-c987-4191-ab2f-d764fdc1d3c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "922fb800-4eb4-45a7-8baf-7dda89401c5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4771479e-5381-4579-8c0e-c6a549d7a02f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a6b581d-3ef2-473e-b41f-782da7ed0077",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df144e8a-3edb-4ba7-9a67-3d326aaac74c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45288c94-49e1-4fd6-87c8-f3a4fccb916b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "53fbc755-63ab-410d-8030-78fbebf70db5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61e45aba-598a-43af-9ad0-e388266bc7b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bfd8906-653f-42ef-88dc-3e287ead3b99",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1576301d-d8c5-4e4a-8644-5172bf489397",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "894dcbcf-fd86-4109-82dc-d173742bc9ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfc4111-717b-4627-81e3-68c4357a3ab8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6433e3c-1c4a-4606-b53a-52e9472b4d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02972a2-d540-4cfc-88e4-daed1e84b06a",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d4433e8-025f-41d5-9bcb-211c8e7282d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1786f2-4d7f-410e-9a75-1c6f0a05c0b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b679f48a-f319-462b-b9fa-f6ecd749e2fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93fbc57c-92e0-4c22-8e9b-48589bdac26b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "701fe753-862e-4934-87b0-8f69b81fa22f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74eb4938-cf40-4c85-8219-be7ea1ba0283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "118c70d4-0985-4b26-a98e-0dd87eaf3f8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79b177d5-0109-453f-9c32-8cf7bb8364b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66d18de2-1daf-4942-9b10-14229947c451"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9972e043-ddb5-4cf8-8908-45b8950d6972",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "841f777c-da9b-4ca8-bf2d-5afed2099b96",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50526cdc-e838-4f12-96b3-f5945d89ef1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e649af8-9f98-4c68-9986-d6c8c67f7577",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc38a1bb-6c87-4c60-8dcb-b086d3a71d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f933d21-40d5-4da9-bb18-7a98571e96ab",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad231794-c3ae-4d27-98f8-022b86275a28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "342cf872-1e73-4ef6-973f-12d947b169f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05d5e375-e054-496e-bc5e-50f248ed36ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "133c2530-6674-4943-98b0-7fb8e8dc5f9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c93b14be-416b-4e4c-916e-24021480b8ab",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e4ffae-2d08-4abb-9430-0234075a7567",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16ba1a0f-6d63-4467-a993-79bf3ed46cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a751f4-357c-4a08-8118-10e434319caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7865d662-e43e-45cd-b396-84aebfd00f05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "183ec046-4dc3-479b-b124-509b75475b43",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06db792c-a289-49b8-86dd-20b58c542d55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e074140-d330-4927-b061-49dbee7155d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e04d6c4-5dd8-4856-957e-7892e7d9d923",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce5f91d3-2b0f-4043-be7d-40fb6f419486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590ee4f1-6d50-46d9-8e16-789eaa069825",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92f33b7e-7073-45e9-b87e-228357185fce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d65bde1-049d-4194-af43-c3570b814e1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ad8995-26d3-4945-8646-0547f32472e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fcc0de11-3652-4d0e-9773-d749e2ad53a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa7932ba-b003-42fd-ae9f-33ee59c49c38",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2f6f5c4-327d-4b05-9615-b39f42a8617f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd9e98be-1ea5-4ba4-b83e-c9e463f3de9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3ffaf3-39d5-41f3-a54c-193d7caaee3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf058709-f99c-4727-8483-2aed1843d649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31b4808a-b38f-44cb-ab5f-5fee234392ce",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68de2ede-fc19-4e11-a422-241cfffce038",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4af7e78d-3cf2-4a91-916e-0a64125f8fed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "053cf5a7-b1aa-4521-ada9-8eca1aa77fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f9d3f1-420c-4ef7-8de6-eb1a9a68c4ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b1181c9-1b6a-4476-a025-95be77d6714b",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73f5171b-74ff-4add-b014-dd24aea0be00",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "348c791f-ff4b-4d93-858e-d2d2da678246"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07cf267-664a-4549-bd7a-5ec1f5d6f334",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a6bf69b-d14d-46c5-b5cd-832dd856a8c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d79466ff-5e94-48e0-8ee6-184fa8acd1ed",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfb637c-7bdf-4e3e-bd52-414fa0c6d7a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d81d474e-d19b-434a-9a0f-49314498e003"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ba934cc-77ca-4d7f-bdf7-4616e1c49234",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9029b930-4bce-495f-b27f-0d4dafd86cc8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5694620-4e36-4bd9-8a82-225069c1c5c3",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ccfe134-b102-4653-8cfc-b94b470b55b6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d191a4d9-1ef6-4cdd-9f61-bc4290fa0129"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21678a3-86dc-417b-b8b3-f55b0cc63394",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9f0e7043-04ae-4115-adde-a49c3fefa660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffa091de-793e-4a7a-a38d-f63db2a00d20",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0db6ea1-5753-4884-a4f3-a544ef3eba78",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0cb67d2a-f0bc-47cc-a8b3-fe8a5c66b71a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0484b6-87dc-448c-a1e8-b6492182a775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6917e5b9-3efd-43e7-bc12-3dc493e84443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f42ec7-4903-448e-92a8-ed66a5ff642f",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae527885-d8c3-44a4-8c27-3427490b242b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb0af9f2-e4b7-4374-af69-f3a2e231ae34"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f439c23-1fb1-469b-8967-3019226d49be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "562f2bba-2d60-470c-a15c-9697214d8983"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbe61128-80f2-42a1-a04f-989937726611",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "789093fa-37e0-4aa4-8d67-9ef655008a23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c8f2824-7a00-4729-82b9-41952d820052"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e7b4a49-9e9e-4f6f-95ad-2cfeb93eeee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1c2252-8c98-4c61-80e3-42e34c24e41e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0777522-8efb-4e3f-a016-efe661a4a3c5",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da876bee-ca01-4ee0-a969-2ff3089cc304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9753602-5f69-4dc6-a39b-a1b27c3d4e6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3897981-8adf-4249-9632-5b9d376bdf2e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22ece033-a1ab-426c-8ea6-a2e470f22474"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eeeffb5-8c2e-40d3-a197-06eb49df32a1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe600613-bebf-4bf3-bab1-f092e9cfb10a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775b9bb7-34a0-4abb-b1b0-f4adaab2b88b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "621b21b0-bbdf-4048-93bb-787aeefd5bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "775a16c7-8366-496b-94fc-2f358bdc3e04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4de1c41-557f-4a5c-b69a-3190f36cfed9",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44c4b737-4598-4e70-be0c-28c684b496e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43d3c67e-87ba-468b-ab8a-e062b1072ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ccd2eb6-f18f-493f-a0bf-553e1c8c2769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e79d78-4e62-4e2c-998b-a922da041ea8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e7fb5b-42a5-439f-a6be-c87948194ce5",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cd439c9-f983-4f39-a020-93710aa5ae32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "293edc6f-1f7f-4e6b-a082-df80681afbf2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20081727-2578-4165-8f46-8ac186fdfb68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ec99c86-ba86-4f67-b763-4d939b63c66e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d673a165-3e45-4ccd-b583-b03cad2546e9",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "598ec905-e514-4c9a-a2d1-d6611f98aabd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b4d2ff8-b55b-43f0-acb8-f64ecd51fa62"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9882b3c2-5c5b-4a85-9ed9-c3a0f4a59041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e2258b3-1389-497b-87ef-083ac9f8d819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16822834-cec8-49bf-892a-230db0ed7010",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48fc549e-52fc-4199-85e8-acf6c46d1fdc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "744fbf54-cd27-4511-8d22-2cae02452550"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5c49025-4e70-4056-a4ad-f7aa0e490bfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b764bc5-1cb5-40d7-8ee2-0cd728fe5679"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01a956a1-811b-4f07-ad36-b55853976db6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dca3924-0703-4842-a7a0-17634fc48b95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b15d84b-765c-457f-8f61-6b547b1f9714"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f22344-8a65-4f48-bf21-a8984497400b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10021b88-586c-4634-860a-54f500b6fa17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a2a361b-8063-43ba-a1d2-d93ed2ac0724",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01a92211-bccf-4832-ab24-00ff61ccf1e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75f310d-0cff-43e7-bc2e-ace4f21c2085"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcd85a7a-6ddc-4321-b9b2-448f8f330128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3faa44e0-9e98-429f-b338-f753d2a5448f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efafb54-41c5-4fd5-bf9c-3b91af400841",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3d0df2-53d7-42f7-9b3d-9ae61109b650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e764efb1-c0e2-4745-a5a0-4fc186552be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a683aec9-86d5-4158-939c-981a1e5382c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c535abdc-34be-4cd4-a4e4-163b40034614"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3076e65a-043c-4869-b4cc-0869148b596e",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30cd6151-b3fd-4407-9c71-6026c59c376b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5e57228-af75-41f7-a717-cfe22b57515d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c213108b-1760-4da3-a8ac-298710ffb39d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9bde702-3d67-4e09-b692-2a07c57f831b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c10733e-6a63-4f60-81bb-b60635f33b49",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61461ea7-42a3-4d3f-9a20-17c5cdae78c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21d1b576-08e6-445c-960c-839a1fb4b5d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b931c3a-e139-41b3-8509-5daee2e6b837",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a924ce-10a3-47a0-967a-37d34d6cddb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf293e89-09ca-44d1-8c7d-6dd0bd9d7810",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f461cb3f-6af8-4e05-b796-f2ce951d3a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91130a76-8ed9-4b48-aef9-0775efaa0b5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bc6e390-6bd6-4e70-a77c-b1428f43184c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed81ad6b-34d6-464f-88d2-e6af59b81ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6488b780-7e7a-4d5d-a8f1-46d67eaed62d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ba0ea13-e683-46e0-b735-0c4b3aee4a8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4cfd43-ac51-4275-9a82-8de65d5638d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3023ca-bf88-478e-94e8-3407f1535fef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "747c0f95-334b-4e52-b4cc-3d625046c840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d891e8f-e3ef-4519-b8ab-86a0eecc6802",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "672a4718-6798-435b-adf4-4849d104a78a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a550bcea-ef31-4055-9d11-98c494416532"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "baeceaee-679e-4ae1-9f78-dd7d8574a78c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d8f1b18-5d7d-4ff4-a7e1-af05512f93d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff4e6321-27ac-48bf-9ad4-cba71c2efc2c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a814a10a-0aca-43a6-97ff-8738ac136ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "570b1b35-c4b4-4a5e-bb34-497fa72c81b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afd5f3a9-4773-49d0-b818-de2b03ee0caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5395340-c1e0-48d3-b4cb-1a99fe6d9273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c046be90-8b3c-405b-8106-b9c9dfec6116",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6842cf-a73e-479a-a4fd-82953703e468",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7eb08f5-7a49-4276-b281-3781a1b38f27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a3fe8a9f-e7be-43a0-854c-386b09bcfad6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37b3a971-c6ca-4f3d-99de-c235058d1ca0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5db24705-b1af-4ed8-9b7a-5a9134a54fd0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5294b8ab-5aa6-4311-a14a-581923e80092",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c667bfc-d3ac-4b77-8eb1-c5d0e587062a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "316dbe06-e8fa-4519-aa21-cf4b589955c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "076f1041-b242-4df2-8d24-1a5e441e9d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666f0530-d67d-4018-ae32-870567a7fdbc",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a725c9-2cf8-4baa-9c0b-b1bd2375ebd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f959673-0ac8-4525-a8e6-1c171d21f0aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cfa0b96-3a67-48c3-af47-3d434dda7a5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14785980-c0d1-479d-8630-a56bfe2e04f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55f2739f-8c2b-4de0-83b0-05e2a7900821",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93ec60fd-5479-4224-b1ed-1a1f065411e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08267d38-99d1-4012-994d-a20a4fd63224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6eecd30-9e89-4555-8b0d-c4c886ab1333",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7430579-588d-45d0-a420-4fa3502f39ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c245bd97-06f0-4609-aba6-f36418918ba4",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4238463-c208-4e5b-95c0-c256b25ec84a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ce85084-114d-4fe8-9854-f9185426c114"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "744837de-5728-40d1-a8f5-964f57cd5d80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b9b053-e2af-41f6-a4ae-6936996af46b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e51caad-b9b2-4bfc-972e-d3fb9999323d",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d40d0c-7e3b-4fca-9cec-05628d6a35bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42b41be7-1a85-4b4c-b669-a456e89821c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35393b4-f5bd-491d-bdc9-cd6affff0764",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "809c63f3-484a-4290-ac9a-48636b35f227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a85be991-b2d7-4925-9b6c-109ecf428d1d",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "321e1932-0d16-4ae6-841c-23837dcd7320",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06e883d7-a685-479b-a0a1-9db17ab3d2ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9539fd65-a7e1-45ca-a935-bb0c5a7c72c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24efae4-3f58-49e0-bd09-1e3cd762e417"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f38af37-b3bd-4558-9f13-64c46a89f12e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e869d629-2213-4c6d-98e0-295f0f6364e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91724445-91b8-41fb-a72f-51063ae25fc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a1f5b4-abb4-4dc1-bed4-a62cbe853dd4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae04687f-3d0e-4159-ad29-c5f249db975b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "000b9b67-3c57-4f8f-bdc5-b44268dc1600",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aad2a816-ffcf-4bbe-9a30-dae4887dd5d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05679d0-973a-438e-9f31-a78dfbe8f9bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0641de65-77fb-4755-a850-840ceea58cec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e43e3c41-cbbc-4bff-b64b-f7390f69fcb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50667973-0f15-4273-a594-83314c08c15e",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a74ac9-7c90-4411-9af3-bea965570346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "82f92aa8-d67e-4cbf-a079-2e6da945c4e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e24436f7-2033-457d-8753-a849e8196b31",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcfe4fdb-0ee0-428e-8f70-c2a4eb969ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77871b0d-de5f-4299-a388-541b848bfd3d",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be233031-1740-4e4c-917a-dfabcdcbf18f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4d6a522-6326-4f7a-b04b-a1675e9dae2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d441107-c336-46d1-a84c-2d06c0c0ccfd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5087f484-0251-483e-b7b2-8180ca1d04d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc29e2aa-61c5-4406-897b-de84560ea481",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f39dea0a-de11-40c9-9250-e16c42bcefef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41312d1-17a5-45e4-b586-12d43f8440e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1b3701-7d6b-4442-817b-70639358f4bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0253f7f-27d1-4e60-b28a-14f087008dc7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2146a9f-409f-4367-9daf-0670d75fb388",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf24c733-df4a-4769-a5aa-910f5b709115",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "31f3d1e5-e362-4a58-a307-0d64adbe81db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "285bde89-b0d4-48d9-b12d-2e32f3a9d743",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f655a0ec-f8a4-4b13-a484-073c3b91fec6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7d55699-3f21-4390-a79b-c6dd1e257182",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "144e138f-deb5-4c75-b64e-aaa12c7be810",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d65ca0b0-341f-46d0-9ff2-8cc4d21759b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b4fa963-09e6-400a-980c-193d39de237b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b5370d9-5eda-426d-8b8d-328392a533d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f264e0a-7952-431e-9198-eadb76c7540d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90d07559-43c6-439c-b997-4d4c566c3bab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54aacff3-07db-4c56-af89-4a81680f05c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd46b5f-841c-4fd2-b90a-19270856786d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481e5aa8-b98b-43f3-a50e-4a370a0c1992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c46f33-596f-49d1-8623-b025a129a846",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7740d0d3-4dd7-4a53-8643-dbc58362335e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "10beb7ed-422f-4b3e-8dfc-bc903bcc15fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f77b1b-9978-4d3d-85e1-b0b11e722588",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a862a18-4020-4154-9fd4-5e4bb907cab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5796c46-e00b-4cc8-a684-91877b6cbf9e",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45cf4846-5fe2-47f2-9fb3-a30b7b27586b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c80f39f8-c5d4-4035-8bb8-4c0ab4370461"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3514c2b5-edb7-4093-8e2e-550c87971c98",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6db693f2-5d40-400c-b0c5-3d6b67d6b034"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ebc5627-0451-4d79-8e93-561e8571bf41",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a977f682-eb5a-42dc-9cec-3d28c6d23054",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03cbb1e7-47e7-4e1a-9260-7a3be9581ef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc7293e1-9ade-4c7a-b410-c38c404071d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32f8b5a1-8f93-47e9-8d22-a184f73ed578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7df521a9-418f-4ca8-8a05-e70dc4cbd5af",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1993bdac-406e-45b4-86b6-74727df41a82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54cdedb3-dd4f-41b4-9674-4469ee743ab0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6cf39fd-893c-4198-baa3-8fac093f8ad8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e98494e-47b3-4482-8eb2-f02823ae044a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95d8f9d-8d9b-4e68-a573-cd7a27a7a82d",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22a689bf-c8d5-4d15-b810-0e4238936e73",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "741eb912-896a-4058-baba-c5091582cb7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3700769b-2485-4702-a4a5-edb00d67a44b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d19a336-e708-46ec-adc1-ad1ae5eb50c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b0e3e4-1a75-4679-a3ba-1c780f547c6c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d1c4727-3707-4678-ac90-0a20e3a4bab4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89d73922-3249-404e-903f-e1a103afee51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57f75856-308c-4e1a-ae45-f085c38b4a44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95744426-9884-4c3a-9737-6b402b684dce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dde0302-3af0-42b7-b2b2-fb6eaa84ebfc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166b55e3-a4d4-453b-90bb-789497f38d09",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba57ad69-046e-49bf-a96a-1e7cbe1cc0f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68afc28-7608-414f-be8d-31547968baa9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d454172b-441b-4883-a0ba-47cf529463d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80950b1b-990b-4f67-9a22-c0337e3002a3",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3e5fd5-7d3c-461f-ad78-f95cd7c7c6f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3d6a208-476c-4cc3-9e36-cd67ae3f6432"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64f0c47-89a3-4a7f-b94d-b034f847c6c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24d9b8dd-1b25-481d-a7b6-7b5a2e0e80ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a42817f2-a573-453b-b31f-9c8662c1d1c4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b48c374-6f56-41d8-8af8-239ab7a0116e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0504ddd5-c022-4563-a292-ded10eaba4fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63eb5939-5ed7-48e6-948e-150ec325d5de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e05e2da-c064-4903-bc55-f45f01d49038"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec521ec3-88de-49a5-8b32-b6c7fe8c94a0",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "372a75ac-ee61-4188-a4b5-7edae8cebe9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2173dda8-ed07-4c95-8868-8969dc58071a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30126e96-1571-4f89-b7b5-1f0e7bcb8cc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8529f41-637f-4967-8c3a-caf83153153d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eec9635e-02dc-40d7-8798-4c5572e8230e",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bfa5ee1-e661-4de1-ac2e-145a45e9d512",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "66ad62a9-e457-4c75-849b-0ba212797d80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "542edbca-bb9f-465b-9eab-9ca402747ab1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5493b95-82bb-44b9-8eaa-f294d525f8ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf5a125f-fa5c-4325-b59c-3e00e03016b5",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ee8b99-ca52-4a37-9736-7741593845ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e75be179-3f26-46be-bde0-fc741b2f7880"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a869bbfa-6f6c-46d1-b607-1dd078e76944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8206977-7e7c-4483-8769-4110e989b67d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004800fa-86a4-4d0d-9aa1-0b3f0da3f4a5",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54bbd165-dec0-44c7-9b7f-6eeb629d43cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "565e01e3-d03d-499f-9f9b-c6afaba3e6f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c760a9-7723-459b-9005-ec660d08644a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfa2b593-55b4-4d72-af1b-9b8dbf75276e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1106cd95-8dbb-494e-a9ca-27b85555cf22",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb4ec63c-1a56-4fa2-8129-c93410426282",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "023cd9c5-ba32-4c5a-a82f-7f79f3144187"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bb0f5ce-a225-4379-83eb-328e1298a01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b79f8f7b-49bf-4c74-afef-b9316bf2e2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4acaaafe-42db-4149-bb66-0c8d6d7939c6",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8edbd269-6d2e-474e-9fcb-ee5a7aab4a2b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03b895cb-5065-454a-b087-7ccc1c212715"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc53f49-d1ab-4ef4-962a-2c2db02fee04",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a645c74-b9f0-4c50-a66e-614df266971f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9b648e6-a530-4313-8ac7-25b460d9dea9",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153fca7c-71ae-4a42-af62-e90426651f23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1a2a6a6d-07f8-4dca-ac0b-8acf67fdf7d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec43f468-6e0b-4c6d-a8b3-1bfa48d9c14f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9caa03d5-fa87-4a0f-adaa-941952ab1be6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d6852bd-65e2-4b82-83bd-77a852673606",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3acff060-8af9-4121-a9d3-8860eede3192",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b7c227e-48d0-44ff-b641-afda77280c6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f064c148-7cc9-47fa-bc56-1b6eb23bb4c2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b41ef665-4fcf-4eeb-97ee-5a2b3e0b1a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ddaa79c1-f79e-45ef-b9ac-a2ea0a03dc02",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3afc6b-4d25-40c9-b12d-7c571eee5415",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd973097-cf78-46f0-8499-5b9ba58c9653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2430a575-e9d9-42a0-aeb8-008a06d9db38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f64211a-6aba-452d-a341-0581d6326eab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29948402-a812-4c88-b88b-00f3065db1cc",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4026329a-2413-4a97-8934-aeb08a28dbb9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e398024-9b1b-4e8e-80cf-7a735b3a1292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c35f36a-4f85-49d9-ab27-69c0bc4d3979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85f016dc-4064-4cc9-a314-93d0fd74aeba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "032e63b8-9956-4fda-a291-9e7568919919",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "239fd1b6-c046-4684-a2bb-af26a0566cf4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c29c8eec-e905-4e81-856a-afc245c41503"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b39cbfcf-f884-46e7-8ba6-86535c02b081",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "871974ea-2c54-4394-a2b0-245eab6ec28a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15276c02-a947-4498-abef-8075a13295a8",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0028ae1b-773d-499e-b92b-cd60c1f0e761",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42985f15-6200-4644-b4ef-4a41925c1d82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "821bb8f4-6f64-4cf7-bd26-e8a2186b61e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cda894f-2143-4975-a229-26af295627f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8add8314-f0cf-4560-8ac5-bf628668c37f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbce6bc0-e2ff-4c85-a4de-dbdf0e13b5da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed75a056-6727-4432-8224-34e39f0e02c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a6dad70-af52-4d04-8428-f983cc6e3e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "740f35de-9400-4320-b369-085225641196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49396860-263e-44f6-ba19-9d54f6972d61",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4094afd7-81fb-4ca9-9ac1-a17658d41df9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e3a5fdcb-a48d-465b-a618-f501cdd530ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0804618-a714-438c-8733-b488bfd777b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d4aaf49-1df6-4fb2-8952-0bad93060930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0dfdd4aa-e4ef-4fd3-9008-8854fcddebbe",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19e77f5a-8636-4199-88f7-2fdfb1aa667a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6256b4f-9131-4381-a1ef-a97414e1efe7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "086be1ee-7b19-47a9-86e9-554334af44d9",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5887118e-a622-4f8e-8a5c-2b80261a1a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ead21a67-5e5d-4a69-891c-72bfc6384fe7",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940c3387-077a-49a1-a405-7177eddb5732",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "74878817-72ff-4489-b6d3-de650a470db1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c768f8db-a9b8-46e7-9647-b104dee988f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4e183af-aed8-4675-a630-fbf79700f8b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "837fde67-391b-4dd7-a32a-0a36b217dbdc",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b9872d-ac49-40bf-a9af-140f1fc25966",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bd4f050-ba63-4310-946b-a94b5daec3fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e76f46-a966-4aab-88b7-857b62bc72cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "677475ef-1489-4523-ad32-f40dad0b12fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04edf4eb-f486-49f1-ac2c-5e83ec45a79a",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367e4a9b-8526-4d43-88c2-747698ea047b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02ecd65b-521d-4b15-a04e-675e8b54a0d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdecade0-1c17-4b48-a99c-c031a9edbaf8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cf25fca-5b8c-4d1b-81b8-dbb9e1b23ea1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45129636-2261-4f71-8fea-f2fdf978dadd",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a91a8fb6-3f0f-4317-889a-361c0b934902",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d578f632-2527-4910-83a5-d890f184376b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e05bbd-690e-492f-9782-042c6362e0ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3519c226-6e22-4e8b-8331-e9c9a1b58c5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929f5844-2a8c-4280-8015-2855d38d1485",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "251622a0-cc49-405e-901a-76b2878bf1f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a2d7e59-2530-40c4-a655-3bf490246f1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce1b161-6aba-4032-990a-fbbd9ade1fb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e820ad7-5e76-4ecc-83f6-03c21abf7b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7ef9fc-ba8d-4eb5-ba8e-a29f2cb4c254",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d349a734-8cff-4f07-8413-12ba5e085b9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9417a0b-962f-4299-b4bb-e392a08a5079"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51d7c10-dd87-4f62-ba5a-2ec953b14764",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "571df327-ceb7-49c9-a4de-5ed898ff2f24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c61e7292-05e9-4899-a467-929ea9222cae",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124cf3d3-6298-4396-b221-634bfcf6cd83",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c24b0ce6-1220-42a5-a5f2-abdefc770d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc5307eb-3784-40d3-ad58-127186f965ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "197382d8-e4ec-4cd8-89e9-a30b88af3a7f"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a112088a-5e88-4ffb-af94-8bc3bb77ecb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "907ebfdd-b2b2-46f6-a508-1582d4937472"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "295cc69f-f397-4856-80db-b637eefde51d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "beb5b207-5e95-4977-85fc-d1792beaefa6"
                    }
                  }
                ]
              },
              {
                "id": "536fc5f3-30b0-4b45-b227-346f99445027",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ae1ac84b-0c08-4117-8a1e-8a9f76e3b1c9",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4ef2f9d-2fa0-4c29-bcc9-4b7f5d254af3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "75777c2e-b716-4cb0-af9e-9a7be730ca00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "073ade72-c2fc-4b61-b365-aebe1195ab9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "068da8f9-1eca-4272-9b93-07b7e5d90751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21738103-0371-48c9-9a5d-8537d8e948a8",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8094c42-34bb-4f07-a92c-805897cd778f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a123412d-31cf-45bf-bf38-c11cb0fb2360"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25034f74-b86d-4abb-bf83-8df2a51793b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f407ce28-8470-47b5-8603-6f42d43a465f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0fdc1647-d889-4e32-804f-b7acd40b212b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a1b88ee8-604a-46c4-a268-3128716548b8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "cd06c1ed-65a3-4f09-8155-3aa0aacd2307",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03e7a1ff-c273-4792-9f87-e4da58232f36"
                    }
                  }
                ]
              },
              {
                "id": "533d318e-50f4-4097-8474-4859781c0866",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b6e00f9d-7671-4566-8934-cc5b256c26f4",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67f70eab-2c1a-4f4d-b0f1-452536ae3f2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "66813035-1dba-461a-b451-a7c51f93e4c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca3aa9e7-e55b-4d0c-8bb1-7cb96bc24340",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "470b9d3d-5565-4268-8ddf-136134a3d3f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "911b36f9-9ab4-4a33-9455-c3eeed340f6c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c34a8e11-4ee0-4ef3-b8ec-0c3c79cea135",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "90e090e1-e1dc-4b0c-948c-ca60cca33fb7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "65516ef5-d182-4c43-b70e-45467aca1fab"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "7e147f60-16d5-4765-bbac-9b96f986b0d0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e800ff1c-f0c3-49fc-87c5-3c9a9387ea3f"
                    }
                  }
                ]
              },
              {
                "id": "70fbe4bc-5710-45da-a4bf-9acf37d803f9",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "72efec98-faa5-410b-ae9a-0c398a1cde3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "0227e8a3-57f5-476b-b2c0-a765cc16846f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f520a686-756e-4731-9ebd-9bb342ed3163",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5e25b711-f93e-478e-94cc-b1646f8a2f1f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "535e7089-28ad-48bc-bcf5-a82508148624",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "bb3ddaa2-59eb-4c27-bef0-93bb29053767"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b0a2267-2707-4c9d-b496-156923d4f806",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e38506d-77b5-4969-a14c-b40f2aeb920f"
            }
          }
        ]
      },
      {
        "id": "6aa37523-0f80-4b1d-b0dc-f4fa5a63f58a",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "36607b2b-1557-4b60-a548-04522aee2d01",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9b26cc1d-518d-4f19-9364-decf27f02812",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1ee1523a-930c-416b-a333-e9dc8d800d9a",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20149ac3-11a1-45f6-8791-ed84e6a85501",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ae0fee94-c34a-4d3f-96c2-8186d76fc335"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863ea10f-59c3-4418-9925-1e51b469c6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c5f0aaf8-af15-4ef4-8463-ffd5a093fa68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd5769b-8ea9-434f-8cdd-d1219a87a55d",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bde6ac9c-0b0f-4d1a-b2f8-83d9971d420d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "6bc49d3d-4c81-4614-9430-3dc80a2f72d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dda9a5d-c5c5-49e1-b271-2f017e30a650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dec6aa32-4660-40da-9dd7-3bad68d782de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "446572f6-4deb-451a-8a07-62e3a0347eaa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8a3cc09-6f64-4e55-8be3-9022836a019b"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de43ec54-be57-489b-849d-5d34dfef5d49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5414e881-a35c-45b3-a615-639ab94a178a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0412029a-ccce-4555-a755-33db7fd24549",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ac0d614c-f09e-4413-9cc3-81c65afa7787"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "22bbff0c-0176-431a-a047-a3b6cf355338",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0b974234-916d-4e0a-8c68-9b3f87d5fbdb"
            }
          }
        ]
      },
      {
        "id": "52da6e4c-468b-467d-b1a6-1d5e340a4e6e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6468048b-6271-4698-8282-27b2cbc71f4d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e9f8c04d-793b-4191-840f-9a05b1b73a21",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b8438fd8-3a93-4697-97b7-4fc61b68752d",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfd9c1c6-e8c8-4022-b9b5-bdb616ea911b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76f1be15-7b92-4d72-94ff-db379c6374e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bc622cd-41bb-49b6-986d-0b4bd67cd8d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "abb43f15-3279-42c7-9141-3eb1ea10131a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad717fa4-25cd-40fa-ac07-721895d0b0dd",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "082b20c9-a346-4cbc-a600-fc50903e9596",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "f8edcea3-c6b7-4e5d-949f-dc715a73a734"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e3eab29-4730-48b8-baaf-d57d23a6ea7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d2c4eb50-7812-4be9-9aa0-bd0dbbbd4b41"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "87c3cff7-0cc5-4cb4-8ba4-92fa5e87ca43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9126a13b-4571-4eb9-a66d-b40d60f0b3e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "57b240db-577b-41e2-8008-dec3f4d722cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "862ce39c-0b1b-44e0-8d1e-9b5034e427ba"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3cbf560f-47ac-412a-b74d-f5ca8df7f6ed",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4d56baae-d236-4c2c-8bae-8f4105f63d92"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7fe0178b-8a4f-450a-a5ec-276425e93dc3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f03aff9a-3b53-4c68-9b0d-0cf4e078f640"
            }
          }
        ]
      },
      {
        "id": "7dde4d23-5794-4ac3-bde0-00ea93f370a2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "c78dcb2a-3b59-4d1e-849d-fbac75c6d3e3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "dfe91e32-4ed9-483e-ab59-e9c738bac776",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "48b7f917-dfba-48dc-88bd-d3c096e6d51c",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc1c003-8deb-43f7-ac35-b62db3c3e95f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "448d1677-4fd9-4480-929b-3f93da5c0214"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c3dabf6-6834-4df2-8e9f-86a2dbc825d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc2adc38-d4e5-4e50-930e-4dfe66b0112b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fb4a28-f3b0-462b-8893-1b02214c6a69",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "198ba3a7-9f3f-4236-9cc3-e131b92a065a",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a9a918d5-c434-4e9a-a2a4-e0bab36b06a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9695812d-372c-423d-afbd-afac51c785b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "35c00578-2561-47f0-8f71-7d620d83f052"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0493da9e-1674-48c3-b8f2-e5568525fe94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "413e15a0-3a1e-45c2-9036-1ce52f01cf8c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f725be69-d2d0-4a22-bdf5-53994b81754b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "33e6cb21-2a35-4bb4-8dc0-e72761521bb5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8b0f8ce4-dfd3-4c6f-90d7-fb1d9effb7ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1857b459-5397-4f28-bb3a-6e4f63f1c3c1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "75b10438-f068-4217-b535-fd4a948f6ee4",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1527a143-0618-488e-9e83-7e192bf8a023"
            }
          }
        ]
      },
      {
        "id": "66e6aabb-5116-4429-9e3e-752889aba793",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72aecf98-2427-42b3-8de3-d0f33d5e5c53",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "373a189d-bc4f-4921-a66a-bca77cc492d0",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f6d6ce49-b2c3-4c0c-8a20-09ffd4db72d2",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0aae217f-8a3d-4ba0-a7b6-bf1e328aec8b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "74e28761-e5ca-4a8b-86f9-65e3df8e7788",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1909,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 260,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 251,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 509,
        "pending": 0,
        "failed": 44
      },
      "testScripts": {
        "total": 959,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 275.03846153846166,
      "responseMin": 10,
      "responseMax": 5835,
      "responseSd": 797.6546766214653,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1681432525759,
      "completed": 1681432608092
    },
    "executions": [
      {
        "id": "2f46cb12-673d-4ec6-bbf7-8ae496064270",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 251,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "515bea53-2712-48a1-8826-b3c9771d96ee",
          "httpRequestId": "0ca03c5a-41a3-42f8-9aaa-05244a312932"
        },
        "item": {
          "id": "2f46cb12-673d-4ec6-bbf7-8ae496064270",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "7c92a66e-fec8-4bf5-be33-114eef24bf00",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 0
        }
      },
      {
        "id": "f0245883-adca-4cc8-809b-47dba1a9dc92",
        "cursor": {
          "ref": "194547d0-5989-487a-a812-014bcf3e49c2",
          "length": 251,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "96cd90a8-87b8-4788-9920-4bddc7410a01"
        },
        "item": {
          "id": "f0245883-adca-4cc8-809b-47dba1a9dc92",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "18cb737d-6f68-44d0-a91a-9a4ff16a963e",
          "status": "OK",
          "code": 200,
          "responseTime": 10,
          "responseSize": 0
        }
      },
      {
        "id": "3db483df-ede8-414f-96a5-c667f495c4ef",
        "cursor": {
          "ref": "78f730d1-d85b-46f8-8741-8ea3ac3e4df2",
          "length": 251,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "062d4a67-cfa8-4c8c-b8a0-9f24b815fc96"
        },
        "item": {
          "id": "3db483df-ede8-414f-96a5-c667f495c4ef",
          "name": "did_json"
        },
        "response": {
          "id": "0c490894-fda8-4770-886d-2f5feaefba59",
          "status": "OK",
          "code": 200,
          "responseTime": 389,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd44b399-5c2e-4801-92be-a5b7c3e85a7d",
        "cursor": {
          "ref": "fda59ea1-b7bf-42ca-b41e-9564b5281bb6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1f0dc4cf-7980-422f-9dab-ea95dc03da44"
        },
        "item": {
          "id": "cd44b399-5c2e-4801-92be-a5b7c3e85a7d",
          "name": "did:invalid"
        },
        "response": {
          "id": "41be9859-cf71-410b-8d20-deebe6a03cac",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3560,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "cd44b399-5c2e-4801-92be-a5b7c3e85a7d",
        "cursor": {
          "ref": "fda59ea1-b7bf-42ca-b41e-9564b5281bb6",
          "length": 251,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1f0dc4cf-7980-422f-9dab-ea95dc03da44"
        },
        "item": {
          "id": "cd44b399-5c2e-4801-92be-a5b7c3e85a7d",
          "name": "did:invalid"
        },
        "response": {
          "id": "41be9859-cf71-410b-8d20-deebe6a03cac",
          "status": "Not Found",
          "code": 404,
          "responseTime": 3560,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "7ae8e67c-7be0-4a72-b5c0-2535bd25731c",
        "cursor": {
          "ref": "b4bc2ad5-e6ab-4a2f-8f36-3f0722c4a9c0",
          "length": 251,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "dbe4ff5a-bf02-495a-9595-a0151b570065"
        },
        "item": {
          "id": "7ae8e67c-7be0-4a72-b5c0-2535bd25731c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "9315cfd2-3365-405e-9857-3123972142cf",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdaa0337-1ef6-42c5-b542-7272aa30da10",
        "cursor": {
          "ref": "6069dafc-b1f9-4763-bed8-b2aa0479319d",
          "length": 251,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "3b8660ca-ca13-49ab-90f4-b51297468796"
        },
        "item": {
          "id": "fdaa0337-1ef6-42c5-b542-7272aa30da10",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "8428fa40-1078-46ed-ac79-e8ae823c802b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 34,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c4857b-04d8-4717-917a-b8ea7434afa5",
        "cursor": {
          "ref": "4ad8b04d-e275-48b2-94ca-efe86f3c1211",
          "length": 251,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "00ea9407-eba2-4229-846e-18592bee3589"
        },
        "item": {
          "id": "52c4857b-04d8-4717-917a-b8ea7434afa5",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "f97e40bf-57d4-469f-bd01-2e97253fc340",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 28,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "e4d9b8e0-456f-4553-93e3-7e6522550b6f",
        "cursor": {
          "ref": "9f8d9349-6296-4347-89a3-fc5c2854f159",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5d73fe86-2a72-4f1f-a032-5233c891cf93"
        },
        "item": {
          "id": "e4d9b8e0-456f-4553-93e3-7e6522550b6f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d833c62d-3490-481f-adf6-58710f7c8d7f",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "e4d9b8e0-456f-4553-93e3-7e6522550b6f",
        "cursor": {
          "ref": "9f8d9349-6296-4347-89a3-fc5c2854f159",
          "length": 251,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5d73fe86-2a72-4f1f-a032-5233c891cf93"
        },
        "item": {
          "id": "e4d9b8e0-456f-4553-93e3-7e6522550b6f",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "d833c62d-3490-481f-adf6-58710f7c8d7f",
          "status": "OK",
          "code": 200,
          "responseTime": 57,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "72a49708-2449-44b8-88d3-165941b6efa4",
        "cursor": {
          "ref": "a2114990-8bc6-46c2-9280-43d43859802d",
          "length": 251,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "69a6f0c6-ff07-4509-800d-9f8b0b4eca51"
        },
        "item": {
          "id": "72a49708-2449-44b8-88d3-165941b6efa4",
          "name": "identifiers"
        },
        "response": {
          "id": "3ac64256-898c-44f4-a2c4-0c194ccc1f26",
          "status": "OK",
          "code": 200,
          "responseTime": 44,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbb9173-058b-405a-ab6a-b8e28d0bbc53",
        "cursor": {
          "ref": "6ca0e6c5-d363-4c59-8708-28ec45e4f385",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7fb6e253-3b68-4004-9348-3f0bb3d5c63b"
        },
        "item": {
          "id": "ffbb9173-058b-405a-ab6a-b8e28d0bbc53",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85971d81-f200-49bc-9402-d1be7b3b926a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffbb9173-058b-405a-ab6a-b8e28d0bbc53",
        "cursor": {
          "ref": "6ca0e6c5-d363-4c59-8708-28ec45e4f385",
          "length": 251,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "7fb6e253-3b68-4004-9348-3f0bb3d5c63b"
        },
        "item": {
          "id": "ffbb9173-058b-405a-ab6a-b8e28d0bbc53",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "85971d81-f200-49bc-9402-d1be7b3b926a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b15f83-b199-401f-985d-19e3c975d217",
        "cursor": {
          "ref": "819153fd-5dfb-4245-8cba-a734a868659a",
          "length": 251,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "8955ef36-ff2a-4b75-9bcf-878214284923"
        },
        "item": {
          "id": "51b15f83-b199-401f-985d-19e3c975d217",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "891b387d-23b1-4d6f-bf7a-84a0fdbe318c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6233249-87b4-4594-9e03-620002b70fa8",
        "cursor": {
          "ref": "d05a16f7-8832-4f10-b126-5b32851fd2ce",
          "length": 251,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "259c4760-32e9-4a04-b99f-93d9a47b01dd"
        },
        "item": {
          "id": "b6233249-87b4-4594-9e03-620002b70fa8",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "b3f135f6-ae86-41f3-a87e-6380cbadffcc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32956a95-ce8d-4af9-810d-6dcecb2a51e3",
        "cursor": {
          "ref": "e5b50557-c642-44f9-9b86-d7ea3f1acdb4",
          "length": 251,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "0870b8c7-3d2b-4b0c-a6c0-1badddc7d1d1"
        },
        "item": {
          "id": "32956a95-ce8d-4af9-810d-6dcecb2a51e3",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "89dfe4ca-27a8-4e50-b99a-a0b8e62609e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0dd61f2-3748-48d6-b8f7-2133e117b9b2",
        "cursor": {
          "ref": "d15699ea-def6-446f-a0e1-c435f904351b",
          "length": 251,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b1f61eff-a7af-4cf7-92fa-047f503be31a"
        },
        "item": {
          "id": "c0dd61f2-3748-48d6-b8f7-2133e117b9b2",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "069065ec-7f98-42e4-b707-6fb8d0ac07be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ea2a9e-e366-4ef6-8bfb-6890a33457ef",
        "cursor": {
          "ref": "fe82e903-3ccc-4364-8114-74b207af5846",
          "length": 251,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "fc282c83-ca46-4d12-ac2f-8e545053aa6f"
        },
        "item": {
          "id": "f9ea2a9e-e366-4ef6-8bfb-6890a33457ef",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "19481fb0-d7f5-4a6f-86a9-c9617f9fa1ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a305c690-b47f-4f20-abbc-2d98f41e60bd",
        "cursor": {
          "ref": "7264c135-1e9f-4d54-b3c1-5375336d5df0",
          "length": 251,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "5b07ce34-216d-4afd-95d2-c22c6b77fa68"
        },
        "item": {
          "id": "a305c690-b47f-4f20-abbc-2d98f41e60bd",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "121e008d-ced8-491d-80e9-3996f762e3d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd170ec9-94c4-4a6f-aa58-d180b737f313",
        "cursor": {
          "ref": "554ea033-ab5e-49cf-90a5-0623cc8208d6",
          "length": 251,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "57b8e6ff-e9a5-49cf-bdf4-f1476dddad4f"
        },
        "item": {
          "id": "fd170ec9-94c4-4a6f-aa58-d180b737f313",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "cf729c2c-4678-4eb7-a896-4fca3f376fdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e89cdb6e-d25a-4e24-a9b8-afc5db581bd4",
        "cursor": {
          "ref": "3e7ee3c6-6f4b-4481-84fd-a51e2b2bf345",
          "length": 251,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "9cd957c3-e6b4-4a54-a368-adae4b88d240"
        },
        "item": {
          "id": "e89cdb6e-d25a-4e24-a9b8-afc5db581bd4",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "01965a3e-f381-4491-93de-06fe8fe08bb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2498c00c-96b3-4d0e-a9a4-b353e6871ffc",
        "cursor": {
          "ref": "80ed7a87-8efe-427a-9aca-023b506d7a10",
          "length": 251,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "86c75dac-0fdc-4d21-920c-18de9a619914"
        },
        "item": {
          "id": "2498c00c-96b3-4d0e-a9a4-b353e6871ffc",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "cc97590b-f540-4a94-aba8-7135da0044e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7eec100-46d9-426d-83e6-08d3140338c6",
        "cursor": {
          "ref": "90c407b6-edcc-4b9b-822e-07072f0c8f90",
          "length": 251,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "a91b4718-3003-4a70-9341-3c6f26d91d4e"
        },
        "item": {
          "id": "e7eec100-46d9-426d-83e6-08d3140338c6",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "03151bbd-601b-469e-a3b3-924babc7fe75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12f385ff-5c40-4ab5-803a-87e260cc32d3",
        "cursor": {
          "ref": "bac4d4f8-7b88-4eba-a6ff-2d89551cdf83",
          "length": 251,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "a63f6248-08dd-4b2f-95aa-37cf02a9d5b2"
        },
        "item": {
          "id": "12f385ff-5c40-4ab5-803a-87e260cc32d3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "c2ebaef5-2c53-48a0-b836-1440e7d3636b",
          "status": "Created",
          "code": 201,
          "responseTime": 803,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "07455f83-ccab-4e3b-84d7-f93278891829",
        "cursor": {
          "ref": "3b5bc486-75c6-44c6-9933-cec4da22ea01",
          "length": 251,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "aeb8adfb-42fc-47f4-859f-aed7ec8fc5ac"
        },
        "item": {
          "id": "07455f83-ccab-4e3b-84d7-f93278891829",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "872a893a-dc71-4a0f-9950-fdee946b1cbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a65c99f-3f04-48ec-8666-4f5dfb6b5104",
        "cursor": {
          "ref": "7e380413-bf4f-4d19-80ef-c5761c984378",
          "length": 251,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "7f919c08-ccb6-47ab-80f2-5df87a58e8f7"
        },
        "item": {
          "id": "5a65c99f-3f04-48ec-8666-4f5dfb6b5104",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "cfdb5644-03c5-471b-8436-a80016d5f9a7",
          "status": "Created",
          "code": 201,
          "responseTime": 5835,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:23)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "cc4136e8-1085-4adb-a889-f01ecf7e0ce2",
        "cursor": {
          "ref": "9f207d16-d8a7-4b02-aa9f-50fbf9da3b6e",
          "length": 251,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "1fc59579-40fd-4003-9e06-dcd80bf7f949"
        },
        "item": {
          "id": "cc4136e8-1085-4adb-a889-f01ecf7e0ce2",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "41a0009b-2584-4349-bde6-fbdc8bf4386d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4cc05c0-6662-4f8c-9063-ebe00e46fbc4",
        "cursor": {
          "ref": "ab4d604a-e56d-43d7-aa87-697f6924bcb0",
          "length": 251,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "6efae14d-67ed-4a83-b0e3-99bfbf3ba11a"
        },
        "item": {
          "id": "b4cc05c0-6662-4f8c-9063-ebe00e46fbc4",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "babc8f85-be88-419e-8b4d-f40a70cb824b",
          "status": "Created",
          "code": 201,
          "responseTime": 3510,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "c6f06487-b236-4710-b854-8e0325fe8830",
        "cursor": {
          "ref": "adc13a2d-531c-4b98-b900-79a6fa7447a6",
          "length": 251,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "419a26e4-41b3-4fc7-baa7-9bd08422ac8b"
        },
        "item": {
          "id": "c6f06487-b236-4710-b854-8e0325fe8830",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "5302261b-ecfd-4bcc-b179-aa8ce7424165",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446192e4-5655-422d-8baf-2dbab9a0226f",
        "cursor": {
          "ref": "abf115ea-7688-4a49-9a1d-a8e6cb6a5ee9",
          "length": 251,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "896a5116-1d1b-4290-9e77-0b7eb0c34532"
        },
        "item": {
          "id": "446192e4-5655-422d-8baf-2dbab9a0226f",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "19d27cc8-de7b-43ea-b3e6-e269701663f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a2a651c-a801-49c5-b08e-c6b831a728d6",
        "cursor": {
          "ref": "7335858c-f80a-4038-be3c-2833cf543e21",
          "length": 251,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "08815077-e9a2-43ca-be0e-26f72a34a220"
        },
        "item": {
          "id": "3a2a651c-a801-49c5-b08e-c6b831a728d6",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "b60ea98a-214b-42c3-b9f7-5623f708b437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5d85763-c271-4c2f-a4a9-50aae9522a68",
        "cursor": {
          "ref": "c0795420-6030-49f0-929c-3942fcf0054b",
          "length": 251,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "582ce830-3f7c-4a12-9a65-89342f3ee522"
        },
        "item": {
          "id": "b5d85763-c271-4c2f-a4a9-50aae9522a68",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "8d8b6832-39f3-4ef7-a348-b5b320f05865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec1dee7f-1aee-48a2-9a3a-bf830e2fc08e",
        "cursor": {
          "ref": "ecba67d5-8db1-4a35-ac55-a94f42ad650c",
          "length": 251,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "295073b3-8991-4cc2-a920-e051d64a1c20"
        },
        "item": {
          "id": "ec1dee7f-1aee-48a2-9a3a-bf830e2fc08e",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "365312f0-cc77-437d-a4ef-5b9d557f0056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f17aa0bd-fa12-4174-ba6d-0f622376a161",
        "cursor": {
          "ref": "d44f6e92-724e-4218-941b-bfe42777dc0e",
          "length": 251,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4d1fada5-cd06-46fd-befe-3d490cb427b8"
        },
        "item": {
          "id": "f17aa0bd-fa12-4174-ba6d-0f622376a161",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "bfa0e645-1c75-4597-8e6b-b9060d967c5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ed55c6a-8acb-4530-b7f8-4bfa8e8edbd4",
        "cursor": {
          "ref": "5ecd8b5c-7d61-46cb-8942-0c70832d41d1",
          "length": 251,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "14ce9b2b-b559-4ae1-9105-4685ea79a781"
        },
        "item": {
          "id": "2ed55c6a-8acb-4530-b7f8-4bfa8e8edbd4",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a1aeb257-3881-4243-917f-0bda087d179c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e7ef33-3d82-48f1-b571-d0cb0f44eed3",
        "cursor": {
          "ref": "fe504a80-7ee3-4972-8a47-c02781a927ae",
          "length": 251,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "e127976a-341d-4e7f-a1a9-09c5b2e656d8"
        },
        "item": {
          "id": "90e7ef33-3d82-48f1-b571-d0cb0f44eed3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9cef0981-7887-4d71-8367-778839a08b90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e639f55-d9dd-458f-88f9-12c87d2a3c98",
        "cursor": {
          "ref": "1e870633-18f4-4569-9d21-c546328b0906",
          "length": 251,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "267f5bd4-fb70-4560-82ee-f7f0b1733ef9"
        },
        "item": {
          "id": "9e639f55-d9dd-458f-88f9-12c87d2a3c98",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "0914cb18-ae3e-4a12-88db-0fbbf025d719",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7027f2b-b4b8-46b1-ac28-6744915361c5",
        "cursor": {
          "ref": "bd26fdac-a2b6-4f25-9707-4b40db86188c",
          "length": 251,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "4573eda6-b5f7-4443-8c80-8f382ca7347e"
        },
        "item": {
          "id": "d7027f2b-b4b8-46b1-ac28-6744915361c5",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "1182cf1b-c74e-4b9e-9872-63b900643355",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4be7f5fa-5057-4478-8dee-a85a62f4cb09",
        "cursor": {
          "ref": "7d17f212-46a9-4094-90c9-0239ec93e021",
          "length": 251,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "340e938c-8bc7-48c0-8bc4-672bf198f44d"
        },
        "item": {
          "id": "4be7f5fa-5057-4478-8dee-a85a62f4cb09",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "25c8a1ad-851d-445f-bce1-be40349d5280",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0844526-afdc-4ea9-9900-40e0be0d88af",
        "cursor": {
          "ref": "a5c6321f-0206-47ce-bae5-8d5dfa16651b",
          "length": 251,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "16486519-6d54-45cb-b6a1-316899a979a5"
        },
        "item": {
          "id": "d0844526-afdc-4ea9-9900-40e0be0d88af",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "3cef6195-358b-4c24-8f01-773a2425d042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5a1ac84-c6e5-44fa-b395-60e06f17ca10",
        "cursor": {
          "ref": "595b0d71-2da6-4e1d-80c2-89b84cce2671",
          "length": 251,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "dca39475-d6aa-4ae1-bc7f-f6e135f7d86b"
        },
        "item": {
          "id": "a5a1ac84-c6e5-44fa-b395-60e06f17ca10",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "00acfe8a-fa53-4db1-88e7-6f9c8c9c1eb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f840b5-3b70-496c-bb95-def0d10dbbaa",
        "cursor": {
          "ref": "a20e74d9-0361-4f53-9015-ddc216478d09",
          "length": 251,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "fef94bfb-8999-4366-ae28-3c1181b16ee3"
        },
        "item": {
          "id": "83f840b5-3b70-496c-bb95-def0d10dbbaa",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "a0155996-d440-43f2-836a-33d2be3b4baa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28361586-fe24-4eef-b44c-ec42fb4926d5",
        "cursor": {
          "ref": "164f2b3c-d0f6-46d0-91e1-ab6c13d2e8d3",
          "length": 251,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "889a6354-b7ad-446d-a83e-9d5b67161c84"
        },
        "item": {
          "id": "28361586-fe24-4eef-b44c-ec42fb4926d5",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "aac77777-6db0-4154-96cd-78d9bd2cbad8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d5a5d24-3ff5-4fd2-a407-7d0264776a15",
        "cursor": {
          "ref": "d002e54d-1b42-4c5e-88bd-e35346b89aff",
          "length": 251,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3c7bc257-8851-466a-9f56-71bb327d4fff"
        },
        "item": {
          "id": "3d5a5d24-3ff5-4fd2-a407-7d0264776a15",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "9bb87fe3-ca08-40de-b12d-a9b525cbfed4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3fe62778-02d9-4e1e-ac19-d038cc7fe8aa",
        "cursor": {
          "ref": "99a42af3-9923-4291-bec4-a9775a9a516a",
          "length": 251,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "06ce9768-d22c-4729-8a4f-cce4249774f9"
        },
        "item": {
          "id": "3fe62778-02d9-4e1e-ac19-d038cc7fe8aa",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4ab6581d-4956-4f13-897c-9c2530e41cab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fae498a0-73c3-48ef-a686-91da3df6b8d9",
        "cursor": {
          "ref": "db3c462e-c666-449c-aa9d-645df2491336",
          "length": 251,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "0568327d-eeb4-4612-9809-dd0f69ba81c5"
        },
        "item": {
          "id": "fae498a0-73c3-48ef-a686-91da3df6b8d9",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "43089e40-1e91-4b27-b430-0c90723cbf79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d54238a1-a2d9-4e2d-934f-187a05bf1b11",
        "cursor": {
          "ref": "fc1a5d5c-d23e-423e-9091-3887b48ecbfd",
          "length": 251,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0855b9dd-7f91-4a68-860d-9bf964106aff"
        },
        "item": {
          "id": "d54238a1-a2d9-4e2d-934f-187a05bf1b11",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "370bbc07-3c59-4084-8f82-bdc8d99e8870",
          "status": "Created",
          "code": 201,
          "responseTime": 2473,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "01b9483a-7801-467c-b640-ab02af6934aa",
        "cursor": {
          "ref": "9c9a1117-0e6f-4b2f-9373-c9486a767f52",
          "length": 251,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e6886866-86b2-4803-b02b-2939027d96f7"
        },
        "item": {
          "id": "01b9483a-7801-467c-b640-ab02af6934aa",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "bcb4390e-2d0f-4886-b0db-d4f8cc698253",
          "status": "Created",
          "code": 201,
          "responseTime": 2432,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "d5e872fe-a9f3-4140-9471-cacb9b290821",
        "cursor": {
          "ref": "dd457464-4952-4b03-afef-424d38a759c2",
          "length": 251,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "0d56f854-b151-4b20-80cf-2b8b67b29553"
        },
        "item": {
          "id": "d5e872fe-a9f3-4140-9471-cacb9b290821",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "db3a5d47-2bb6-4331-b055-8c9b176b426c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f148ce5-ad74-47b3-8006-dbc7a0167368",
        "cursor": {
          "ref": "99f777c1-2740-439f-89f8-f0d68fbcfd63",
          "length": 251,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "8a3c1b7b-96c2-47bf-bd0c-577d3cb8939c"
        },
        "item": {
          "id": "9f148ce5-ad74-47b3-8006-dbc7a0167368",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "11e25ed4-e017-4a1a-b291-a66a9114d472",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16de441d-47b7-47f4-bbbf-1a020b3f4bf4",
        "cursor": {
          "ref": "ba578d33-7aef-409d-b01d-63b5c08b484f",
          "length": 251,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "0597f99b-acb9-4262-a24a-36440744aef3"
        },
        "item": {
          "id": "16de441d-47b7-47f4-bbbf-1a020b3f4bf4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "ea592c6d-eabc-421e-97f4-43658c575104",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caacc3bf-93af-4036-8f87-89e2d60a3f12",
        "cursor": {
          "ref": "bf6af933-bb8b-4f79-b0db-40634b64614e",
          "length": 251,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "9e9c814e-79f9-42fa-8e3b-de723688cc33"
        },
        "item": {
          "id": "caacc3bf-93af-4036-8f87-89e2d60a3f12",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "baf4a312-6e36-4a5a-b618-dd5148b7edba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b7d3467-6397-4f6c-8d2a-6bb5f60bb358",
        "cursor": {
          "ref": "17bb5ff3-87b7-4c6e-8e4c-ab2e15952699",
          "length": 251,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "8a7f4f1d-533d-41ca-bffb-4a9e529f9ff6"
        },
        "item": {
          "id": "0b7d3467-6397-4f6c-8d2a-6bb5f60bb358",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "b7eff92b-420a-42d7-ba71-72895d97a463",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25be3d22-3c51-4050-8a2b-0ab84a2321d5",
        "cursor": {
          "ref": "5508b4ea-3545-4968-9ac3-43321e136917",
          "length": 251,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "3a96f365-0341-475f-bc48-c99628c5d995"
        },
        "item": {
          "id": "25be3d22-3c51-4050-8a2b-0ab84a2321d5",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "42ba92cb-e0b8-407b-843b-fddfeff6ee88",
          "status": "Created",
          "code": 201,
          "responseTime": 2568,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "42fff9b1-fb91-44d2-9d03-1b5ce95fe4b0",
        "cursor": {
          "ref": "76ea8df9-f237-4323-9c0c-1e84550e3141",
          "length": 251,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "2de90fa7-49e6-4765-8d61-7fe20e3eb6d8"
        },
        "item": {
          "id": "42fff9b1-fb91-44d2-9d03-1b5ce95fe4b0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c95e1524-5817-4543-9c62-3dc635c70528",
          "status": "Created",
          "code": 201,
          "responseTime": 2699,
          "responseSize": 972
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "3cda9efd-995e-4728-b8bf-d980c525265b",
        "cursor": {
          "ref": "88801b5b-e6aa-4418-80b2-d7e768810afb",
          "length": 251,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "4a853e79-87a7-4a46-a246-542ffdbf156d"
        },
        "item": {
          "id": "3cda9efd-995e-4728-b8bf-d980c525265b",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "9cb55f26-f225-425d-bc0a-8f87c652b67f",
          "status": "Created",
          "code": 201,
          "responseTime": 1974,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "49a4cbe9-21f0-4e28-98f3-db62754786dc",
        "cursor": {
          "ref": "c5439f4e-83f9-489c-a302-b7964e219fe4",
          "length": 251,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7d37ba29-b633-47f1-b2bd-881f001596a4"
        },
        "item": {
          "id": "49a4cbe9-21f0-4e28-98f3-db62754786dc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "447df67e-ad48-4bce-bb71-7c54d023d37e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced618ef-a873-44ff-9558-5e7e2230b725",
        "cursor": {
          "ref": "ecdf9b02-8e33-428e-b3fa-d00808046595",
          "length": 251,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "9a44d54f-4576-40d9-9310-a63f028f2aa1"
        },
        "item": {
          "id": "ced618ef-a873-44ff-9558-5e7e2230b725",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "e59438e4-70d8-4571-bed5-89f3fe0df2fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b193ca7-8ceb-44d7-ac5d-2d29f3503019",
        "cursor": {
          "ref": "a89cdcfe-3ced-4df5-819c-8c25584a9cc2",
          "length": 251,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "28ccb8d8-ec8b-43c1-a17d-29506faa2516"
        },
        "item": {
          "id": "9b193ca7-8ceb-44d7-ac5d-2d29f3503019",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "c56bb6ce-de4c-4c40-bf97-86c4ab0c5c6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b1a988-5b00-4e97-86a8-2ceee8c1085b",
        "cursor": {
          "ref": "405509d3-f6cd-4720-97d1-d45b985d5ad3",
          "length": 251,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d6c0edb9-6ce8-473f-a663-765b2e804881"
        },
        "item": {
          "id": "51b1a988-5b00-4e97-86a8-2ceee8c1085b",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a3cc5564-8785-466a-8405-65b7e63e0dd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f9bc9e-b63d-4933-80fd-6b747782e068",
        "cursor": {
          "ref": "da85512d-a03a-4516-919f-04e884955797",
          "length": 251,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "c40f73a1-27e4-4bc2-ae62-ceeb6e0c13e0"
        },
        "item": {
          "id": "f1f9bc9e-b63d-4933-80fd-6b747782e068",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "de1b0abf-41fa-434b-9355-69a7b7a96a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a1124bd-195d-41c5-8e57-f6176fae29ff",
        "cursor": {
          "ref": "31ea54a7-128d-4e77-8575-e3e3df436258",
          "length": 251,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "5a308d18-0536-4b9e-81af-5bb061bb0f7b"
        },
        "item": {
          "id": "3a1124bd-195d-41c5-8e57-f6176fae29ff",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d249fabb-c69f-4a2d-baae-1ebcdc19bee7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd3e2cf-1004-4498-a44a-bbff110fad54",
        "cursor": {
          "ref": "d8814415-5273-4c0d-8bc3-acc77f533a4d",
          "length": 251,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "f3ba22e7-a744-4c08-8e63-573e55f942ee"
        },
        "item": {
          "id": "ecd3e2cf-1004-4498-a44a-bbff110fad54",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "1fcc9c97-73e3-4df3-9400-ca690a8d586e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bf9bed7-1527-4806-9248-cdc7648b468c",
        "cursor": {
          "ref": "2cfcce67-76e1-4a49-8357-be6dd36caedb",
          "length": 251,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "f2c1f89a-3986-4666-b606-6001dd3c8c55"
        },
        "item": {
          "id": "0bf9bed7-1527-4806-9248-cdc7648b468c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "5f68051a-8e4a-462d-b66a-d4d158bed1ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca39f08-1176-45c9-9601-28c947156819",
        "cursor": {
          "ref": "bd708a34-0451-46a1-98a0-818954cb7cd4",
          "length": 251,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "2bf28e58-e68a-4f47-b806-d8d21c8a33d8"
        },
        "item": {
          "id": "bca39f08-1176-45c9-9601-28c947156819",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "678c7d66-daa7-44c2-9d09-4cfa34bbf728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e58bc74-c241-4ba2-ac87-606c11871c1c",
        "cursor": {
          "ref": "31d4ef01-5be8-4fbb-8978-40d20431a9c8",
          "length": 251,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e3bfb1d6-76f1-4e18-b56b-d921a0078686"
        },
        "item": {
          "id": "0e58bc74-c241-4ba2-ac87-606c11871c1c",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "df2f10b1-f968-4726-937b-90d16450b18e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc04e3b-dbed-476f-a574-1ef37f6edc16",
        "cursor": {
          "ref": "8f818cff-fd25-46f6-9333-bed965c38cef",
          "length": 251,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "8e8486a9-1960-4416-9377-a4d296f77deb"
        },
        "item": {
          "id": "9fc04e3b-dbed-476f-a574-1ef37f6edc16",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "8fb15f65-847f-455e-83e8-47aaa9bb0df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6943e94f-4bdf-4439-8b60-f0f5cf86e762",
        "cursor": {
          "ref": "9a97a663-e76a-467c-b69e-460b0a7fdd05",
          "length": 251,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "6711c0e2-9721-4e44-8514-2185d78403e8"
        },
        "item": {
          "id": "6943e94f-4bdf-4439-8b60-f0f5cf86e762",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "515aa492-5b8b-44ae-87cf-ac92d4152030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6e13d7-a372-4175-a588-13549a306f32",
        "cursor": {
          "ref": "ed7a6e5a-962e-4728-b20a-ea5437ea9a1e",
          "length": 251,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "b65dd7ee-f37f-43ec-88d5-e1b098c80420"
        },
        "item": {
          "id": "8d6e13d7-a372-4175-a588-13549a306f32",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "d2550b1c-0091-4254-8260-fbd120f42438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 403,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d66985-ecc8-4332-a80c-9165e4ff7c90",
        "cursor": {
          "ref": "a17d16e6-989f-4203-aa7e-8354ca6ff4b3",
          "length": 251,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "68ff53cb-d8d4-4467-bcf4-121c85707436"
        },
        "item": {
          "id": "b6d66985-ecc8-4332-a80c-9165e4ff7c90",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "1821034d-16ca-4dac-8bac-3cc994241139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2f83a66-1fbb-4e94-8f79-ca8200ea6e2b",
        "cursor": {
          "ref": "6e050f9c-9803-46d3-98d4-782840a39845",
          "length": 251,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "fe3cba11-a149-40b9-b962-5db2b341f879"
        },
        "item": {
          "id": "e2f83a66-1fbb-4e94-8f79-ca8200ea6e2b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "02991405-c8a7-4de2-ae38-e331086e51fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "501c0d33-0a98-43cd-bebd-d28e89d9916e",
        "cursor": {
          "ref": "a5e641de-15fc-4981-9c6a-1527b60c834e",
          "length": 251,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "9d90c94a-97f4-4d11-85f1-3fc0cfbea8e9"
        },
        "item": {
          "id": "501c0d33-0a98-43cd-bebd-d28e89d9916e",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "fb708e78-c8a6-497e-93be-53a6da5efcd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af5e47e-6a89-482b-a777-d6ed5518dfd3",
        "cursor": {
          "ref": "e339721a-dfe1-4a4d-ae3d-1419a474ddb6",
          "length": 251,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "4290cf68-b756-45ae-af3d-caa70ee36cf7"
        },
        "item": {
          "id": "0af5e47e-6a89-482b-a777-d6ed5518dfd3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "fcbb9520-2d5c-492c-a98c-ec852817aa4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14c61d64-c737-4f09-89ab-fdddb64528c3",
        "cursor": {
          "ref": "9d80b6e4-cf18-4786-94d0-b93a6141228d",
          "length": 251,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "c1a67a55-771e-4e5d-aadf-4dcd7246d9fe"
        },
        "item": {
          "id": "14c61d64-c737-4f09-89ab-fdddb64528c3",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "466b050f-2972-41eb-bb2a-d4a42aae4fdc",
          "status": "Created",
          "code": 201,
          "responseTime": 2785,
          "responseSize": 978
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:71)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "54a48182-ae46-4445-a8d0-3091cd64959f",
        "cursor": {
          "ref": "4665e4a8-dc04-4115-ab1e-e4366d5f2197",
          "length": 251,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "e3ad1099-b20a-4cdd-a7f1-9b3e735fe389"
        },
        "item": {
          "id": "54a48182-ae46-4445-a8d0-3091cd64959f",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7ebe8c8d-04d7-46f3-ae09-391c3173c1a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4c26072-4d41-4ded-845d-a9b7500365c1",
        "cursor": {
          "ref": "c97f33d7-58fc-4085-bb7a-56fa085a4643",
          "length": 251,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "90ace9b2-0f56-42f2-831d-217e61607df4"
        },
        "item": {
          "id": "c4c26072-4d41-4ded-845d-a9b7500365c1",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e5dc25f8-5562-4ee3-89a4-17170c01a60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4470cfc7-0a83-4642-a956-699e3c88e8d3",
        "cursor": {
          "ref": "512b941b-2f61-4e07-9fb8-786a7687c99c",
          "length": 251,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "fd0ba238-7e62-47af-969d-67fc7ed94bbf"
        },
        "item": {
          "id": "4470cfc7-0a83-4642-a956-699e3c88e8d3",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "8daa18c4-da34-442f-bf39-ab124636b494",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca931449-88b3-4b27-a32f-f6882c354643",
        "cursor": {
          "ref": "45b36a85-5cc6-44c6-8e93-328dfdc3e77d",
          "length": 251,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "83bc593b-a609-4e1b-9318-65a7e370b4ca"
        },
        "item": {
          "id": "ca931449-88b3-4b27-a32f-f6882c354643",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "9d32c367-4273-4799-bccc-bf1511dd1e1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77c1042a-16d2-4f0a-a1b8-47a963678c7a",
        "cursor": {
          "ref": "64649f75-204e-4db0-be23-100cbbe07860",
          "length": 251,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "116d1f81-932c-4a58-b299-5d71172bb626"
        },
        "item": {
          "id": "77c1042a-16d2-4f0a-a1b8-47a963678c7a",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "33a419a9-88cc-45f4-8cc0-76fad6fb80eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "976732f7-1fe1-4c45-9f03-536f9b813368",
        "cursor": {
          "ref": "0f179270-aad5-4483-b94f-6091bded2d8c",
          "length": 251,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "f74170ab-0b20-4eea-95cb-ed7986115ffc"
        },
        "item": {
          "id": "976732f7-1fe1-4c45-9f03-536f9b813368",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f3d1ce2e-bf57-494d-92bc-b8611451e785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "383c924a-2115-466d-9612-426af4cbdd82",
        "cursor": {
          "ref": "c98ef272-3d2d-4e94-a1c5-2cf1d677f69b",
          "length": 251,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "bfc4bfe6-087a-4601-9691-27eddb77ba89"
        },
        "item": {
          "id": "383c924a-2115-466d-9612-426af4cbdd82",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "b9fe25f9-cb23-4f1f-af77-b0658118783a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a750dbe6-9fea-450c-9d48-250858b95534",
        "cursor": {
          "ref": "f0084cbe-fc30-4985-9afe-6465dd34d4f3",
          "length": 251,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0ea542b4-6b89-4d7b-af28-f854863869ea"
        },
        "item": {
          "id": "a750dbe6-9fea-450c-9d48-250858b95534",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0bdfe6f6-9e32-4e55-9512-7b4cf8ecd174",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7e62c3-c806-444a-84ed-5bdd86e0c2bc",
        "cursor": {
          "ref": "d7fdcfe7-4be3-4fc7-82f2-228552eb92bd",
          "length": 251,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "0d4fa56d-0b69-4ebd-8dcb-e690aafbac84"
        },
        "item": {
          "id": "dc7e62c3-c806-444a-84ed-5bdd86e0c2bc",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "870bc79e-14fc-416a-82b7-996f55d64a68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0af86fdd-5148-4fb9-8cdc-d4ef089542de",
        "cursor": {
          "ref": "ad6023db-972e-4d7b-98aa-99f8f0c3c93d",
          "length": 251,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "c53f8faf-44c7-41e1-82c1-4e1432aec74a"
        },
        "item": {
          "id": "0af86fdd-5148-4fb9-8cdc-d4ef089542de",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "214c3ac0-e2ef-43ff-95b0-af36f192df9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8d1e17-f8ea-43f6-8d64-ff662098eb82",
        "cursor": {
          "ref": "6d196ace-fc17-41a8-a1b8-03f2f1959021",
          "length": 251,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8bf04a09-d670-493f-97de-760c7fdb93f2"
        },
        "item": {
          "id": "5f8d1e17-f8ea-43f6-8d64-ff662098eb82",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "103c7e77-8f2f-4dec-8eae-a12366dc3507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf20844-1a5b-46ff-8a3a-05e587c35232",
        "cursor": {
          "ref": "f14a9a20-ca37-4a24-9321-19f9b6dc0f30",
          "length": 251,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "50ee9b42-1207-4906-bc0b-8a45d62043cd"
        },
        "item": {
          "id": "3cf20844-1a5b-46ff-8a3a-05e587c35232",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "dd7d5593-b7e7-4f2f-8909-a0789bdfb217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c4af776-9b95-49de-ae48-ad6eccb2137b",
        "cursor": {
          "ref": "d38f8ade-4518-4e28-a6f0-51e172edd6ea",
          "length": 251,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "fd95bd22-d84e-4263-b9bb-dea6bd83e692"
        },
        "item": {
          "id": "8c4af776-9b95-49de-ae48-ad6eccb2137b",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "b0e45d22-7940-4ea6-bbd8-47fdc5b0d89c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6d67d15-abba-4553-9495-144c0d574730",
        "cursor": {
          "ref": "8185b0e8-cf5a-4dd9-9f84-0941305a422c",
          "length": 251,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "03a6d286-7307-48c5-a391-3a10b2cae1b1"
        },
        "item": {
          "id": "f6d67d15-abba-4553-9495-144c0d574730",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1b059a18-1f13-4123-bcc0-8a9daa9a2539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d722023-31a1-48b2-85cf-cd2ad31a42a8",
        "cursor": {
          "ref": "b96b99ab-2d17-4889-8635-0e9973745708",
          "length": 251,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e66cf97d-65b2-4eba-a618-242cb6577d61"
        },
        "item": {
          "id": "3d722023-31a1-48b2-85cf-cd2ad31a42a8",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "029c2d2b-db88-4942-af4a-bda8e0241975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c71b38b-811e-4ba3-9100-f33e6e5bddf1",
        "cursor": {
          "ref": "b3991b49-3f5f-4fe6-9939-3a439fec4cf0",
          "length": 251,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "144e55f3-9344-4a6b-8081-b22a8967a5ef"
        },
        "item": {
          "id": "8c71b38b-811e-4ba3-9100-f33e6e5bddf1",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "a21fba5c-a8be-415a-9679-a5e656ec651b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08901b48-bf58-46d7-b494-3ca78100cafa",
        "cursor": {
          "ref": "1e3c6f1c-bd51-4c3c-b2fb-19c7f8021744",
          "length": 251,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "7fc8e40b-0994-4962-a0ac-a1fdfc76e774"
        },
        "item": {
          "id": "08901b48-bf58-46d7-b494-3ca78100cafa",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "9bb78e62-0373-4d1b-879d-82182f121323",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7545872-0a1e-4758-a119-209ee6b49f56",
        "cursor": {
          "ref": "0b51de28-4bc6-4067-a522-58b0d9b101c6",
          "length": 251,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "31b99b7f-72a6-49d8-a22b-2843f3b2f5bc"
        },
        "item": {
          "id": "a7545872-0a1e-4758-a119-209ee6b49f56",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "2acdd0c9-151e-48a5-928c-bc4e1438fd5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be47ecc3-d020-4d06-b084-ae979e905218",
        "cursor": {
          "ref": "bb1f8da4-ddc9-44ac-b481-1c62c37e0066",
          "length": 251,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "55d6bc5f-b410-412d-b5c9-6b89e56f14d2"
        },
        "item": {
          "id": "be47ecc3-d020-4d06-b084-ae979e905218",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "cfdd1b22-a1dc-49e3-bc26-faef46b7d394",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7204ad4c-7211-475c-9d7e-24850b05592a",
        "cursor": {
          "ref": "aecfa5da-e5c8-4636-9508-b8dc53b055a7",
          "length": 251,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "57031d69-81c3-42ad-bd78-7278eae005ad"
        },
        "item": {
          "id": "7204ad4c-7211-475c-9d7e-24850b05592a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "28f59a90-390b-412f-84f8-aae6c0da81aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "637a6ecd-5c7e-4458-98ff-fafa375a7a54",
        "cursor": {
          "ref": "ba9604b6-d07e-4cb9-9083-c50c3ebf339d",
          "length": 251,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "b2cb0301-a7e8-40e5-b245-f2c205e5bf0a"
        },
        "item": {
          "id": "637a6ecd-5c7e-4458-98ff-fafa375a7a54",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "783b4a1c-fe56-443a-b3c4-bf39f790f2ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af34ba2a-dd9c-4067-a5bf-c1800b0bbe37",
        "cursor": {
          "ref": "bdbea686-a116-40a2-9f19-7cdcfc754a3f",
          "length": 251,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "77a8054a-5184-48eb-ad67-f00934f48b3c"
        },
        "item": {
          "id": "af34ba2a-dd9c-4067-a5bf-c1800b0bbe37",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "6dbdebf5-6a6f-4184-9693-89f524ca9604",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "08f11083-1a05-4b2c-b69a-d222fc8d9fc0",
        "cursor": {
          "ref": "a8b14d26-3e54-41ab-b400-fa7c572492c0",
          "length": 251,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6bd40b6f-ace2-4e71-83b6-2c8f15a2c773"
        },
        "item": {
          "id": "08f11083-1a05-4b2c-b69a-d222fc8d9fc0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "7f7920fe-9a74-4806-9ac7-07244d9f83e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6d47593-5bf5-429d-9e49-dc466c192c8c",
        "cursor": {
          "ref": "beaffafb-b45b-41dd-878e-cf23adc78684",
          "length": 251,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "310a47c3-c46c-4f8d-b016-37ff0c10e1ed"
        },
        "item": {
          "id": "a6d47593-5bf5-429d-9e49-dc466c192c8c",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7d8e19f4-b512-4963-95c4-d8131bd52150",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e748dc6d-40d3-4b31-a159-d5ad9ddcf93d",
        "cursor": {
          "ref": "a2e7b6f3-5fc5-4fb9-a19f-8b5e7143987a",
          "length": 251,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "af7303e6-3544-4151-86c5-7e71392611e2"
        },
        "item": {
          "id": "e748dc6d-40d3-4b31-a159-d5ad9ddcf93d",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "d0b047c6-af69-4b9f-b7cd-49eb6b30ae8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53cd80be-9c54-451c-b817-9fe279090e6f",
        "cursor": {
          "ref": "bfb5f631-d56a-4988-a63c-e62a3ea361c5",
          "length": 251,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a9686980-e545-44b2-8abf-3ad5e71a9fb0"
        },
        "item": {
          "id": "53cd80be-9c54-451c-b817-9fe279090e6f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "1188ce97-1cb2-4d62-8684-968a89abdd82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a05dd1-fa07-49b0-bce3-932b452365f0",
        "cursor": {
          "ref": "bc8a1114-bffa-43e6-8899-5b83d050ed54",
          "length": 251,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "59c981d3-3ec4-40a0-9f0d-b6ff8e4b0457"
        },
        "item": {
          "id": "40a05dd1-fa07-49b0-bce3-932b452365f0",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "629e8632-1cb6-4ed2-8767-c4fe313af480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd1961a6-d530-4018-85b5-06318a5ee59e",
        "cursor": {
          "ref": "debffdd6-37e0-435f-8625-8bf5f317514d",
          "length": 251,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "2117bc14-5750-4510-a79e-dd6fee520ff9"
        },
        "item": {
          "id": "cd1961a6-d530-4018-85b5-06318a5ee59e",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4b4fcb76-12af-43f5-bd42-08a9f03ae3d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "420c4c77-ff52-4642-b789-04231d788bca",
        "cursor": {
          "ref": "f3e1a6e7-c14e-468a-b0fb-fba931ad8e94",
          "length": 251,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "c1ff2639-498d-4a6e-8e5b-bd007832d049"
        },
        "item": {
          "id": "420c4c77-ff52-4642-b789-04231d788bca",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "62aefea9-0dfd-4d27-b0f9-039cfb363df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62141a59-ba89-4f67-98b5-b2ea0bdde004",
        "cursor": {
          "ref": "6655f8ad-6e7a-42aa-b510-2be528967e96",
          "length": 251,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "ed4c7693-4cd9-4697-bfb2-fe79a2dc590b"
        },
        "item": {
          "id": "62141a59-ba89-4f67-98b5-b2ea0bdde004",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "416a71b1-79b7-4b8a-9d6a-bea9d90b014b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "070001e4-9c52-404a-9ee6-3f9fb757c74a",
        "cursor": {
          "ref": "e9b9b986-2289-4074-84ed-ae15b47d13ac",
          "length": 251,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "6a88b0c0-c1ff-494b-84c1-e3e87e526e92"
        },
        "item": {
          "id": "070001e4-9c52-404a-9ee6-3f9fb757c74a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "19e2f476-ea18-4856-b9d6-f02fb0b086e2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "4dcd0ea4-2a39-4b97-9e42-ff77a4d7af33",
        "cursor": {
          "ref": "df2225b2-0e3b-4d4b-8ac4-82036e386873",
          "length": 251,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d606a3ce-79fc-4403-b051-2df97e9b708a"
        },
        "item": {
          "id": "4dcd0ea4-2a39-4b97-9e42-ff77a4d7af33",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "9e4bc79b-b75d-4679-b9de-cfdc47a36cdb",
          "status": "Created",
          "code": 201,
          "responseTime": 4355,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 201",
              "stack": "AssertionError: expected response to have status code 403 but got 201\n   at Object.eval sandbox-script.js:1:103)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "6513e614-b820-422f-942c-dd2970e4e682",
        "cursor": {
          "ref": "3c7a7ebc-3e10-4b76-87bf-47b1dfaed497",
          "length": 251,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "bfaa1003-54d6-4fd4-97e5-a5e9f0bc4122"
        },
        "item": {
          "id": "6513e614-b820-422f-942c-dd2970e4e682",
          "name": "credentials_issue"
        },
        "response": {
          "id": "be07f4c3-19fc-40c4-88a5-4e2227a805f5",
          "status": "Created",
          "code": 201,
          "responseTime": 2270,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce4698e8-9e95-4994-bb78-28778a56e1cf",
        "cursor": {
          "ref": "b5e8339e-2893-40de-99d0-7843468e4d61",
          "length": 251,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "01f03f94-6834-4b04-b7ea-1a8a0ed8a112"
        },
        "item": {
          "id": "ce4698e8-9e95-4994-bb78-28778a56e1cf",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "0b9ca1e8-eaab-477a-a874-bdbbe18a3fcc",
          "status": "Created",
          "code": 201,
          "responseTime": 2439,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f404f0d-d947-4df3-8992-f7548dd09eee",
        "cursor": {
          "ref": "251fe747-4fa3-402b-a6ef-aee11422e13f",
          "length": 251,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "137ad856-d6aa-4cb4-b25a-495c624c96fb"
        },
        "item": {
          "id": "6f404f0d-d947-4df3-8992-f7548dd09eee",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2b3c4991-2e2d-4892-9fa9-65428d437764",
          "status": "Created",
          "code": 201,
          "responseTime": 2327,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "96217321-ec99-4dad-8b08-6e1cf09de01e",
        "cursor": {
          "ref": "01f5e1a3-6155-4381-af72-1a6f44f6eeef",
          "length": 251,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f13fa933-823b-4905-9988-3fb34fda1fe4"
        },
        "item": {
          "id": "96217321-ec99-4dad-8b08-6e1cf09de01e",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "75e6930a-0f79-4355-bfc3-fa99aff7d8b2",
          "status": "Created",
          "code": 201,
          "responseTime": 2572,
          "responseSize": 993
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9dc56d4-05d8-4aeb-89c9-7d72eeae16f0",
        "cursor": {
          "ref": "22ae3aa1-cb5f-4396-8654-512abff67bb1",
          "length": 251,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "0a955763-4fb0-4e94-9d98-b6db46363336"
        },
        "item": {
          "id": "f9dc56d4-05d8-4aeb-89c9-7d72eeae16f0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "1bd23291-72c4-4a06-afd8-d7a51fa2972a",
          "status": "Created",
          "code": 201,
          "responseTime": 3071,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-04-14T00:36:23Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-04-14T00:36:23Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:108)"
            }
          }
        ]
      },
      {
        "id": "3ffb0fe0-3813-4dea-947b-0b59501eb4e5",
        "cursor": {
          "ref": "63d837c5-6e08-4b8c-ac7f-00ffb0a66b15",
          "length": 251,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "55ca3cd4-335d-4580-ab63-7975ca3047b9"
        },
        "item": {
          "id": "3ffb0fe0-3813-4dea-947b-0b59501eb4e5",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "340b0a0c-9561-4438-ab86-f8cfab508c70",
          "status": "Created",
          "code": 201,
          "responseTime": 3735,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0771d0e1-2289-4699-8e9a-b31ffee3e797",
        "cursor": {
          "ref": "d969fa04-aae5-4f9d-ab0d-660f6ccc1b24",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b8ce2b65-3f8a-4e42-ac80-dad891c55377"
        },
        "item": {
          "id": "0771d0e1-2289-4699-8e9a-b31ffee3e797",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "56ac38c4-c406-4d3d-b367-d2fd62b84e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0771d0e1-2289-4699-8e9a-b31ffee3e797",
        "cursor": {
          "ref": "d969fa04-aae5-4f9d-ab0d-660f6ccc1b24",
          "length": 251,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "b8ce2b65-3f8a-4e42-ac80-dad891c55377"
        },
        "item": {
          "id": "0771d0e1-2289-4699-8e9a-b31ffee3e797",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "56ac38c4-c406-4d3d-b367-d2fd62b84e27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6008706d-5107-4b27-be35-63794950bae4",
        "cursor": {
          "ref": "b8663741-2e97-4904-8a61-279f9d45f34a",
          "length": 251,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "28570692-79ce-4850-b2ac-a0baaa1cf77e"
        },
        "item": {
          "id": "6008706d-5107-4b27-be35-63794950bae4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dd7398f9-c977-4327-93a1-7109eeaabf53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdc8e63b-890d-434e-88dc-866b3967f9cf",
        "cursor": {
          "ref": "39d1d999-6368-4f9e-a044-d74d78d6f4f8",
          "length": 251,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "788e2975-066f-4bdf-8693-7fb2ccc6d983"
        },
        "item": {
          "id": "bdc8e63b-890d-434e-88dc-866b3967f9cf",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "80cd8dae-61c7-4191-9e4f-21e5655a5c2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39b6f1b9-ce87-4e22-bb1b-6c133c7eb023",
        "cursor": {
          "ref": "66a695eb-283b-45a4-a61f-b2ed4cc564c1",
          "length": 251,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "13932bf5-33df-4395-8d95-db5b8d2838a2"
        },
        "item": {
          "id": "39b6f1b9-ce87-4e22-bb1b-6c133c7eb023",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "d8c42171-1a9c-46f8-bf3f-34f3471933e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9cd8b8b-859e-4587-8428-3b6588e3a135",
        "cursor": {
          "ref": "ae287612-8e4d-43c9-ae6b-cd4012c66c49",
          "length": 251,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "a4da8a8e-694e-4ed4-a97c-45166ed51ec7"
        },
        "item": {
          "id": "c9cd8b8b-859e-4587-8428-3b6588e3a135",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "e27e5877-153c-4b31-98b6-e4ea238128dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4294e7fe-39f0-4474-9613-579df0b8a020",
        "cursor": {
          "ref": "279af688-69ea-4e3b-bfcf-44f24fc29c76",
          "length": 251,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f4d22d9d-f78e-4f5e-b527-2b89b7edff91"
        },
        "item": {
          "id": "4294e7fe-39f0-4474-9613-579df0b8a020",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "59b87ea0-7e85-4230-9418-27f1c3e91f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aeb8107-34cb-4d03-a8d7-e3183f721358",
        "cursor": {
          "ref": "e20cbb34-b233-41b4-97fb-f4989731838d",
          "length": 251,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "eded08cc-7599-43a4-9c7d-5372a5bc42dd"
        },
        "item": {
          "id": "0aeb8107-34cb-4d03-a8d7-e3183f721358",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "35008ae4-e4d2-4690-bdcc-cf42eb511425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4099a270-3f91-44a2-86fb-af23a7f66c58",
        "cursor": {
          "ref": "94286a05-fed1-4390-b044-a66613ffa99e",
          "length": 251,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "179a850c-53e7-45d1-8f9b-312a87f62530"
        },
        "item": {
          "id": "4099a270-3f91-44a2-86fb-af23a7f66c58",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "23b3be5e-305d-4c49-a3c1-51fee1b4ad02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd88696c-cb45-4081-8b49-2667b8e8e55b",
        "cursor": {
          "ref": "d85919c4-9719-41ac-a2cc-8da50c7a7ef3",
          "length": 251,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0693ae2f-fab2-4665-ae4d-72b43d726d02"
        },
        "item": {
          "id": "fd88696c-cb45-4081-8b49-2667b8e8e55b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d56d5e49-ffbe-4e6f-9bf6-4ee510b3ac4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c779e8d0-220e-40c2-bb65-4c906172626d",
        "cursor": {
          "ref": "647bf730-379b-4212-97ae-e601b034140c",
          "length": 251,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ff93a865-8c1f-4bdd-bca5-09abd4337c97"
        },
        "item": {
          "id": "c779e8d0-220e-40c2-bb65-4c906172626d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a36ce6dd-fb6f-472c-927c-7cc0fb19ffc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb102050-6bdc-48d3-af8a-fa84a07c94f1",
        "cursor": {
          "ref": "dc8a40b5-a67b-4b84-bc07-8acf1fac560a",
          "length": 251,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "6603b952-4b47-4cc1-b341-a5622710b9e0"
        },
        "item": {
          "id": "bb102050-6bdc-48d3-af8a-fa84a07c94f1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2231bb3f-f566-4878-8d0f-1b348b69f708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f86f0a6f-d62c-463a-b0f5-56a06d679dd2",
        "cursor": {
          "ref": "e1751091-681e-413b-82ac-637b696cc961",
          "length": 251,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "3c26439d-79a7-4559-aeba-9a9249f70e2c"
        },
        "item": {
          "id": "f86f0a6f-d62c-463a-b0f5-56a06d679dd2",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "45eac941-1fa3-49f6-9bd2-6fe3c483f261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ef0c008-5ec8-430d-a68b-7aff0cb32f09",
        "cursor": {
          "ref": "376e878d-d1da-4498-9d78-af590e37e28c",
          "length": 251,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "a939e458-a3d6-4f83-9841-c6ef51bd51e4"
        },
        "item": {
          "id": "6ef0c008-5ec8-430d-a68b-7aff0cb32f09",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "76772b49-a3b7-4b04-b832-a07e95c374c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "089ca030-4f7b-4e1b-b4e3-ca9bd21147f7",
        "cursor": {
          "ref": "b15997d9-8272-4d9d-8ed6-4ea43f4b949e",
          "length": 251,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "5aefcc47-3d8c-404c-ad19-4ada2de443c3"
        },
        "item": {
          "id": "089ca030-4f7b-4e1b-b4e3-ca9bd21147f7",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "ab7365b4-bd3a-4a39-90c5-3c720fe3d1f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "892c8913-ab33-45b1-8a06-4eb2c85594eb",
        "cursor": {
          "ref": "ed10fbc1-694f-4c7c-816d-1b33a0a88148",
          "length": 251,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "743da6e6-3b0a-42e6-84f3-9e5cb271b267"
        },
        "item": {
          "id": "892c8913-ab33-45b1-8a06-4eb2c85594eb",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "e3658060-490e-4a53-aacb-f66720244850",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75875a68-7428-44f1-921b-9fceca4cc245",
        "cursor": {
          "ref": "93370d31-f508-49de-abe2-ee42d3a4040b",
          "length": 251,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "7fecc380-e9ab-4495-8e19-b7aa24ddc849"
        },
        "item": {
          "id": "75875a68-7428-44f1-921b-9fceca4cc245",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "007de221-e9d9-4c18-abcd-13e46fdb5967",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 255,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cdb084-b6e4-4a63-8c1d-edc8b49c6ee5",
        "cursor": {
          "ref": "37a9ebe3-3e0d-4bb8-9f36-d38db90c2620",
          "length": 251,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "6d21e1b0-21a5-4f67-97bf-0347def00748"
        },
        "item": {
          "id": "59cdb084-b6e4-4a63-8c1d-edc8b49c6ee5",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "286a958f-bc3a-4623-b4ab-002a625f28f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 152,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adc1fe76-174a-412c-b715-44d48bfd9224",
        "cursor": {
          "ref": "df7b1d7e-7b2f-440d-96e3-e7ef0ec63900",
          "length": 251,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "76c67ad6-72d9-4934-9f2f-0c923c9e17a9"
        },
        "item": {
          "id": "adc1fe76-174a-412c-b715-44d48bfd9224",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "716da04e-e6a7-4ee1-a4a6-e8bcb885e46e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4fef33c-5240-4016-acda-ec5b88026264",
        "cursor": {
          "ref": "f3b5586e-873b-449f-8f30-50f78c4142de",
          "length": 251,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "7ea1f2f6-af37-42d8-9260-7328e6aa8f70"
        },
        "item": {
          "id": "b4fef33c-5240-4016-acda-ec5b88026264",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "077db6dd-0518-4824-845b-5373c3aefe8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "354beb27-8037-4b10-a693-f5998251c199",
        "cursor": {
          "ref": "90b01e76-b2ea-416a-9a48-172f9834632a",
          "length": 251,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6570425a-bd9b-42b9-a09f-e248dbddd280"
        },
        "item": {
          "id": "354beb27-8037-4b10-a693-f5998251c199",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "8aefd41a-c627-4f2b-b8c9-1e54724a2877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f82049d-8869-43d0-a3a8-1e5f653d06bc",
        "cursor": {
          "ref": "cb5bd646-29d7-441a-81a7-af66868e296c",
          "length": 251,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "614196b3-224d-4ce0-8f28-d87c69f2e3eb"
        },
        "item": {
          "id": "5f82049d-8869-43d0-a3a8-1e5f653d06bc",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "8dbc10e4-bc3e-4854-9311-4928d59d7cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66203ebc-66f4-4cd4-a9ac-8b480f1aa866",
        "cursor": {
          "ref": "5f071371-a836-49fd-9cd0-7562ecded152",
          "length": 251,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "3fa20cc4-f266-4e83-85f6-071f52b771c4"
        },
        "item": {
          "id": "66203ebc-66f4-4cd4-a9ac-8b480f1aa866",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "69d42177-a249-4c2e-8b51-ebcb30df4c9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15d87b54-f18c-4b4d-b67b-d9fa6cccede4",
        "cursor": {
          "ref": "94c6364f-6b0c-406e-8f09-620686fa6307",
          "length": 251,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2c32456e-9fff-4c43-bbc9-2bfd305c007d"
        },
        "item": {
          "id": "15d87b54-f18c-4b4d-b67b-d9fa6cccede4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "635dd55b-5ba1-4c73-bd6d-926a368e5924",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b16f14aa-c6e6-4c65-8df0-447b666611c0",
        "cursor": {
          "ref": "3c114a7e-c02b-48ae-ba85-de76c9aa44e4",
          "length": 251,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "8ad107af-db80-4990-912b-a922922ef159"
        },
        "item": {
          "id": "b16f14aa-c6e6-4c65-8df0-447b666611c0",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "00c5065f-1343-4504-9763-b168e3ce0de4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5be11b36-d2b1-4047-8885-11b1d3217848",
        "cursor": {
          "ref": "b11e8425-470f-4478-81fd-daebcc4f1eb1",
          "length": 251,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "d82ed7d5-d82f-480f-800a-bfeee5131fcd"
        },
        "item": {
          "id": "5be11b36-d2b1-4047-8885-11b1d3217848",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "218ccdbc-754e-466a-854c-431a20dfa04c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b28054-5f1b-4a14-9d41-c747106da75f",
        "cursor": {
          "ref": "c763766e-7f64-40b7-9ce9-8dded4c8e148",
          "length": 251,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "1a40541d-0bc3-42d5-9c43-c7934425c882"
        },
        "item": {
          "id": "73b28054-5f1b-4a14-9d41-c747106da75f",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fa7988f1-dd7e-4cef-82e1-985a9865bdcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3677f03e-f739-4435-9901-5e74f3d58c37",
        "cursor": {
          "ref": "f3b157d7-c883-4c85-91af-e06c5f0eaf95",
          "length": 251,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0f2afcbd-68f8-4657-81de-c2e62e37e915"
        },
        "item": {
          "id": "3677f03e-f739-4435-9901-5e74f3d58c37",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "eb7058e6-5814-479f-afaa-78a6544d6677",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94cd0a11-d7ef-4402-a70f-87bd1bb75363",
        "cursor": {
          "ref": "15c6b215-20d7-42f4-8acf-93ec6ce39c07",
          "length": 251,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "1dd3a53e-2907-4e64-b05f-d83f331f3008"
        },
        "item": {
          "id": "94cd0a11-d7ef-4402-a70f-87bd1bb75363",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "1c41efb0-f21d-460b-97c8-a3f35face3be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ddcba8a-f05a-45e3-83de-add6683c6fe4",
        "cursor": {
          "ref": "44233339-057a-4f49-9536-25d0b4bcb786",
          "length": 251,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "04c08930-adce-48ae-a797-ed64032b2766"
        },
        "item": {
          "id": "5ddcba8a-f05a-45e3-83de-add6683c6fe4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a5c23ab0-2cac-4032-91d9-b29ef6a905e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65fe5f09-8555-46fa-a92b-74bf31bb5865",
        "cursor": {
          "ref": "e8d28284-db0d-4a6b-8a5f-d8ed47df660c",
          "length": 251,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "86d9bec8-9a27-4e28-905a-e3d97bddc842"
        },
        "item": {
          "id": "65fe5f09-8555-46fa-a92b-74bf31bb5865",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "10f8bd55-5593-4b05-9fd0-bcafc2b906fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1f52d29-7b99-4976-b2e5-b200009f7654",
        "cursor": {
          "ref": "c1b7dfd4-78ff-4031-b9db-5c7cc68f29ec",
          "length": 251,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "1d366a25-5efa-4394-8bb5-0fbc2e8c9533"
        },
        "item": {
          "id": "f1f52d29-7b99-4976-b2e5-b200009f7654",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "de5f831b-12ef-4f35-a260-e5af0a129785",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c5c90a0-d315-4641-b281-216997cb690b",
        "cursor": {
          "ref": "0cae5ed4-2353-4b6c-9601-a550ddb5e703",
          "length": 251,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "dbe62495-4066-44f7-9498-82b6532bcc09"
        },
        "item": {
          "id": "7c5c90a0-d315-4641-b281-216997cb690b",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "2f0c7574-84d4-4acd-b104-f42667859960",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "074131ae-358b-4dec-a7b2-4a7344afd879",
        "cursor": {
          "ref": "28c3bdb9-5a59-4f96-b2e4-475338f51ab6",
          "length": 251,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "f53a9e58-5747-4040-9300-1c77c66da9cf"
        },
        "item": {
          "id": "074131ae-358b-4dec-a7b2-4a7344afd879",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "9323b184-a7e8-47cd-a793-3315bbc8294b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 25,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "5053e8de-1c67-45ef-a5a8-9390032e91f5",
        "cursor": {
          "ref": "c39a35f8-2a74-44b4-adb3-43c884b7b919",
          "length": 251,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "9affe47b-93ac-4db8-a49d-288bc076a290"
        },
        "item": {
          "id": "5053e8de-1c67-45ef-a5a8-9390032e91f5",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "7eca170a-a52e-49e7-a03e-e62d447707b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "a73d7da3-a5cd-4ae0-be09-cc6a583e5a4c",
        "cursor": {
          "ref": "72a240a5-b03f-49f3-8b3c-68194f8b4c90",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "de430c76-879b-42fd-a677-d893b0ab6193"
        },
        "item": {
          "id": "a73d7da3-a5cd-4ae0-be09-cc6a583e5a4c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0a3f880f-28a1-46ef-8d6b-d8cc73139e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a73d7da3-a5cd-4ae0-be09-cc6a583e5a4c",
        "cursor": {
          "ref": "72a240a5-b03f-49f3-8b3c-68194f8b4c90",
          "length": 251,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "de430c76-879b-42fd-a677-d893b0ab6193"
        },
        "item": {
          "id": "a73d7da3-a5cd-4ae0-be09-cc6a583e5a4c",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "0a3f880f-28a1-46ef-8d6b-d8cc73139e0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69311504-3006-46f5-a1a9-748f2ca115d8",
        "cursor": {
          "ref": "43790dd9-b93d-4b8a-819c-80eadf129d4a",
          "length": 251,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "4bb3e9af-33ec-4813-afc5-81b1e1b932a6"
        },
        "item": {
          "id": "69311504-3006-46f5-a1a9-748f2ca115d8",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1d23787c-38c0-49df-ab35-2acc433cc8ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a82d3e14-a2ac-4575-95ae-e351f4916e91",
        "cursor": {
          "ref": "3e69bfc4-702d-491f-9bdd-5a8709daf8e2",
          "length": 251,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "4b77c39c-c681-470d-9b24-f8f787db7756"
        },
        "item": {
          "id": "a82d3e14-a2ac-4575-95ae-e351f4916e91",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "3d41b5b2-2592-4352-94fa-01603e76159a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f7662a-cf5e-4907-a298-9cec182dd1f9",
        "cursor": {
          "ref": "b06366b4-5975-43df-ae9d-cf6011c21a11",
          "length": 251,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "5e94004e-c3ab-42b2-9905-3b6dffc76cb5"
        },
        "item": {
          "id": "70f7662a-cf5e-4907-a298-9cec182dd1f9",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "00bd9e64-7f77-43ca-ab9b-a24f6bdd5dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 155,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02c92248-0d75-452b-92ea-62a8a7696670",
        "cursor": {
          "ref": "2fb11c51-afed-4b94-a84b-192e81990c7c",
          "length": 251,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "7c84b47d-8a8a-4f37-90b7-6dce994b6422"
        },
        "item": {
          "id": "02c92248-0d75-452b-92ea-62a8a7696670",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "1de68ee4-c984-43db-9086-9a5a228a5a34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8c952c2-083b-4629-968a-a6da0c855685",
        "cursor": {
          "ref": "3a9d46dd-d1b7-4861-aa9d-1c0ff1ee1190",
          "length": 251,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "f3edd162-3f1e-4750-a206-381712c1a10f"
        },
        "item": {
          "id": "f8c952c2-083b-4629-968a-a6da0c855685",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "5c6336b3-fd78-4037-a1e9-81a49af4771c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6bbaa47-8fc5-430f-9888-78248c4b2cc0",
        "cursor": {
          "ref": "886f47bd-e93a-4fe0-96d3-b6c61a117aad",
          "length": 251,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "371f9ab6-04a8-4b1f-918e-11d9afd57ca7"
        },
        "item": {
          "id": "d6bbaa47-8fc5-430f-9888-78248c4b2cc0",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "c1849624-1859-487a-9f4e-1a3d9f50e81b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf32883d-42f3-488a-b6a8-60c8c242186f",
        "cursor": {
          "ref": "03602664-9347-4538-a797-9de9a5fec8ad",
          "length": 251,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ed6676a2-a142-4264-aaf2-8c18a0279615"
        },
        "item": {
          "id": "bf32883d-42f3-488a-b6a8-60c8c242186f",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "5f3acae2-b093-4231-ad21-b816097ce397",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e65559b-0893-497e-a0c4-ff260562ad7e",
        "cursor": {
          "ref": "49da14d4-947a-4724-ae04-5fe62867473a",
          "length": 251,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "c37282a1-a232-4b46-8854-b3af18bc097f"
        },
        "item": {
          "id": "4e65559b-0893-497e-a0c4-ff260562ad7e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "77f3172a-0007-4897-96e5-441fb1145688",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f19a5e6f-7f6e-4b75-98e3-a6d4c8a9f5c8",
        "cursor": {
          "ref": "35cdb4d4-c547-4962-85e1-e9e574277b65",
          "length": 251,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "1980cec6-a9b1-4de0-a350-4f62fc8d1b49"
        },
        "item": {
          "id": "f19a5e6f-7f6e-4b75-98e3-a6d4c8a9f5c8",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "10b35bee-46ff-4cc3-bacc-9c106e6fc6b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11b1bba7-c349-481a-bbcd-7d0ad8b3f7e8",
        "cursor": {
          "ref": "768dcfbe-0102-4c97-9835-9b57609c7b89",
          "length": 251,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "61c5ac2c-53b6-4c15-885d-a35b3f945030"
        },
        "item": {
          "id": "11b1bba7-c349-481a-bbcd-7d0ad8b3f7e8",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "34394fa3-f036-4a16-8afd-064011ba5ecf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b77041-90c5-4922-8a74-3770bdff3b27",
        "cursor": {
          "ref": "83b99a9a-9b17-4209-8651-6e6c5d931552",
          "length": 251,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "741e2fc8-de13-4db0-9ea9-3c73b7f94258"
        },
        "item": {
          "id": "01b77041-90c5-4922-8a74-3770bdff3b27",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "73983a3c-c1d3-436d-8f4d-666222863176",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6da81fb2-4d7d-45c3-a6fc-b1f040bdcd0d",
        "cursor": {
          "ref": "dc7cd00a-6af5-43be-9322-8ac9d41bfbea",
          "length": 251,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "1431491e-7b8a-4d7b-b5f7-6ca1cac345b5"
        },
        "item": {
          "id": "6da81fb2-4d7d-45c3-a6fc-b1f040bdcd0d",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "9fdb9426-c4c9-475c-a770-3c58406b8b6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0185f83e-ecfd-42f6-8442-42907e5a97ac",
        "cursor": {
          "ref": "2ef8474a-c95f-4017-9fc5-b13749dd703b",
          "length": 251,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "e6b1d8ba-9ac5-46e8-afbf-b46dad29e672"
        },
        "item": {
          "id": "0185f83e-ecfd-42f6-8442-42907e5a97ac",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "f11b489b-3523-49f3-acae-1f3de8c59e53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 302,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "801121b4-349f-4646-9f22-4e8f4db03c0d",
        "cursor": {
          "ref": "7af4e736-c361-4016-937a-aabdd6809dca",
          "length": 251,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "12da0f5b-8238-456c-8f55-29aec28b068f"
        },
        "item": {
          "id": "801121b4-349f-4646-9f22-4e8f4db03c0d",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "42154344-446a-4d21-b99d-c74a8bee1151",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93d040ec-a0de-4816-a8a9-028221ab7f90",
        "cursor": {
          "ref": "d792c2be-b98c-460d-9be2-b4dfe77cf145",
          "length": 251,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "086fbe18-9cda-4d54-be4b-c40e490ce4a8"
        },
        "item": {
          "id": "93d040ec-a0de-4816-a8a9-028221ab7f90",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ee40867b-47ce-46f7-bd43-83368fe1fe87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066f5221-f0f8-4993-988d-7580be1e5321",
        "cursor": {
          "ref": "8873a339-118a-46e5-9551-51df2e5b0864",
          "length": 251,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ee4bbb94-87e8-4814-a4c4-9909c343f6f1"
        },
        "item": {
          "id": "066f5221-f0f8-4993-988d-7580be1e5321",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a78fdc47-a797-4a95-aafe-df711b64c2bf",
          "status": "OK",
          "code": 200,
          "responseTime": 319,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "a4e7dbe0-9291-4260-9d90-7adb7396a535",
        "cursor": {
          "ref": "21bf3df2-f3b0-425c-8826-5cbcb535a497",
          "length": 251,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "51d8c6fd-e50b-4060-a5a7-1896c37c8ed0"
        },
        "item": {
          "id": "a4e7dbe0-9291-4260-9d90-7adb7396a535",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "bee003fd-5223-4cc1-940e-c8478f6bae6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b3e5da6-d297-440d-88ca-15bfece3f238",
        "cursor": {
          "ref": "dd33e79d-47b2-4c54-825f-18fb7ae611b9",
          "length": 251,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "f90d5550-7b99-4d68-b030-fdcc946da66f"
        },
        "item": {
          "id": "2b3e5da6-d297-440d-88ca-15bfece3f238",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "6676b79e-f137-489c-8f1a-336af0f3569c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a6b581d-3ef2-473e-b41f-782da7ed0077",
        "cursor": {
          "ref": "5fe39c34-980f-46e4-a9c0-656e07b5697d",
          "length": 251,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "30f89402-dcfb-46d8-9203-990fcd94643f"
        },
        "item": {
          "id": "8a6b581d-3ef2-473e-b41f-782da7ed0077",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1b5666d4-e641-488b-a939-d0027388fd47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bfd8906-653f-42ef-88dc-3e287ead3b99",
        "cursor": {
          "ref": "be61fc4f-0c4b-4434-8d81-d0c9423c6b7c",
          "length": 251,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "62ba6a93-d69d-4951-a440-57c6c7571a19"
        },
        "item": {
          "id": "3bfd8906-653f-42ef-88dc-3e287ead3b99",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "d46ee55c-3f18-46b7-850a-c78c92709585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02972a2-d540-4cfc-88e4-daed1e84b06a",
        "cursor": {
          "ref": "a9ae1c41-5260-47a2-a503-0f03a2af3fc2",
          "length": 251,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "8406f23a-afe0-4ec6-a4eb-f7f369b8c87f"
        },
        "item": {
          "id": "a02972a2-d540-4cfc-88e4-daed1e84b06a",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0d167599-9b1f-4f7f-b9e2-f7aa866a63c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "701fe753-862e-4934-87b0-8f69b81fa22f",
        "cursor": {
          "ref": "dd83ea36-2754-4769-ac73-422cd8f1a336",
          "length": 251,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "2ee2390c-77a3-4227-a0e1-2610af51be0d"
        },
        "item": {
          "id": "701fe753-862e-4934-87b0-8f69b81fa22f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "14d7388c-c1a7-4b81-b2dc-243a97cbae57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9972e043-ddb5-4cf8-8908-45b8950d6972",
        "cursor": {
          "ref": "26d13961-46cc-49a0-98e8-e87a54d620e0",
          "length": 251,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b03f09c4-4159-4fdc-a42e-080315282a48"
        },
        "item": {
          "id": "9972e043-ddb5-4cf8-8908-45b8950d6972",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "995e9682-cd93-40ff-b457-2509600ca740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f933d21-40d5-4da9-bb18-7a98571e96ab",
        "cursor": {
          "ref": "abae808e-f306-44de-b94c-bb9d76e665e9",
          "length": 251,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "71ec8876-11fb-4603-babe-46d6dae829bd"
        },
        "item": {
          "id": "2f933d21-40d5-4da9-bb18-7a98571e96ab",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "c3b181f4-e625-4e1d-9002-9bf709fecd05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c93b14be-416b-4e4c-916e-24021480b8ab",
        "cursor": {
          "ref": "684c6674-9138-4549-b2ce-1694000cb7fc",
          "length": 251,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "40a78af9-6b8d-4d04-8e50-b8121435a48d"
        },
        "item": {
          "id": "c93b14be-416b-4e4c-916e-24021480b8ab",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "f0291c3f-e44d-47f7-bac5-8dec47ab203f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "183ec046-4dc3-479b-b124-509b75475b43",
        "cursor": {
          "ref": "b79585da-7aae-4add-8ab0-346a3ebca9e2",
          "length": 251,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f6376036-8b82-46b1-9a41-6a49b50ca8e0"
        },
        "item": {
          "id": "183ec046-4dc3-479b-b124-509b75475b43",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "00b05087-d91b-40f3-bf62-d3d9bf443f2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590ee4f1-6d50-46d9-8e16-789eaa069825",
        "cursor": {
          "ref": "30038441-96ff-42df-936d-8f822bd5f36d",
          "length": 251,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "7f1af709-30fb-4390-876a-e7bc6e48f13c"
        },
        "item": {
          "id": "590ee4f1-6d50-46d9-8e16-789eaa069825",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7dc69760-3275-4e50-96dd-059c3f57e289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa7932ba-b003-42fd-ae9f-33ee59c49c38",
        "cursor": {
          "ref": "83cfdaa1-346c-4c53-ac19-bb32445b83c8",
          "length": 251,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "671eff40-48b6-446f-a44b-ebb3e3d5d330"
        },
        "item": {
          "id": "aa7932ba-b003-42fd-ae9f-33ee59c49c38",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5ee0eefe-b6e4-4f36-a2da-b888ff62224d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31b4808a-b38f-44cb-ab5f-5fee234392ce",
        "cursor": {
          "ref": "112b905e-5a5f-4888-ab92-aeb4d6c1173d",
          "length": 251,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "31be8a01-c1cb-474d-87ec-47ccbb7f4bf5"
        },
        "item": {
          "id": "31b4808a-b38f-44cb-ab5f-5fee234392ce",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ec620953-eade-48e9-8d10-97ebaf6b45eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b1181c9-1b6a-4476-a025-95be77d6714b",
        "cursor": {
          "ref": "c87bc3b5-b05b-4790-a014-cd6e99bfe535",
          "length": 251,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "ff7a8ccb-7b39-4969-92a1-0dff712c0a4b"
        },
        "item": {
          "id": "8b1181c9-1b6a-4476-a025-95be77d6714b",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "46b7d6c8-f7a6-493b-a340-5fbf420c57a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d79466ff-5e94-48e0-8ee6-184fa8acd1ed",
        "cursor": {
          "ref": "74a2b6cc-9e3a-425f-8c25-b968d9ec7e35",
          "length": 251,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "aa1d3d48-b1c7-4849-9ffc-7e97874d134b"
        },
        "item": {
          "id": "d79466ff-5e94-48e0-8ee6-184fa8acd1ed",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7049acc6-d3cf-464c-8344-a694278d233f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5694620-4e36-4bd9-8a82-225069c1c5c3",
        "cursor": {
          "ref": "854e7dff-c4a0-4b1f-bb0c-89ca70802071",
          "length": 251,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "a7ca032c-b61e-4ff8-a407-6a972dfe5e4f"
        },
        "item": {
          "id": "b5694620-4e36-4bd9-8a82-225069c1c5c3",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1a6db5bf-8260-4a4f-9901-0f894d926912",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffa091de-793e-4a7a-a38d-f63db2a00d20",
        "cursor": {
          "ref": "d4b44e94-192a-4829-ae39-f8a6458aa0e5",
          "length": 251,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "23e97ecf-af2c-4693-b0dc-bfe660a0d259"
        },
        "item": {
          "id": "ffa091de-793e-4a7a-a38d-f63db2a00d20",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "3b9aa748-8090-46fb-ac56-449a364ee3b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f42ec7-4903-448e-92a8-ed66a5ff642f",
        "cursor": {
          "ref": "e38e5acb-54e9-432f-855a-318f06d4d20d",
          "length": 251,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "43cb5abe-0149-407f-8baa-a121cc559c9f"
        },
        "item": {
          "id": "33f42ec7-4903-448e-92a8-ed66a5ff642f",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fabc2a74-c133-4c36-a4d8-079dea8013df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbe61128-80f2-42a1-a04f-989937726611",
        "cursor": {
          "ref": "f8eb6edb-b2f5-4e25-9160-19b691d0f6c3",
          "length": 251,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "7a1e2c63-daf5-48ab-bce7-b37e66b46bb0"
        },
        "item": {
          "id": "bbe61128-80f2-42a1-a04f-989937726611",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "dea529bc-2fa3-4491-b8b0-c419d4ffd298",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0777522-8efb-4e3f-a016-efe661a4a3c5",
        "cursor": {
          "ref": "f0f13409-e0c1-46f6-8a7d-16a463dd1a0c",
          "length": 251,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "c216a0d7-ca86-4289-9664-4bf3ef31d271"
        },
        "item": {
          "id": "d0777522-8efb-4e3f-a016-efe661a4a3c5",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "fb2a6023-79cf-425b-adb1-2989c3c73bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eeeffb5-8c2e-40d3-a197-06eb49df32a1",
        "cursor": {
          "ref": "616f1975-9fb8-4cbd-9d37-fdba118c05f9",
          "length": 251,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "41de0f6f-2a7d-4201-acb2-f70967ebe4a5"
        },
        "item": {
          "id": "6eeeffb5-8c2e-40d3-a197-06eb49df32a1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "715a8e8c-25a1-461c-902d-fdc45a779a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4de1c41-557f-4a5c-b69a-3190f36cfed9",
        "cursor": {
          "ref": "482b048c-e075-4f48-a556-d5e91b1b2368",
          "length": 251,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "8bb35415-09a6-4ac8-a93a-aaed85a78d0a"
        },
        "item": {
          "id": "c4de1c41-557f-4a5c-b69a-3190f36cfed9",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "fc2b0e09-f112-4a91-9719-b42ce1aaedf9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e7fb5b-42a5-439f-a6be-c87948194ce5",
        "cursor": {
          "ref": "d463c4c6-2e26-4834-b2a5-bc8389b2c790",
          "length": 251,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "776ef510-4ac5-4a9e-84d1-b7101819859e"
        },
        "item": {
          "id": "36e7fb5b-42a5-439f-a6be-c87948194ce5",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "95f54a64-cb14-4b8e-99d4-e855873e6902",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d673a165-3e45-4ccd-b583-b03cad2546e9",
        "cursor": {
          "ref": "7ab3da27-7ea1-49f3-86d8-591651c40ea7",
          "length": 251,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "cc11bcf1-7839-4e9a-9777-b67ef48527a3"
        },
        "item": {
          "id": "d673a165-3e45-4ccd-b583-b03cad2546e9",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ee76166b-efab-4d22-a3f6-2b674b556488",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16822834-cec8-49bf-892a-230db0ed7010",
        "cursor": {
          "ref": "91177860-598b-43e5-bf86-c0546f6a73de",
          "length": 251,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "b1e3936a-7b56-4333-9918-62a6e9cf047b"
        },
        "item": {
          "id": "16822834-cec8-49bf-892a-230db0ed7010",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "0b1d89db-f3d0-4016-bd30-a4cbc33e9683",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01a956a1-811b-4f07-ad36-b55853976db6",
        "cursor": {
          "ref": "cea76225-9efb-46f9-91e4-f62fc745c744",
          "length": 251,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eedb62c8-a8a6-447d-863b-ea340a88b46b"
        },
        "item": {
          "id": "01a956a1-811b-4f07-ad36-b55853976db6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5a4f46e9-6824-456b-a69d-3f2fa7f20a6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a2a361b-8063-43ba-a1d2-d93ed2ac0724",
        "cursor": {
          "ref": "a274c8b0-8f25-4cad-a078-d260c31e4438",
          "length": 251,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "d14edf69-b326-4bfd-9053-9135d5e69206"
        },
        "item": {
          "id": "6a2a361b-8063-43ba-a1d2-d93ed2ac0724",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2082695c-827e-4fee-8768-582327b5d712",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7efafb54-41c5-4fd5-bf9c-3b91af400841",
        "cursor": {
          "ref": "88609505-b7e0-4faa-842e-359d85571b8e",
          "length": 251,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3aed87f1-c783-43f1-b0b1-68c2fb57fb96"
        },
        "item": {
          "id": "7efafb54-41c5-4fd5-bf9c-3b91af400841",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8f96425d-7bb0-4564-9923-1bb90b36e075",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 495,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3076e65a-043c-4869-b4cc-0869148b596e",
        "cursor": {
          "ref": "1aa436b0-0be3-4869-a152-749897e87677",
          "length": 251,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "f11022b0-4cf1-474e-8369-e70868ba4ecc"
        },
        "item": {
          "id": "3076e65a-043c-4869-b4cc-0869148b596e",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "f36abb86-010c-4092-bffc-e90bf6327d54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c10733e-6a63-4f60-81bb-b60635f33b49",
        "cursor": {
          "ref": "445af213-446c-4278-959d-e09639f522cc",
          "length": 251,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "222c5640-e922-490b-863a-f8210252616d"
        },
        "item": {
          "id": "9c10733e-6a63-4f60-81bb-b60635f33b49",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "91297487-aeed-4eeb-82b8-6f5b42817e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf293e89-09ca-44d1-8c7d-6dd0bd9d7810",
        "cursor": {
          "ref": "5370d491-f625-440a-b5cf-b28e011fd872",
          "length": 251,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "15dae344-0250-44e2-95b6-ea6c8cbfa848"
        },
        "item": {
          "id": "bf293e89-09ca-44d1-8c7d-6dd0bd9d7810",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "254b07de-859c-4c5f-87e4-2202e3f5add8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6488b780-7e7a-4d5d-a8f1-46d67eaed62d",
        "cursor": {
          "ref": "8f77695b-0bf2-4047-924d-6a79faf8c5a8",
          "length": 251,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "c3d578ed-4da0-4ae4-9481-9d37f69cf6e4"
        },
        "item": {
          "id": "6488b780-7e7a-4d5d-a8f1-46d67eaed62d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "58ac7d45-58fd-4f56-bd21-ac4123edb20a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d891e8f-e3ef-4519-b8ab-86a0eecc6802",
        "cursor": {
          "ref": "85ca1191-6fd8-4e67-86e2-089142adde24",
          "length": 251,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "49613117-6252-4981-bb7b-4f598a71f272"
        },
        "item": {
          "id": "5d891e8f-e3ef-4519-b8ab-86a0eecc6802",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "e85f1612-e278-4302-8e45-68f92e0da1f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff4e6321-27ac-48bf-9ad4-cba71c2efc2c",
        "cursor": {
          "ref": "7d77722b-70c7-45b5-b557-1f2cfc71a986",
          "length": 251,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f8de2938-801e-481a-9e53-ba490845ead4"
        },
        "item": {
          "id": "ff4e6321-27ac-48bf-9ad4-cba71c2efc2c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "47cd5f88-73fa-48b5-ab26-94a69baf7d85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c046be90-8b3c-405b-8106-b9c9dfec6116",
        "cursor": {
          "ref": "af94638b-dcff-42c8-b09f-55622d42c415",
          "length": 251,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "095be015-a5ef-4515-9ea7-09f727fd95d5"
        },
        "item": {
          "id": "c046be90-8b3c-405b-8106-b9c9dfec6116",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "c6901883-f4d3-44ec-bf02-50bdf22e0294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5db24705-b1af-4ed8-9b7a-5a9134a54fd0",
        "cursor": {
          "ref": "09824327-d722-4a3f-b241-7cbea8015d93",
          "length": 251,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "8eb71678-004b-442f-b3d5-8084a0ed54b1"
        },
        "item": {
          "id": "5db24705-b1af-4ed8-9b7a-5a9134a54fd0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "16c3950a-e428-47c2-9a12-50c01869de2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666f0530-d67d-4018-ae32-870567a7fdbc",
        "cursor": {
          "ref": "7861ffbd-c52f-4ba8-9931-5fc4d9db43ba",
          "length": 251,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "d1674c0c-4a92-4805-ac0c-f35c76cf1063"
        },
        "item": {
          "id": "666f0530-d67d-4018-ae32-870567a7fdbc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "04ebac7d-4ea0-45c4-bedc-96d4871c658c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55f2739f-8c2b-4de0-83b0-05e2a7900821",
        "cursor": {
          "ref": "7a72aad3-7a4f-4403-97e9-754c24684815",
          "length": 251,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "e32e96dc-ffe4-42f1-b964-44b7629da09d"
        },
        "item": {
          "id": "55f2739f-8c2b-4de0-83b0-05e2a7900821",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "7d59b843-8ee5-4959-92f1-5be58df75cc0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c245bd97-06f0-4609-aba6-f36418918ba4",
        "cursor": {
          "ref": "0f22fa9d-8493-4c37-aaaa-3d8ee6beb342",
          "length": 251,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "23705809-8da1-4e4e-a80d-b69de697de78"
        },
        "item": {
          "id": "c245bd97-06f0-4609-aba6-f36418918ba4",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "64a89bee-9c33-43af-b040-ff0c57a01e8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e51caad-b9b2-4bfc-972e-d3fb9999323d",
        "cursor": {
          "ref": "a5cd0b36-5ec6-4565-81ad-7405d9f2c88f",
          "length": 251,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "13a8812b-bc56-4533-b11b-960c4cf24b5a"
        },
        "item": {
          "id": "2e51caad-b9b2-4bfc-972e-d3fb9999323d",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "b96799b1-07ed-4923-8897-f0b8bb10bc58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a85be991-b2d7-4925-9b6c-109ecf428d1d",
        "cursor": {
          "ref": "87a5ee29-1ae7-4afe-8781-3998fb5c847f",
          "length": 251,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "a206a0ba-9764-4309-bf44-a703afb82959"
        },
        "item": {
          "id": "a85be991-b2d7-4925-9b6c-109ecf428d1d",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "605b289c-c418-4b62-a232-2f3c0a6ec835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f38af37-b3bd-4558-9f13-64c46a89f12e",
        "cursor": {
          "ref": "3d2153dd-9b5c-4f1e-964c-081e51155ce0",
          "length": 251,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "1627ec73-5720-4785-8a2a-091836dc435c"
        },
        "item": {
          "id": "9f38af37-b3bd-4558-9f13-64c46a89f12e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e0de50f6-0b45-46ff-b415-7e0fba8e646e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "000b9b67-3c57-4f8f-bdc5-b44268dc1600",
        "cursor": {
          "ref": "a540df6c-7314-491a-b702-7bdab1616921",
          "length": 251,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "9a07034c-8fab-41d9-8537-1db1be1eb039"
        },
        "item": {
          "id": "000b9b67-3c57-4f8f-bdc5-b44268dc1600",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ef06ef0f-2b88-45e6-90a9-67bab8aa0870",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50667973-0f15-4273-a594-83314c08c15e",
        "cursor": {
          "ref": "02ad7eeb-5e85-4e44-bfcb-d0061b89e88e",
          "length": 251,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8ebbcf5d-f164-49d6-831a-11416f6e3ed8"
        },
        "item": {
          "id": "50667973-0f15-4273-a594-83314c08c15e",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "16df43aa-8308-4120-a899-a92e4f924b87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77871b0d-de5f-4299-a388-541b848bfd3d",
        "cursor": {
          "ref": "fc8f1991-db5e-4a0b-ad61-9fdfe9e44246",
          "length": 251,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "36ce5f4f-500c-4f2b-b7c4-294009062a60"
        },
        "item": {
          "id": "77871b0d-de5f-4299-a388-541b848bfd3d",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "3013c66d-31bb-4228-a1bc-90f7f01207dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc29e2aa-61c5-4406-897b-de84560ea481",
        "cursor": {
          "ref": "1e3a25ce-9cc5-4018-ade3-928d28b889a6",
          "length": 251,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "7cef47ff-c5ce-4dfa-9713-9bcc57e8bfe4"
        },
        "item": {
          "id": "fc29e2aa-61c5-4406-897b-de84560ea481",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "13aabd60-3e1e-405e-b12b-2d744d7db07c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2146a9f-409f-4367-9daf-0670d75fb388",
        "cursor": {
          "ref": "afe77d94-29c9-4aed-8b10-d1837c0e6590",
          "length": 251,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5da1984b-0c65-4376-b9f4-98f234e50b7c"
        },
        "item": {
          "id": "a2146a9f-409f-4367-9daf-0670d75fb388",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "6483f45b-a5c9-4913-9eeb-7a3b5b516aa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7d55699-3f21-4390-a79b-c6dd1e257182",
        "cursor": {
          "ref": "af1ae770-c947-4d7b-bb74-da163b6e4fa2",
          "length": 251,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1909f6e7-f7fa-4906-b03a-038eb09d6eaa"
        },
        "item": {
          "id": "c7d55699-3f21-4390-a79b-c6dd1e257182",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "e087ac0c-2612-4af0-a856-77fb9965cc41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f264e0a-7952-431e-9198-eadb76c7540d",
        "cursor": {
          "ref": "7ca856f9-8a3e-4a28-8f76-30c984d0185b",
          "length": 251,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "19501a83-c931-44f6-b46f-c659c40baec4"
        },
        "item": {
          "id": "4f264e0a-7952-431e-9198-eadb76c7540d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "384a6ce7-ac13-42e1-911e-cb52f6c9489b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20c46f33-596f-49d1-8623-b025a129a846",
        "cursor": {
          "ref": "a41b9dfc-530c-446b-acad-a58b52231c6e",
          "length": 251,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e4caac5f-c22d-4796-aba2-4bfc6a0a8f65"
        },
        "item": {
          "id": "20c46f33-596f-49d1-8623-b025a129a846",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "3f56e09a-ba0c-403c-8c62-7749c9bd56bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5796c46-e00b-4cc8-a684-91877b6cbf9e",
        "cursor": {
          "ref": "0ed8ad85-f3ec-4d9c-93bd-0ff27ec71052",
          "length": 251,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "bdb56013-d91c-4bc4-80f3-657978b79cbe"
        },
        "item": {
          "id": "c5796c46-e00b-4cc8-a684-91877b6cbf9e",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "9d24a5ae-54e8-4f3c-a8e6-877e44ffced7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ebc5627-0451-4d79-8e93-561e8571bf41",
        "cursor": {
          "ref": "54d224d6-dfda-4f30-b50e-403b1e08e8ec",
          "length": 251,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "a39d244e-b5ba-411f-935f-eb17157d937c"
        },
        "item": {
          "id": "7ebc5627-0451-4d79-8e93-561e8571bf41",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "552aac53-6f79-49d9-ba46-da5688a269fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7df521a9-418f-4ca8-8a05-e70dc4cbd5af",
        "cursor": {
          "ref": "39e1a7bc-96c3-4a10-8fee-0f8c476f01a3",
          "length": 251,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "1c69a2ac-12e0-4547-8696-b899847a7a41"
        },
        "item": {
          "id": "7df521a9-418f-4ca8-8a05-e70dc4cbd5af",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "172e4988-ddd8-481f-a021-d2a6058570c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e95d8f9d-8d9b-4e68-a573-cd7a27a7a82d",
        "cursor": {
          "ref": "c0cd3540-ffd3-400b-ab21-e88047f6b7ce",
          "length": 251,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "6258c60b-fd68-4f75-9f57-09836bf88f11"
        },
        "item": {
          "id": "e95d8f9d-8d9b-4e68-a573-cd7a27a7a82d",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "79b2e2c8-eede-47c9-be6e-af526a7e3557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b0e3e4-1a75-4679-a3ba-1c780f547c6c",
        "cursor": {
          "ref": "41e00104-6648-4832-823f-6bf3ad4a0958",
          "length": 251,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "f36ea924-d06e-4f30-a473-5d966bf35b3c"
        },
        "item": {
          "id": "a3b0e3e4-1a75-4679-a3ba-1c780f547c6c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "02215294-392e-4c3d-913f-73c14c888bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dde0302-3af0-42b7-b2b2-fb6eaa84ebfc",
        "cursor": {
          "ref": "52ba1739-86d4-4c2d-b99f-2d31b7b148a1",
          "length": 251,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "ddd5c3f5-c27d-4fac-8e80-805cb8a3d884"
        },
        "item": {
          "id": "3dde0302-3af0-42b7-b2b2-fb6eaa84ebfc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "0a6cf3c3-732a-4562-be20-2ee7abdb2df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80950b1b-990b-4f67-9a22-c0337e3002a3",
        "cursor": {
          "ref": "7a8db69f-fdda-43e8-9e52-d119896eac29",
          "length": 251,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8c911b56-9d03-4a99-b8a9-79bacc2000d9"
        },
        "item": {
          "id": "80950b1b-990b-4f67-9a22-c0337e3002a3",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "21c6bbef-c54d-438d-8810-ba3cbdff840f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a42817f2-a573-453b-b31f-9c8662c1d1c4",
        "cursor": {
          "ref": "e30cc952-daed-4fc1-8f17-8b5963da6ef8",
          "length": 251,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "82555eec-2c78-497c-9156-4eb3809cc505"
        },
        "item": {
          "id": "a42817f2-a573-453b-b31f-9c8662c1d1c4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "f38cb7e1-0d6b-4796-bcb8-7a89bc4d9641",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec521ec3-88de-49a5-8b32-b6c7fe8c94a0",
        "cursor": {
          "ref": "44a017a0-bf1e-4a2f-9080-10b485bd0ee3",
          "length": 251,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "dadce30f-d9ed-45dd-becc-76ebebae7c5f"
        },
        "item": {
          "id": "ec521ec3-88de-49a5-8b32-b6c7fe8c94a0",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "43f3a975-ae49-47d4-aab6-de449d7b70bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eec9635e-02dc-40d7-8798-4c5572e8230e",
        "cursor": {
          "ref": "3f0abdd5-0506-480d-8bc4-e57a89c0a240",
          "length": 251,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "3ba8b004-8a6a-49f0-bcce-a838ce025081"
        },
        "item": {
          "id": "eec9635e-02dc-40d7-8798-4c5572e8230e",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "b54465eb-cd81-418d-b30b-d32bcbf05b93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf5a125f-fa5c-4325-b59c-3e00e03016b5",
        "cursor": {
          "ref": "39c3dbba-7543-41b8-9a4a-b693f287a4c6",
          "length": 251,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "e9d79174-ee9a-4a4d-9501-70b63b698f9a"
        },
        "item": {
          "id": "bf5a125f-fa5c-4325-b59c-3e00e03016b5",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f513532d-f2c3-450b-b9da-8364b1662d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004800fa-86a4-4d0d-9aa1-0b3f0da3f4a5",
        "cursor": {
          "ref": "d1806aec-fd9a-436f-998f-88873b84be89",
          "length": 251,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "cea574a8-68d3-42e9-9d1e-4f8e9c74aaf3"
        },
        "item": {
          "id": "004800fa-86a4-4d0d-9aa1-0b3f0da3f4a5",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "f33617ac-8ad4-4493-958c-990f7df0fdfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1106cd95-8dbb-494e-a9ca-27b85555cf22",
        "cursor": {
          "ref": "7c43ffed-1463-47ca-8aac-b22f3cab909e",
          "length": 251,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "ca9194e2-b1b6-44f1-85c6-7f49b3834a99"
        },
        "item": {
          "id": "1106cd95-8dbb-494e-a9ca-27b85555cf22",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "c414138b-50dc-420f-b0bf-175f45713e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4acaaafe-42db-4149-bb66-0c8d6d7939c6",
        "cursor": {
          "ref": "b3ee3b10-0c50-44aa-99a5-6d989164e45a",
          "length": 251,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "a6cfb0bf-b394-4588-9864-ca511997fa86"
        },
        "item": {
          "id": "4acaaafe-42db-4149-bb66-0c8d6d7939c6",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "698361fa-e9a7-4de7-be22-48083091ddea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9b648e6-a530-4313-8ac7-25b460d9dea9",
        "cursor": {
          "ref": "a6feea27-4531-4b09-8fe6-55e75e4335e9",
          "length": 251,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bbd61e6e-6a01-4b60-930c-6c30d3dce060"
        },
        "item": {
          "id": "d9b648e6-a530-4313-8ac7-25b460d9dea9",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "b9a7f093-c4fa-4646-b1e6-7ada6382ff50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d6852bd-65e2-4b82-83bd-77a852673606",
        "cursor": {
          "ref": "81167581-c476-4f22-911d-61734c45d005",
          "length": 251,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d056d3f0-81b2-4858-8c12-7c104ef3c562"
        },
        "item": {
          "id": "1d6852bd-65e2-4b82-83bd-77a852673606",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "05662baa-50ee-4874-8e07-cc2cb5589722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ddaa79c1-f79e-45ef-b9ac-a2ea0a03dc02",
        "cursor": {
          "ref": "c236b517-c185-4e37-81d0-d97f8846a17f",
          "length": 251,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "ffef2478-d8c1-459e-8d7a-8c2d671ab9f0"
        },
        "item": {
          "id": "ddaa79c1-f79e-45ef-b9ac-a2ea0a03dc02",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1afbf93b-c2c9-4f1c-ba3b-a6030d116df1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29948402-a812-4c88-b88b-00f3065db1cc",
        "cursor": {
          "ref": "e84683c8-bb05-4827-aac9-e1ee71b94e4f",
          "length": 251,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "accaa80a-2659-495b-92af-f1a53d18cfef"
        },
        "item": {
          "id": "29948402-a812-4c88-b88b-00f3065db1cc",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "45057d5c-cbeb-4607-929d-6f8fee6980fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "032e63b8-9956-4fda-a291-9e7568919919",
        "cursor": {
          "ref": "f1633e35-ec65-4818-a361-e557839106da",
          "length": 251,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "5f631c57-da98-4292-b940-2934f710fcee"
        },
        "item": {
          "id": "032e63b8-9956-4fda-a291-9e7568919919",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "3552a756-b616-4ab0-a9a6-2cabb7f5bc2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15276c02-a947-4498-abef-8075a13295a8",
        "cursor": {
          "ref": "fb018d76-40e2-4dcb-9a96-79df661a5ebb",
          "length": 251,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "54fc4e22-3008-4902-9486-724743a257be"
        },
        "item": {
          "id": "15276c02-a947-4498-abef-8075a13295a8",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "88c8309e-0f32-46f3-ae76-8d8a2fb0cadb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8add8314-f0cf-4560-8ac5-bf628668c37f",
        "cursor": {
          "ref": "d0a7e5df-8ac6-4fce-bf81-177ca6184d2e",
          "length": 251,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d3d04c75-9290-480e-883b-d31d1721aa01"
        },
        "item": {
          "id": "8add8314-f0cf-4560-8ac5-bf628668c37f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "02803f0c-d5f8-44d4-aaa9-088d7b691483",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49396860-263e-44f6-ba19-9d54f6972d61",
        "cursor": {
          "ref": "b6d480f1-839a-4969-8059-bef84e956e99",
          "length": 251,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "b82ac995-8fa8-447f-ad52-0d06db4ab686"
        },
        "item": {
          "id": "49396860-263e-44f6-ba19-9d54f6972d61",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "b5c7a588-4858-46e7-9e68-02c1a284ced6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0dfdd4aa-e4ef-4fd3-9008-8854fcddebbe",
        "cursor": {
          "ref": "3eb46c21-4d22-4e52-b66b-716f98f50595",
          "length": 251,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "418ce5bb-28ea-4b12-943f-0c5918fb8d89"
        },
        "item": {
          "id": "0dfdd4aa-e4ef-4fd3-9008-8854fcddebbe",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "73415397-56f1-4188-9f2f-d525e3c6fe5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 112,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ead21a67-5e5d-4a69-891c-72bfc6384fe7",
        "cursor": {
          "ref": "83c3c6e7-5e5d-4824-b766-1d397b2c1375",
          "length": 251,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "090a7627-dd6b-4ab3-83a7-6db673b42aad"
        },
        "item": {
          "id": "ead21a67-5e5d-4a69-891c-72bfc6384fe7",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a0513b15-f964-48f0-b22e-f13a9573e9c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "837fde67-391b-4dd7-a32a-0a36b217dbdc",
        "cursor": {
          "ref": "7452708b-3331-48e5-b0d4-6121c3686f82",
          "length": 251,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a949710f-0140-423c-a43a-332ce371a9f7"
        },
        "item": {
          "id": "837fde67-391b-4dd7-a32a-0a36b217dbdc",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "9067a465-f7f0-45ff-9931-766caa10a58f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04edf4eb-f486-49f1-ac2c-5e83ec45a79a",
        "cursor": {
          "ref": "e398f140-5aef-429d-84e3-f83b601d0530",
          "length": 251,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "acf9ac80-2f84-43f4-bf89-4d28bbf7e39e"
        },
        "item": {
          "id": "04edf4eb-f486-49f1-ac2c-5e83ec45a79a",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "0a6eec78-b9c6-4b43-83af-c1e60bc49d34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45129636-2261-4f71-8fea-f2fdf978dadd",
        "cursor": {
          "ref": "e86489c7-60d9-475b-82e5-aacfc84144c1",
          "length": 251,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "6d919464-eb26-4495-89ed-701e677f373f"
        },
        "item": {
          "id": "45129636-2261-4f71-8fea-f2fdf978dadd",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "199043d0-0489-415b-84fc-29090cfcd95b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929f5844-2a8c-4280-8015-2855d38d1485",
        "cursor": {
          "ref": "96d37a4c-5efb-447f-9298-57e18ee3ce27",
          "length": 251,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "702ac762-90df-496e-abe5-d1e739361cb4"
        },
        "item": {
          "id": "929f5844-2a8c-4280-8015-2855d38d1485",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "8f7cae7d-f060-4f96-8e4a-04e1a9741a7e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e7ef9fc-ba8d-4eb5-ba8e-a29f2cb4c254",
        "cursor": {
          "ref": "bae62d13-ebc7-4330-90c1-f30d4d821be7",
          "length": 251,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d48fdd28-5e7e-4ec6-9f0f-61674688b205"
        },
        "item": {
          "id": "9e7ef9fc-ba8d-4eb5-ba8e-a29f2cb4c254",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "b727331f-9fb7-49a7-aa18-adb52a382718",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c61e7292-05e9-4899-a467-929ea9222cae",
        "cursor": {
          "ref": "709b212d-a114-423a-857f-0da64a345770",
          "length": 251,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "4f17b2e1-6225-4bc8-b682-6fba078f5481"
        },
        "item": {
          "id": "c61e7292-05e9-4899-a467-929ea9222cae",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "73d281c8-7a4b-4101-a189-aa19dcc9efb6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae1ac84b-0c08-4117-8a1e-8a9f76e3b1c9",
        "cursor": {
          "ref": "ecc4ab5c-a9f0-45d3-895f-df8222cd67a9",
          "length": 251,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "0c811b66-007d-4e57-857a-90a2fb2e6ef0"
        },
        "item": {
          "id": "ae1ac84b-0c08-4117-8a1e-8a9f76e3b1c9",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "50c70ff7-ce34-47f4-a0c5-a8fa0e04b582",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "21738103-0371-48c9-9a5d-8537d8e948a8",
        "cursor": {
          "ref": "e8b07128-cf7b-4817-95a3-15fc04c3c049",
          "length": 251,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "52cd4130-2663-459c-9417-963be9f61deb"
        },
        "item": {
          "id": "21738103-0371-48c9-9a5d-8537d8e948a8",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "86b244ae-a9c0-44fd-999d-4026e13790f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "b6e00f9d-7671-4566-8934-cc5b256c26f4",
        "cursor": {
          "ref": "01415ea9-253d-4b17-872a-3975da5bf003",
          "length": 251,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "fb2f41ba-7df8-4161-9f80-fc23d5b633e0"
        },
        "item": {
          "id": "b6e00f9d-7671-4566-8934-cc5b256c26f4",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "251e0945-04c6-4ba7-8f07-7d2c7fd0cab4",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "c34a8e11-4ee0-4ef3-b8ec-0c3c79cea135",
        "cursor": {
          "ref": "89d5a41f-fecd-4ede-bfce-5c4e8f77dbd4",
          "length": 251,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "bc7f1916-baff-47a7-878e-ba2ac33b3b07"
        },
        "item": {
          "id": "c34a8e11-4ee0-4ef3-b8ec-0c3c79cea135",
          "name": "credentials_verify"
        },
        "response": {
          "id": "ed345e0f-3a29-464e-a0ac-a5edd71a6533",
          "status": "OK",
          "code": 200,
          "responseTime": 1638,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "70fbe4bc-5710-45da-a4bf-9acf37d803f9",
        "cursor": {
          "ref": "9808791c-f433-4eaa-b339-26b1b983734b",
          "length": 251,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "031cf1c8-4e5d-46ed-b1b9-69cd21a41de9"
        },
        "item": {
          "id": "70fbe4bc-5710-45da-a4bf-9acf37d803f9",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "f209b8a7-2082-42f0-9443-8a0dabd3218a",
          "status": "OK",
          "code": 200,
          "responseTime": 2981,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee1523a-930c-416b-a333-e9dc8d800d9a",
        "cursor": {
          "ref": "d97c2775-1bc0-4749-86bb-c1dc7d681306",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ab6a2223-ac8a-4172-995b-f672bf8b7fd9"
        },
        "item": {
          "id": "1ee1523a-930c-416b-a333-e9dc8d800d9a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "952a6448-b43d-46d2-90b1-29435cf45c25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1ee1523a-930c-416b-a333-e9dc8d800d9a",
        "cursor": {
          "ref": "d97c2775-1bc0-4749-86bb-c1dc7d681306",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ab6a2223-ac8a-4172-995b-f672bf8b7fd9"
        },
        "item": {
          "id": "1ee1523a-930c-416b-a333-e9dc8d800d9a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "952a6448-b43d-46d2-90b1-29435cf45c25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "1ee1523a-930c-416b-a333-e9dc8d800d9a",
        "cursor": {
          "ref": "d97c2775-1bc0-4749-86bb-c1dc7d681306",
          "length": 251,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "ab6a2223-ac8a-4172-995b-f672bf8b7fd9"
        },
        "item": {
          "id": "1ee1523a-930c-416b-a333-e9dc8d800d9a",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "952a6448-b43d-46d2-90b1-29435cf45c25",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:246)"
            }
          }
        ]
      },
      {
        "id": "abd5769b-8ea9-434f-8cdd-d1219a87a55d",
        "cursor": {
          "ref": "f090ce82-097a-43be-ae8c-e9c49d3074f7",
          "length": 251,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "862cbe71-8cc4-4bf6-a253-cf29464d0894"
        },
        "item": {
          "id": "abd5769b-8ea9-434f-8cdd-d1219a87a55d",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "c9c11f20-24ed-48d6-8421-b56beef46469",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:247)"
            }
          }
        ]
      },
      {
        "id": "b8438fd8-3a93-4697-97b7-4fc61b68752d",
        "cursor": {
          "ref": "a801f5d6-7f7e-44ff-b462-e78b1e6a2b16",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b7a11842-ae7a-466a-a77a-5f4ad26de75c"
        },
        "item": {
          "id": "b8438fd8-3a93-4697-97b7-4fc61b68752d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2ffd297e-4470-4a38-a793-b6984d69a794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b8438fd8-3a93-4697-97b7-4fc61b68752d",
        "cursor": {
          "ref": "a801f5d6-7f7e-44ff-b462-e78b1e6a2b16",
          "length": 251,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "b7a11842-ae7a-466a-a77a-5f4ad26de75c"
        },
        "item": {
          "id": "b8438fd8-3a93-4697-97b7-4fc61b68752d",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "2ffd297e-4470-4a38-a793-b6984d69a794",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "ad717fa4-25cd-40fa-ac07-721895d0b0dd",
        "cursor": {
          "ref": "fa43f9a4-40d7-4fe6-b827-1a26af4f248e",
          "length": 251,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "e96d08aa-0f73-451c-b628-e18c15e40b44"
        },
        "item": {
          "id": "ad717fa4-25cd-40fa-ac07-721895d0b0dd",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "a4f1301c-1a71-44c4-8c2f-0a8c07b43da6",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 321,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "48b7f917-dfba-48dc-88bd-d3c096e6d51c",
        "cursor": {
          "ref": "ba5e50ac-1ad9-4014-b950-4981c9d38e0c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1fd2d1bd-4331-44c4-808a-0bed000281aa"
        },
        "item": {
          "id": "48b7f917-dfba-48dc-88bd-d3c096e6d51c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b0d4b897-e39f-4f48-beae-78a1377e9a9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "48b7f917-dfba-48dc-88bd-d3c096e6d51c",
        "cursor": {
          "ref": "ba5e50ac-1ad9-4014-b950-4981c9d38e0c",
          "length": 251,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "1fd2d1bd-4331-44c4-808a-0bed000281aa"
        },
        "item": {
          "id": "48b7f917-dfba-48dc-88bd-d3c096e6d51c",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "b0d4b897-e39f-4f48-beae-78a1377e9a9e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 24,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "11fb4a28-f3b0-462b-8893-1b02214c6a69",
        "cursor": {
          "ref": "9f481f86-4ac3-4247-9fcd-fb968a00230d",
          "length": 251,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "f8fb2667-8da3-4b26-8bfc-c4ddf53612a2"
        },
        "item": {
          "id": "11fb4a28-f3b0-462b-8893-1b02214c6a69",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "06f9b112-d4fa-40a1-8b26-8db52e935a8c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 56,
          "responseSize": 21
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 500",
              "stack": "AssertionError: expected response to have status code 403 but got 500\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token 'I' at 1:1\nInternal server error\n^",
              "stack": "JSONError: Unexpected token 'I' at 1:1\nInternal server error\n^\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      }
    ]
  }
}