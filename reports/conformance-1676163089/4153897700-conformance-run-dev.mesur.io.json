{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "dd0c89e2-2269-48fb-9120-97b37f6b3ae5",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d8561743-07fe-4242-8350-03f25a75bd50",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "08b4663c-2927-42b0-b6aa-07fde5c317d5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "4cf74e9f-7904-4f18-b924-0e0d59a9bd54"
                }
              }
            ]
          },
          {
            "id": "ac02f755-4535-41bf-99a4-38a5ca390af4",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2f2aa46c-ce9d-43a5-af20-51a230d3564c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "b392fd6a-f1dc-4f15-8ff6-9be9e9791156"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "f6df7a6f-ee0e-454a-8284-4da9d0858dd1",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "56d7b460-f53f-4ce6-b2d5-cb84c3a9d1c9",
            "name": "Positive Testing",
            "item": [
              {
                "id": "dc7abc92-3823-4004-bd0d-b124f2f7a177",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6f330247-a1bc-4814-acaa-ddd34f11d573",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5244e638-6abb-4f3c-ac61-9826fa57699b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "50d45ffc-012d-40d9-b18b-a71a89cc3ce0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b73653b1-b744-43b5-ae44-894645aaa26f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "57226e81-7afa-4a58-9660-55d3e304d53f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "35933fa8-26f3-4ba5-a8a6-d09123db41bf"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ed6394e-8944-437b-92e7-9f0e309666a8",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "9255e3bb-883b-4b0a-a1dc-aea264d2b041"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a17b5bc6-dec3-4d56-b561-2897a9603e00",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9aeb65da-ecde-4cd2-aa82-23b80ba70060"
            }
          }
        ]
      },
      {
        "id": "2fb30216-a8fe-4a21-a5a2-743d9a11ff4a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "a4cab052-6ede-45b9-b1a0-bd7e174725bc",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9d3a5196-5fd2-431b-bb6b-e3c9575cf51f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "add99dbf-84f8-460c-8fdc-0d480a5fa87e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c54458ac-a49e-42be-bb9b-b6d2b6b32b26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2c507877-8c8e-40ba-818b-29910a3bbad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "295bf9fd-0224-4db3-8bca-610e0f14667c",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e89634-7649-47ad-86aa-cf2aec29b4c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a02f04d7-2091-4634-8026-0a3773f145f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69bb9bbb-1052-43de-9d48-55682da03451",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e397272e-a2c1-4710-bfa6-4f10bb68f4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "caeba58f-8815-4ea6-a73a-eafc50e384c7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ae615e94-76f8-49a6-96d6-3858448aeda6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0d1f75d7-52c7-4e8b-9e89-cd9aeb3d866e",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "678639ae-d6f5-40f1-acc8-555334401875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a54b55b5-6c56-4ca7-b30d-c78bac11f85e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e696e0e7-dd34-46f0-985c-3ea0456310e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32d4ea79-1956-44ad-a018-e937e941adde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21f4eec3-104c-44a7-9733-065beef70eaa",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b0b7a5-fd9b-4ae7-ad07-93bd8d463ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bc5f3c4e-0d03-4c4b-8dae-4784bf0255d1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f37b7b1-7dec-4023-85f9-316e01083e34",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "c1c1dc96-cb45-4675-b866-72dc73f3e0d3"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "78e00ffc-c1f3-4814-8444-5f8717660ec6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "e74b8d47-c857-48f8-8376-d59d47fdf5b9",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b73ad52f-d968-471a-892d-3d1b2906ff33",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "34d8171b-4a62-49c4-ba5d-ab29ff4c1f0d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "25d9ee25-73fb-4b95-9095-7d04a0fd0d8f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "7062b8a1-1ae9-47a0-abc4-58a1a9feb3ab"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "fd2435f6-d774-45f9-9f12-c10075f9935d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "50c65d01-85db-4917-b381-2546792ddf36"
            }
          }
        ]
      },
      {
        "id": "7421cca3-92eb-462b-ae38-03233721763a",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "f4be492b-f17a-4202-830a-aa4be461d271",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0959c13f-5def-4988-ae4a-00d5cad4d3c7",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "14488d81-6965-46cc-902a-c9b7622242b5",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27afdd5c-0e10-44a4-9824-e346db33cf2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0829e07-7235-4a6d-9120-d1a0230a09e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e733d49-da94-4bba-98b3-fbe83c8cd5c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4c18d17f-412f-4ef3-af3f-0d3fa2b10a98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8334d10-830d-4748-8c7a-506eeacc08e5",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c74465be-abe6-4b09-92ea-b7190b096283",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c95da445-0bf1-48a8-8d5b-cf4943796943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4315e412-1ae5-452d-9017-561418f9e40f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "919b16a0-d9c2-4417-9510-78746a73bfec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba890b4b-9709-45fa-af1b-1cf7a3c51f82",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11443d8c-6cd8-4181-b167-879f92acc5d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4462eca3-4c6b-4621-bd90-23773a88d996"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7107d774-eeba-4ecb-9e15-af6d2ffc5c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "83f97e8e-3318-4359-a7f1-daa3f7b55c33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8d8d400-7857-4158-997f-d881195f5933",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50bc4dc9-20fa-4458-8fd8-c5022258273f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d64f8a0-9de6-455b-acdc-77e176b9064f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3ccbbd-e7ed-4ca0-8d4a-11c8507f7e9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31b53f48-f1f6-43e1-9014-ddcf810b7b1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19fe8d0d-1ff4-4323-95b2-0c41001af603",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe22f3a5-8942-4a4b-b514-841eac69a8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3be81b4c-474c-4bac-a68a-28989a059d8b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34e58e4d-af82-4368-9664-76812dcb4431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4ee7b0f4-4ce7-46d0-807f-cffc2b7c9372"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c94a3a8b-5376-48b0-9818-fba1005dbdb5",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dfea230-c174-4a17-b047-f281d8763eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "383963bd-5913-4936-941d-ee84c86d54eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47703aa5-c81b-4f90-8efb-26d3bf28adfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "44797fb2-6290-4356-b063-ac5b320d6bb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d363ce64-dc0f-40ea-8338-1cb103bbd494",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f08e2b-eafa-4904-a7d2-0d9bf9f45440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69c0d6c-9e04-4dc7-b337-176eabbcc712"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fc54575-d25b-4b61-a6fb-277f87b90032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2ea2efd6-9b8c-438f-9626-e28e62f17806"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4ed295e-d18f-4755-be07-1578dcb1b51e",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "531ea95a-5848-4568-b30d-adca1e25418f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7027ad8c-3f03-4cb3-9941-36107dcdff53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a41b71-f585-4b56-8a6e-aa1a1b74b07b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7d8aa910-5096-4410-bebb-0eb626de08b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "944b2529-4476-46a1-9ae0-5a76435ffc55",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90a37b70-c67a-4596-8d74-c6edad61b199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "067ff39a-5a12-48a4-b707-6560387b6391"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a346db-0ad2-435f-a5d1-22cb1b21f0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "abea30cc-4959-4294-8926-e208bff7b593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada8fbfd-b434-4514-a5cc-4ea4e0b4f3c7",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b6f5ae-fc0a-4ccd-9bb1-be10261b4308",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a302c351-3b79-4c21-bc8c-ddf61a35a96c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d119f5f7-02d7-4a3c-ac89-6f4de811194d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2a3f44e4-8b93-4674-83a8-c56312b4d950"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a2ad5cf-d1d4-4bf0-b8b7-712da626d761",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bed4c633-0816-4884-b0c6-e8861204df5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "214d2a78-766b-4b86-89a9-c33bb351ea7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e58d622-a069-4e81-a8dd-de889e57e6c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed39443d-e8a7-4d84-af0d-9b524eb0de7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c01535f8-701e-4c6f-998b-5cb474115af4",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa2ddb2a-f50c-4b6d-bc7f-e20b06240dd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "564fb699-87ac-456b-9903-7aafaf6c95f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78869dee-9654-46f4-9bd8-f10096865a7a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "67ec4e08-e049-46d9-973a-62bfb95625ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7e4482d-3d24-41b8-9586-417e8447b5a3",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70b61a84-628c-41d1-b1c8-204e5cbb17a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1a349719-453e-47eb-a739-23e48b37dfd1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d7f2a44-3ff1-45b1-bd3d-0bbf9cd31deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d0ad288-0dd4-4440-9ffa-8e7669b1db84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cbf9966-435c-413a-9c74-f1a3ce6f2d03",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf94c541-eda8-4d09-bef8-35dc336f16f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25391ac-8094-4bdf-9449-3b21c98897e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7823c51a-0b51-4ea7-9e8f-f677eefd7bc0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0e295c2-e66e-444f-91fe-2f39ae7be74a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "324ce931-e9ad-4e0b-b4b6-9c87285dbde8",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16026575-7262-4ed0-9928-f41297281ee2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902e0393-b20a-4db4-ac6f-d952f9fca121"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b5376d-d22d-44cd-b698-d0ea38f4c861",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "91bae2d4-a5d8-49e0-b1d8-025e6cc92ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ed4883-7de1-4d1e-95ef-8f8b067d37c4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67b21a5b-4715-4d30-8de5-8e2c23c2c2ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73790a47-3afe-4358-ae0b-728ef37ec8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bf3fc64-bab8-460c-89f2-907abdd89a11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "372bacbb-6bd9-4c12-b9f6-0d55b63330ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a11f6a9-a3c7-4465-b0c2-3bb813b18cfa",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "146f909d-3437-4486-a395-163d595ffb57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a3a538b-04d7-4d28-948e-332052358e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab30b91c-ddc9-4dd8-9814-3a83cf0c4c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ce9e0dd8-d15c-4be0-b2eb-22e75261f82a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e42062ae-08d1-43b6-b582-f5ecb5d4fc1a",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53dc293d-35f1-44bd-80b1-346701166cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf95a6b5-0140-4fd9-8a1c-9934d748eb49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f45cc44-bd51-4213-b367-47aa4c3d7b99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98c45d32-1d7b-441e-b323-101b11e24792"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31cc23c4-35f1-4a14-92d6-7acff891decb",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6f2c858-2a05-4019-ac45-42f0ab551847",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82282452-5f53-404a-a58b-2aa0316b2132"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c41a0b7e-1f83-4536-9be2-1c699a89c5fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6cc1aa8f-e14a-47e2-8bee-45bb85f3976a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f4384e-ffa3-403e-a0c8-267bfef1d102",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c38d9e9-0f92-4bff-8329-febd597fa38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6c0ca68-1098-4906-a3ca-26632b73efd0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba41c4a6-9040-4a50-876a-b76d5eda1313",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "270dd484-af98-4107-845d-d1497ddf6ccc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf6d13c-35e2-41c6-9a57-653713e4a8d0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e90d3613-4f44-41e5-abf6-67d3f9bd68f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "911a0148-4630-4d03-89f0-0db547513197"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0384ea-28cf-4cb0-87ac-a5203253e655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f91c79d-2343-4d24-8410-7d2a49d7a94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0df3cd8d-3ac0-40bd-bb43-f7aac35c8106",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5743f2ca-53f6-49de-9a8f-3d53f8b805cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c2124c37-9c0b-4a23-9241-1a2add3bb9ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c910ad86-fe5d-4af3-9c50-c644df85f109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "16050704-0478-466d-aa3a-8f190f879a27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d92624c-59d3-4917-9889-d5b459ada7bd",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d261682-20d4-42a7-afc9-9b6f1eb1670c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3628221-0748-4ef8-9e84-e1990c5ded22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dedd7c82-00ac-4047-8c20-0989ba529b59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "da81fa86-ab0a-4f12-b72f-d86f35a0c13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a0f541-903d-4ce0-b907-ded45e671040",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2127bf9-90bb-4536-bf86-8550f7c078de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ccc8e908-9562-46e2-968d-a48398e6ccba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20e1abf3-61f6-4ad7-aa2b-f89a3f219cae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "28422064-0153-48e2-a0f3-7c96b6fb82bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01fd5b7a-4d68-4879-8821-479020353147",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd3b7099-a30c-4868-a2e4-767e7e3ef192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1b84ca1-b09e-43de-8c39-f3603b46b09d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47ae8a4d-09d1-441d-8992-36f24fec77bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "568d3a8e-308e-4916-a60c-bdf3c73e6ca8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a021d900-6328-4c3e-9adb-7b5850c33a81",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6b0dca5-7683-4a37-8b42-6d0304faaf1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f004d4b-eb4d-4a03-80ee-99a472b80c86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bd7011-f9da-4662-ae90-aa9a2c289507",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7b0e32e-a9ad-47c1-aa1c-9d466e207ea4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a28a556f-4607-4811-aa29-7a4fcb792129",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a17ff75-c0fc-421b-be72-4d8cf984803e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b96754dc-0bec-4b31-8d38-92fabb2a2d7e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153df13d-77b0-4012-89bc-c9c876347f19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4fc4940-bd1c-4909-8bbc-39d39ca7596a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebb04696-e43c-43ff-a3d6-deadbcfae46d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a675cd23-5ae5-40c0-9928-6c9c8b131ff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04a711a7-fa73-4f61-bcfa-62233a6948e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f8e64e-255a-424f-85ce-a01046c9eebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5d976090-d899-4609-bbdf-952c4f7fb83d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7069fe9-5a52-424f-bbf8-e4fa0db00276",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e0f2d1-8219-401b-b4cb-bb601d5eee0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "596edd9b-be8a-4681-8895-1e2bec3f0c16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbb54e43-01c2-4e0a-b677-e356a4d2c21f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "e599a821-3ca5-48c0-8bba-3425fa4ea967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f35f2a5-b655-438c-b124-97279d69db52",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b34c793-3d5b-466f-9f76-b35f4968969a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62031202-da6f-47d7-bf66-61d88fc4e0ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73760221-37f1-448b-ab71-09daca734223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "69548d4d-94c0-45e4-85fd-7376d144b443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30445a3e-5ae6-4124-8bc1-deb7c8774c18",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0d6de49-fc17-4b0a-80f0-15fbea876bf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43374605-758c-4c0d-88c7-400dec900595"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00399b8-31b4-43c3-91b1-b94bb0ed9356",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5df172e-9406-4682-ae51-bcc731de89f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6458b752-359e-49bb-a723-f2861f3ae8b7",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ef82acc-9b91-42c2-8cef-30b5de20db5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "672d1e58-6196-460f-862a-3ae46e51094b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc6a58e-0081-4b05-8bb1-c29092404781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8ed2688-2ccb-421d-b17d-908ed0c8934b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e421f804-f3d9-41a0-aa58-a35c038c7120",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d47ccd44-30fd-4c6c-9a00-2731316ef168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "020fe8f6-b78a-4252-a7ad-5212286c2be9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "744481ff-e90f-425d-9ef3-3b12e0f74abf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceb27367-7c6a-4867-add4-07d804e791c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eee8fa33-2c03-4bb6-be5b-d693727c6835",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f76c8c9-818c-4c16-8f7c-13880dac0d1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cbd3228-1bd1-437a-bd01-aa4f49a72c0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78683b9-ddee-4a0d-8fe8-59ccc48a13b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9919a41e-268c-4e78-9839-883b02595580"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f24311-b996-4c79-a552-8eed853213a3",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76354412-730e-4660-9adc-8f2cc6c8bd83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37ae25c9-bce5-49ac-9bca-9cc9fab4ab10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ff48750-49a6-41c5-96f6-0d3079eb77d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e0a15a9-708d-4cb8-bf3e-464eca6f8d45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c2a98b3-c772-48a9-8eb3-b9a37cedbcf2",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3aaaaad4-fa9e-4b64-b53f-e07d54d09aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67e9b7aa-03bc-4bde-ab72-4aa41fe5ade2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c41bb26-040c-4ef8-9094-8e32e6b2542f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e0f0b49a-2435-4730-8c2d-7573c3a1d541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7c8c59f-0909-4be9-8b46-c8c433cda7dd",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0ed7e0b-1f00-4f05-b513-1df58eab0edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce066f10-081f-495f-a338-e184d26317de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f01721b-d2a6-479f-bc11-542bb8f9cdba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "660c1b84-5db1-4268-9f91-1dc4e1ac10c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "454022fd-0a8d-420c-9820-73926323a7c1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ce16a8c-69eb-4f7c-a61e-600c00e9a622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f8a130d3-7894-44e5-98ac-ec683b2adc7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6916483b-55a7-4005-b2ac-0fdef44c9fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0e18d29f-3fef-49fa-9355-adbab0047315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84938c3b-6789-4bb6-85e7-c5954622295f",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daeefef6-e366-4133-8feb-5d4f44888488",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6636ee4-6d73-4014-8fb5-08d4f019d99a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4f359b8-6e8b-430e-9eac-617a534813c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "88c7936f-dd43-4111-98a4-bc690e159ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e450872-e880-461b-ae09-2564b9b53a65",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a90295e-1b9d-4ea9-a420-bcea3c85fe6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c477ce34-2566-41c2-83e7-a9f3d4cd8e57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8196bb32-514f-4fc2-8800-2afb9006a7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9b44934b-d852-411a-ac4e-276662777447"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cc1dd1a-5e6c-4c3b-bfbb-6b1876562455",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6666abc5-da2d-4855-9b78-7d902b167152",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c476da62-6227-4b70-b993-aaccd167b789"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9256890f-0149-479d-a834-cf81c766a054",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c21b8a4f-56e9-4ea3-9468-e54633d1ba6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16e466ec-d763-48b7-8d56-e52c70658ed6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8441947-6e82-4d13-88a2-c55d7208a96f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8440c2e7-6b92-49d1-a8e5-0b2a8e1de0cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0737a36-2a9d-4688-b617-5dea3f4f0fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6383fba3-581b-49d4-aa9f-691885c119f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e401fe1-d21b-4e20-a387-52850f197846",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "314643e9-bf9f-4359-83d4-8650a94fd213",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "adc39194-6800-416f-9dfb-598d17680295"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d1c8e2f-d966-40e9-86c8-acf23351c008",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "65947a53-f877-4ed2-9135-ba0797b46e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c089268-4d4b-458d-bf7a-325a2906f3fc",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97f9b4a4-9601-4f72-9116-68755fb4c378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "754b5088-1dd0-4d87-9f8a-68a29a69fc09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb3009fc-f8da-4389-9a3c-30d0e226d0bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fa501311-8efc-4bad-9417-19983f05b4ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a72c865-b041-480e-bd25-6867cafb56b3",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4071be4-a84e-4375-b74e-1146b0324f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48a7232e-4fc1-4862-b139-13d996d19110"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc8c0850-9daa-4b1f-b344-b149e476ea7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe1d297-9603-416c-8079-cf39b5433a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5d3effd-0fc2-421b-9152-d62c331e2e34",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3cd4d1c-f709-4d98-9aac-8e18728c6226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2459813f-7158-46cc-871e-ed8f6554d36b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fbebc8-6c72-4aad-9991-091d1494aff5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "9065ce8a-71be-4321-b245-93e19d142c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c735ba16-b920-471d-990e-fbbe07c57e49",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "67d6b4e4-e299-4ccb-9113-77859a2bd08e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "799c73d8-edd6-4b64-b324-d37f8151fba4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "465b566c-5e47-4506-ba25-91650ac06fc9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79baf762-412a-413a-ba7b-5f477c929749"
                        }
                      }
                    ]
                  },
                  {
                    "id": "198c9ead-6c74-4f35-9b78-ac4c61e28b34",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ada29b5f-3bc3-49ef-9e59-e08de5c25573",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31dcc5f-6f49-4c24-9119-8177c0b41d63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb2196a7-546e-4752-b8ce-99db8c641fac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "197dbacd-5dfd-4666-b26b-6093e15b96da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38b209a8-24d7-4559-9fea-1746f59857f7",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c984e9e4-1a94-4b96-adec-247d470fe641",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d8bba56-1214-4c17-bdeb-826ceaae7a4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4263c840-7468-4765-812b-6590d3c6be95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d8efc27-bb59-47a7-812d-2a8978b33856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b079d0-92db-4d6c-8085-43fe1d5a0398",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2ecdad-1268-4066-a571-635ef9ebf8cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e614cacd-b5ea-4901-8213-55bf4132a507"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44ee1ac-39bf-4710-83a8-cf4c54b9a99b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "783c67af-9162-4adb-86c3-a21456528488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f8f9868-b3ae-4935-a2e0-e7ebdc38e105",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59fa0994-cd5c-4b7b-b95c-099ba3932708",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34428183-4ca3-4942-b238-2da8d6c6a539"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d894dd60-f8b1-4abf-9cc9-0475123f43d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "548608b3-38f2-4d9d-ab1d-5b23e75759e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c86c95bf-2b19-4876-a8c7-d183ba82f971",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7de7b8f0-3722-4ad9-8d9a-f60ba6d3644f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82411c0f-e94b-42d6-bf2a-ccd45e20282b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "587b19f9-e046-434f-824d-a3b9eae2206f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8d11d22b-333f-42cd-ae95-3428538153b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59bd0a92-0ed4-4758-94c7-f89294c7b650",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5800fb00-bf89-434e-bb45-b89702c12e0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eea28004-d140-449a-9766-8705762b00bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050a2e6e-3e36-49a3-9a1e-11bf931d6817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "45c257e5-7b59-4c0a-ad39-061a53e8e6da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "702937e7-07ad-45f3-8457-f3e3190ea75c",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b71dc901-5082-4a95-aa3f-72da484ef4bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c5c89ab-12ba-488f-9e74-684af5beed65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "091bd2fa-3ea6-4d86-ba06-5666bb5ad436",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b6e636f8-17f4-49f4-a696-8d5780e588d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5982a791-db0f-4016-80bd-82264bd793b8",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56924cfc-a93b-4482-be76-d71cb606a37a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56200ff2-1e3b-4852-98d4-0d93e96b0c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1b8414-b245-493f-b2a6-87e8a3824a34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "40708758-1582-4556-b776-a6b34dc0d732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4569778-3870-4273-b0fe-662da24a2e14",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f441d9f-8a4d-4dae-9224-e5079a09ceca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e733d7b8-c64f-4498-9465-7d7a779dbc98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16313781-acd1-4a32-8250-194b71221e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "47fea673-0d73-4cf0-af5f-3e78a7e7011c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d009ccb3-d16f-4166-90cf-86b7434f454b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e83e1e1-7691-43ce-a4a5-03256284ef10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f15ae91e-47bc-4523-9ced-4c5b508b1c49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2099874-c1ea-4f75-9af8-594f915192a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3f35ac35-07b5-456e-a565-fcb6980aa3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7841e7d-4916-42de-bbe1-5609803646de",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cf323e3-bcbd-49ed-b648-8aff81a0c40c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc396cc8-8c80-4a36-9526-14bd8025c3d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c03e34e-74b4-4e4d-a076-b694da187db5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "24a3a8d9-5af3-43eb-9d39-6a147961008a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "071d4373-d039-44e2-9132-6683da733c5f",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c857493-5f7b-4d5e-a169-10f33162968f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1abd10a-3d05-4f6e-bb49-052f606bb959"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a275483-8b73-4400-8dfb-85a4a694561b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "331c2bbe-d859-495b-9194-36f47f79c51c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97fbfa4e-1a23-4610-b83a-65968f2ec88d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98edf000-5af3-40ae-91d3-9cfdaf33bf9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "987bf376-9a37-4d0b-8895-075a9d73d691"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "290d135f-b962-45e2-928c-0b7c22c487de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a9dcdbae-d6f7-4d4d-840e-f418341f4dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4224d08-66b3-4b44-bc26-b0554b0eb810",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1378f1e8-90be-4118-9fc4-84f4ad843c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51c27214-576c-4d3a-ba9a-d4acbf812893"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e367932-ddaa-4c0a-900f-cc266989745f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "c68a5563-8d2e-4f36-ba20-62b1b7b3319c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa128be0-e939-43ac-9bb9-79fc948d0a39",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64cef06a-461f-48c7-9b54-5545cbbdf942",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b06b299-4618-4a87-9cad-09b420329577"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4a559dc-95d1-429c-a541-347b9bbf4092",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f52362-189c-4edc-bd0f-957502569e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b2789f-435c-46d3-90b6-a7a89226a8db",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7d10bd-a271-47df-8b75-50b1602f2d2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3953cecb-bd79-492a-9814-e8c9676808e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e51bd65-323b-4b54-9259-5cca57e245eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb76b6e0-e7eb-4c65-9955-6fb68b89b4fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b61c41bf-5f17-4f7f-82d5-d9529731a5fa",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82c57bab-71ea-44f5-acbb-0003c9c88984",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3dcc5a3-504a-4580-b83b-79e730d52ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a90e6f-cac1-4d64-9b3e-bdd5f3c23fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6f4c500-53ca-49a8-8fc2-bae547c5fdfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ccce7c8-3fa2-4ddd-99ac-09943688f40e",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3089044f-462b-42da-90f3-86aeb772ee78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed05cdb-4624-4464-8a9f-8dcc0e26da2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "345b6d57-ee45-4cbf-9b78-0687de32bf39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "33f346b9-482f-4ce1-91fd-5fbc31eed720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5fbfd3-61ba-4705-8142-061a3ffb5d0c",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa246e9e-61e0-4d56-8e58-636bfc34d86a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "250f6fb9-185f-4057-bf51-b17a0d1c5f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "479501e4-cf91-4fb7-8b49-06854075d981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d94edee6-07a4-4538-92d5-baaec5c65e0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ed47e7-37fa-4b2e-aa94-b1ccef62fd04",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8783bf0-1a4a-4616-816a-0293ba378e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab7bc6fb-06be-4c89-a4a0-81efaf166b94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dac0f9b-0f20-4b6f-bd76-2d971a114f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ded3a14-5892-4418-b4c6-87fcea68ca3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e6abeb-487e-4a55-92b7-62c45ef10c90",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac30fc9b-983b-474e-bf5e-139ab36b0c99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4220dc71-07ae-4a63-8333-77762ed7a0c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7422791-3b63-462d-a207-a32399fda46c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0bab3c96-d339-4cd6-8dc2-37215b20d36c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c8548d-3f46-4e27-81be-3afd4f31cea0",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d71d7b82-8925-40b2-aabe-e83ffb39757f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efa2c0eb-18a2-4964-8b37-bbeff2658c3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c3e2f4c-172d-4638-ae96-3468233429ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8edede0d-e496-48af-a270-319c4378d948"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e79639c-788b-4771-8299-f83c31236eab",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0dc8e54-0940-48c2-8c79-47378823141c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "604ca2de-9643-46eb-99fa-afb4853b40aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cfda103-c462-4454-8e95-f46351288d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac9f8801-4fc9-445f-8652-a73b3d535678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc33ec9-146a-420a-91b5-2f9acb938192",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a60ab16-e63b-435c-9842-6fc552d45aa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cafddd9-6a78-450e-9f59-dcfd624a60b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8dd11c93-8b92-4643-8521-213c3cfec97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "094a0003-f87f-4253-bd27-37d8a5214a7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76edf313-5a48-4199-89b2-22d2f77cc4e2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e93164-c4d5-49ed-a393-cc6fc82ee273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3ba9590-d7e8-463a-a0e4-5f8668724e2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201846e9-4979-439f-9b44-21e8b7129d75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6a42e2-0f5f-4013-804b-44b3868b62ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56391777-a2b1-4a75-a816-8d45bb57495f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7db1736-1df4-43bd-948c-141f761c6ac3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df4e6d7-ab48-48ea-8944-da6daa1c60e2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab376f1e-c9b7-47cc-acab-f48312c00ca3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e2ce9f2-4119-44be-9aa8-0fc85c88c939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f263ca2-85f7-40b1-a9e1-d72dfc3a9e9d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8575b67-1aae-41b1-8e72-b987cfb21437",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f10b190-ac05-4173-82e2-cd5f045729fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c2a2eb-f518-4a35-b729-684aa8759781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6940039d-f313-4557-b3a5-26da7b0d7e24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e272ad09-7c21-47bb-921f-18758e48fc64",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca5d11d-b312-46c1-b36f-7908b972211e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73ef0a25-2384-492b-87b6-84af24d172ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f501d8d-145f-4a87-a307-e2a09e04efac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf194f41-4bf2-4093-b6b1-7f52517ab664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cdbdf2b-9112-4dfc-b69b-2ed273bd2dec",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa0431a9-e4da-4ada-abdb-7be24915e0e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b81155aa-c6bd-44f6-b0ff-9ec4a050be24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "871d24f4-37cf-427e-bb38-bbbbd78e2fdf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "659a90cc-4eee-4c03-84cc-a5567d1cac05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c24a02-537a-4b21-b42c-131aad2949e9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48a66fca-fcc7-4d9c-82c1-f8f0c8193e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2c88cfe2-4cad-4b62-ab6e-81e7478aec93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2a602a6-086e-48e6-8820-4700b958cd02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c7fe5f89-f469-427b-a0cb-1349920ebf8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1af47541-efab-4066-a39d-7b806b02451d",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2bddc31-dd92-4a36-a227-af675be3275d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1c053ea-9572-4aa4-8bbe-fd0d986deed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22522735-c275-46b4-9b72-b9aeba5c9335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56351128-5a6b-46b2-9d23-8a14865ea5bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e5c4930-78a2-47a0-9e08-c41f5717d7e2",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ee93112-8598-420f-814e-acc8cce71966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b99d0896-b3d1-4726-a1c8-9c114e1756e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc86133c-6ee1-4e65-ad30-67b612ef0d38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ce943ddd-5b9b-4bf6-bf9f-049c3f90ae88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d7e02e5-a5df-4cb1-a20f-e4f030be158c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0c667a4-a0f2-4fb1-b21b-af84dece1d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d89b054-05f6-44b2-b978-4bb40172e071"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050a42da-2f4b-4c0e-a007-8697e573a777",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b5253ec2-0d95-4690-8fc4-ac7b328a6ac5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dee1089-574c-405c-80ba-fd290b17bfaa",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0fb8449-9f71-4a42-99cf-fa45ef120a57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "750cc148-996d-42a3-95be-b80013bb4761"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b1bd3b3-e2dd-4501-97e4-19825e89e562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d95731f2-0f31-4886-8f06-e3c7e3adca2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "049542a1-30d1-4f3c-9fbf-84b9b582f283",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51d534b1-12da-4170-841d-e3c9be7f1593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0ebb048-f5f5-42ad-a2c8-260ba7e634b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebd39a0f-6d27-4473-8993-8f270a415cff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8d4c9a5d-93d1-4e91-9f2a-126c4b186d1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47d5a5d1-8f71-452e-8932-ea033dfe66f2",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a7257a2-3e19-4180-82ea-9f49e8ebe0c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b00937e-c6d1-466b-9070-e49947401ff6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb82f732-4091-4097-beca-d8100f65bf00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b31b0d9-da0f-4af7-808f-ee80ec7174fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b789dadd-0550-4ae9-97be-7d5bc7afd16e",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d5a19fb-45a2-446a-a980-4d7a636320fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5e84f63-a766-4283-8904-6b9d232e9476"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309fe436-a0f1-46bc-8f5f-080cd172a977",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f769f63e-7009-4101-8e3b-885b069daad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d13a3e5-29cf-44b1-a574-10bf0ad6aa41",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d292d623-da83-4d6f-933a-6b76858214cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf895fa2-4edc-4366-88e1-001baa63ac57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8bb2fc0-b0ab-41b5-90c6-56877f0dd73b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f7cd211-7feb-4ee0-871c-2196ce71e810"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69f35405-adb2-4d74-b4c4-00728793f6fc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3879e650-ab70-4f22-843c-6cb83f46022f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fac06da6-6579-4fbc-a82c-517ea83c1d0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bbf1870-0681-4fd5-a82a-0002c96df77a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "98188c0c-10c3-46c5-a679-185dc6987f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5eb387f9-827f-4e46-937d-d16d470d4be4",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3305b1b-f6c2-4d8f-807f-7a5afebd9f5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aae499a2-f97e-491e-b91c-6cc1ade73140"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0123ea6c-b04b-4814-960f-72d5679d4c6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9fa41e02-f404-4c1c-b61e-4c5bde6a04f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a56a013-28c3-4453-98ef-de4c2ac04e04",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc8084c-ddd9-4c9b-9250-d714f58eaa91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec6f4b1d-5b67-438e-976d-2aa10803141b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d74487b0-57a4-47f2-a36c-e71724fcfb97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "4645e102-69bc-45f8-bfe3-ca782d8def29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9344fbf-6fc3-4852-97a4-d0f682b2edc6",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ab68a6f-06be-4c2a-a6cd-9e985330d366",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464bb2e6-db55-4cca-a325-6b829c3c68e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49133f62-d561-4260-b003-cbf8be50322a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "df66fc9f-1d88-4a05-bb0d-5b674016b500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d86af552-52fc-4a36-a1c3-dc2c23f46e9f",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd188e80-5c3a-44b6-90ac-82cd057ce9b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dec486db-5694-4f1d-893c-28bbf304fc56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670a2fac-a7d5-4707-96a9-d8c84a96726b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d60aba6a-7537-4f74-bb70-bbdddf365a40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4b2202-aefb-4a7d-8ca7-d39b20a1638e",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5af0a54-a6c1-4620-8ec0-c703283ac988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "817a28c9-c010-4dfd-87a5-2d1ec7385706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24e4ed3d-9863-4449-90af-61c0250ca76d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "34863809-d350-4387-b58c-3905e03c801f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2bacec4-54c3-4648-a33f-f7a46d65882d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df40e602-5bd0-4694-b3be-7722d34ed64e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cbbd7c1-3f09-435b-bdd2-27e25df71f60"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4656748-4270-4fdc-bcf0-83c19ef2b34f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5071add1-dff1-40a6-9bd5-5e2988223694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbf66fc2-070d-40df-84c7-d1c27645a466",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1295c070-b26d-4042-a191-2c295d83c0f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4df8079-decb-4a9b-85d8-00a19ce91fe1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8f61075-adbe-4f2c-90b6-616180765528",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a1b4979a-77f1-4909-9d1f-e4519a1a9597"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1672566-dfc9-417a-9e7e-bab4a6793787",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a437517-e11c-4c8d-95d3-3eefaafa404d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "7ec188da-f899-437f-808e-9d650b839dff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1201818c-90aa-41ad-a112-8f023cb67eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "6b081470-e126-4f9a-a884-d7685ff4efe6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b77437f5-b3dc-4140-bb8a-81477c0f3420",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4388a93c-1f81-4dd5-864b-465370694528",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcb71c12-407d-4921-a58f-da1f603d9c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "56c8838c-8769-4dbe-b112-f0a147ff25e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef114d1a-9759-46f9-9e6c-569bd8929956",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "499bd4a6-2ec6-4e2a-906a-d7adef9ef6eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b6308c4-a222-4525-8972-f7c600a7be11",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1309abc7-0566-4950-9581-be07fd5f9380",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9b53d935-cd3e-4567-8b6f-71ff532309d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cdddeb1-bb90-496a-8f75-75dcb84c9c65",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "4897b119-0296-42ad-9e6d-9498350ebe51"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c6f967bf-4e92-4f5d-a43e-a82e3d86bf67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa67dd56-da34-4a04-83b6-f1ec696c8911"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c0316df5-708a-48a6-911d-59e3d4c8041e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e257799e-82cc-4b4f-ad73-e70c327145b9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c2c9434d-26b4-4da0-bd05-458ca451543e",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3727d851-2aab-47ae-9580-62d997c0dd27"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "68b396ee-beee-4387-977f-0b7e0404ed8b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e4f7332d-4901-4e12-90a9-867db319fbc6"
                }
              }
            ]
          },
          {
            "id": "2d157ed4-ce5a-4b2c-bbd0-79225807951b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "bb09a867-eed9-406f-a3b8-a60d0000fd69",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7c22d35b-b80f-4f53-bb17-25ab80f121f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "694672c6-0f6e-499f-ad5f-0458c884f374"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b09f5080-2450-4c10-80ec-0ef54a2fddff",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "10f888f8-18bd-4380-9725-01c79a20e040"
                    }
                  }
                ]
              },
              {
                "id": "ef6729b4-d668-4cd5-9c6b-fa365082da41",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d4a83568-b4fc-44d5-986d-329ef8544fb6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "edaf3cff-e799-4e7b-8a7b-f3efadaef9ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "93414f29-184f-40f5-b0a9-1d239a381b0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c42c1057-f43e-46cf-a48f-51813d48b744"
                    }
                  }
                ]
              },
              {
                "id": "98878b48-bb0e-4b86-87b5-9d785796c902",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6e49c0a4-7e9d-4821-8db2-1e3e40e98e08",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "abb4e618-74ad-4707-8c8b-0a38744b9fb0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "82860a82-b537-427b-bab8-3f3e22f6d2d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "9ee50b6d-16c2-4725-9a86-b50f481fff6a"
                    }
                  }
                ]
              },
              {
                "id": "9b417643-8986-418e-854b-524e6b372cfd",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "a54d1b5b-7d25-4114-9eaf-607a585be308",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a71d8ab5-3102-4f97-ba77-0a948fe69667"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "49451f64-e8a0-41a5-a786-d9f974ff3705",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "0141ab0a-d757-4452-b8fd-8b85be47fcb6"
                    }
                  }
                ]
              },
              {
                "id": "75d2123d-0d9f-4d5c-9a50-675f56555a09",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6b3b3043-a58d-41c5-8697-2a457fd44188",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0edd432a-8900-4513-9e31-f20a8cac20be"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6aef996c-6ed7-44d8-bac7-c3bbebf1dc25",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "844bfb77-f463-4517-ad2d-23d729d86955"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e43af4fa-f8a2-4486-b804-b974946aa56f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5418043c-3768-444e-bc95-e899d6ab524d"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "b9df3b27-1878-4145-bd90-927227d130a0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "98d05ad2-7326-4a50-9d2a-122ca0b8bf51"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "55f4ad83-9cee-4345-b2a9-6a60ef36fb55",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "884b58c7-50ab-439c-aea5-c11509722039"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "97fd3a83-8ab3-4d04-8586-2702c7523196",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7c453f05-2a5b-4596-9df2-392edc263b32"
            }
          }
        ]
      },
      {
        "id": "416b6d68-c241-4512-ab7c-bf4ec6f4bfa3",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "2b27b138-9506-4951-b554-3694b3cadc77",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d7fa0859-511d-4d8b-8d7d-b15ebfa0d600",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "233bcd2f-8a6b-4607-85fd-2a82bd7c947c",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b42d2b1-ee19-478e-95a7-e83ebb5485d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ef92f89-ccad-4f73-8983-daa1bdf63cc8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9039933-cb07-481e-a928-06eb70da8714",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fcc8458-ad58-4deb-9ebf-17ebd0b7d154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57abd29-0c5b-43dc-95c6-8da395c7f9e7",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "def62616-bb22-453c-96e0-dfde95166b5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35ab9485-b04c-4aa1-a72b-b42acc11f7b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2e6e7f7-d92d-4074-9b87-53d9447b4109",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fd06f7a-470c-4cfa-8958-281f5d391315"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e687d8eb-0a21-4766-9f6f-9c101877b924",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a21e3026-2865-4f15-a616-fa3b552c10a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23a24cc9-ff95-43f4-be1f-49137e5d84e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de40ffad-077c-4929-a8e4-6478946b2b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69871aff-dde7-4aa0-b63e-8bee02950676"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2de6790c-d5b1-4f24-ad02-9f1e1af88a7f",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f007209-81a6-4bb3-8250-29fcb1d528b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de79aab4-6fe0-4cc9-a3fb-46d5d8d36cb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6429df60-b474-43fa-925d-6aa29cbd14df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "af005b0b-e564-48ff-8bdd-db4a48156d7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78630030-ea39-4541-82e2-31d24d489a18",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eabb7297-68e7-4f30-9240-ddfd12f513fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5756a7f-86ac-4d87-abe9-f803b47fb2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2bb74de-050d-4073-af77-1ea4e3116336",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3cba070-6927-4543-a8f7-b108698474e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "181620fe-9afa-49d6-aad3-db47025e0ad3",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7be908c3-badc-494c-af84-18f80b322b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82b76524-d798-4587-a32c-dc8c787fa527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "358dfdca-1ce6-4f65-a74c-97ee6bbdcbf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a8a914dc-d6f1-4ed9-a415-01890041f9e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc79198b-b5d1-48c5-a9cf-d52871c6fbe0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "193280c0-0084-4f9f-b82a-ffd45b359375",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c86aa52-5ccb-44f8-bbcb-5a18dd309fb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acce8a2d-b070-445b-91b2-6d3fc57eeba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a2f3cf1-d2d0-4619-8f57-1d0df3d199d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c697ba4-8565-48ec-ae78-e6bfe03c951f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83f3e47c-92a7-4cb1-a846-ce270a18c1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bba6d8a6-9155-497d-bd55-a39a964e771c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327ac60e-4ba5-49e9-b8b4-31a6ca452f55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d2397707-2fe9-49fc-8239-fce3bd112bb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80b5874c-4e6c-4870-8e9f-56223e3b7c1f",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce803300-73de-4611-99c5-bf3210bb8c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef184335-f059-4ed7-aad0-d130c7b379b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41c5a7ea-00e6-445a-a782-294d7d2957cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c466373d-6b9f-4c0c-8d31-e63e330d59b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b552f333-7b6f-4406-bb60-4504025d8ce4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5478fa48-1dc9-42bc-a20f-1ad91641988d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f541e9f-a2bc-4a94-8bbf-b1088202b8b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daac16a9-d214-4a2d-8302-25d20b06c234",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c6c5f710-98ef-438d-9fe9-04586c11723a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9402f494-1efa-4da2-a2f3-2250270c237c",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9f0dd21-3669-4186-80ce-b4d7f7688e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739e9c73-e137-48cf-8f8e-481af1ad34e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cb8591f-18a5-4b42-9500-4ffa5abfa0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "090799b7-96ea-4b63-a99b-41278eded16c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59046cf8-2a95-4d56-8b27-cb8fe8c84a7e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "365accda-256a-4b08-93cb-f3952d3d78b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c827a670-0b03-4862-b618-af2f0b4406f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b3d9c54-b7b4-491b-a2bc-0aa368ceb764",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e9ea7e61-8002-4344-bfa4-b2047d3f17e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1aed7e3-03e6-4000-83ec-1ca80ec0979a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "405e8f20-ec0a-4954-9e8c-5a005dd19c3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bffd500-a2ef-4815-8803-6240df6cd739"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08eef4a1-cddd-46f1-aaab-f92e99053a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e3868c7-1756-4437-a9fa-912b09173c9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06db33b-823f-4e30-a080-e1760bf9a107",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06ab8a3-edb7-4773-8278-c1b188e6d8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af87277d-0d9f-4003-916b-9c15239796af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c01e952-ed26-4593-bb66-462a17ee833d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "1525abd8-ad3f-4aa2-950f-a44a26ff6592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5337172-d843-42f8-9242-2fc6eb4f7cb3",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93417e40-c97a-4d98-8f29-763d9461c83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc20f4d0-a0db-4f61-bc2c-336a323edeb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80645f30-ce5e-4f40-b3bb-c09229796d56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "6be72551-787b-4a34-8f57-50c4d6897406"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bca80cf-7f7e-4855-9623-0cafa71229db",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cee1c2d4-2200-4ce3-b95b-c9ed8929b144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68e06ed8-2d52-44a5-989b-16d840f0ae4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3881a54f-4b4a-4eac-83ad-f4622d8c04a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "6dd873ec-a85c-4215-a8e0-d5e27c81c114"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1bd1e4c-0ab3-4161-84ad-18e2a309f18f",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e01551eb-5733-44df-882f-33b7a3938a4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac773826-8ce8-4152-9bad-e8aa79754de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dec1134-498f-4123-963a-ff9507f330c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "79213753-8bca-4fe1-a5a3-068a756465b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bedac1e-adff-4ea3-ac4a-991942b5ca5e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc474bda-a852-4da7-a4b4-8a03ce990b02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da70bb06-9618-4bcb-a137-bf052cb7af30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38aafb4f-3beb-4b8e-871a-2104dd51e661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e67dda97-509f-4e7b-8d48-3567c4e0f369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7742da-3c35-4fb4-86ca-66ba8ddb0c08",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6064bb-faa7-4bfc-86ee-90b07644494a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9be0dbc-13a1-4a78-96fa-4c34143f91ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f15707be-3a67-4b83-9a9d-b20da5b9693f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "aafff007-d5aa-4c40-85f6-28315ec684cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f5b8b1a-1e6e-410b-b837-219a807990b3",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c34561b-1c72-4121-9eb0-79a882923f5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2798ed2f-1346-4b3a-9062-0cce164ed525"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506d619c-aba1-4cc4-8eb9-b89c46b37041",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5664029f-c159-4acd-97fc-ed68baa8e1e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38264338-f725-4b69-a2bc-f12318644f40",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b510a1e-af52-4c26-b9eb-4644c3ad924d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e58f9280-9d29-49f7-a8d5-3cf7c85125a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8beeab4a-be98-40d8-a7ee-290ae13949b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "086d9199-46c3-45dc-82be-1b5cc2aa0392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9b01012-ede2-491a-a228-82a6fb0ddc2e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3000c049-3ee2-43ba-8de2-aec31322ad82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "949e6152-42ed-4888-94cc-06cfdd60c0c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75bf40a-81af-4ace-8918-dd58bae871e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1ef0f9b-58ea-49e5-abe4-84c148138278"
                        }
                      }
                    ]
                  },
                  {
                    "id": "946120d5-be99-468e-b816-fb2a8d8e1e62",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac072bd7-f54c-4101-bc9f-51dbea268e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d3acbe4-da30-4d3c-847a-170d48a82823"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc31721-41f9-4970-93d4-60c4769fa089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "adbf7799-21bf-4ecc-ab8c-1e8917c78f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d743923-4b81-4368-af9e-4d3f63414430",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d641f23-4928-47bc-9223-97b1e62b6a50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7de86d4-1319-48eb-83f9-2e461a7a4860"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d809603-5639-4f83-8f1f-7d3d3ccb74f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f35491c-bf86-46d8-9054-e8639ee8fcbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e31038-f1fc-48a8-9dea-b50ae4ae65a5",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf8f540-b2e6-4c33-8772-c0c1edf195c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2de4025b-abd1-43e3-b3c7-67aafac2ebd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396a080a-fb34-42ce-b4cd-5e1b9e552d2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5518e69c-4dd6-413e-994b-9fd05629e4b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0463ea9a-e0db-418c-8a41-672fe5b2be9b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fa46a62-31ab-49b4-b9d1-f1c24e8efc39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6142b91c-2b26-4c8d-bab8-15823df955a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ca0b26f-d9b4-4ed5-bbeb-2830584da681",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d894de53-0961-4c22-9606-806349fc7c19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e12e87a-1a59-459f-afea-c71153cfded0",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8da39803-4ca7-4d9d-aeb0-ab288761edec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26c6260a-86fb-4bc8-8e8b-260a0f6db1b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d1ae30b-ea96-4509-98ae-e03e2df56166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "420d2366-e1a0-45ad-8f79-583c30f30058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0938f07-0b7a-4b87-bae3-2b62e56b534f",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a2c44ff-124e-46cf-bcc6-7568fff6cbf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7894fe0a-06e9-42c2-8e5e-b98bddce93a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ebe52d-0dec-4838-9822-2de063c25f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "229745a8-7326-48bf-9fbb-abf5827dd89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969797bf-a563-48a7-9b3f-cb7719bff875",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4565a7c-4a7c-45f1-bae1-1712c3017720",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39c981aa-d6b8-4ba9-ab04-fa5de7d89d33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e7a6907-8c91-4ef6-8863-f573d3015f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c057c6f8-6843-46e9-b4e7-baa75f4c7603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5546e4f6-53a9-4af6-b17d-1177e07c759b",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb2e817-74dd-42f1-a790-9e0660583a0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0316d90-9556-4e39-bbf7-bf71d8678c57"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81807f45-ac03-49e2-ac17-fe2f225e3837",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48ec7215-2f72-42d1-a2be-2b69d9f3f94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6440977-3682-49cc-9d56-9d6bfcc9cd18",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5010308-cfce-4904-b56d-758743bbbfe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f29fd736-0db0-4328-9a46-33d5083e5a94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b440a929-ff9c-4242-b22a-9ff63b4e47fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2c2612d-b233-4ea2-9f3e-8ec8f268fd9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61f4b5b4-6548-4b78-90b1-914833c3de80",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e5599c4-9a7a-4f27-910a-00a1c1ef0793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ec02836-e4fa-4a9d-b4e2-12b999930dba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980667a7-3fdf-49c6-94ed-d2c66f999e14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6577c072-d454-414f-b12f-d6a2d698b1a6"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "f27d4e19-06fe-441d-8567-ed6f598c1428",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "699c62ad-d5c4-47ed-b02e-449b30af9679",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de661c80-6572-4860-943e-8fbd2da1e437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f181e62-f61f-4481-9680-d9329d3c6fcb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ad2bcbe-e926-4b0c-8691-53fb97ce1754",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e1278a9d-9b72-4526-9525-ac562446550f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ebc714f-7099-475e-8471-a6afde690423",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3069f4b-3ebd-48ba-97c1-58c089eb6c70",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "9ec9d4df-777f-4437-a13a-8b79349ccc77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1c9eeb-a5ff-4fab-b4ac-225280d4e900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "432c2bc0-adf8-4402-8e07-84fc90fba32e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5b683cc-8620-4352-a805-64fd2f06c8cd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "677fb454-8711-4f15-8d84-28bdb8b7a2b3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7ed567a9-2e95-40c6-b603-53e71cadba08",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e6deab13-a511-43c3-a8f8-0beb6a68d453"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4eb4da54-58f2-427e-a0b8-13505f5c8e82",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "f005a8fc-0a01-40dd-baf6-853a8f273b2c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9617bc7d-73ed-4adc-886c-c67b69183689",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ae209466-a22a-4093-964d-466cff6e8dee"
            }
          }
        ]
      },
      {
        "id": "b1ef9975-d5a7-4640-8170-4b03e9f83fe2",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "949bf7b5-7174-458e-b35e-a088d6b3266c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "859caa2e-fccf-4381-a380-474e96b003dc",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "913679cf-bbe1-439f-90bc-6d636cef22bd",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cec4b78-06c0-482a-ac10-372a719aca36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34115403-ded7-4390-88c5-4946e41e2680"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7259dde-c778-4cd5-890e-c72682f86ff2",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43ffb142-5f69-4c2f-b40c-1f4152dbc5cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca80d0bf-8faf-42c0-9eb0-aab1a2eb70ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5dbd6bc-c5a5-4ddc-b429-9fc65164cd5d",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11ae9515-3325-4ca0-9ae4-f38f6f5e855a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e74509-c010-4a48-8433-322c445761c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f07fee4-d4c7-4753-b764-3fe58c810214",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86c76536-4475-4367-94e4-4ad7bc4956a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c9c0f9b-4db0-48c0-a5fb-2fe2e2e119b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fca41f6b-1e0b-43e0-805d-6f9d8d580f00",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31744abc-4e56-41c0-8ea4-0d3691db74db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0cfac80d-bb1d-4412-ab43-fabffd9dbdd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f265f6d-631d-47d7-860a-8da0c1990a6c",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b75c08c-6574-4a0e-a1fd-76c576392de3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "165b2322-2856-46e4-afc0-d4bf244a8cd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4c881b9-bf2a-42c0-9c44-e31911e6e2d3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59692d8f-6e4e-4cb2-8a3e-96189afc5113",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "204dbd7f-3e55-401f-a22f-c6c194e32de2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59afc7f7-60e5-4c41-a1d1-501b35ef2ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fe18ca3-332c-4950-a56b-e48a6686953a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a968f854-6a39-46ab-9aec-21ba9068f6e1",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5a2475f-b6c5-4ae3-80b1-7af02d17e8b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fcd21272-2056-4b50-8ca7-9ac92818049b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e0e3832-1930-4a51-998d-a4f44f3ff90c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db903bb7-9f67-492f-989f-871b5c85ccc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c13ee06-e4da-4a5a-bb48-0e3bb57b8b7b",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf551bd-72a4-4489-a543-df1dded88165",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c21877f6-ede4-4781-be16-6ee8cb89250c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6df3391d-4edc-4457-ad4f-ec5bc3365963",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ae97464-8d6c-4f68-977e-22eaf7c70501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7a2ef7-9759-484b-a8b3-5381ddb1e74e",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0662e79e-eb1f-4df9-a478-23fc7a3cbe61",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b32395b-7a42-49bd-9ba5-f4cc628e9ec3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b07d36cb-7522-4700-a219-3d3f037eae83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53466b50-4a4c-4742-a4d9-9ce756896cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23f36cd7-9397-4589-8690-66638ba3602f",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acb8dd50-a3bb-4e2a-95e2-bf7852898199",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b98767c9-80ed-4707-a650-996bd6d490cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33326e3f-f341-475e-8f20-524700e45afd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f701597d-c10b-4887-9d44-d546ac27a5e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "299875cb-6fbf-48d9-9f18-15239fe31949",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643db9e1-8afd-4c8a-994f-ae88e997b778",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea7c691e-a92a-4399-8aa6-b529552979fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59a6b8f-5b9d-4521-b82b-1d40ac0c52c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "336453d4-ff21-4d49-b105-2b1f1a2fb0f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "607d5c56-3cba-4a13-a1a1-76fba137cb43",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c327a7e-cea0-49f3-a5bd-82923e4906a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "952635d5-54ac-4c89-9367-4b9629c0991a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "906b733a-77e9-4556-b435-c0859be0be7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be2eb248-4e74-41be-b9df-f61cc4056f3a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da2a340e-3afe-4198-a469-53720f22b047",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18dc0f66-d22c-472f-9a7c-e6460431a2b8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1e4a112b-ceed-4a9f-bd3b-88495eb7000b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5be01e37-9a82-441b-87ae-12b1b1ddc2d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b2a50cc-fc34-4983-9c00-dd49c7a0fdf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348af9fc-7349-4fc2-8329-30b57e5f6539",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6fdfdb2-4880-414b-9535-25f1529ca6cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fb06c41-de59-4b8d-986e-880d603188a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8dd9cde1-b463-475e-94df-ea696e55ba41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b02483b1-83e1-4621-8b62-d18b1fa71fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcd56b6d-bb4c-44a0-a0d5-fc6888e1fe90",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8d6c14-c4c8-49c6-8ce9-76d261fe857d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3077dde7-69e0-4785-aeb0-81d8b054146b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "308d2541-8ee1-4d34-b001-c350b3c4ba5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7a3ab21-9370-4bee-bbf5-7f4d965afbc2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2682d88-2f56-4d43-a3c5-e45ae242386b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "201e46e8-9992-4e17-a254-7ebdcb3ddae8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3244fb9b-c28f-48e8-9601-06dd8d4776fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "88bfa88f-d7a2-43fd-82bb-32a932b751f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c1c9ecc-9eb6-4074-be2c-ae3a9fc61e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06e41b23-6e68-483e-a886-5bd2d886b748",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5968f11f-4d1b-495c-b2e4-e071941a425e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9daa80-09fe-4a7a-986d-87e9eca77f83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d804f8-5e47-49c8-8bdd-f02c390fa6ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ddd908c-bdc6-43d5-aba2-7309f1938857"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eebe9c5e-31fe-4884-88dc-66dd064671a3",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b7a5801-3073-44dd-b5e1-e0e25e381bb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e53cb657-ca1f-4447-8199-7ecd1bc4d01d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5c092c-566d-4254-84cf-0230c7b69a4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d97a3d-ce0b-4043-abf1-3012e6e6c9f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82f996ab-8c5a-45ea-92b6-d3e89b4333e0",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ff9ece1-c768-490a-aeda-1bc40b2e2233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcab78f4-7f70-4f22-9dd9-94479dc6c562"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c80f1daa-1a98-4461-90b3-20625331a089",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c2b83d6-ef54-42ce-affe-1f8aa1b4c5cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65e95835-f92e-4aa1-b31e-12e2874f4c66",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b678a4cd-e3d7-4dd3-b5a3-60ee37a3f63b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cab1a87-f226-413a-b838-121fa61dc64e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a421360a-be20-493f-8bf9-01500a37faa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9bd4a93b-724e-4b95-acd9-e334cbe7153c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e76e2b5-70fe-421b-a1d8-59aa83b34877",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74012b6c-aef0-4839-99c0-2057c6729735",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02e92834-2184-493a-8fb9-da69126acd90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86f77c5c-4c2a-4ee3-a8c2-d72a99d6d2df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80653700-ac4b-4c47-9617-200926c05e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87070e17-ec17-4e41-8ffa-82f326c68853",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b0a0fe9-9881-4755-a603-61665f79fba6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a63eb346-0633-45cf-bfac-2d1ffca28bc4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "266b6e26-bd2f-43c5-a67c-2be1ff8c92b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8614b55a-ac59-4a01-8f9b-436dce5506e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcc453a-abb2-48a9-abcf-9886a50f5bb7",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f7cb6f-e195-427d-bc99-fef9702c9b8b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d42d0a0-408a-4319-8464-f6bc2e1009cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc0fa3e7-fbd2-4676-8c7c-e2108aab14db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7518b5e9-1f72-4b62-a68f-80c33a6f9a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75d1bf3d-c48d-4aad-925e-cb922210697b",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74f79b01-92d9-4189-81cb-ee900aaddd14",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8152d43f-2ea2-4453-84e7-7ceb96a64d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263ff437-d93e-4a3c-bb06-45a2a1fef863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c97cc355-e279-41b3-9420-f1108aa9f334"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae74b93a-1eae-49e8-8fb9-dc05c4c858c5",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d6d43c0-8fd8-4147-85ba-d379f406a0d8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ae56021-7c71-46d8-9100-d4d6a19bf09b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20cbb8c2-14d0-4526-9fe3-f1a4578d8fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8bb203d9-8819-4d9f-9fc5-522643c0f2fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "532865e0-599f-4a77-8c34-4de3f0bed810",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d0d04da-d85e-4248-a079-d72a36f88c30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e50ac3ee-c68c-4e86-a11c-985d937e5df8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb4ff83a-d6cb-4267-9580-9a73eb7e3fd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9990424a-b699-4f2d-9844-9e74f52a24a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6a398a4-299e-4bd7-8786-cb703bce962f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d37d2bba-d99f-40f8-864d-d355a74be6f8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be55f14e-3ded-4ea6-90a6-9b5a54792442"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c05cb800-cad3-4e13-9162-91d6538533c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe3b64bc-f56e-481f-9b74-bc5de78b9af2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c371319-f6e2-4f8e-b97e-6e6c666dec38",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223f553d-9421-4a46-b68a-aaca753ac86f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b42a034b-85c5-46c1-81d7-09eddb5d07ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a65f9a16-e10a-4b29-9b6b-7acf7682e0ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "69bb29ae-9e24-4264-bc62-0e178af235dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32bd60a8-2cf4-430d-adef-8cc95b5cc541",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d31f26e-d38d-4aab-8361-55de2008b942",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4aaf8f7b-ee5e-4dcd-b969-ea9c90ed7ac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c8fdee6-731e-46df-b96c-09bafc36a6fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86d66bbc-164e-43cc-b8a7-730a3448c5b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67f280cc-0f4e-4736-8b16-d38269079ebb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e16f954d-09f9-4183-9572-2b7084beee0e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b98b2e93-add3-4b21-a062-62a97079d749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8550e35c-eccd-4da3-a3ca-7602a85e0aae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfd11a5e-f562-40ad-b2a6-e009be691f01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ece58f5e-7ad2-4aa7-b318-ea0f3dfc5f65",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35cfe13b-76f1-417d-95e7-09d3182a5265",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3079c70-b565-49dd-9625-e5c4a3d90d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9a4652e-472a-4257-8d88-0b524fb29955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dca64e83-4654-4046-a07f-0ae1a32e68b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d9bdc4f-5634-40a6-9167-834ed879d5f3",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501e7121-abbc-4c5e-a813-88a18cd64284",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24766f99-89df-4fdf-b8ae-c9f6c845a7ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54fb5919-b53e-4725-aef5-9a418026b163",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd3e3536-ca4b-4db3-9423-7f273f623b10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfffa9cf-9754-4599-b66b-dee07fe2eb25",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13517dd5-9657-45b6-b357-7ef86a91de86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c92774cd-0cf6-4f52-81a9-338d8158e51d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54a30188-4161-45ed-8faa-78cb1a72ddf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6515d31b-bb90-405f-9a70-28a20dd28669"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9366fd4a-9594-4a41-b648-415fb0921861",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086d4dfd-11b5-4cff-9dc2-948f2b354793",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ae1f0f3-5173-4b31-8a3f-57bf881e8ca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05b0147c-d08e-4a84-8b68-b99dd0793ed2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a090a55-b25f-4c0d-9162-f910cc835f2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06145123-6192-4923-9f55-83227e54b03e",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "415e5d4b-fb61-44fb-86bf-0ccc5753cf51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90ed5939-495d-415a-a489-f8299cc920a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd37f418-12d9-417d-ada8-3e4fbc87dfa4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "032e4112-0656-4300-8fd1-eff6ce3fabc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8407f6d-aa5e-4740-9653-df67b73bc775",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6317e2-4f9a-4dae-bcfc-ec5be140fffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e5b0881-6e9d-4992-9b50-8eb41645ae66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8a05bc1-0b36-4d3d-bdb7-68008e2fca39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86182577-607b-4be6-9651-87f0250c4155"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d8242ea-ef7f-4c29-b02a-855fbf51d1e3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ed9a75b-3f0c-4ef1-a4ae-61f1a191fb45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feb9936d-a755-49aa-ab06-42a9c09db1af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "394caf79-9fc0-4a23-86a9-d3a3169aba34",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff749c9-ef96-4056-982e-bbe6f0bb641e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9ae7cbc-dcee-4e1c-a4f2-e71b60f359a5",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e5fe65f-c0e6-4f97-a101-6b90051bf93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dd5f594-a9af-4d9e-9c0a-f081cbcf6518"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d1b547-dc7b-4e65-9197-e9518bb91f39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4091cb9-9ff5-461e-861b-184382c33072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480f030d-06fa-400a-a78e-d0fd782bd874",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f14493b-93c2-46ba-b1fd-6e66062c05e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdbf33aa-aaa6-4802-a115-aa82d9483493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9182d4b-fe6b-419a-8ca9-504076fc01b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b543cec4-427d-4e8f-a687-821ff3134108"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4152254e-06b7-4520-9f06-2c04c32e086b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2468ea5b-5722-4db8-a1b4-d2e404bdfbd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "838f5bde-935a-4c16-a78c-adf33edccd7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "705a01dd-cf3f-4da9-9f3b-20a35b307809",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19db808-553a-48e2-ab2c-52915963d3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c1d5e08-d538-4897-aeef-9368d8ea7e04",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba8eac1-213a-469e-b734-454e8beb736b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e045ce35-5561-4092-94af-cd2a7b229513"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "569fbc70-e815-4c36-8fcc-94c0d3858dd6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c7cf6fd-c6cd-4d4b-b3b0-39bfd63ffff3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e38b30-50ba-46f0-89b2-ed05ce8c3e85",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4e62945-2c00-4a91-81fe-ca8b6a0c8ef8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0af88482-1ec7-46ba-9947-e264df6b129f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf1111c3-d7ab-45bc-8eb9-a2db199cd691",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e5e0871-3fe0-4703-a939-cb3a6d97ad11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c2b996-a7bd-48af-8f77-77a94c035ce7",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "953ef12a-7ecd-450c-af61-090ec357c830",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8316a9a-c69a-4851-ad73-d6892d3da3de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cab630f1-5469-458a-bbe0-c29fcaad8bb6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb5bb64-4b00-4fc9-a97b-a8843529913c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d98f34-3c6a-4d96-806f-4b66007d4f6f",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "326aefb6-45d3-4d9e-8729-432b6cbcc948",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02c4efcc-9ddb-42ca-a79e-e74bcf3fb9d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceba87e6-2926-43cb-ba5a-0517e63e0802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26abaa6d-0b35-4591-b693-aa0c24b8ca3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da36ca5-10c8-4eb0-a9e5-5da33de98d52",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "244f9919-4ab1-408a-b2e8-179e0fa9cab5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00071ab8-2959-4a4f-8930-a7e512a389e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de426215-7b22-48b7-aa98-a5704984c9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ebb6f6-b2e2-4e99-bc33-79c348f546d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1c8154-fbca-4efe-ac1d-278d65946ce4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4394abc5-b21e-4e9f-8de5-cf762db750aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d25f4e0f-c286-47e6-8e4f-4677099c66e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c757c1-0456-4efb-ba7d-7506d9f6015d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e392827a-78b1-40a6-9109-ee1d5c52b231"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2332078a-f636-42b0-a4c7-1239fcceeac7",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f8ed45a-3aa9-41cc-ba9e-69edd2d57eb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f2631669-5367-4498-b4ab-f7486a67fbd2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1411c25-f2c9-42fe-9313-c211d76b6a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "369ff0a4-1ac1-4a50-94f2-53cc7441b8d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5936a21e-ed3d-45e2-80f2-52e4914e837c",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a8a4ca-6cbc-40c1-9870-a928ae61efa1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7cbf0f64-eb75-47f3-ab91-aefd2c6ad9dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4d1d01-19be-4875-9e2f-889755e5108f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2569892f-6609-4852-9a38-b17fb163182b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea9fe7fe-9475-4950-ad44-649272d5eff0",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb19a46-d527-4e51-84e7-5de4a770f35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e085fba8-7670-4754-82fa-22a33ae2ac0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5afaba61-2d66-4fb4-b979-a57dc46ab84d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "40f800ea-c982-4529-98a5-f4ac3d221c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4590226-d939-414f-9d8e-056e7a7d400b",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "578f002c-9d74-4034-9ff7-9fa3c0c3d29a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "761b8e73-a062-4b50-ab1f-e4e115b302f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21bbc408-f6a0-4bdd-bfdc-61cc752207ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11155967-611b-4e78-8c35-b1d65a4a6abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93244441-1429-4eb9-b575-d4a55c73230c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "518d8d01-80d6-4910-86a6-510b1d1cc01c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbc9efb4-514a-40d7-953a-13fa3f73098e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1ac4966-aaaa-4e73-addb-0911b7ba3a3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cff059f5-f791-4335-b50a-e24189acfd30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "933cf104-3143-4343-a56a-7ab424319403",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f12d78-80a3-4db7-8f64-6b2860db6bff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42cb5cd5-bdb8-4917-8783-8b5de56b0dbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b826543-07ab-4106-ac6f-6c9ef48a8e0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99dd6530-34c8-477a-bf13-63b011e541d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "674550ef-6a8d-487a-934f-2675b8becd78",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "459938b7-856b-411c-a112-80a34bc26f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5f6e1b3-2695-493b-9744-8d4336c3f1d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bcdabc7-3c1d-4abb-80cf-f0043e9a43c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c23f634-40fb-4116-acff-019c15bbbea6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9b91db-efa4-4dec-9cae-6f8a6b230b4e",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f4073ce-ad28-40ed-ac77-2232fe0457b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f981c7db-b89a-43a0-b3d0-8fd5ef5c7536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e45154f5-b973-470d-8524-574f1ab532bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b1d06e-453f-4ca8-baa1-f76962b54e40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab27f388-4f69-4852-b9e4-6fcb2761e8cd",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93611aff-c1f8-41e4-98b0-9ff570d65806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2fc97b2e-af9f-41e1-b2cd-24dbd2c393c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8243acd8-32ee-4059-a5f3-fcdf5cf83256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1fd6d9-673e-4581-a0e1-5e9c19978471"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4993b35e-381c-4845-a3fe-a6bc005b0dab",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa09627f-0aed-4d3a-b2c9-8179d72d741e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8e2debad-b1bf-4c7f-94ff-0b876df42666"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "504c5536-fcfe-480a-b959-76b371f5cc5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d01e0705-95eb-403a-9663-ed05434904ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d8cefec-4efe-494f-a94c-a745594ff3a8",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e79333c4-982b-4828-b7c3-e7bddfd31a18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7ff9da9-308b-4b80-b3d8-d5ce5a6462ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e42b5fc-c95c-42bb-9a16-8db0118baaac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6724c727-e57f-49c9-adc4-cee32a6979c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24508c62-eead-4b2e-b4a2-c96446f036d1",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "442784bb-bebd-4818-b2c4-dd15836d2718",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1c76e88-989e-4acc-8ed3-30ab8aed02ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db8b3cf7-4a21-44bc-844a-76fff87c2a0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2649a10d-2e64-4246-898c-124135b607de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a8a814-1609-4ef1-a739-fe6277fc1303",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f30c6a-f84a-4582-8e61-19f3a112909a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83cb1bc6-f7bd-4f58-9685-15ee614c55c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bdd4c59-547f-48d8-8ced-d283f0e304fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cf3a332e-cc4f-4bac-96e1-bbc0a66d418e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "909a875e-6a38-47df-a97f-4516f44a078f",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f49c33b-3328-4008-9a29-b755eed319a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0243e5cf-f6c7-4dde-8303-acbcf7f452f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36bbe3db-bb9a-4746-a7d7-6a5b23b7dcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7c5c25f-d08b-4baf-8dbc-ab14e8995767"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ec6c79-7f8f-4bad-aed9-72d08a4d5462",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78decc89-cb6e-4a4e-a874-0d1eb3eb4fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd843b2c-a8de-4df8-8a9e-07446753ba38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89ecbfdd-147c-4318-a26e-c36b89a39902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3774097-3b59-46dd-bf03-7e7106673cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b40262c5-8b21-4fae-9c2b-31acd92b8606",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25f7d7b-358d-440e-9926-9e6a7b6a00d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ad8b7e3-fc2a-480f-be99-89a62f7eac77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d48d24eb-afd0-42b5-8e5f-639fd9c44e3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99dc2919-05fb-410e-ac3f-287f2d27c4b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdc4cfe3-d30e-4cf3-bdba-4215ce4599fd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67a061b0-fc09-46c3-822b-58d7938f6876",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f48ef9b-f9a8-4d3b-bd0c-e0bef94bf920"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd5ff55f-1058-466b-9287-d2381bc665a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b161beb-93ae-4462-93d1-60d4e9044254"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17c8d2a5-4cff-4460-9513-98b70315e2ce",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405c5fb4-d0d3-4d12-b163-3e8c3f1df6a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca1858a8-a970-4bfb-b3ae-9e842b9637d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a800d9b-b1e2-4b2f-b3ce-3b8a2a588878",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4324cef8-dd91-4f5c-8797-8b2f8ffdaa31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ceaa6d9b-5d2a-4cf8-b7bb-eb17d6c1f3cf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da21f626-cc6a-411e-b5b0-d634eb0539a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b544c907-86d5-439b-947a-48120220f19a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a77223f-5a62-4a52-9514-a9db623b9719",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74bf916c-fe9e-4ddb-a245-8044c1105ef6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0232f7-49eb-4caa-b49d-5e80b95bb49e",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f8ba06a-6eb6-475d-a623-9c32c5fd7c97",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "53ae1c10-0493-4ffa-ba5e-5d887cb7e905"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38c216f8-db7a-4272-a54b-38b613d2e7f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b09fc75-91ba-4402-83b4-a737ac13c08a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ddf2c0b-e21e-4df3-bb86-0d9e158364a0",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b31103eb-26b6-43fb-b08a-e84c9138194c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d41ae874-9b6b-4973-a668-90a8630eaadf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cbc7780-75a6-493c-beec-8ce0f7533342",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b36d10b-f510-4148-ad02-bbaea73f13aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b017d77-872d-4653-9c3d-cdebbe31d2ff",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00cc209c-8d68-452c-ba26-5b5a66e03359",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc05298c-2883-48db-a141-28b8988cf6a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3fa72fc-e219-480e-9662-dd76ec677ecc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48f7c589-6dfc-4f86-b4a0-58197539dfac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2eebdcba-5744-4059-86dc-969cef868748",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52585833-c89b-4ecf-a01c-5263197f94ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99efd577-8942-4bb3-be24-32214bddf526"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "12bbebcb-1449-487d-8a6e-6b907eaf552f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd96ebdd-6446-4d89-905e-ab5032d357a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf52e33-1efd-40b4-955f-c144f28838c7",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62587d6d-9c06-42a9-9686-ccc954d6879e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2145909d-1237-4b2f-90a0-87ee568c8eb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d8e747-3b1c-4382-82c7-3a7a84ef6227",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "609d3834-3788-4aad-89a2-47cc6ec5a197"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a11a6b26-1076-4b24-8675-1dffb5afb266",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5490ad33-f6be-4cbf-8016-3b91c06c7460",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c7aa04d-6cd6-4be0-95ad-d6e196a026f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c14ee85-6e4d-4494-9828-03cab3418009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce19e5c7-c093-42c1-9fb4-572b3c72a930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf99411-baad-49db-ab5b-b1ecaea624ed",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b322e7ce-b097-4323-ab86-e2375445327a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a83d3c37-4c00-4ed3-a43a-7a853e31f9a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3181805f-3e08-487e-b412-d93ce59fba28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbd5598-0ef3-4ec8-9a74-56ffaf20bd66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f151c602-fcd3-4335-92b2-3a2dfbd21be3",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4efdd5b5-1368-44c2-b7f7-5d32722a024e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03de8f59-e30a-4a1a-b02a-6ebf415a74bd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9bf322-2a5d-4183-8e29-292fc0552641",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05155ae8-e198-4557-979d-d61e96e56875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9329f636-6d14-45cc-81e0-64db22018b9f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a25ddfef-a4ff-4764-bc75-0a58a4999dd7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f722b2a-9c47-451d-9dc2-f092b590d5be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36895376-c311-4e25-a77b-5230d54c3d63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31348bc0-44d3-4366-81b0-e486e543125c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ab1bf8-ab4d-4598-b331-8e0941d372b8",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59f48624-fe32-473e-a093-10bd0151873c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7298455-6850-4ee9-9271-954272c04831"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec6218d4-abc0-423e-8f06-19a33eae36b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c2e16b-cd9d-4ec0-a9df-93ae88f1b778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eedf2d2c-66d2-4cff-b2ee-1784b3610699",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "302c07bf-565c-41df-8d68-6e397d7407d1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0aa9f829-1945-48f8-b18b-72f5789f3652"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc80cb97-6115-4d55-a759-51e3bd8b9909",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e60a27ff-f03b-45b6-9d26-2007f2308134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ae0d4e-e786-40ed-849c-6fa98063d71c",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a0934cf-1a72-45f9-8ff5-7cff421339b9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6b35ab71-7c50-4111-a094-8dc0e906186e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "027decc3-1244-4e8e-a4dc-d3f4f425ae25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "981fcc76-c77f-4bea-97a9-eb5f37b9f954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1474aae7-a1eb-4f05-9c94-b610888024ec",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cddb2ec3-20f5-4449-adfd-49debac8580b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab5eee0-145c-4f13-8f96-01f4b623e3b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc36cba-ae9f-4c81-a487-ccfacd73df55",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca4138a2-8836-404e-9d53-792d045815a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0b7bafe-19ef-42e8-b7c7-d07b3ccb9b29",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc1f4be9-7ef3-4789-adba-5cc701e1d212",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "02760e37-2b5a-4061-b647-ff9ae7864abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd1575b4-4de2-4778-b7d6-03c27ffb9e77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "02bdea3a-3ad9-4f76-b64e-a09a6a2290f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b62d7b6-6f5f-4b94-8a16-a02345e6aded",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f8f1fc-0ef8-4d88-8dbf-64a80bbd75a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "20a9ea36-4179-4360-9e1a-bce6fd985567"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab4af9b8-24db-4563-8d6e-559b67983426",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18a8d376-2ef6-40d4-bce2-c8150fea9c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e44ca10e-240a-4848-9882-c097d1febefc",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51a252a5-e813-4df6-ac2c-6eaf57398d86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "903891ec-4005-4ea9-9a76-aa5c26cb713c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "136c89dd-fa4a-4be8-b938-a002d8b79ae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48c2c855-a460-4a5b-8d24-a7779cb113e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad9c1386-b315-47e4-a13c-9c218efb6199",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac3abf0-1386-4563-bdd6-2095faffc0c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "18060da3-bf7a-4dc7-bae8-446ce200a721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91297b3-4011-439d-908f-62c6609a804f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f67150e9-5d0e-4ecf-98ee-58ababf0e7ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba28cea3-710d-4ce0-ad66-4553cf86236e",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d283514-9d35-4306-880c-41213ae21827",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9c7ca9c-7d4f-4d0e-ac61-f9ed83618481"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "965ce46d-af1c-457f-a8d8-5078bdfa2214",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84b0fabc-a480-4a98-a67c-7bf0add32d13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb2ce84b-0f59-41fd-b14c-5c7ff099cc54",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72cecde3-d909-4bd5-9309-8bcd2b5a2dd1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ea7a5c94-dd61-4e58-b5d3-c443724bebe1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f65b055-ae86-46da-a986-6125a6149250",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccd6a6a8-6acd-4ec5-a7ed-1723efcceb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07a28c3a-7264-4d16-b380-a64582115b98",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b1e774-5bc2-4f7c-8819-e4b636581865",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e1a9c1e-932d-4701-9877-886ba8b4eae5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abf3627f-84c4-4d4b-88c1-a94f0404003a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4feba3fd-4ac3-44e2-8b99-8fc7e612146b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94fa8756-9546-44a4-84fd-05870c2dd00e",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed53908e-f890-4e05-adeb-49d13f2d9718",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3e35256-39b0-4516-b95b-b2642656862f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab970844-04d0-4701-a1b2-7b5bcbad360a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c74a76b7-12c4-47d1-9447-eef84bd701c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d4c492d-b1ff-4f5f-906c-eeb03a2442af",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e852a6e2-2f57-4cb7-80fe-327b3f0a8b43",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f49b9e7b-53fe-4f18-83ac-7a9c9c12a9ec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5aa30ced-8f15-432a-9c50-7b83cf4a0c1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a062f10-5f99-458f-8268-221e37ca63c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff519f3d-5729-4090-a1f9-4e90b34cc7fc",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd187294-3341-458f-8a25-4e857de7d091",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f7718951-83f6-4b62-8a1f-99cfec0955bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f91a127-539a-4361-9cb5-7dd990125070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1673e788-f09f-4dde-aab4-e0657c24307f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c983c4-da68-40e3-8132-a2cee7332d28",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7bfaec1-3cdd-4b38-a8bd-01957da86bf2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f68096a-58a1-44ab-a606-2c239a432ea8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49019a7c-b7ec-428a-9d05-d77b345f5cef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01bccf21-ab0d-4ba3-ab84-d71a4445b2c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ce0a4c-3ceb-43c3-ae5f-621bd4f5f44d",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abafc83-f951-45f2-9373-37872e9522a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49d1e674-3c77-4f13-9978-e472f043aa4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03acf626-cb48-4501-bfb3-89c8e8f2544e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a69a635d-03a0-41fb-96ec-d1201e6b8b6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa57bb76-419c-4235-8b92-edc0d2006f3c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4457aa02-17fc-4e3c-a152-db7b85c561c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3af54a8e-4481-4e1c-ad3f-cffa855ece56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78abe6ba-053e-4d90-bbd2-df9b08d930b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faabadd3-0826-4be8-9033-d120af016487"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a529a76-62a7-4abc-a624-3beb61978812",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1889f225-88a3-47bd-923a-b83828a138fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "798b62e8-72f1-4ca2-876f-11b793a5a86a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb36d6c5-601e-4a3d-bf3f-2fad8fac5f65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48944366-0d92-4685-ab3b-50c5ec7c50b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5c76192-c47c-46aa-a66c-da8d29d8b9b2",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d709ea68-8028-4ed8-9272-cc220a606fee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bc122750-fc25-4a22-8b71-203e9871588d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33155cfd-ed6e-483e-83fa-03726480afc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b701346e-1086-4854-8901-80a8cfa71340"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22794816-f0d1-4e73-bb91-3b4b33f3267a",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ddc405f-182b-4ba9-bf47-f5b536f9a7b0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6d9a977d-a93e-48ab-a20a-ee939e47b5de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b17e9fab-93d5-4fe0-bb86-c85c053ce58e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "970084dc-63ae-4fc6-b820-84c0f838382a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68432bce-baee-4d05-b569-94b5cbd3a762",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b55f27-5e9c-4912-8167-b69fee639124",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95d522ac-16f3-483d-a73f-2f736dc89ada"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaf5b6b1-d888-4185-8a9a-73899f3a3787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f39dc4e-2d8a-4f29-b16d-2fcb69531352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c097b418-342f-4560-bec5-408f01a81bf8",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca7ca03a-ea03-438e-9cc7-d5f8244f22e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cfd530c3-022e-49e3-af69-c4f526db3eea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02fd70be-73e2-4efe-90b4-106eeca820c6",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f0500fd-1cc2-4968-9178-6c02fe263d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4291bfe0-fc05-44ce-9e86-25eca7ef1eb6",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e91b8b43-0d50-49c8-9757-49bd3be6ce33",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82891b0e-74ee-47a7-af75-22a784fcd543"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd68ffd-3467-4b67-aa06-d668f2e893db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc43518b-7e0d-4867-8250-50197a1042d0"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b2c85b9-15c9-4e05-bd39-86aac29e69f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ebfa8d20-63f5-48ea-ae00-fc65ecd199cd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78567d79-3cb2-473e-97f4-c9e828d26d0a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "644ed1c5-e156-4dce-a970-b15638688740"
                    }
                  }
                ]
              },
              {
                "id": "9c13581f-caf7-4603-b916-5e0cc3cd6d0f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0e4e0828-e3dc-4059-b850-1c672dacde0b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e96c35f1-f6fd-4f07-92c0-2f251f8f370a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "fd6bf880-ca87-445b-956e-5761e76400aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db74c958-41be-42c1-8c17-e2fae8674580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "bbfbf693-271d-4a30-9483-0562a450db37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa74f2c4-9c18-410d-adfe-0fa633dd9bde",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed3c3923-5daa-4b57-99e9-57c82ed77df7",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "744e0590-9052-411a-ac22-4d1d71c75d3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ceb556a4-d1e1-4fde-80b3-509fd8fdc895",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4576ba08-6a2f-40c6-9fd9-2882caea2cbd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3bae42d7-1d27-48b8-a00e-91d685c74ca1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a56dff5-2a26-48f8-8641-c223d756fa0f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "de295888-d68c-452e-bbc8-c3ed1497656a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6c23d01-cf1e-465f-978b-838c5fa59427"
                    }
                  }
                ]
              },
              {
                "id": "88d8dbdc-cb0c-454f-830e-d7a53c637f56",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "e51bcc18-84a4-483e-b8f0-a5d42fd543fa",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e57e9ff5-e7a5-40de-880f-710cebe2293c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "4c624494-37d3-4e93-8285-e3a4c473b9d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2ae7429-c733-4f6f-957e-241d6869c908",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "385f1591-103a-4678-8d4c-14d99ea5b39b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e67a8ba5-9ec3-4089-9aed-a84cd77dda05",
            "name": "Positive Testing",
            "item": [
              {
                "id": "12f65291-1252-4f2d-b68a-c96516b7da52",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8bcfd09f-f521-4846-9a3a-51de34f6a0b5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "15fcdeef-d62e-4f15-b093-e350f73823a8"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2c61b4ce-b542-4053-8879-c073d9a132fe",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "afd86c55-83e0-48c3-9188-4b445120c759"
                    }
                  }
                ]
              },
              {
                "id": "dc6a26a4-85ea-4798-9d79-20f92c7c2fa0",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8304bb9f-2b5e-4749-acef-7901492f4661",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "d08b64f7-6c75-4db1-a594-6018733fc6a4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a0cbc5dd-2818-42c3-8155-738271dd6e69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51f823db-e23c-4122-984b-10f90e16b1af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4dff7748-616a-47ca-b17a-05427ddac7de",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "e744c9c2-5ce0-4c5c-836e-a97cc08febf7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "dbb98941-a791-4fbf-bd87-f6640ea2204d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ea7f79ed-9c23-4465-8fff-3629d62ea645"
            }
          }
        ]
      },
      {
        "id": "3b3e259d-1e68-4d2b-855f-d3dc460b9fc3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "5c604830-24ac-4330-9c1b-d53628eb132d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "655cb484-9737-41f7-a07f-ec5bfc95fd07",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1df52e62-f7b0-4893-bf99-10e8cb4293ce",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dac6bad0-02a7-4e4b-a087-4ffa86c29cd0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7500ecbd-2bff-4fb8-baf8-7f4886371d6a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2995dee1-3b8b-480f-839a-472e34d8a5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a8c1bdb7-8699-456b-b10b-39613bc45b4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1c56bb9-56ae-4f3b-b086-7edf75b96020",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fcecc006-06ff-4d4a-b1a1-cacc514add82",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0b5df0a8-97c7-4867-a237-aed1feb69024"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc39afbc-40f9-4bde-8b98-e4106c222c2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2b9909a0-42c4-4356-a085-fc76e9a9ef3a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fbbf20f4-01e0-485c-b8b3-4f7b2748f6aa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "18003355-d546-42cd-b535-13673313c23d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ee0e33a-ce62-47c6-9c61-558fa961b531",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f47a564d-cf0e-4631-b43d-1ed2bb59643d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7b4fb9b7-3851-47f6-87eb-eaf1e0264074",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "0220ff30-4799-4f0b-aa66-f30a50c7db29"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d0166327-a7ab-4977-af9f-6b2fcb580857",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5418a8b4-023f-4f2f-b4c1-639f8079f8a7"
            }
          }
        ]
      },
      {
        "id": "6f9fe69e-9498-4ce1-805c-7fffff071f5f",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "81943a91-a4c5-4e27-b172-6f34287d4bcf",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a2eab099-d3ec-48eb-be83-53f8d6b5af6d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "23fe721b-6bf3-4f95-8417-ae8ba6bc1333",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22df6172-468b-4add-8da7-ec29dfa5750d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "07bf403c-3728-4844-b7e7-829ee02f14c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84564abc-5d8e-4cf8-9d7a-fbc2d67d7069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18d5e8a0-e54e-4b44-a8af-63eca62d0abe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f00c633b-4b77-462f-8886-266d1bee79b9",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "828166cf-6d8c-4d6b-a722-3c7e84295818",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1adfcf5-6697-43f5-ac7c-f31c43a05bfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd8d109-fa51-4298-b23b-dae00f62b4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86ae081d-0551-4ad2-bc67-652c0d23040c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6487abe2-86b0-4371-b369-a50371892efb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "15346884-6c42-48b6-960b-d5dbb496bf63"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bfa7dab0-13f4-43eb-a000-9aa1d8db695d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "651d1a6f-add4-49a4-adb5-7cdf22f38c1a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6036f463-7816-4ef0-90e3-acfc6ff629c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "8b4a6e1b-14a2-4a96-945c-63e1389affc7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "43e63c29-acc9-4356-8a71-0c1b414a40c0",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c06d089-2334-49b8-8f7f-9cf93472c2be"
            }
          }
        ]
      },
      {
        "id": "48ebcfaa-c3c1-48f3-b702-1c7f81c66777",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "12ffeb15-23f1-4940-9233-f8609aa987a4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2a8d1451-55f7-438c-b927-27d26991b26d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ce779a42-6da2-41e3-a442-94cc77dc9a48",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfd6a8b-f79f-48fc-8891-403a14bb5f6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "ed26577c-87ec-4db8-96f2-746b33eb3c29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cd88f25-654f-46da-8f6d-a45dbd403a2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ae912c0a-7f09-4a7a-8854-9c5f9aef7875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bccb6107-e2a0-46c8-a2b6-14147afb32bc",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2cdd6b7f-c4be-4e17-913b-66ffa0017d34",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "2a117537-e6f8-4c69-b84f-5cc8b2e390d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7c343d0-051e-476a-825e-fd685c42dca6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "fbdbadd0-607e-4476-9991-619e00f9063c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0cbe32ca-6ad8-493b-83b7-9d6fe1b18b70",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "56ba8310-6872-4d31-8a13-3a13350fc852"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e4a4ac9-76c9-4230-a394-7d0ae58acd30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b796161d-d2a5-473c-a3d8-127737836d39"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f43fb53-43b7-4f56-9de5-9de688bbf855",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "93563d52-4810-43d4-9634-010e62df79c8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d20e5f84-3248-4d99-85df-f2e317d42b88",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b2ee811-a854-46aa-9ad0-95dc3426ab3a"
            }
          }
        ]
      },
      {
        "id": "afdde206-4000-4d99-8cd4-442f480c0f31",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a4e6db52-d5e4-410a-bfa8-fc3213217e45",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "98e3ba4e-d7b8-4b50-a956-3fb387607ded",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "77b5e386-46b5-457c-a113-af90af1512bc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d34de81d-0d0d-4091-909a-4d62022915d3",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5f8de225-78f9-4716-8c76-d383a5fb3e45",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 37.965648854961835,
      "responseMin": 15,
      "responseMax": 338,
      "responseSd": 31.449990038693976,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1676162572334,
      "completed": 1676162593079
    },
    "executions": [
      {
        "id": "d8561743-07fe-4242-8350-03f25a75bd50",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "3ed32d75-3a58-4363-a411-5c6d82184e6c",
          "httpRequestId": "d40b4df6-a3f9-427f-83ef-40bd2933819a"
        },
        "item": {
          "id": "d8561743-07fe-4242-8350-03f25a75bd50",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8c1f5000-7547-43e9-9147-a1060844d788",
          "status": "OK",
          "code": 200,
          "responseTime": 100,
          "responseSize": 0
        }
      },
      {
        "id": "ac02f755-4535-41bf-99a4-38a5ca390af4",
        "cursor": {
          "ref": "8c1e4d28-ff3f-4832-99a3-a07ca8cfc804",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a540f588-40a3-424b-a76b-fe5a03c6768e"
        },
        "item": {
          "id": "ac02f755-4535-41bf-99a4-38a5ca390af4",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "1f545a7f-297f-4195-8030-4a991ca0c451",
          "status": "OK",
          "code": 200,
          "responseTime": 15,
          "responseSize": 0
        }
      },
      {
        "id": "dc7abc92-3823-4004-bd0d-b124f2f7a177",
        "cursor": {
          "ref": "35687741-d77c-4af1-8755-f79c43969927",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b8629f3b-c1c0-4402-a15d-cc1d03edb621"
        },
        "item": {
          "id": "dc7abc92-3823-4004-bd0d-b124f2f7a177",
          "name": "did_json"
        },
        "response": {
          "id": "d02a6cb7-7acd-4a3d-a0ca-bfb18df3f4b8",
          "status": "OK",
          "code": 200,
          "responseTime": 150,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "add99dbf-84f8-460c-8fdc-0d480a5fa87e",
        "cursor": {
          "ref": "d04958b4-a617-48aa-8845-5ad26d6f2d60",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a4bf0dd-b94e-4c76-a688-a8445e29afd3"
        },
        "item": {
          "id": "add99dbf-84f8-460c-8fdc-0d480a5fa87e",
          "name": "did:invalid"
        },
        "response": {
          "id": "03c1536f-0cf2-48f8-a12c-f3b186f48727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "add99dbf-84f8-460c-8fdc-0d480a5fa87e",
        "cursor": {
          "ref": "d04958b4-a617-48aa-8845-5ad26d6f2d60",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3a4bf0dd-b94e-4c76-a688-a8445e29afd3"
        },
        "item": {
          "id": "add99dbf-84f8-460c-8fdc-0d480a5fa87e",
          "name": "did:invalid"
        },
        "response": {
          "id": "03c1536f-0cf2-48f8-a12c-f3b186f48727",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "295bf9fd-0224-4db3-8bca-610e0f14667c",
        "cursor": {
          "ref": "d24f2d2a-defe-4a78-9526-cf30d424b9fb",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9f12247b-8415-409f-9762-a5289bd044fa"
        },
        "item": {
          "id": "295bf9fd-0224-4db3-8bca-610e0f14667c",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "fa10cd6f-7d80-4235-9879-4d2eb6785078",
          "status": "Not Found",
          "code": 404,
          "responseTime": 70,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69bb9bbb-1052-43de-9d48-55682da03451",
        "cursor": {
          "ref": "e25b5a7c-68dd-4855-9e32-4f6159948fa6",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "d647bf32-8a24-4dd4-a356-c7b247cd6221"
        },
        "item": {
          "id": "69bb9bbb-1052-43de-9d48-55682da03451",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e940cbc2-6e7b-47c3-a99d-4005db436750",
          "status": "Not Found",
          "code": 404,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d1f75d7-52c7-4e8b-9e89-cd9aeb3d866e",
        "cursor": {
          "ref": "9166f68c-1ca7-4376-922d-6dd9ca797004",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8aef50a2-7072-45d1-a68f-9f766838e94d"
        },
        "item": {
          "id": "0d1f75d7-52c7-4e8b-9e89-cd9aeb3d866e",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "d588caff-82f9-45de-a894-a451686e6767",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f4eec3-104c-44a7-9733-065beef70eaa",
        "cursor": {
          "ref": "89369c49-911c-4548-a713-5cb0b68dee5b",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8f6da0e3-5a23-4bdb-91a6-7960253e846e"
        },
        "item": {
          "id": "21f4eec3-104c-44a7-9733-065beef70eaa",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "15627317-b852-4264-a703-8b4c6267a79c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21f4eec3-104c-44a7-9733-065beef70eaa",
        "cursor": {
          "ref": "89369c49-911c-4548-a713-5cb0b68dee5b",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8f6da0e3-5a23-4bdb-91a6-7960253e846e"
        },
        "item": {
          "id": "21f4eec3-104c-44a7-9733-065beef70eaa",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "15627317-b852-4264-a703-8b4c6267a79c",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 32,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e74b8d47-c857-48f8-8376-d59d47fdf5b9",
        "cursor": {
          "ref": "51a9ecc3-5df6-439f-afc8-8e59ea7fec93",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "0670e173-bbdf-4301-820d-feac20cde62d"
        },
        "item": {
          "id": "e74b8d47-c857-48f8-8376-d59d47fdf5b9",
          "name": "identifiers"
        },
        "response": {
          "id": "0c9776e4-e001-4889-8cdc-86b9f8e269d4",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14488d81-6965-46cc-902a-c9b7622242b5",
        "cursor": {
          "ref": "f5bb52dd-04e7-4cac-9ee9-f8196a106259",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1cd44658-4dfe-423c-84ca-1db4146b9eb4"
        },
        "item": {
          "id": "14488d81-6965-46cc-902a-c9b7622242b5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "97d65b4f-ff31-4222-915e-79685a1c3b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14488d81-6965-46cc-902a-c9b7622242b5",
        "cursor": {
          "ref": "f5bb52dd-04e7-4cac-9ee9-f8196a106259",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "1cd44658-4dfe-423c-84ca-1db4146b9eb4"
        },
        "item": {
          "id": "14488d81-6965-46cc-902a-c9b7622242b5",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "97d65b4f-ff31-4222-915e-79685a1c3b23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8334d10-830d-4748-8c7a-506eeacc08e5",
        "cursor": {
          "ref": "048b2b44-852c-40ec-b7e3-a27a35c61378",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "6c7e6db7-dac0-4479-856f-72e785abbe97"
        },
        "item": {
          "id": "d8334d10-830d-4748-8c7a-506eeacc08e5",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "7d5f8f54-1657-48a1-bf3f-96d458302185",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba890b4b-9709-45fa-af1b-1cf7a3c51f82",
        "cursor": {
          "ref": "256dd733-88d6-4262-bf7d-2822b847d9b9",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3fd8d9ea-db71-49f1-b234-7c759fb168ab"
        },
        "item": {
          "id": "ba890b4b-9709-45fa-af1b-1cf7a3c51f82",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "1c78ddce-a457-4f54-848a-5027fcdf1ba2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8d8d400-7857-4158-997f-d881195f5933",
        "cursor": {
          "ref": "d139ca22-a76a-49ba-a5f5-6c44ba36be30",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "a055d9b2-ed39-4df8-88dc-56e49db1dc2f"
        },
        "item": {
          "id": "b8d8d400-7857-4158-997f-d881195f5933",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "16f27ecc-f7d4-4b69-b379-2bb6b9e97fd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19fe8d0d-1ff4-4323-95b2-0c41001af603",
        "cursor": {
          "ref": "831f42d7-fc03-461f-b79e-f2c956bfe17a",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "b34fa5b6-f976-423d-bc2e-bebd70f75516"
        },
        "item": {
          "id": "19fe8d0d-1ff4-4323-95b2-0c41001af603",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "3e891398-f4e1-46f7-8f96-2b47b1d4a1a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c94a3a8b-5376-48b0-9818-fba1005dbdb5",
        "cursor": {
          "ref": "9471ac7e-abf4-41db-a55f-3099df00b6bd",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "3b266e6f-1dff-4c0b-a449-6b6cd2051a5b"
        },
        "item": {
          "id": "c94a3a8b-5376-48b0-9818-fba1005dbdb5",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "284616be-128a-4176-a861-dadee40a7530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d363ce64-dc0f-40ea-8338-1cb103bbd494",
        "cursor": {
          "ref": "4fbd1b65-0989-457c-9288-9e438b050b83",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "fb6770d2-d9af-4894-974d-83cf3df2dde3"
        },
        "item": {
          "id": "d363ce64-dc0f-40ea-8338-1cb103bbd494",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b7639168-bb96-4db2-a149-ba6dff18bda5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4ed295e-d18f-4755-be07-1578dcb1b51e",
        "cursor": {
          "ref": "2d58505e-591f-4f4d-8acc-7fd779118a78",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "dce532a8-b96a-44da-bd41-95cb35a1a99b"
        },
        "item": {
          "id": "d4ed295e-d18f-4755-be07-1578dcb1b51e",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "4b83b610-5383-4fc7-890a-f6b04cfcc42f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "944b2529-4476-46a1-9ae0-5a76435ffc55",
        "cursor": {
          "ref": "b2a73405-8c72-43c5-82af-8e7094d115c7",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "5bef2f02-ae71-45e2-900f-b77dc3efb795"
        },
        "item": {
          "id": "944b2529-4476-46a1-9ae0-5a76435ffc55",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "fb74b9dc-df45-4f68-8af6-03e749608999",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ada8fbfd-b434-4514-a5cc-4ea4e0b4f3c7",
        "cursor": {
          "ref": "bd05363d-09d3-4905-8db9-e7e37ec90d9e",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "b28679a0-77b8-4817-a71c-2b61357cb368"
        },
        "item": {
          "id": "ada8fbfd-b434-4514-a5cc-4ea4e0b4f3c7",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e6dcc359-1cef-4448-ba0f-93dc8fbd4a54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a2ad5cf-d1d4-4bf0-b8b7-712da626d761",
        "cursor": {
          "ref": "d16ac82f-79df-4aec-afd8-99be5cc5bd25",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "4167b01b-24db-4ed0-bc42-4f880ac09c27"
        },
        "item": {
          "id": "0a2ad5cf-d1d4-4bf0-b8b7-712da626d761",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "51a293aa-0e92-4a92-b9ab-a1367a5d055e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c01535f8-701e-4c6f-998b-5cb474115af4",
        "cursor": {
          "ref": "106e6cac-6091-4813-9786-46c7c538e7d0",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "5f7ec0c0-27bc-4e8b-9b83-fcae16a662e0"
        },
        "item": {
          "id": "c01535f8-701e-4c6f-998b-5cb474115af4",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "124815cc-a0b0-4359-b01a-c42ac523b973",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7e4482d-3d24-41b8-9586-417e8447b5a3",
        "cursor": {
          "ref": "b909b558-5d7b-4e6b-9b25-5a0a3162519b",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "3b4a85fe-7283-4df5-b0a8-979f29795ebb"
        },
        "item": {
          "id": "c7e4482d-3d24-41b8-9586-417e8447b5a3",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "514a0c0a-8703-4415-9c79-4978e7cd385c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cbf9966-435c-413a-9c74-f1a3ce6f2d03",
        "cursor": {
          "ref": "1cffa76a-ec5a-4578-b3be-380967fd2599",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "688e04f3-9d54-4baf-aa4d-7dc6c6d765b7"
        },
        "item": {
          "id": "8cbf9966-435c-413a-9c74-f1a3ce6f2d03",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "333e2d65-db3a-48f4-b320-71b85cadc6ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "324ce931-e9ad-4e0b-b4b6-9c87285dbde8",
        "cursor": {
          "ref": "964e68bd-f480-49e8-ba1e-948250bd203f",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "2103c9dd-9d55-4786-bb6b-5d151640bd2b"
        },
        "item": {
          "id": "324ce931-e9ad-4e0b-b4b6-9c87285dbde8",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "b3576f16-78d9-4b5b-8ef9-2c883c412404",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ed4883-7de1-4d1e-95ef-8f8b067d37c4",
        "cursor": {
          "ref": "d22d7a32-0dde-4781-8494-81abe869b9c3",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "ff9d95d5-b6dd-4b97-8dbd-2f29005c9f93"
        },
        "item": {
          "id": "c6ed4883-7de1-4d1e-95ef-8f8b067d37c4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "9de8dd82-16d4-4ca9-9a07-e2931ced70c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a11f6a9-a3c7-4465-b0c2-3bb813b18cfa",
        "cursor": {
          "ref": "b8b85119-e755-40c6-8e3b-2f1639046203",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "16de0be6-8b6b-482a-813a-dfdc68a7a93b"
        },
        "item": {
          "id": "7a11f6a9-a3c7-4465-b0c2-3bb813b18cfa",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "c92df6f8-a399-4390-9ba5-d75eaa8aa168",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e42062ae-08d1-43b6-b582-f5ecb5d4fc1a",
        "cursor": {
          "ref": "48423b70-0a9d-40e6-8a4c-54cd5c94362d",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "617515b4-629f-469e-a4a0-2e4fe11276cb"
        },
        "item": {
          "id": "e42062ae-08d1-43b6-b582-f5ecb5d4fc1a",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "6714bd71-1402-4fd6-9d92-2696372d643c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31cc23c4-35f1-4a14-92d6-7acff891decb",
        "cursor": {
          "ref": "94f58ee8-4b66-4426-8a2a-fc714f948c51",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "9936d26f-2398-4415-abc4-1890ff911da0"
        },
        "item": {
          "id": "31cc23c4-35f1-4a14-92d6-7acff891decb",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "6571b2a5-4f68-4ca2-9a66-9a0be56ebff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f4384e-ffa3-403e-a0c8-267bfef1d102",
        "cursor": {
          "ref": "c0601e4f-9d54-43c2-9635-393c34f5db1b",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c702f732-8767-4672-8514-7a431916bdc2"
        },
        "item": {
          "id": "97f4384e-ffa3-403e-a0c8-267bfef1d102",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "f2dd6617-be71-465a-945a-5d3798b020be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf6d13c-35e2-41c6-9a57-653713e4a8d0",
        "cursor": {
          "ref": "d03b2765-9923-4997-b4a2-786b3414d298",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "77dc1324-3a6e-4c78-979a-9bbcb8ffe5f9"
        },
        "item": {
          "id": "caf6d13c-35e2-41c6-9a57-653713e4a8d0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "170a7f67-3419-4614-9c21-f83bbe0046c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0df3cd8d-3ac0-40bd-bb43-f7aac35c8106",
        "cursor": {
          "ref": "7453850a-160a-4034-bf7d-fcdcb70a0ed9",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ebd34e6f-5aac-4a57-817d-8d9632e0b811"
        },
        "item": {
          "id": "0df3cd8d-3ac0-40bd-bb43-f7aac35c8106",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "ef263f07-394a-41a5-aabb-ab91aa468140",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d92624c-59d3-4917-9889-d5b459ada7bd",
        "cursor": {
          "ref": "ac9a48cb-104a-419f-b08c-784a559bc4b4",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "4ccdd6a1-22bd-41b0-8c3f-8bb2519a5bb3"
        },
        "item": {
          "id": "0d92624c-59d3-4917-9889-d5b459ada7bd",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "98cbfb75-39e6-4575-9589-3ea0b60173d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a0f541-903d-4ce0-b907-ded45e671040",
        "cursor": {
          "ref": "2703c3d7-aa53-453e-a3bd-aa1213cd338c",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "535f914f-e023-41c5-be92-cc70db9d6fb7"
        },
        "item": {
          "id": "c2a0f541-903d-4ce0-b907-ded45e671040",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "e2d30342-8631-45fc-aba7-7d71a5fc4acf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01fd5b7a-4d68-4879-8821-479020353147",
        "cursor": {
          "ref": "041a9c77-0bc1-4fa8-ae4d-548d71418910",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7c689b9b-564e-49e3-92a6-97ef474d51d8"
        },
        "item": {
          "id": "01fd5b7a-4d68-4879-8821-479020353147",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "36192ab1-69ca-4b44-b9e1-df8882dc4d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a021d900-6328-4c3e-9adb-7b5850c33a81",
        "cursor": {
          "ref": "7aedb302-a70d-429b-8823-b2a2fe7e6b2c",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "6a43d668-e99a-4f83-ba3e-80d4d2126cf9"
        },
        "item": {
          "id": "a021d900-6328-4c3e-9adb-7b5850c33a81",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "fbc98b07-a4a9-45ab-9310-5f74b5138cfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a28a556f-4607-4811-aa29-7a4fcb792129",
        "cursor": {
          "ref": "ceb8b658-d28b-448b-bc32-197810f1d79a",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a16378c4-2a7c-433d-8ba5-55b695cb2934"
        },
        "item": {
          "id": "a28a556f-4607-4811-aa29-7a4fcb792129",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2f4433cb-7218-4900-8992-dc2cb8d112c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebb04696-e43c-43ff-a3d6-deadbcfae46d",
        "cursor": {
          "ref": "6d85e8b7-e2b7-4d5e-acba-6831c52ebe50",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "603bfdc0-a601-490e-a2a5-8eefd6f6c72a"
        },
        "item": {
          "id": "ebb04696-e43c-43ff-a3d6-deadbcfae46d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "21cf69b3-0aa1-4d01-b512-5909ad6eeccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7069fe9-5a52-424f-bbf8-e4fa0db00276",
        "cursor": {
          "ref": "bacf91c5-9539-4ad6-88fe-6054a63d2ac2",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "78c9b30b-62dc-4a0c-8005-1878602346f8"
        },
        "item": {
          "id": "a7069fe9-5a52-424f-bbf8-e4fa0db00276",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "88afcdab-9e16-4b80-afb4-f03ac507d05e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f35f2a5-b655-438c-b124-97279d69db52",
        "cursor": {
          "ref": "862a87ec-c711-4840-84d9-ff51c31fc6a7",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "2d75c6f9-7451-458e-b74a-b9e7d0a98210"
        },
        "item": {
          "id": "6f35f2a5-b655-438c-b124-97279d69db52",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "8aa69553-4ab8-457f-8781-0069dac03ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30445a3e-5ae6-4124-8bc1-deb7c8774c18",
        "cursor": {
          "ref": "3f17523f-ab1d-4ba4-bc15-0bf91c958ec0",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "38d2e163-fc52-49e8-b070-ae80d79ce6db"
        },
        "item": {
          "id": "30445a3e-5ae6-4124-8bc1-deb7c8774c18",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "fc9aa5c0-aada-4a11-a4b8-a1e053d43c9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6458b752-359e-49bb-a723-f2861f3ae8b7",
        "cursor": {
          "ref": "1d6813b4-5a2a-4179-b32f-e4f950199d7d",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "f045df63-1c04-43ae-a2f4-5250368f67eb"
        },
        "item": {
          "id": "6458b752-359e-49bb-a723-f2861f3ae8b7",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "92858919-c3c0-4891-8456-2b6982f211b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e421f804-f3d9-41a0-aa58-a35c038c7120",
        "cursor": {
          "ref": "39c2045c-11df-49ee-808e-3d3643993322",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "7b4c31b0-aaed-416f-95c3-16bef8086b31"
        },
        "item": {
          "id": "e421f804-f3d9-41a0-aa58-a35c038c7120",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "42a49b08-3d3d-475d-9086-f125cf453c2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eee8fa33-2c03-4bb6-be5b-d693727c6835",
        "cursor": {
          "ref": "3f6f59c0-47dd-4e7e-808a-2eb79b24bdaa",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "75680ad3-0e27-4470-9bf4-44ce01408ae2"
        },
        "item": {
          "id": "eee8fa33-2c03-4bb6-be5b-d693727c6835",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "6f416c99-5967-4cdf-9480-1c6e8484d9d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f24311-b996-4c79-a552-8eed853213a3",
        "cursor": {
          "ref": "58f46b1b-9360-41b3-8de9-4c8b16389b2a",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "6e638a76-0501-4293-b8d3-cc8d9a9b78cc"
        },
        "item": {
          "id": "62f24311-b996-4c79-a552-8eed853213a3",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "310e40a1-ca62-4c56-b8b3-b63791c1266b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c2a98b3-c772-48a9-8eb3-b9a37cedbcf2",
        "cursor": {
          "ref": "f6259284-2eb2-4a3f-882f-1c83be8408ef",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "2019c3b9-0b81-4616-93f2-10dc241215cd"
        },
        "item": {
          "id": "3c2a98b3-c772-48a9-8eb3-b9a37cedbcf2",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "ad556d71-7169-4c4f-8fb4-b5e9b57b5649",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7c8c59f-0909-4be9-8b46-c8c433cda7dd",
        "cursor": {
          "ref": "d5044572-abc1-4dff-b35e-a5598be54049",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f2f3713b-d118-43db-aa5a-d254336ea142"
        },
        "item": {
          "id": "d7c8c59f-0909-4be9-8b46-c8c433cda7dd",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "51ba4f40-70d0-4e2a-9654-9e9346836ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "454022fd-0a8d-420c-9820-73926323a7c1",
        "cursor": {
          "ref": "516a872c-aee6-4456-9305-42535ec2ab0f",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "382277fb-f041-4193-b5dc-9b145a63bd95"
        },
        "item": {
          "id": "454022fd-0a8d-420c-9820-73926323a7c1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "e0d8ad14-ebef-4530-997c-81b68d78bf29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "84938c3b-6789-4bb6-85e7-c5954622295f",
        "cursor": {
          "ref": "cb0cbfd4-9dcd-477d-a0d9-de2a0afbf23e",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "01a8167f-2f47-4b65-9f2f-298664066157"
        },
        "item": {
          "id": "84938c3b-6789-4bb6-85e7-c5954622295f",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "aca0bf1e-c4fe-4102-a0df-8d06efb99d1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e450872-e880-461b-ae09-2564b9b53a65",
        "cursor": {
          "ref": "61488df6-a9d2-406c-b274-8914015692c6",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c30663cb-c550-4922-9af5-6772cc0dc571"
        },
        "item": {
          "id": "8e450872-e880-461b-ae09-2564b9b53a65",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "6bb93fec-3282-40ec-95b1-a2860b97e731",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cc1dd1a-5e6c-4c3b-bfbb-6b1876562455",
        "cursor": {
          "ref": "05bb74a9-c794-43e8-8985-3d41a9911497",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "e58dc123-c4e5-4ebf-86e0-efa189a633f6"
        },
        "item": {
          "id": "6cc1dd1a-5e6c-4c3b-bfbb-6b1876562455",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "d193136d-60e7-4f4f-aa10-608ebd94d81d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16e466ec-d763-48b7-8d56-e52c70658ed6",
        "cursor": {
          "ref": "7b5ecfe8-5135-4886-8a33-c7c35d5157c8",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "13177802-02e3-4306-925b-f68349fdb29a"
        },
        "item": {
          "id": "16e466ec-d763-48b7-8d56-e52c70658ed6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a757e6f7-6426-4cbe-a0d9-dff028c9184b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e401fe1-d21b-4e20-a387-52850f197846",
        "cursor": {
          "ref": "f710596c-806e-4ddd-a4d3-767e28f5f082",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "8327ac37-154c-4f24-bc5b-a79213ea599b"
        },
        "item": {
          "id": "5e401fe1-d21b-4e20-a387-52850f197846",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "ceb12962-6383-4345-bf51-5b369a89750a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c089268-4d4b-458d-bf7a-325a2906f3fc",
        "cursor": {
          "ref": "8255400f-962f-41aa-a542-d0dd2fcdd968",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "1fdb42bf-9f6c-4730-921e-a661723193dc"
        },
        "item": {
          "id": "3c089268-4d4b-458d-bf7a-325a2906f3fc",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "19bb9468-da1f-4a4c-bc31-dc8adf7ed7f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a72c865-b041-480e-bd25-6867cafb56b3",
        "cursor": {
          "ref": "91623f9e-fa81-4ae8-8b6c-5c024f3cf2fe",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "ca9a5288-4f73-446d-ac55-5c94c176a730"
        },
        "item": {
          "id": "6a72c865-b041-480e-bd25-6867cafb56b3",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "1f0dbba0-c493-41c1-8aee-e4132584e44a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "c5d3effd-0fc2-421b-9152-d62c331e2e34",
        "cursor": {
          "ref": "78bee61e-4fe1-4066-8c68-50d79b534ef8",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "1a052de6-b084-49c0-a79b-8bb718359e5f"
        },
        "item": {
          "id": "c5d3effd-0fc2-421b-9152-d62c331e2e34",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3b828195-9e69-44f5-951b-33ce932ce78d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c735ba16-b920-471d-990e-fbbe07c57e49",
        "cursor": {
          "ref": "11ebf007-7ade-4478-afa2-bdec66b5dc69",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5aa0c51f-9b77-49cb-9b1e-9433b50eb50c"
        },
        "item": {
          "id": "c735ba16-b920-471d-990e-fbbe07c57e49",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4d525cc1-8e68-42db-b767-6ed7440374b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "198c9ead-6c74-4f35-9b78-ac4c61e28b34",
        "cursor": {
          "ref": "01875a78-11fe-4000-839a-06855a0962ab",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "eed69c98-ebd5-45e3-864e-e704e19868c4"
        },
        "item": {
          "id": "198c9ead-6c74-4f35-9b78-ac4c61e28b34",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "7daeb946-2442-469c-9f75-f108c3004e2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38b209a8-24d7-4559-9fea-1746f59857f7",
        "cursor": {
          "ref": "9271d8ee-2556-4dc5-acb4-cdd80b692b5e",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "36e1a86f-a89f-4363-a362-7cd243059eb1"
        },
        "item": {
          "id": "38b209a8-24d7-4559-9fea-1746f59857f7",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "59ac3d3c-e419-47d0-b23e-be9fe12546e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b079d0-92db-4d6c-8085-43fe1d5a0398",
        "cursor": {
          "ref": "67eff8c1-9699-41f3-8759-54bcd2f5d015",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "4ae428b4-b999-4705-acfe-91d49cceeac8"
        },
        "item": {
          "id": "18b079d0-92db-4d6c-8085-43fe1d5a0398",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a18817c4-55e9-4a57-8ea6-8c917ebae5ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f8f9868-b3ae-4935-a2e0-e7ebdc38e105",
        "cursor": {
          "ref": "b4f2e63c-bb56-4488-b2e0-2ca234ad6c61",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "4e85b2c1-1dbd-4a61-a61e-b04b940ef439"
        },
        "item": {
          "id": "7f8f9868-b3ae-4935-a2e0-e7ebdc38e105",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "0c2b4959-74d1-4328-a2b7-1fdd6dbe11f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86c95bf-2b19-4876-a8c7-d183ba82f971",
        "cursor": {
          "ref": "e9c074cf-ab03-4a46-bef7-fa1945b65147",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "bf3705c9-c54d-47a2-903c-3f864a79bfca"
        },
        "item": {
          "id": "c86c95bf-2b19-4876-a8c7-d183ba82f971",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "50b0aa42-032b-45f9-9b81-3d07f8b91fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59bd0a92-0ed4-4758-94c7-f89294c7b650",
        "cursor": {
          "ref": "42266941-2f45-4e83-ab29-b70e22f1636f",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "eff7a9b0-d714-4f95-8afe-1f11ea6275e1"
        },
        "item": {
          "id": "59bd0a92-0ed4-4758-94c7-f89294c7b650",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "88ed9b29-07ab-43e0-b13b-4ba3d75a9bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "702937e7-07ad-45f3-8457-f3e3190ea75c",
        "cursor": {
          "ref": "2cec0cff-c809-42c4-b345-dfca93297b19",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "8b4a0f75-68cd-4615-8e69-01ae5499d1ee"
        },
        "item": {
          "id": "702937e7-07ad-45f3-8457-f3e3190ea75c",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "581f7c09-2f48-48ae-8bba-2b4338bfb1de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5982a791-db0f-4016-80bd-82264bd793b8",
        "cursor": {
          "ref": "c50ab725-f941-4be4-af08-07bfea04f529",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "87faea8e-7c39-4e8d-925c-b306eb623b63"
        },
        "item": {
          "id": "5982a791-db0f-4016-80bd-82264bd793b8",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "562de766-2f94-4896-b2f4-650cadc90458",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4569778-3870-4273-b0fe-662da24a2e14",
        "cursor": {
          "ref": "87942fe2-85de-4c5d-a38a-510d23c12708",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "8e31777c-236e-452a-b746-da31c2394aa3"
        },
        "item": {
          "id": "e4569778-3870-4273-b0fe-662da24a2e14",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "b7b25dea-db58-4fef-b970-6836f1c740c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d009ccb3-d16f-4166-90cf-86b7434f454b",
        "cursor": {
          "ref": "79a24b5d-24b3-43cb-aa81-1a18b560848e",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "9f2fea36-e9a6-4524-9da8-5558f8120677"
        },
        "item": {
          "id": "d009ccb3-d16f-4166-90cf-86b7434f454b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "4631431a-933f-42ae-a4a7-c6159b53b6d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7841e7d-4916-42de-bbe1-5609803646de",
        "cursor": {
          "ref": "e4b53c18-daf2-4542-ac5f-f8e6c27465e9",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "3bab2ba8-e6b3-4c9a-9ea0-3893b84a7401"
        },
        "item": {
          "id": "a7841e7d-4916-42de-bbe1-5609803646de",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "da1f8882-cac4-4dbd-b273-f01feb606b44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "071d4373-d039-44e2-9132-6683da733c5f",
        "cursor": {
          "ref": "c192134b-0e21-4f43-b97f-da4cbd1bc7db",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "cbfeb071-a293-48a9-af67-e1481505fcd9"
        },
        "item": {
          "id": "071d4373-d039-44e2-9132-6683da733c5f",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7c971511-8d3f-4215-9658-da01d55ef557",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97fbfa4e-1a23-4610-b83a-65968f2ec88d",
        "cursor": {
          "ref": "e9cb9d4b-0f75-4794-bbaf-a698a909ac91",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "2db0dd73-426a-4936-bad9-13525dcbca6b"
        },
        "item": {
          "id": "97fbfa4e-1a23-4610-b83a-65968f2ec88d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a94d8f07-fe6e-403f-8d8c-58e06fb30f02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4224d08-66b3-4b44-bc26-b0554b0eb810",
        "cursor": {
          "ref": "12517a8c-6e98-4668-93ad-8f12a5a9a6a1",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "9862e227-22cc-49e1-be9d-2f8a90275584"
        },
        "item": {
          "id": "e4224d08-66b3-4b44-bc26-b0554b0eb810",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f44b98b2-8fc0-4d8c-9361-9f2a01a96db9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa128be0-e939-43ac-9bb9-79fc948d0a39",
        "cursor": {
          "ref": "6d84534f-c77d-42eb-9407-9c57a0c78e32",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "45c0a4f3-7f8c-4fc8-b481-c5874d51827f"
        },
        "item": {
          "id": "fa128be0-e939-43ac-9bb9-79fc948d0a39",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "f7426973-ef26-43c3-91b2-69073992eea7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58b2789f-435c-46d3-90b6-a7a89226a8db",
        "cursor": {
          "ref": "27a43d8a-7e49-4985-84d5-e89fab1d6d3a",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "72efdfa9-dd0e-41b6-96d0-96a15518626f"
        },
        "item": {
          "id": "58b2789f-435c-46d3-90b6-a7a89226a8db",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b2c6c22b-c83a-4de4-994d-c6a9763452d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b61c41bf-5f17-4f7f-82d5-d9529731a5fa",
        "cursor": {
          "ref": "de6bc544-2ce8-4c50-a591-6da580e53be5",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1a2e0fca-f014-4f82-b4de-7a14be612b79"
        },
        "item": {
          "id": "b61c41bf-5f17-4f7f-82d5-d9529731a5fa",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "276f299c-42d5-4da3-9e96-d87aa39417ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ccce7c8-3fa2-4ddd-99ac-09943688f40e",
        "cursor": {
          "ref": "9b265c36-a35d-4bb7-bf88-0e148b9cb497",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "934f39c1-ce2d-48e6-b41a-d6a67016d2b1"
        },
        "item": {
          "id": "9ccce7c8-3fa2-4ddd-99ac-09943688f40e",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "88cc822a-4faf-4999-8a40-e3fcca87a83b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5fbfd3-61ba-4705-8142-061a3ffb5d0c",
        "cursor": {
          "ref": "f04953e2-b08f-4ab5-bd38-ba915abeee45",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "c9d06f2f-d74f-4c2c-be0a-03adb5a5e2ea"
        },
        "item": {
          "id": "4b5fbfd3-61ba-4705-8142-061a3ffb5d0c",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "b0aeb91d-efa5-46a2-9b00-eb987745add5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ed47e7-37fa-4b2e-aa94-b1ccef62fd04",
        "cursor": {
          "ref": "bba79e7a-1dbc-4a6c-a1d5-7abf7317911d",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "31a8df6a-af7b-4544-a071-7e186faa56f3"
        },
        "item": {
          "id": "e3ed47e7-37fa-4b2e-aa94-b1ccef62fd04",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "5b70abf6-1dca-4e45-9795-d15f80de84a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e6abeb-487e-4a55-92b7-62c45ef10c90",
        "cursor": {
          "ref": "c20d2d64-0758-4372-88a2-cefabf0e52a1",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "661166f8-3f26-44c9-bf04-2988ef9f8f53"
        },
        "item": {
          "id": "54e6abeb-487e-4a55-92b7-62c45ef10c90",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "dcdc085a-41f2-4ebd-8b33-bc76917d5569",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c8548d-3f46-4e27-81be-3afd4f31cea0",
        "cursor": {
          "ref": "36a45034-6306-4841-afd2-42c61320c03e",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "91a0ee96-c357-4845-84e3-71add399b558"
        },
        "item": {
          "id": "96c8548d-3f46-4e27-81be-3afd4f31cea0",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cddac4ec-4667-423a-8bf8-179b39cdb005",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e79639c-788b-4771-8299-f83c31236eab",
        "cursor": {
          "ref": "6a784199-fbc8-4210-9b60-e04ef2cc6afd",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "af6aaa11-c51d-43ae-a38e-3a236cff4ee1"
        },
        "item": {
          "id": "5e79639c-788b-4771-8299-f83c31236eab",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "0d1fcaf5-1e9d-4b4e-b713-5b7a158a122f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfc33ec9-146a-420a-91b5-2f9acb938192",
        "cursor": {
          "ref": "0b1040b7-f3ed-4d97-998c-9e41d7a1e4e2",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "795e4271-fb07-4af8-ad97-23f2db6a786a"
        },
        "item": {
          "id": "dfc33ec9-146a-420a-91b5-2f9acb938192",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "e4db24f0-92ad-4b3f-b15f-b0c6fcc60f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76edf313-5a48-4199-89b2-22d2f77cc4e2",
        "cursor": {
          "ref": "6becc2b6-eaf1-4bbc-883d-b38fc943d1b4",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "85b768e0-5d5b-49dd-b631-be95455c7272"
        },
        "item": {
          "id": "76edf313-5a48-4199-89b2-22d2f77cc4e2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2132532a-1f20-4962-944e-42b29651dfee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56391777-a2b1-4a75-a816-8d45bb57495f",
        "cursor": {
          "ref": "b035a9c4-2b28-4b3f-9074-6a8e5000a0c2",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "47c8b81f-d893-4250-adc2-ddfe3f2b3b17"
        },
        "item": {
          "id": "56391777-a2b1-4a75-a816-8d45bb57495f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8740c791-6ef9-4e76-aacb-f987ef440a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f263ca2-85f7-40b1-a9e1-d72dfc3a9e9d",
        "cursor": {
          "ref": "4df84476-275b-4643-9470-535a571d3e9b",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "cfa2474e-836f-47ec-9c6c-add36377f9bf"
        },
        "item": {
          "id": "6f263ca2-85f7-40b1-a9e1-d72dfc3a9e9d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "92e183f1-a4c6-4fd1-a657-b67269fd1023",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e272ad09-7c21-47bb-921f-18758e48fc64",
        "cursor": {
          "ref": "d9f2a083-5bc5-4ea0-897e-91766c531a16",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "06b304d0-d812-4afc-ae60-b6f6fc12fee8"
        },
        "item": {
          "id": "e272ad09-7c21-47bb-921f-18758e48fc64",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "24632f3a-9470-4c75-95e4-adec16b0d179",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cdbdf2b-9112-4dfc-b69b-2ed273bd2dec",
        "cursor": {
          "ref": "e13dfb2c-d43a-4160-a0bd-31d6727c8811",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "18cb2c8c-9b04-4d2b-9a4d-3846fae91743"
        },
        "item": {
          "id": "0cdbdf2b-9112-4dfc-b69b-2ed273bd2dec",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d568aab2-3023-439a-9915-222e80ee3f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c24a02-537a-4b21-b42c-131aad2949e9",
        "cursor": {
          "ref": "33d876b3-c105-47dc-adf5-1e3d0b133218",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "14b3aa50-bab3-4295-ad6b-a3e4593c1faf"
        },
        "item": {
          "id": "82c24a02-537a-4b21-b42c-131aad2949e9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "1c2cec17-bc64-47a4-951a-d97dda332572",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1af47541-efab-4066-a39d-7b806b02451d",
        "cursor": {
          "ref": "affa5c6c-bcb9-4b83-9448-c45cb571b20d",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "e79f9562-9193-4676-b9f3-0d5af3736bca"
        },
        "item": {
          "id": "1af47541-efab-4066-a39d-7b806b02451d",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "9318390a-7bac-465e-94a5-1706825f4493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e5c4930-78a2-47a0-9e08-c41f5717d7e2",
        "cursor": {
          "ref": "563d64c4-1d00-4818-af10-521eddc64673",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "6c846565-fa56-453d-88f5-a370b814765e"
        },
        "item": {
          "id": "3e5c4930-78a2-47a0-9e08-c41f5717d7e2",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "742c9f9e-e607-49ea-9b82-851ea4722841",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d7e02e5-a5df-4cb1-a20f-e4f030be158c",
        "cursor": {
          "ref": "96a3f8eb-79c9-4d9d-a43c-e3a29e501e07",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "6be4b071-e8aa-4929-b0f8-ec83dde672d6"
        },
        "item": {
          "id": "6d7e02e5-a5df-4cb1-a20f-e4f030be158c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f25111bc-9d83-46b7-869e-255322cf9b95",
          "status": "Created",
          "code": 201,
          "responseTime": 51,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "5dee1089-574c-405c-80ba-fd290b17bfaa",
        "cursor": {
          "ref": "c3ae753d-802d-458d-a24c-599937a4042f",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b5b27727-c4ab-4a25-8242-a0f83fad4f44"
        },
        "item": {
          "id": "5dee1089-574c-405c-80ba-fd290b17bfaa",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "60f383df-72ab-496e-982d-49c5c7d7cd61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "049542a1-30d1-4f3c-9fbf-84b9b582f283",
        "cursor": {
          "ref": "223e52d1-dcec-4e77-83eb-de6ddcbfe1cd",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "8a619918-449a-492a-b385-e8c7e735d75d"
        },
        "item": {
          "id": "049542a1-30d1-4f3c-9fbf-84b9b582f283",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "87ef9239-0671-4c17-aac4-eb6ecadcfe5b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47d5a5d1-8f71-452e-8932-ea033dfe66f2",
        "cursor": {
          "ref": "68fb7cd6-4dae-4556-8d97-c05f36fee3e3",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "00663b33-a91d-4c6f-8514-3e998186ed20"
        },
        "item": {
          "id": "47d5a5d1-8f71-452e-8932-ea033dfe66f2",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "06f0090b-8fd6-48f1-a19b-8c2ed5ec493a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b789dadd-0550-4ae9-97be-7d5bc7afd16e",
        "cursor": {
          "ref": "c7dc2f4e-59e4-453d-8ecd-bccdb13ed3ae",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "73f87904-3846-4edb-8298-187068074688"
        },
        "item": {
          "id": "b789dadd-0550-4ae9-97be-7d5bc7afd16e",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bb9ea402-91c6-405e-8a98-1a3b793a223f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d13a3e5-29cf-44b1-a574-10bf0ad6aa41",
        "cursor": {
          "ref": "dafb0aa0-31fd-462c-9888-c04f60684b18",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cd7a06e3-b397-4654-96d6-7db6bfe63540"
        },
        "item": {
          "id": "9d13a3e5-29cf-44b1-a574-10bf0ad6aa41",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "92488439-2402-4b68-bb14-19af15e09f67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69f35405-adb2-4d74-b4c4-00728793f6fc",
        "cursor": {
          "ref": "4633b575-9f53-4aae-9886-1a1dc5c6b8ff",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "e45de701-87d2-4d34-883a-e027d1b03a48"
        },
        "item": {
          "id": "69f35405-adb2-4d74-b4c4-00728793f6fc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "0fc9ff1a-cc5d-41d4-be5c-f1c9f4deac01",
          "status": "Created",
          "code": 201,
          "responseTime": 49,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "5eb387f9-827f-4e46-937d-d16d470d4be4",
        "cursor": {
          "ref": "c5e22f3f-0a47-41e1-b716-e8bd19b573c9",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "8c10f910-6cab-4012-a125-aa870089438a"
        },
        "item": {
          "id": "5eb387f9-827f-4e46-937d-d16d470d4be4",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "793cb10a-d909-4996-89a3-41a1b878b336",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a56a013-28c3-4453-98ef-de4c2ac04e04",
        "cursor": {
          "ref": "f6ad7b6a-42dd-422c-b331-696b6b26f3fc",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "ed2596d2-7bc6-4b4c-b27b-33ff42dfd59f"
        },
        "item": {
          "id": "6a56a013-28c3-4453-98ef-de4c2ac04e04",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "3e8c40c2-6741-4635-9273-28b6f21dbff2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9344fbf-6fc3-4852-97a4-d0f682b2edc6",
        "cursor": {
          "ref": "829703e8-f47c-4e5a-84c6-5c8cbbdab3da",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "8d40ad2a-debd-441c-bcaa-30384d96196c"
        },
        "item": {
          "id": "f9344fbf-6fc3-4852-97a4-d0f682b2edc6",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "b1713197-af5b-4314-b71a-588fe5e62c07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d86af552-52fc-4a36-a1c3-dc2c23f46e9f",
        "cursor": {
          "ref": "493c7e7f-e05e-4552-b652-5d461fabcab9",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "d728f5a2-c328-4a9b-81c3-a59eb42b2759"
        },
        "item": {
          "id": "d86af552-52fc-4a36-a1c3-dc2c23f46e9f",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "babe0c3e-4efa-4308-aff3-41d75ee05fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4b2202-aefb-4a7d-8ca7-d39b20a1638e",
        "cursor": {
          "ref": "9cad51a6-4116-47a9-a6f1-84defaae882c",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "140167e1-80ec-4b32-b18d-e023dbc2f6c8"
        },
        "item": {
          "id": "fb4b2202-aefb-4a7d-8ca7-d39b20a1638e",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "4fae7da0-3d13-42e2-8b4d-3d088f173be9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2bacec4-54c3-4648-a33f-f7a46d65882d",
        "cursor": {
          "ref": "c6eaf7b4-08b3-42a0-80fc-eee6b03dee89",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "65ef6173-099a-4982-9fa5-d4ee792e9107"
        },
        "item": {
          "id": "f2bacec4-54c3-4648-a33f-f7a46d65882d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "5c7c18dd-f6a8-45a8-b216-273ec1f71e21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbf66fc2-070d-40df-84c7-d1c27645a466",
        "cursor": {
          "ref": "4d0f9d66-7fd8-4d34-81bc-b60048c924c7",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "a42075f6-1c2d-47f4-8dc7-68b8a5e5c34d"
        },
        "item": {
          "id": "cbf66fc2-070d-40df-84c7-d1c27645a466",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "224fd7fd-1ca2-45b2-8657-4c399eb4ee22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1672566-dfc9-417a-9e7e-bab4a6793787",
        "cursor": {
          "ref": "ae3b18de-bb5d-440a-b3d0-2ebbe0521a2f",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "b0e2c932-5983-4c9d-929b-f87b23eb2b42"
        },
        "item": {
          "id": "a1672566-dfc9-417a-9e7e-bab4a6793787",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "bc8ff8ab-c3ae-4cf9-a1da-babad13aa65f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 147,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4388a93c-1f81-4dd5-864b-465370694528",
        "cursor": {
          "ref": "df4b860d-df68-4a9f-b226-10f8711950f5",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c2013f86-ca33-48ee-93f3-6b70966d8cda"
        },
        "item": {
          "id": "4388a93c-1f81-4dd5-864b-465370694528",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "a92fc881-f953-47af-bd30-ce6b0f5d3781",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "2b6308c4-a222-4525-8972-f7c600a7be11",
        "cursor": {
          "ref": "1991fec7-da5b-46c1-8438-9d9e981bc4db",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "1a8f2a61-5681-467f-b6ac-2c26d950be0c"
        },
        "item": {
          "id": "2b6308c4-a222-4525-8972-f7c600a7be11",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "bbf06327-2a2d-480a-99fb-11a08840bd58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "bb09a867-eed9-406f-a3b8-a60d0000fd69",
        "cursor": {
          "ref": "a0a956b8-7e2c-43a2-bcef-409ea8584982",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "d7074417-aed9-4e6c-b05a-c033483af53a"
        },
        "item": {
          "id": "bb09a867-eed9-406f-a3b8-a60d0000fd69",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d4e2e80b-1edd-45c1-a0e5-98768f9352fe",
          "status": "Created",
          "code": 201,
          "responseTime": 49,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef6729b4-d668-4cd5-9c6b-fa365082da41",
        "cursor": {
          "ref": "cfb66be2-adc7-4656-bd7b-68f58477db7f",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "a0b92e05-50db-4936-9d92-e72a1d1e51bd"
        },
        "item": {
          "id": "ef6729b4-d668-4cd5-9c6b-fa365082da41",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "3ad41830-6f44-4d6e-bc5f-eb990560c595",
          "status": "Created",
          "code": 201,
          "responseTime": 48,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "98878b48-bb0e-4b86-87b5-9d785796c902",
        "cursor": {
          "ref": "d1172aff-a5b2-4c40-b3fc-2f56f140780f",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "f2cd8d67-f802-4c87-a890-e3a2a7d81983"
        },
        "item": {
          "id": "98878b48-bb0e-4b86-87b5-9d785796c902",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "bd6e5a40-3aee-41c0-a2ec-67adbd00d1eb",
          "status": "Created",
          "code": 201,
          "responseTime": 49,
          "responseSize": 673
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b417643-8986-418e-854b-524e6b372cfd",
        "cursor": {
          "ref": "0f7030ed-a079-4e4c-8173-0bbed45f237c",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "26889af4-280c-4c8d-8a5b-7b15bc266342"
        },
        "item": {
          "id": "9b417643-8986-418e-854b-524e6b372cfd",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "c4fa3f91-31b6-496e-854f-37e2b479283c",
          "status": "Created",
          "code": 201,
          "responseTime": 48,
          "responseSize": 641
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d2123d-0d9f-4d5c-9a50-675f56555a09",
        "cursor": {
          "ref": "948e702e-f8db-4010-84d3-4dc556797dc0",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f8f5d8f3-88e1-48e0-bb2d-3cf697f61cc1"
        },
        "item": {
          "id": "75d2123d-0d9f-4d5c-9a50-675f56555a09",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "f7b29b3f-fa4f-49a5-bf33-2e1ba37010cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "233bcd2f-8a6b-4607-85fd-2a82bd7c947c",
        "cursor": {
          "ref": "bfaf4438-1be1-49a5-af2e-ba2e42ce4ec1",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1bc65cab-dfae-47f2-998b-e80026a74ee3"
        },
        "item": {
          "id": "233bcd2f-8a6b-4607-85fd-2a82bd7c947c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "308ea853-77cd-474e-85c2-2f4a7d566219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "233bcd2f-8a6b-4607-85fd-2a82bd7c947c",
        "cursor": {
          "ref": "bfaf4438-1be1-49a5-af2e-ba2e42ce4ec1",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "1bc65cab-dfae-47f2-998b-e80026a74ee3"
        },
        "item": {
          "id": "233bcd2f-8a6b-4607-85fd-2a82bd7c947c",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "308ea853-77cd-474e-85c2-2f4a7d566219",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57abd29-0c5b-43dc-95c6-8da395c7f9e7",
        "cursor": {
          "ref": "b7fc126a-6b1a-4a24-a182-7b1cac046895",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "6def874f-153b-49dd-8b15-55415fdd8798"
        },
        "item": {
          "id": "a57abd29-0c5b-43dc-95c6-8da395c7f9e7",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "6960f395-92bd-49e9-a37b-ebc2a6476c51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e687d8eb-0a21-4766-9f6f-9c101877b924",
        "cursor": {
          "ref": "012b7448-ce44-4f43-925f-6563ac92f35c",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "8fb5ebf6-9c98-471c-b932-7f10d7e41f32"
        },
        "item": {
          "id": "e687d8eb-0a21-4766-9f6f-9c101877b924",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "a5dcc728-46e7-41c2-9e14-28333bd95107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2de6790c-d5b1-4f24-ad02-9f1e1af88a7f",
        "cursor": {
          "ref": "144dd1f0-0ddd-40af-9d06-4482bf6653eb",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "92c39712-500b-45b4-a08f-e714c9affa64"
        },
        "item": {
          "id": "2de6790c-d5b1-4f24-ad02-9f1e1af88a7f",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "022d7aa9-024c-4a79-87a3-9da137766f73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78630030-ea39-4541-82e2-31d24d489a18",
        "cursor": {
          "ref": "9220775b-cf09-4454-9247-8fcf699c93dc",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "f9d70c95-cbf2-4534-bb2f-a0bed04a48c8"
        },
        "item": {
          "id": "78630030-ea39-4541-82e2-31d24d489a18",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "a37dc005-60d2-41f3-8e32-fc56e0aaa833",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "181620fe-9afa-49d6-aad3-db47025e0ad3",
        "cursor": {
          "ref": "de7eac10-a33c-4ccd-bf77-779605cb9985",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ce8e325c-51b3-4eee-bdc8-d04b163f1100"
        },
        "item": {
          "id": "181620fe-9afa-49d6-aad3-db47025e0ad3",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "eff4083e-f03a-42ca-b516-3f25cb766b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc79198b-b5d1-48c5-a9cf-d52871c6fbe0",
        "cursor": {
          "ref": "95f24ae7-33bd-4dc6-b746-54d1b867119d",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "34cddcf2-9e6b-455c-a760-abab764a5b9d"
        },
        "item": {
          "id": "dc79198b-b5d1-48c5-a9cf-d52871c6fbe0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "051bedb4-d539-4dfe-a943-a60706a062d7",
          "status": "OK",
          "code": 200,
          "responseTime": 31,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "3c697ba4-8565-48ec-ae78-e6bfe03c951f",
        "cursor": {
          "ref": "d5d54f82-ea14-47ae-8837-c33c3956388a",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "da9e08af-966f-4a5f-ad2d-dc39cce25fc7"
        },
        "item": {
          "id": "3c697ba4-8565-48ec-ae78-e6bfe03c951f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "9adc64c2-1178-4e3a-9507-199305f22d2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80b5874c-4e6c-4870-8e9f-56223e3b7c1f",
        "cursor": {
          "ref": "54fcea8c-fefb-4bce-a093-e44e46cb3fe9",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "39e88dd9-ecde-4d02-a51a-2de68206a5f6"
        },
        "item": {
          "id": "80b5874c-4e6c-4870-8e9f-56223e3b7c1f",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "776c5d0f-e7ca-485d-bad5-76bca1edaeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b552f333-7b6f-4406-bb60-4504025d8ce4",
        "cursor": {
          "ref": "dbca8343-b4ca-49d7-ad7f-2a29516a4a8a",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "4064df54-6837-4002-a7d7-493f80a8a4e9"
        },
        "item": {
          "id": "b552f333-7b6f-4406-bb60-4504025d8ce4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4be030f7-55a7-4eec-8345-197a52347c2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9402f494-1efa-4da2-a2f3-2250270c237c",
        "cursor": {
          "ref": "fc1feeaf-93d0-414a-9f74-f7ff2ef4ca5a",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "cdac8377-ad05-4c8b-959b-37787a0ad5e7"
        },
        "item": {
          "id": "9402f494-1efa-4da2-a2f3-2250270c237c",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "a8426e42-f264-42eb-82d2-d08c4dfe3e24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59046cf8-2a95-4d56-8b27-cb8fe8c84a7e",
        "cursor": {
          "ref": "4e772ec7-39c1-44a0-a5a5-141b85782c4a",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "9d02f5c0-5d6c-4335-a5a6-7f5a55993c4c"
        },
        "item": {
          "id": "59046cf8-2a95-4d56-8b27-cb8fe8c84a7e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b80e2f64-d1ca-4aee-bd5b-7022d1a2efda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1aed7e3-03e6-4000-83ec-1ca80ec0979a",
        "cursor": {
          "ref": "8a799a44-d4a6-4574-9fce-8611cd4ff198",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "b4483699-0e55-40a9-ba41-91c07d9ece98"
        },
        "item": {
          "id": "a1aed7e3-03e6-4000-83ec-1ca80ec0979a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "de5036f7-a92c-43de-8e53-0e9f58a34cd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d06db33b-823f-4e30-a080-e1760bf9a107",
        "cursor": {
          "ref": "5236a4a6-80f2-479d-aa6c-c809ae5c11c5",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "1823fa58-cbc1-4cdb-8fa0-d63067dacc91"
        },
        "item": {
          "id": "d06db33b-823f-4e30-a080-e1760bf9a107",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "27841a4f-35e8-43b1-8c6a-8949dd6299d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5337172-d843-42f8-9242-2fc6eb4f7cb3",
        "cursor": {
          "ref": "c0dc9746-f9d2-45d1-893d-15ba1120a27e",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f5340a49-b492-4ced-bd0e-20ed89b3b5e7"
        },
        "item": {
          "id": "d5337172-d843-42f8-9242-2fc6eb4f7cb3",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "272006bb-6522-45c0-8bca-38d6a6d12930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bca80cf-7f7e-4855-9623-0cafa71229db",
        "cursor": {
          "ref": "0797f773-4b25-4ba6-94ae-336901acf454",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "af4af380-f7cf-4d7f-8e71-651563156c46"
        },
        "item": {
          "id": "9bca80cf-7f7e-4855-9623-0cafa71229db",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "d43f61f7-54ea-4115-9d8f-27f93d51a8e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1bd1e4c-0ab3-4161-84ad-18e2a309f18f",
        "cursor": {
          "ref": "d968f4a9-4e31-48b5-bf8a-9ef49f455ff7",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "79c43f5d-6aa5-423b-ba51-e8e344940e8c"
        },
        "item": {
          "id": "d1bd1e4c-0ab3-4161-84ad-18e2a309f18f",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "9b524306-28e8-4e34-a895-fbd0c1567125",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bedac1e-adff-4ea3-ac4a-991942b5ca5e",
        "cursor": {
          "ref": "e32282fc-1d5e-4b91-8bef-4c778ffc062e",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "8e0a4e11-f3d6-4ec2-8159-48904597d5db"
        },
        "item": {
          "id": "7bedac1e-adff-4ea3-ac4a-991942b5ca5e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ee0079c3-27ee-48c4-a4b5-618a886bf490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7742da-3c35-4fb4-86ca-66ba8ddb0c08",
        "cursor": {
          "ref": "dde536bf-9461-4c42-8a6b-5de3bf811e0e",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "76f1a468-3de7-4004-a3ff-caeffe57c99c"
        },
        "item": {
          "id": "3b7742da-3c35-4fb4-86ca-66ba8ddb0c08",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "9992b550-cf81-4ede-bde7-c34aa7da7741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f5b8b1a-1e6e-410b-b837-219a807990b3",
        "cursor": {
          "ref": "0f9497e3-5305-43c5-b6e5-ffd811868130",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ce11370c-0454-4241-90bb-91b316c224dd"
        },
        "item": {
          "id": "6f5b8b1a-1e6e-410b-b837-219a807990b3",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "60c4fee9-76b3-4da5-a162-4537dcba8ff7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38264338-f725-4b69-a2bc-f12318644f40",
        "cursor": {
          "ref": "7f824759-23cd-403d-a5f9-4edd65eb155d",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "a4ae3635-1464-4944-a8cf-1f21970cdd6c"
        },
        "item": {
          "id": "38264338-f725-4b69-a2bc-f12318644f40",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "4e34cecc-f6bb-42a7-b003-a15e9551093b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9b01012-ede2-491a-a228-82a6fb0ddc2e",
        "cursor": {
          "ref": "f9b8aa78-7e17-4978-aaec-ec5056574371",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "559a27cc-1ecf-4370-9794-ad3a300649d7"
        },
        "item": {
          "id": "f9b01012-ede2-491a-a228-82a6fb0ddc2e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "2585a743-5736-4428-8eef-ad8269251856",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "946120d5-be99-468e-b816-fb2a8d8e1e62",
        "cursor": {
          "ref": "813e3b60-332a-4fee-b7e0-bd6c07fed3bd",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c8ed56f6-5b37-41dd-a520-75659c7047e6"
        },
        "item": {
          "id": "946120d5-be99-468e-b816-fb2a8d8e1e62",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "05a79f22-c6a6-40a9-a636-693cd2997e5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d743923-4b81-4368-af9e-4d3f63414430",
        "cursor": {
          "ref": "05750d65-29ea-4295-a429-eb1efaa1308f",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "39bebd2f-0638-45fe-b555-fe4711292640"
        },
        "item": {
          "id": "7d743923-4b81-4368-af9e-4d3f63414430",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "df4becbc-5005-4ee5-aff5-38ba26b5a656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e31038-f1fc-48a8-9dea-b50ae4ae65a5",
        "cursor": {
          "ref": "6c7808d4-4cbe-489d-9be0-4858909bf286",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "8d51fd86-27f9-44a7-90b4-bafd224b76ea"
        },
        "item": {
          "id": "66e31038-f1fc-48a8-9dea-b50ae4ae65a5",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "b708261d-2859-4946-bc7a-9d5752ceaf54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0463ea9a-e0db-418c-8a41-672fe5b2be9b",
        "cursor": {
          "ref": "a15600d9-8dcb-4015-b9cb-ef53fb1165ac",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "507d0faf-243a-4e6c-b819-569faea704ea"
        },
        "item": {
          "id": "0463ea9a-e0db-418c-8a41-672fe5b2be9b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "5eea637e-3652-48f6-9aec-93f2ec0522c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e12e87a-1a59-459f-afea-c71153cfded0",
        "cursor": {
          "ref": "80ee33c5-e4b5-4872-8775-e51840b10f8d",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "16484c85-f4f8-4cf6-bc12-32a2d11e8e16"
        },
        "item": {
          "id": "5e12e87a-1a59-459f-afea-c71153cfded0",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "989b3d36-3e73-46fe-a453-c418cfa51341",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0938f07-0b7a-4b87-bae3-2b62e56b534f",
        "cursor": {
          "ref": "8378cacf-caab-490c-a38e-e6c8c2b3fd52",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "d09c3cf0-156e-4a94-bbed-88ef52a43c3a"
        },
        "item": {
          "id": "b0938f07-0b7a-4b87-bae3-2b62e56b534f",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fb8aae2e-ce68-41be-a005-e3eb588471a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969797bf-a563-48a7-9b3f-cb7719bff875",
        "cursor": {
          "ref": "8f964ef7-6983-4496-9c27-0566329a2623",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6460fae3-4561-47d5-aa83-4ee671afeed5"
        },
        "item": {
          "id": "969797bf-a563-48a7-9b3f-cb7719bff875",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "09382151-a668-4fdb-b629-b788d1d0efb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5546e4f6-53a9-4af6-b17d-1177e07c759b",
        "cursor": {
          "ref": "386ee1c8-6fed-4bd8-a969-7b19084557b6",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "d73777a0-f11b-46fc-b996-418cdb12d140"
        },
        "item": {
          "id": "5546e4f6-53a9-4af6-b17d-1177e07c759b",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "de96421b-6f46-438d-bd56-0481f0e4aeab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6440977-3682-49cc-9d56-9d6bfcc9cd18",
        "cursor": {
          "ref": "d74ad58c-c583-4cfa-9235-1f2c0ab893a5",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "4fa2d0c8-e93d-40f3-ab45-68bc7075ac8f"
        },
        "item": {
          "id": "a6440977-3682-49cc-9d56-9d6bfcc9cd18",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e46035d1-b850-4ae0-940a-cd7f35a55260",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61f4b5b4-6548-4b78-90b1-914833c3de80",
        "cursor": {
          "ref": "27b3458d-745c-4b7c-9c81-50bd0c394707",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "7f33dd57-355d-434d-89da-f1289f2459d2"
        },
        "item": {
          "id": "61f4b5b4-6548-4b78-90b1-914833c3de80",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "11f782e9-711e-413d-975c-e48106766b95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "699c62ad-d5c4-47ed-b02e-449b30af9679",
        "cursor": {
          "ref": "1db89127-86b5-4d17-b1b5-17ea6e233d04",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "80f5c706-cbc4-4668-8ccb-f39e5c55539e"
        },
        "item": {
          "id": "699c62ad-d5c4-47ed-b02e-449b30af9679",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "81194416-7803-496f-98f1-9afc2eb40d46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "9ebc714f-7099-475e-8471-a6afde690423",
        "cursor": {
          "ref": "7e1217d3-95a0-4605-87d7-35aa77aee963",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2d331ae7-dc32-432d-a926-8bd1444482a4"
        },
        "item": {
          "id": "9ebc714f-7099-475e-8471-a6afde690423",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "4bc3d478-6495-4bf6-8bbf-4e34dd612cdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "913679cf-bbe1-439f-90bc-6d636cef22bd",
        "cursor": {
          "ref": "f77c2e74-2721-44c5-9f85-581d7c03b3d4",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "07ed9c37-d442-4775-bb31-45d12fe41a94"
        },
        "item": {
          "id": "913679cf-bbe1-439f-90bc-6d636cef22bd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ba380395-ce32-4553-992c-61775a4798c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "913679cf-bbe1-439f-90bc-6d636cef22bd",
        "cursor": {
          "ref": "f77c2e74-2721-44c5-9f85-581d7c03b3d4",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "07ed9c37-d442-4775-bb31-45d12fe41a94"
        },
        "item": {
          "id": "913679cf-bbe1-439f-90bc-6d636cef22bd",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "ba380395-ce32-4553-992c-61775a4798c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7259dde-c778-4cd5-890e-c72682f86ff2",
        "cursor": {
          "ref": "0dd0af08-3482-4b46-a2e8-0033f4dd73f8",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "a76a899b-20a2-40b7-9d84-c12da076f1b5"
        },
        "item": {
          "id": "f7259dde-c778-4cd5-890e-c72682f86ff2",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "35578c3f-fa5f-4038-8e1e-4b228e9c96bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5dbd6bc-c5a5-4ddc-b429-9fc65164cd5d",
        "cursor": {
          "ref": "a51df784-9451-4b9e-af79-7e66d2eb31a4",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "93e62e28-aa7a-4cf2-b384-bdddd0f7e74a"
        },
        "item": {
          "id": "a5dbd6bc-c5a5-4ddc-b429-9fc65164cd5d",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6483b18d-bdf2-4c8c-b8b6-1db936ae2b32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f07fee4-d4c7-4753-b764-3fe58c810214",
        "cursor": {
          "ref": "cc3ccbbd-e189-4471-b9bf-e1c90ee919ed",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d74b9c14-90b8-4b8a-aa3a-2f7bf8271059"
        },
        "item": {
          "id": "1f07fee4-d4c7-4753-b764-3fe58c810214",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "8bcf1e6c-95cb-4553-8626-ca015a612590",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fca41f6b-1e0b-43e0-805d-6f9d8d580f00",
        "cursor": {
          "ref": "74eec33b-9755-4ade-852a-499ad1f694e2",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d04999be-a6b1-44c5-8052-d872de70b0cf"
        },
        "item": {
          "id": "fca41f6b-1e0b-43e0-805d-6f9d8d580f00",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "db13333d-a822-4747-be9b-7067addba42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f265f6d-631d-47d7-860a-8da0c1990a6c",
        "cursor": {
          "ref": "7fa6bf6e-ef36-44f1-9088-1ae9760537c9",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "ebf8bb88-cfc7-4315-b55a-61d890f71e5d"
        },
        "item": {
          "id": "3f265f6d-631d-47d7-860a-8da0c1990a6c",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "d9ea70de-f9ca-453d-beff-052f5145711f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4c881b9-bf2a-42c0-9c44-e31911e6e2d3",
        "cursor": {
          "ref": "49873624-7a72-4b8c-b4da-2c8b4f69b606",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "69884ec9-925e-402f-9525-30acc68a978a"
        },
        "item": {
          "id": "d4c881b9-bf2a-42c0-9c44-e31911e6e2d3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "8671f84b-09a3-46eb-8f8a-9535c639e92a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a968f854-6a39-46ab-9aec-21ba9068f6e1",
        "cursor": {
          "ref": "9168380f-a8ea-4f54-b863-ac44ed572275",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9eb999f1-f61c-4dd6-8839-6810f6cba632"
        },
        "item": {
          "id": "a968f854-6a39-46ab-9aec-21ba9068f6e1",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "b43c524b-e558-4231-af06-c176d4dffe73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c13ee06-e4da-4a5a-bb48-0e3bb57b8b7b",
        "cursor": {
          "ref": "17fbbb96-ac91-4011-9aa3-d1fbddf2c4df",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "3995f9be-7b23-47a6-b5e5-f55ef3a38a36"
        },
        "item": {
          "id": "0c13ee06-e4da-4a5a-bb48-0e3bb57b8b7b",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "2d6d8941-80ac-4c29-9280-9ed4d47e3b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7a2ef7-9759-484b-a8b3-5381ddb1e74e",
        "cursor": {
          "ref": "b763ec3c-9bc4-489e-b45c-8595f8f27de9",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "d40c2714-6a2c-4a76-9315-d25ead84c9f7"
        },
        "item": {
          "id": "2e7a2ef7-9759-484b-a8b3-5381ddb1e74e",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "580c9162-61fa-4161-ad13-1cb397694c28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23f36cd7-9397-4589-8690-66638ba3602f",
        "cursor": {
          "ref": "7e6e7b44-b053-454c-8139-9df4b2db7e14",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "833a54b1-b1bb-48a0-a128-06c8e7b167fc"
        },
        "item": {
          "id": "23f36cd7-9397-4589-8690-66638ba3602f",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "c8cef6a3-90f7-4b93-bfb5-1ae3ff308975",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "299875cb-6fbf-48d9-9f18-15239fe31949",
        "cursor": {
          "ref": "132557f8-4393-4ac4-99b2-0541670a505c",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "546d4659-e3c3-4af1-a2ce-131f9c92d197"
        },
        "item": {
          "id": "299875cb-6fbf-48d9-9f18-15239fe31949",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "fc41935e-7257-4fb7-b4f1-1932a4c1932e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "607d5c56-3cba-4a13-a1a1-76fba137cb43",
        "cursor": {
          "ref": "bf1668d1-b7c0-49d9-af2f-49979754f729",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "369f8302-b005-4302-a1a1-44207b7ce944"
        },
        "item": {
          "id": "607d5c56-3cba-4a13-a1a1-76fba137cb43",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f7c1cd87-66bb-4557-a43d-2db28cf8f06f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da2a340e-3afe-4198-a469-53720f22b047",
        "cursor": {
          "ref": "eb14782a-b4b5-4269-98ca-5a548857f3a4",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "cc8167bc-c1bb-43d4-8a35-1f0c53cf5859"
        },
        "item": {
          "id": "da2a340e-3afe-4198-a469-53720f22b047",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "aee97133-003d-41e7-a633-1e024c6269d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "348af9fc-7349-4fc2-8329-30b57e5f6539",
        "cursor": {
          "ref": "96ecb3e7-2b14-453a-9291-479391b58ac1",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "54d9c322-a867-4ad0-950c-3aeae6093199"
        },
        "item": {
          "id": "348af9fc-7349-4fc2-8329-30b57e5f6539",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "bf665c90-ed51-4c91-bc2d-c89270b33f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dcd56b6d-bb4c-44a0-a0d5-fc6888e1fe90",
        "cursor": {
          "ref": "8a9a7c9d-d487-4559-9004-ec7003a49c40",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "3b62b3d1-4973-43b6-892c-5df265daebac"
        },
        "item": {
          "id": "dcd56b6d-bb4c-44a0-a0d5-fc6888e1fe90",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "259497e9-3ff8-4b8b-9016-4f2d1eb58852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2682d88-2f56-4d43-a3c5-e45ae242386b",
        "cursor": {
          "ref": "0ef27643-6928-4535-a750-97101d430e1c",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "7d6e8b7b-053f-44bd-a472-a544e376ffa5"
        },
        "item": {
          "id": "d2682d88-2f56-4d43-a3c5-e45ae242386b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "b61df5f6-6be6-4d53-9b8f-f49892dc9891",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06e41b23-6e68-483e-a886-5bd2d886b748",
        "cursor": {
          "ref": "2c306b40-84d1-4069-8bbd-7f124c76f645",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "e4173025-5d9d-4a4f-a5e5-92484c4d5e89"
        },
        "item": {
          "id": "06e41b23-6e68-483e-a886-5bd2d886b748",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "8d1c51ea-a9df-44f6-96d7-33a8af14e34d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eebe9c5e-31fe-4884-88dc-66dd064671a3",
        "cursor": {
          "ref": "a6b2ae7d-d572-4eda-829f-a828bf7c992a",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "55e3be46-33ae-40b5-8e3e-cdb8d67c76c9"
        },
        "item": {
          "id": "eebe9c5e-31fe-4884-88dc-66dd064671a3",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "83b5cd85-9594-43bc-92fc-9608fb0efb2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82f996ab-8c5a-45ea-92b6-d3e89b4333e0",
        "cursor": {
          "ref": "a57225cb-6710-4efc-85d8-d5d83991830d",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "225a18d0-f72a-45a1-bd63-ffc738a0b4a5"
        },
        "item": {
          "id": "82f996ab-8c5a-45ea-92b6-d3e89b4333e0",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "87ea6f60-08a1-411c-afd2-e986cbe068ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65e95835-f92e-4aa1-b31e-12e2874f4c66",
        "cursor": {
          "ref": "5620e88a-2c58-46fa-b504-e4293179b2f8",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "c40bf718-8c23-41c0-a9c9-a226d437e7b2"
        },
        "item": {
          "id": "65e95835-f92e-4aa1-b31e-12e2874f4c66",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9c63521e-7869-4dcf-9a01-f1a144c38782",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e76e2b5-70fe-421b-a1d8-59aa83b34877",
        "cursor": {
          "ref": "7f7b0ca0-d95f-4c9a-b698-7e6f51e67dbb",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9e69ee97-cfe9-4423-b6e2-aa25aba657a1"
        },
        "item": {
          "id": "6e76e2b5-70fe-421b-a1d8-59aa83b34877",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "1c399aeb-3dab-4ba4-8a19-b420f29ebda4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87070e17-ec17-4e41-8ffa-82f326c68853",
        "cursor": {
          "ref": "5540fe8c-58e6-45d8-a3c0-f0671379343f",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "0bfe0244-9875-4337-8e3d-89c7dedf1299"
        },
        "item": {
          "id": "87070e17-ec17-4e41-8ffa-82f326c68853",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "bb1ec955-fb85-4767-a1b1-97e631d4cd32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6bcc453a-abb2-48a9-abcf-9886a50f5bb7",
        "cursor": {
          "ref": "7faa14f1-7846-45bf-a58e-0a03844be671",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "be0ab7e2-0dcd-4484-94af-cd888881da53"
        },
        "item": {
          "id": "6bcc453a-abb2-48a9-abcf-9886a50f5bb7",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "b93004e5-3058-4ce5-ad79-e884cdc53bcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75d1bf3d-c48d-4aad-925e-cb922210697b",
        "cursor": {
          "ref": "5fcd7185-7746-4d9b-a784-8c3bf3723a1e",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "72aff185-1b8c-4378-bb12-5231fb72da80"
        },
        "item": {
          "id": "75d1bf3d-c48d-4aad-925e-cb922210697b",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "03e8cdb9-3c85-4df4-b12c-a0bf4f2dc070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae74b93a-1eae-49e8-8fb9-dc05c4c858c5",
        "cursor": {
          "ref": "742216d3-3787-455b-a5ca-76c0cf19aade",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "19c23cd9-621b-428c-99af-cc8a6b5f8ef2"
        },
        "item": {
          "id": "ae74b93a-1eae-49e8-8fb9-dc05c4c858c5",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "667b5231-a7da-45bd-8c82-1af9cec0ce8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "532865e0-599f-4a77-8c34-4de3f0bed810",
        "cursor": {
          "ref": "8afd84a3-3384-4393-84ce-7021fd229fed",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "182f8968-0df5-45c4-9f0a-0c04735bc2f3"
        },
        "item": {
          "id": "532865e0-599f-4a77-8c34-4de3f0bed810",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "dd99b729-543c-4dfe-bc83-312cf29c9adf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6a398a4-299e-4bd7-8786-cb703bce962f",
        "cursor": {
          "ref": "6176478f-3a2d-4d4a-a3d9-c20e0b246c41",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "8eeeebb2-9750-4276-a45f-d97e01bc36af"
        },
        "item": {
          "id": "d6a398a4-299e-4bd7-8786-cb703bce962f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4671c183-67c3-492d-9e78-ab67375f1ece",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c371319-f6e2-4f8e-b97e-6e6c666dec38",
        "cursor": {
          "ref": "f1d5b348-3d39-4143-8940-1b3f8c6e2be0",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "19dc08ae-f75f-4c2d-a60f-dbd9a6aa0890"
        },
        "item": {
          "id": "3c371319-f6e2-4f8e-b97e-6e6c666dec38",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "8dc10a19-edcf-410e-ac60-18533ffb4f6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32bd60a8-2cf4-430d-adef-8cc95b5cc541",
        "cursor": {
          "ref": "c705c802-41d5-4ce8-a81b-72123174695b",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "66e8f6ad-c7f6-43eb-876c-b165d4935e25"
        },
        "item": {
          "id": "32bd60a8-2cf4-430d-adef-8cc95b5cc541",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9aa65a1f-8407-4760-8c7e-ffaee35b165f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67f280cc-0f4e-4736-8b16-d38269079ebb",
        "cursor": {
          "ref": "17c8a85a-461c-4bbb-ae7e-6f34835382bc",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "5833b292-0916-49f7-adf4-bc15c6ac59d3"
        },
        "item": {
          "id": "67f280cc-0f4e-4736-8b16-d38269079ebb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9719e55c-01c3-4efb-95e6-5f06b13b2097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ece58f5e-7ad2-4aa7-b318-ea0f3dfc5f65",
        "cursor": {
          "ref": "28c15401-894f-488e-a3b7-fcfd5756f8d1",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e0eb7a7f-5090-4760-927d-45f200d3b82e"
        },
        "item": {
          "id": "ece58f5e-7ad2-4aa7-b318-ea0f3dfc5f65",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "8e34e001-0c76-484f-b7e4-0279bdb04d0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d9bdc4f-5634-40a6-9167-834ed879d5f3",
        "cursor": {
          "ref": "f6890e31-c892-404c-a58f-1c2c95471202",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "db5691ea-750f-41b2-af62-5fca614df653"
        },
        "item": {
          "id": "6d9bdc4f-5634-40a6-9167-834ed879d5f3",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "32081d4c-791a-4231-bb58-3d8b5c4b659c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfffa9cf-9754-4599-b66b-dee07fe2eb25",
        "cursor": {
          "ref": "073971e2-5812-4eb3-9cb7-50f255bba885",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "05d07a57-f0cc-4e59-9ca8-b92692a3f16a"
        },
        "item": {
          "id": "cfffa9cf-9754-4599-b66b-dee07fe2eb25",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "1d819f0d-46ee-4919-8b2f-066b2acf4319",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9366fd4a-9594-4a41-b648-415fb0921861",
        "cursor": {
          "ref": "30d0335f-6947-40ab-9865-8e6d98be0926",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "65a88b90-c0aa-447e-8f94-6a7018420ef7"
        },
        "item": {
          "id": "9366fd4a-9594-4a41-b648-415fb0921861",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "864ba655-391e-4ce9-804a-cd7c31cc3003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06145123-6192-4923-9f55-83227e54b03e",
        "cursor": {
          "ref": "46de20bc-d829-4fe9-b844-9626687eb697",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "3f290ee7-5231-44a8-b0fe-1654037f1e98"
        },
        "item": {
          "id": "06145123-6192-4923-9f55-83227e54b03e",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "c6536f9a-2c61-471e-9ae6-93ada723bd8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8407f6d-aa5e-4740-9653-df67b73bc775",
        "cursor": {
          "ref": "3f52493e-4702-411d-ae30-a1eb8fcb9096",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "f7a4a764-565a-405e-a363-d4d17041ee4d"
        },
        "item": {
          "id": "d8407f6d-aa5e-4740-9653-df67b73bc775",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "25596c28-1c45-4040-9345-c4400760ef93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d8242ea-ef7f-4c29-b02a-855fbf51d1e3",
        "cursor": {
          "ref": "a22ebb66-3036-4b76-bc28-3b6a4986bf51",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "d7e9749d-6d52-4eb2-99b2-60e12503b62f"
        },
        "item": {
          "id": "2d8242ea-ef7f-4c29-b02a-855fbf51d1e3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "eda9a15b-9088-4ccd-9dfd-1d1ecd308ff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9ae7cbc-dcee-4e1c-a4f2-e71b60f359a5",
        "cursor": {
          "ref": "a4154a2a-f8fe-457b-905a-77e39aa724dd",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "3e999d91-17fa-4d73-a64f-75bc7385931b"
        },
        "item": {
          "id": "f9ae7cbc-dcee-4e1c-a4f2-e71b60f359a5",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "67e1aa8a-3b5f-4f6f-a528-3430720360d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480f030d-06fa-400a-a78e-d0fd782bd874",
        "cursor": {
          "ref": "17a25ed7-2924-45bf-bf85-d0218b187f41",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d5b446ed-36b6-41fa-aae9-af7620c64826"
        },
        "item": {
          "id": "480f030d-06fa-400a-a78e-d0fd782bd874",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5d964a8b-ecb4-4bfe-ae0d-874d3ef90352",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4152254e-06b7-4520-9f06-2c04c32e086b",
        "cursor": {
          "ref": "15440805-5da5-4b37-8bbd-2a86fcb9fe7e",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c35e4d03-b725-40ca-b7cc-6455b1df5765"
        },
        "item": {
          "id": "4152254e-06b7-4520-9f06-2c04c32e086b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "44c86c85-65d6-4e25-b89f-da10e0e9ae63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c1d5e08-d538-4897-aeef-9368d8ea7e04",
        "cursor": {
          "ref": "4cfa2631-18d6-44bc-b286-66b7e532b6b6",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "95694406-c684-47ae-bfbf-4bc60cc8c962"
        },
        "item": {
          "id": "6c1d5e08-d538-4897-aeef-9368d8ea7e04",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "8e04e248-5433-489f-a94d-19be26b6c3dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3e38b30-50ba-46f0-89b2-ed05ce8c3e85",
        "cursor": {
          "ref": "9aa1bd78-9940-4726-a5bb-c7c9da44874d",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "b5315180-2a36-46e8-9c82-5ec41f75f8c8"
        },
        "item": {
          "id": "c3e38b30-50ba-46f0-89b2-ed05ce8c3e85",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "dddec4c1-5b4e-4249-89d5-cf8c31fa5436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c2b996-a7bd-48af-8f77-77a94c035ce7",
        "cursor": {
          "ref": "703a071b-481f-44a7-9adc-c51ede2a1ebc",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "a75cbc2e-7642-4f18-8afc-968c4cb2ed37"
        },
        "item": {
          "id": "f9c2b996-a7bd-48af-8f77-77a94c035ce7",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "80cfa4bd-1eaf-4409-86d0-498304c9f83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d98f34-3c6a-4d96-806f-4b66007d4f6f",
        "cursor": {
          "ref": "f03b820e-34c9-4be5-a160-ac3990692158",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2ae246d5-2200-47c0-89c2-0de704215fb4"
        },
        "item": {
          "id": "35d98f34-3c6a-4d96-806f-4b66007d4f6f",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "bcd06000-c3af-491f-99f7-43860c2c6ca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da36ca5-10c8-4eb0-a9e5-5da33de98d52",
        "cursor": {
          "ref": "40dcc4e7-5622-472f-9e7a-b44d3f207364",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "bbbb5064-482b-4f76-91ac-4d3423dd8503"
        },
        "item": {
          "id": "2da36ca5-10c8-4eb0-a9e5-5da33de98d52",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "684d766f-93c1-47dc-b59f-050b72c57310",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1c8154-fbca-4efe-ac1d-278d65946ce4",
        "cursor": {
          "ref": "e968004b-563d-4605-872c-9c138bcccc88",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "7fb74542-e07c-46bd-b247-d6f92fe77c23"
        },
        "item": {
          "id": "da1c8154-fbca-4efe-ac1d-278d65946ce4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "d7f4485c-ecdf-4df1-8121-19129e51f209",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2332078a-f636-42b0-a4c7-1239fcceeac7",
        "cursor": {
          "ref": "599c0210-b877-46f3-83e0-80d10916f76a",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "1b516edb-42cd-46cb-bd4a-262ca0e12ae3"
        },
        "item": {
          "id": "2332078a-f636-42b0-a4c7-1239fcceeac7",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "f5f3017b-9962-443a-81a8-b2137fd2bf44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5936a21e-ed3d-45e2-80f2-52e4914e837c",
        "cursor": {
          "ref": "aaca02b9-4c17-437f-8064-655c43baa34f",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "37243376-47a3-4844-b1c4-30a19a9da34b"
        },
        "item": {
          "id": "5936a21e-ed3d-45e2-80f2-52e4914e837c",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9959c343-60cc-4602-bd15-9bb4cfe10b27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea9fe7fe-9475-4950-ad44-649272d5eff0",
        "cursor": {
          "ref": "4d21e318-4607-451c-b8b4-7b27d7ffb88e",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "0479f914-5262-4ef1-b20e-a9cedcaeea6e"
        },
        "item": {
          "id": "ea9fe7fe-9475-4950-ad44-649272d5eff0",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "e5210e47-753a-45dc-8f69-631974596703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4590226-d939-414f-9d8e-056e7a7d400b",
        "cursor": {
          "ref": "c5213ac1-a659-4e09-9e9a-c8851c6740e9",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ee25480f-d4ff-4787-894f-be46037c65de"
        },
        "item": {
          "id": "d4590226-d939-414f-9d8e-056e7a7d400b",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "0e9d251e-7a92-4d96-a2eb-670a40f865bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93244441-1429-4eb9-b575-d4a55c73230c",
        "cursor": {
          "ref": "c7d0e6f1-9975-4941-a11c-278968c37191",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "2803b84c-5c1b-4ea1-8f9f-03b0ea26ad23"
        },
        "item": {
          "id": "93244441-1429-4eb9-b575-d4a55c73230c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "f8e870e1-414a-44c6-b4da-c7998e229a4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "933cf104-3143-4343-a56a-7ab424319403",
        "cursor": {
          "ref": "80396a47-6164-40f4-93f6-99eb3504514c",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "60a3a15b-2164-4e85-8a6a-6d2d4842725c"
        },
        "item": {
          "id": "933cf104-3143-4343-a56a-7ab424319403",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "70c54fe9-c3c4-4536-bc66-dcfa1e585558",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "674550ef-6a8d-487a-934f-2675b8becd78",
        "cursor": {
          "ref": "4c8be385-fa9b-4fe9-ad59-2262edaf4da1",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "41c699a2-2efa-4d07-9ed2-5f44049cdf70"
        },
        "item": {
          "id": "674550ef-6a8d-487a-934f-2675b8becd78",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "006a5a92-5ff9-42fb-925b-c2141ed19e75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a9b91db-efa4-4dec-9cae-6f8a6b230b4e",
        "cursor": {
          "ref": "0141054f-fbc0-4b34-b6d2-43deab332d44",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "4a652662-4d5a-4323-81d9-87b88ee0fff6"
        },
        "item": {
          "id": "6a9b91db-efa4-4dec-9cae-6f8a6b230b4e",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "5765aab2-de69-4f6e-a653-9f892bb701a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab27f388-4f69-4852-b9e4-6fcb2761e8cd",
        "cursor": {
          "ref": "c19f7d79-8acc-4419-bdd6-11cae49fbff4",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "42c62a13-eb3f-4d10-99a9-e556b5993ba7"
        },
        "item": {
          "id": "ab27f388-4f69-4852-b9e4-6fcb2761e8cd",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "8e9c7b51-0a4e-4bad-91af-9544ea843608",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4993b35e-381c-4845-a3fe-a6bc005b0dab",
        "cursor": {
          "ref": "546aa12a-f30f-471d-ab7e-e86904b221f6",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "93323781-0d50-4126-8387-5e2ddf55ea67"
        },
        "item": {
          "id": "4993b35e-381c-4845-a3fe-a6bc005b0dab",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "4e63a94e-886f-4d5f-9c27-4ff93607e281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d8cefec-4efe-494f-a94c-a745594ff3a8",
        "cursor": {
          "ref": "30ad3e9f-5617-4731-9de7-110afd0b84b6",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "17bc6b7e-7523-4f11-acbb-b3bd0114fceb"
        },
        "item": {
          "id": "6d8cefec-4efe-494f-a94c-a745594ff3a8",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "977a875a-5cdf-43f6-8536-87df769d34d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24508c62-eead-4b2e-b4a2-c96446f036d1",
        "cursor": {
          "ref": "8f9c56f3-5f24-4fe3-997d-4a8db99af860",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "e2cc2891-e584-4d30-bc6e-e6f963460e17"
        },
        "item": {
          "id": "24508c62-eead-4b2e-b4a2-c96446f036d1",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "10d296a1-348a-4d99-8370-117fcb5e86cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a8a814-1609-4ef1-a739-fe6277fc1303",
        "cursor": {
          "ref": "5bae7d58-bc3d-4613-a976-a13d3dcca7fc",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "1a4bf8e6-3475-42c6-bb4a-2103d41baef4"
        },
        "item": {
          "id": "f1a8a814-1609-4ef1-a739-fe6277fc1303",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "3ba090d3-07de-4bdf-80a7-fcc5f251fb35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "909a875e-6a38-47df-a97f-4516f44a078f",
        "cursor": {
          "ref": "43de7e98-3f1c-4445-8e00-1a4b6ffacbfa",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "22d5f2cf-c269-4336-aa4a-0f78102b81af"
        },
        "item": {
          "id": "909a875e-6a38-47df-a97f-4516f44a078f",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "cb687dd7-3546-41b1-8939-d91b2dd66bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ec6c79-7f8f-4bad-aed9-72d08a4d5462",
        "cursor": {
          "ref": "35f762e8-73ac-4fd5-abdd-eec1ed696e3f",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0f3550f2-89f4-4a40-bc18-c60e04ac5ea0"
        },
        "item": {
          "id": "c6ec6c79-7f8f-4bad-aed9-72d08a4d5462",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "de7dce6d-cc18-4912-bf1f-5317b47314cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b40262c5-8b21-4fae-9c2b-31acd92b8606",
        "cursor": {
          "ref": "833e1057-6694-422d-b5e7-3745b7f63ba8",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "5bba37a8-2615-467c-8785-c03b593961ba"
        },
        "item": {
          "id": "b40262c5-8b21-4fae-9c2b-31acd92b8606",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "d350c0c4-7e91-4629-acda-fa9f875bbb54",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fdc4cfe3-d30e-4cf3-bdba-4215ce4599fd",
        "cursor": {
          "ref": "5901e931-dd92-410c-97fc-6bde4eed07d6",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "d36a9e40-18f7-42bb-b0c0-1fe5b263a359"
        },
        "item": {
          "id": "fdc4cfe3-d30e-4cf3-bdba-4215ce4599fd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "ae135243-1a55-4878-add0-1c0d52f0487b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17c8d2a5-4cff-4460-9513-98b70315e2ce",
        "cursor": {
          "ref": "6a34985b-d93f-4a98-9a91-3f259b8f1790",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "aee9bcfc-86bc-4f6c-8488-25a7bcf4e39a"
        },
        "item": {
          "id": "17c8d2a5-4cff-4460-9513-98b70315e2ce",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "adc2d88a-05c6-4a57-ab14-379266674db5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ceaa6d9b-5d2a-4cf8-b7bb-eb17d6c1f3cf",
        "cursor": {
          "ref": "e7867535-9350-4a55-bc1a-df9d0bf03277",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "a1f4fa86-d02e-45f2-b1cc-8ac2f5b8c693"
        },
        "item": {
          "id": "ceaa6d9b-5d2a-4cf8-b7bb-eb17d6c1f3cf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "487aa67b-1925-471a-bcf3-2fff0081bab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0232f7-49eb-4caa-b49d-5e80b95bb49e",
        "cursor": {
          "ref": "ec199e32-5bfe-4d5a-88b6-8709e94518a5",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "e3cff278-4954-4462-89e1-d1371e518b79"
        },
        "item": {
          "id": "9c0232f7-49eb-4caa-b49d-5e80b95bb49e",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "d35f8be1-1ded-44a9-92b2-389a716f3fda",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ddf2c0b-e21e-4df3-bb86-0d9e158364a0",
        "cursor": {
          "ref": "7f1c619e-70e8-443a-abf1-6417a8039044",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "c740fe0f-6a33-41de-82e7-3c61690d6383"
        },
        "item": {
          "id": "7ddf2c0b-e21e-4df3-bb86-0d9e158364a0",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "54f7dca5-18a7-4b12-b6de-d9373d13a601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b017d77-872d-4653-9c3d-cdebbe31d2ff",
        "cursor": {
          "ref": "66982f85-d1a3-41d5-bfdd-f4fcaec7cd42",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "7fc9dfcd-ad3b-4918-9f7c-753c52fefc54"
        },
        "item": {
          "id": "2b017d77-872d-4653-9c3d-cdebbe31d2ff",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "d5607ef7-9abc-4b43-84ac-3ae15962b5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2eebdcba-5744-4059-86dc-969cef868748",
        "cursor": {
          "ref": "0ce0d6b1-4d24-4c11-8696-bf5640f237fd",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "099e4a14-bd5b-4fdb-80f0-7b69f905b9ab"
        },
        "item": {
          "id": "2eebdcba-5744-4059-86dc-969cef868748",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b8965e64-e631-4c94-9ab1-37e9dcf561c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cf52e33-1efd-40b4-955f-c144f28838c7",
        "cursor": {
          "ref": "876f5a51-af59-4727-9abf-92830330f807",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a86631e6-2c99-47b7-9207-77ccb03fd206"
        },
        "item": {
          "id": "5cf52e33-1efd-40b4-955f-c144f28838c7",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "e54cd614-994b-4ac8-8a46-bab984f580a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a11a6b26-1076-4b24-8675-1dffb5afb266",
        "cursor": {
          "ref": "9635d40f-e3f0-4fee-8dcd-f416f640806c",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "04eb6807-91a8-49b6-988f-f85f0d262b49"
        },
        "item": {
          "id": "a11a6b26-1076-4b24-8675-1dffb5afb266",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "40d20b44-e937-4197-94f2-4413d6766882",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf99411-baad-49db-ab5b-b1ecaea624ed",
        "cursor": {
          "ref": "40c1f061-2332-442d-94a1-c82422c27927",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ccff1b59-cf97-4319-b3b2-ad6c7e074448"
        },
        "item": {
          "id": "eaf99411-baad-49db-ab5b-b1ecaea624ed",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "b865c8b3-2630-4625-8c3a-bb48955cd346",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f151c602-fcd3-4335-92b2-3a2dfbd21be3",
        "cursor": {
          "ref": "c07a5b61-0ad7-47da-aac4-1efe5db34270",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "74a4280a-414d-4343-9b12-3f5f13b853fd"
        },
        "item": {
          "id": "f151c602-fcd3-4335-92b2-3a2dfbd21be3",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e12720c8-d321-4ddd-a9c5-0f17b721d9be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9329f636-6d14-45cc-81e0-64db22018b9f",
        "cursor": {
          "ref": "752b977b-8a54-4ff8-bd1d-169d75962e22",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "cf1fcb20-1013-4116-8c8d-ca61f8fc7309"
        },
        "item": {
          "id": "9329f636-6d14-45cc-81e0-64db22018b9f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "e8967887-e006-449c-948b-e3c602e359d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ab1bf8-ab4d-4598-b331-8e0941d372b8",
        "cursor": {
          "ref": "e594095f-60a4-4add-a7e0-b9f996f537fd",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "6ce0f25c-74e9-4be6-b8fc-096acd9ab818"
        },
        "item": {
          "id": "c4ab1bf8-ab4d-4598-b331-8e0941d372b8",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "3aa7b892-9fd0-4973-8683-a940997e5117",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eedf2d2c-66d2-4cff-b2ee-1784b3610699",
        "cursor": {
          "ref": "eb606e7c-1bdf-4485-ac44-a82f3f5ac971",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "3f40a756-ae6a-4776-b8a0-c6baf1938aa2"
        },
        "item": {
          "id": "eedf2d2c-66d2-4cff-b2ee-1784b3610699",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8b229484-21c7-47fc-b0c4-b591c7464b24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ae0d4e-e786-40ed-849c-6fa98063d71c",
        "cursor": {
          "ref": "b220d933-2c22-4d8d-8552-ce0fcbce64cb",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "03d68f97-f54a-4832-8faa-72297e429f88"
        },
        "item": {
          "id": "97ae0d4e-e786-40ed-849c-6fa98063d71c",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "4555b4a9-1188-47ed-9bc2-e708fe451c1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1474aae7-a1eb-4f05-9c94-b610888024ec",
        "cursor": {
          "ref": "c2ef4b9d-9e33-40bf-b8c3-a733fee22114",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "1d15435a-6ff9-4a0d-a5f0-3af854749b7f"
        },
        "item": {
          "id": "1474aae7-a1eb-4f05-9c94-b610888024ec",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "2b6313f8-91d8-493b-b6b2-e75a0be3564d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0b7bafe-19ef-42e8-b7c7-d07b3ccb9b29",
        "cursor": {
          "ref": "a907fab9-1f50-48f1-9306-af51287fcb62",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "ea778bda-d1b4-4561-87ea-3187dc837b70"
        },
        "item": {
          "id": "f0b7bafe-19ef-42e8-b7c7-d07b3ccb9b29",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "bf4d9092-4933-48cc-84cc-8edcabb435f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b62d7b6-6f5f-4b94-8a16-a02345e6aded",
        "cursor": {
          "ref": "b8818c53-e5b1-44ee-95e6-41f12ec60d5a",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6268444b-7435-41b7-b156-21fe53a8d6e5"
        },
        "item": {
          "id": "4b62d7b6-6f5f-4b94-8a16-a02345e6aded",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "43aee868-0973-437e-9cbe-668072b52890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e44ca10e-240a-4848-9882-c097d1febefc",
        "cursor": {
          "ref": "8a51303c-7885-456a-8991-5d232569d5aa",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "63fad8cc-3d5c-41be-b46d-8d1702c0d4c8"
        },
        "item": {
          "id": "e44ca10e-240a-4848-9882-c097d1febefc",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "51c8b356-54c0-490b-918a-220fd127a4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad9c1386-b315-47e4-a13c-9c218efb6199",
        "cursor": {
          "ref": "e8ee2067-3fb2-41c6-aaf8-f246e0707454",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "3264f6d0-7dd0-4a47-98f1-c16e18b5e0f9"
        },
        "item": {
          "id": "ad9c1386-b315-47e4-a13c-9c218efb6199",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "08f9901a-4cb9-4e46-9ed6-d0ff011a4fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba28cea3-710d-4ce0-ad66-4553cf86236e",
        "cursor": {
          "ref": "95ca7e50-8016-4e82-a0f3-739dc551de12",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0cb616c2-9273-492f-9985-b1fcca6fb8ca"
        },
        "item": {
          "id": "ba28cea3-710d-4ce0-ad66-4553cf86236e",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "7a397278-735d-40c7-9be5-7e912a618637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb2ce84b-0f59-41fd-b14c-5c7ff099cc54",
        "cursor": {
          "ref": "1609a00a-59a3-4b9c-8f67-e4fbb7cb837c",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c59e8244-baa0-4546-ae28-1d162e8987e8"
        },
        "item": {
          "id": "bb2ce84b-0f59-41fd-b14c-5c7ff099cc54",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "0be84e5e-cf54-489c-a532-25f6ae4b182f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07a28c3a-7264-4d16-b380-a64582115b98",
        "cursor": {
          "ref": "0f5d1af6-3c65-46e8-9e96-2dd06452c447",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "7ba5bc4a-3510-43e6-804c-8ba4b5767711"
        },
        "item": {
          "id": "07a28c3a-7264-4d16-b380-a64582115b98",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "415e4bda-0d64-41a5-a799-bf7b589c9b4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94fa8756-9546-44a4-84fd-05870c2dd00e",
        "cursor": {
          "ref": "2ed13842-d031-4b6d-9e85-7fe398b520ac",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "190e445f-8481-4c5b-88e8-e08167a9bbf4"
        },
        "item": {
          "id": "94fa8756-9546-44a4-84fd-05870c2dd00e",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "2b6c1ffc-4b34-49c7-a661-85d29f44f65c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d4c492d-b1ff-4f5f-906c-eeb03a2442af",
        "cursor": {
          "ref": "971bcbcc-0195-4bcb-9411-adb0d11bed86",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "ddb55e3c-ffae-4fa9-9de0-578d64ae164f"
        },
        "item": {
          "id": "0d4c492d-b1ff-4f5f-906c-eeb03a2442af",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "26cec022-4000-4fab-88e7-f7f93fed85a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff519f3d-5729-4090-a1f9-4e90b34cc7fc",
        "cursor": {
          "ref": "2a61800c-1de4-4d2f-8e67-5dbab946717d",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "2c586f71-d206-4ee3-9cb3-035b3466126c"
        },
        "item": {
          "id": "ff519f3d-5729-4090-a1f9-4e90b34cc7fc",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "8a7db74d-e971-428e-9a1a-56806c9f8c1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c983c4-da68-40e3-8132-a2cee7332d28",
        "cursor": {
          "ref": "2e71b3c1-3b8f-4daa-a8f7-8649e5af3c62",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b41d7cbc-1f53-4419-94e1-deeb9f4be99e"
        },
        "item": {
          "id": "f6c983c4-da68-40e3-8132-a2cee7332d28",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "c5dcbb01-6191-4d1e-b600-d9c480696675",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12ce0a4c-3ceb-43c3-ae5f-621bd4f5f44d",
        "cursor": {
          "ref": "6c46e68e-3012-4165-909d-dc110f019086",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "04b24a5d-2f07-41e8-a1ab-338ded02f99b"
        },
        "item": {
          "id": "12ce0a4c-3ceb-43c3-ae5f-621bd4f5f44d",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "029de48c-fd27-45db-bc76-8d2acdae0f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa57bb76-419c-4235-8b92-edc0d2006f3c",
        "cursor": {
          "ref": "7052e46e-4548-4a3b-8a00-32cedf03d01e",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7c7005a3-ccbc-42ca-bef5-6cad06cf06c6"
        },
        "item": {
          "id": "aa57bb76-419c-4235-8b92-edc0d2006f3c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "fe7785e4-4fca-4611-9765-7ebd7fca910b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a529a76-62a7-4abc-a624-3beb61978812",
        "cursor": {
          "ref": "b6596832-b669-4895-a6f1-d78ef153a874",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "22ed2e50-e892-4fa1-a3db-fb6126bdde08"
        },
        "item": {
          "id": "1a529a76-62a7-4abc-a624-3beb61978812",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0906262f-3b5d-4953-b927-0650515362fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5c76192-c47c-46aa-a66c-da8d29d8b9b2",
        "cursor": {
          "ref": "0179c6b6-708b-428d-ac80-7e39eef187f6",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "eb93a253-f65c-44e5-8ae6-9fe93b12abfe"
        },
        "item": {
          "id": "e5c76192-c47c-46aa-a66c-da8d29d8b9b2",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "513fa005-bdd3-4151-abe7-2637a96998b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22794816-f0d1-4e73-bb91-3b4b33f3267a",
        "cursor": {
          "ref": "80a1c2c9-f864-4c5e-a5f7-604ecf77c7a1",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "87ba6981-7c90-4de3-ba18-d4776d4eb8df"
        },
        "item": {
          "id": "22794816-f0d1-4e73-bb91-3b4b33f3267a",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "7f988c5b-3ad0-40b4-bd1e-3a726c711eed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68432bce-baee-4d05-b569-94b5cbd3a762",
        "cursor": {
          "ref": "911809b8-7519-446f-a22c-00ce7201f282",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "1afa076c-e1be-4ca2-b14b-5a2c587aed6a"
        },
        "item": {
          "id": "68432bce-baee-4d05-b569-94b5cbd3a762",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "df52ff03-dbee-4aff-91a6-030e8369820f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c097b418-342f-4560-bec5-408f01a81bf8",
        "cursor": {
          "ref": "74819d19-e536-4fa5-b719-0b15f7033145",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "45a17908-9efb-40dd-aebb-ef90ed617f01"
        },
        "item": {
          "id": "c097b418-342f-4560-bec5-408f01a81bf8",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "9dea1cc0-aca4-4eb6-9f01-c23703911269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4291bfe0-fc05-44ce-9e86-25eca7ef1eb6",
        "cursor": {
          "ref": "a63ee4cd-e97d-4a0a-b7d8-bc847fe53131",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "3b1f26ff-5978-4f2b-963f-06e068e93568"
        },
        "item": {
          "id": "4291bfe0-fc05-44ce-9e86-25eca7ef1eb6",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4c50180b-b76f-45f9-89ab-51f5ae74ae38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e4e0828-e3dc-4059-b850-1c672dacde0b",
        "cursor": {
          "ref": "f371b525-e684-4395-bc94-945904da0d03",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "0c2ea2d4-617d-4797-adf9-f74d4b6c8bdf"
        },
        "item": {
          "id": "0e4e0828-e3dc-4059-b850-1c672dacde0b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "057519aa-4940-46fd-8a42-07ad9563d860",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa74f2c4-9c18-410d-adfe-0fa633dd9bde",
        "cursor": {
          "ref": "911995ad-8271-4614-8ff0-d29c7eb954bb",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "28958ded-d135-4313-8b76-ce6a810da231"
        },
        "item": {
          "id": "fa74f2c4-9c18-410d-adfe-0fa633dd9bde",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "a6a38ded-0404-4a99-abf6-6a507d261e01",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51bcc18-84a4-483e-b8f0-a5d42fd543fa",
        "cursor": {
          "ref": "71535a64-2cff-4b2e-9cf2-f225cae4dc39",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "0d7f0f9e-a268-4cfd-9fcd-14204dd37869"
        },
        "item": {
          "id": "e51bcc18-84a4-483e-b8f0-a5d42fd543fa",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "f3872eda-6868-4bc6-8f93-2c47d01b5c82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "12f65291-1252-4f2d-b68a-c96516b7da52",
        "cursor": {
          "ref": "1b3d09ef-6b5a-4140-9624-8abb32f8bd30",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "a16795bf-00a5-4195-9c9b-38c98601860c"
        },
        "item": {
          "id": "12f65291-1252-4f2d-b68a-c96516b7da52",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7da0b2fe-e712-4a0b-8737-e894aa23f710",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "dc6a26a4-85ea-4798-9d79-20f92c7c2fa0",
        "cursor": {
          "ref": "6da372e8-0b2f-4aaa-9fba-b2bccab1f8f2",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "83feeb07-65c1-4cf3-84fb-2785fb4040ec"
        },
        "item": {
          "id": "dc6a26a4-85ea-4798-9d79-20f92c7c2fa0",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "14e03f8f-082e-4f51-b739-b9486dda0f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "1df52e62-f7b0-4893-bf99-10e8cb4293ce",
        "cursor": {
          "ref": "f1e5a060-af94-4462-89a8-b0b28d48dd0e",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "09b721bb-4193-469c-b17a-65ffa7b61b6c"
        },
        "item": {
          "id": "1df52e62-f7b0-4893-bf99-10e8cb4293ce",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "43b30091-6a81-4965-b790-1c508b19e317",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df52e62-f7b0-4893-bf99-10e8cb4293ce",
        "cursor": {
          "ref": "f1e5a060-af94-4462-89a8-b0b28d48dd0e",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "09b721bb-4193-469c-b17a-65ffa7b61b6c"
        },
        "item": {
          "id": "1df52e62-f7b0-4893-bf99-10e8cb4293ce",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "43b30091-6a81-4965-b790-1c508b19e317",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1df52e62-f7b0-4893-bf99-10e8cb4293ce",
        "cursor": {
          "ref": "f1e5a060-af94-4462-89a8-b0b28d48dd0e",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "09b721bb-4193-469c-b17a-65ffa7b61b6c"
        },
        "item": {
          "id": "1df52e62-f7b0-4893-bf99-10e8cb4293ce",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "43b30091-6a81-4965-b790-1c508b19e317",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 31,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1c56bb9-56ae-4f3b-b086-7edf75b96020",
        "cursor": {
          "ref": "e0ecc0ba-4905-43d3-b79a-3fead3ed5dec",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "a16880a8-2e24-44bc-8e11-557b971f2b7e"
        },
        "item": {
          "id": "d1c56bb9-56ae-4f3b-b086-7edf75b96020",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "bdd2e3a7-71d0-4bb6-b82d-b0475aafbad6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 31,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23fe721b-6bf3-4f95-8417-ae8ba6bc1333",
        "cursor": {
          "ref": "b942f35e-1968-4456-8c06-c6f12502aa9a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4ff7b149-1bcc-4bb5-bf62-185208f949e2"
        },
        "item": {
          "id": "23fe721b-6bf3-4f95-8417-ae8ba6bc1333",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1fd9c9ab-65b4-4e1c-a200-53c640226871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "23fe721b-6bf3-4f95-8417-ae8ba6bc1333",
        "cursor": {
          "ref": "b942f35e-1968-4456-8c06-c6f12502aa9a",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "4ff7b149-1bcc-4bb5-bf62-185208f949e2"
        },
        "item": {
          "id": "23fe721b-6bf3-4f95-8417-ae8ba6bc1333",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "1fd9c9ab-65b4-4e1c-a200-53c640226871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "f00c633b-4b77-462f-8886-266d1bee79b9",
        "cursor": {
          "ref": "bb2a7161-dcc3-4fb5-9b95-8580e8cd3465",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "65e64d39-ef5e-4e27-a1f2-a126e2825df3"
        },
        "item": {
          "id": "f00c633b-4b77-462f-8886-266d1bee79b9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "57442f4b-6915-48a8-95c5-487ef36c70e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "ce779a42-6da2-41e3-a442-94cc77dc9a48",
        "cursor": {
          "ref": "ccc58e10-2e87-4a6d-8ae5-27090de474fe",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9dfd460e-a90c-4b56-b27a-d6a4a8782bc2"
        },
        "item": {
          "id": "ce779a42-6da2-41e3-a442-94cc77dc9a48",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4be88dc3-0d7e-4874-a141-f1f9709f0e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "ce779a42-6da2-41e3-a442-94cc77dc9a48",
        "cursor": {
          "ref": "ccc58e10-2e87-4a6d-8ae5-27090de474fe",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "9dfd460e-a90c-4b56-b27a-d6a4a8782bc2"
        },
        "item": {
          "id": "ce779a42-6da2-41e3-a442-94cc77dc9a48",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4be88dc3-0d7e-4874-a141-f1f9709f0e4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "bccb6107-e2a0-46c8-a2b6-14147afb32bc",
        "cursor": {
          "ref": "201945a8-fefb-444d-aa85-43e72eaeff72",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "94a84b83-4ed5-46b0-b699-42b72d2891b7"
        },
        "item": {
          "id": "bccb6107-e2a0-46c8-a2b6-14147afb32bc",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "72aa5e3d-a6bf-4105-818f-9e02af53a2f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}