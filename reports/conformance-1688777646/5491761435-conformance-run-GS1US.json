{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "b83ac5cd-1a82-4f31-86f8-9a58ed8c3d23",
        "name": "Clear Cache",
        "item": [
          {
            "id": "99af03af-e919-460b-93eb-7e3974cfaf10",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2cb289de-b032-4cb6-a365-8b9471ee8ae1",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2eac3db8-8987-4289-9fc9-54bd9d8b9efb"
                }
              }
            ]
          },
          {
            "id": "ac97a6e2-fbbf-450c-9343-44b121fcba0f",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "185d0bfa-ad57-44a0-8235-cd1304cd1265",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "d199e48f-9b34-4bbc-9858-47995630368b"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b39df68d-b1b6-4a4a-8ae4-afcc3a9392ed",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "8f3a8ac9-e260-4e79-8afe-a5c27c4bd5d8",
            "name": "Positive Testing",
            "item": [
              {
                "id": "ea033941-4ca4-4a55-ac37-48431736f282",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4cd40732-cda5-467c-aeb9-bf9d6d3af888",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f19842b3-74cd-4e23-9047-5e04a7f443d9"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "82982879-d982-49c3-b935-7384954b2a25",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "57861259-57cd-42bb-a6ca-91b05001691f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "aa03380c-2973-4599-8a8c-504afec7f51b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cffb9d6b-f838-48d5-9fcd-6998166be82b"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ffb26048-2100-43b8-ab6b-37b52def9954",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "5451f9b3-094a-4b70-8e7a-d1f111725419"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "88ebd5ae-7c57-43ea-a3a2-f9387d42493d",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf6bd9d5-96b6-4e81-98be-cc51416ef9dc"
            }
          }
        ]
      },
      {
        "id": "abe9202e-797c-47cf-b658-1a5fdb9af42a",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "1f524db4-3f4a-4f48-99b4-dcc9b383ef73",
            "name": "Negative Testing",
            "item": [
              {
                "id": "f226e602-8d33-4e2d-b082-da12cc2531de",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "10304407-7895-4f2c-9f3d-9b02e761defd",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7b9f98f-2157-44ed-beb0-e169a8102187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "95be32cf-e84e-467b-8dcf-bc4205cbf40e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1784790a-4303-4cf5-95c3-4755a0a4de89",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d5bb56f-4370-4ce1-a77a-c74741d7a553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1c3d6c08-7656-4da2-847e-2daf316deb80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecb38639-63b7-4b18-b648-ce9117044355",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3461e8d-1e60-423f-a60e-7eaf25aef8af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ed528f29-2d05-4d7b-a131-b82afe24ad29"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "293f6e40-4beb-4664-8b71-ef7ae0a0a64c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "798135f5-864f-4e70-bda1-746888ec2b24",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a23fcc6-ba89-4028-bb6c-00e15bd03f03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "effb96c8-457f-4220-b75a-f39a71830d2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72bec512-3d28-4139-be5a-5098e6470433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3655a34e-67b5-4a91-9c17-c1c75708b73b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "bc232680-a7d2-4ec9-92cd-c4610242a858",
            "name": "Positive Testing",
            "item": [
              {
                "id": "1598d79e-f77a-4abd-b6ac-94d37a34ba6d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "348cfd18-5c47-4fec-ad3b-de69c5abfdfa",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "c977e1a5-ff30-4eb0-993e-7209946cea46"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cae21f9-5451-4eec-a569-39b8db4d54f1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "3fdc7f8c-823a-426e-b88a-0346e862d563"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9623058b-24a8-4ab7-be8f-9b2b75ec30ce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9d508f5f-3318-44f5-86dc-b1b26c510505"
            }
          }
        ]
      },
      {
        "id": "5e7e9dda-c825-4273-86d9-9d7b30362558",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "668306d7-1b5e-4a22-9098-617e317d59f8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2953ed8-dc7b-4af1-9e95-97e8fb5b3d76",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5a90218c-d4aa-43a6-bc33-79a8f4371751",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2d20e13-85ee-4c5a-8758-5b9ac45cfa5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d702a31-f827-4bf0-9fce-a0dbe61d0186"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c20eed-dd9d-4ca8-8f21-221fe432444e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2db9a368-b8dd-4b52-a21c-a6310a2fcc5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ad20ed-14f6-439e-9c9f-8184a90c0200",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766ba920-ff2f-429e-8cd5-dab53ec2b572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d01239-25e9-4202-bc07-18a00f11b453"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21601b43-1e5b-4802-ac4f-714d6cb34b11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d14a87e1-17d8-40e5-9da7-0c1d24d2b8f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d41c1d0-9455-4c0a-97bb-7e697a7c6751",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21b6459b-a80f-41ad-8ffa-d2836180d53d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe11da4-5d48-41b7-9938-2e4ebb0d2866"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05ae1bf7-5b35-4b36-9b92-bd0e8890f883",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bf30638b-5271-4055-a5ba-2cd4ffc72a2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58eaaf37-1ce1-405f-a4d7-fddbd0488c75",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de652ae1-d4ff-4832-bf96-c1a6224b03af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67b87ccc-7842-4a2a-82fe-f264e2d547bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12897386-98fe-4a85-a398-a7cd52d63691",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "29c62644-4989-45fb-ba06-badea3e9bdd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33addee-7769-4a8e-aa49-b57c2cac7628",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54f9aff0-abec-4ffe-bf31-02e1633140b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd2175a0-cf45-4020-9e0e-b5c90b854f67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e75e3f7c-637c-4332-ad11-33371bf58746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7b96336-520c-4773-9b63-ede1f2f090fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caa08ac9-e8a5-4c4a-a404-c36140548d7c",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1fb86f7-e199-4e41-ae7b-4e4c83569d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af51da47-8644-4003-86c1-e200ce2ebd72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea79a04f-6e58-4177-8399-e22b650e1617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "819210f3-93f9-4413-b1d7-b775f49eaaf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af091d8b-2a4c-401c-9416-a9cee59114aa",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "307e374d-a0de-45fd-ab1d-3740c9a13685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5416b8a5-acab-4f1d-9551-9213e2eba6d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afc38ed8-0c2a-4717-a27e-378b7dcec4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f83d1226-a3df-46d0-a76e-f1ae52e600ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e6cbda-9593-413b-b481-a7fde96fd130",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68a43dae-b566-4073-85c7-1f9a21fd5e1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56016576-f3fa-468d-9f2d-91def2c0ea27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf79167-27d4-4c41-b798-495cad8c607b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "dfe80276-6c7f-4c2b-bffc-a97edd5c59cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49b35423-ac2d-4a42-9268-76ad29058c7f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcbf9718-770d-44fd-864f-1d33f9a2d9c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e52d55f-fdc0-46a5-a4da-de9369ac7437"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b4ba7af-b777-4b94-b53e-b4f707ea7aa5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4534aa6-646b-4d16-8a72-77aa04affad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3b7b0f-4985-45fd-a50e-a205f82aad1e",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bb59510-cdeb-4fbf-9491-1e12ce9cc132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93000bbf-b8fe-4b97-802b-1fcee41158ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8694cbf0-8cd9-4867-92bc-2e33dda7f3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "494c400d-2ba8-4632-a097-bbe1bc19249a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7103e523-285e-4ba4-8a51-ee434a86898b",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32af4d51-8273-4cbb-bed3-bd070d841770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "636d486c-beb6-4af6-97a6-c131ae8894fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "295a7c05-0b16-4bed-9d67-9b9819bd9dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f9d8f81-fb27-4b60-95c5-da2c64ad10fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af3fd1e-4429-415d-b33e-3445ce07b9b2",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b920e0-abb0-4098-9b32-c63229c05bfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88f51acf-a409-4274-ae5c-222fed64db5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66cf61b4-1a74-4fb5-b474-8c17e9ae43c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1124d200-7995-4781-8458-cad3f2a4545c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78adf6b1-af3a-4b36-a2ae-8e6ca6cfae9b",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72faadfb-ea46-4013-a243-538edbd14cd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a5aeb74-1920-4a78-9781-16b039667d42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50612ac4-1605-4837-ace2-0827bec0d17c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02ce443f-e710-449a-9a96-a568723a4f47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf36f33f-e59f-44fe-b4e7-fda134c14d45",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04b371a7-9c31-4cfb-ad08-ef4454f3155a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa167abb-21ee-4b0b-8cef-9fb5485bb2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e7ef249b-1904-4954-b099-467ea550ebde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99325b8f-f39d-45ea-8c85-c46ef64ad23d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b665af7-1d13-4a52-99e0-c008d2f89806",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d1ce083-4324-46e8-aa01-4d9d44e8e3fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d8991b-1bae-492c-a8e2-273fca52e9bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "080b2207-0d23-4c86-84fc-2ff267cf1636",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "164f8488-25be-4601-aa30-ab76be155985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16358f5d-3f7e-47d9-a777-99cee8231f44",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "917c1299-d804-4ce2-aabc-14c2e81a51db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5b01a36-422a-4de4-a0f0-5df9dd16729a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18361864-fa3f-4431-bc2a-c8ebb87e3cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3fbf26cc-bab4-4ff5-95a6-05134e02f39c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54688bf9-f9a7-4410-a471-2ef947709cf1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e393997e-00a7-43d5-8d31-34f4ec0c48a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0905aa89-ea34-412d-b66f-54beede1ad0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d51b41ce-b976-4e84-abf3-5946d66d0abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98a918fe-68a0-40c4-bf70-3951d83241f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e32e6add-2978-4544-a647-4101ab9ed8ba",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8e1b5ac-3b37-4a2c-8040-3192c6b9884b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42d51a35-e785-4673-9c93-767b122285b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f26f9f30-efa0-4e7a-b75e-7b03d16573fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "7cf00a1a-94cb-4086-9ddc-c181b0a2b9bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a530f0ed-2cde-4130-8d8a-d9f7a819d883",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3647e66f-a9b7-4035-82c2-f0b43ad8cb6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b7cec30-747d-4f0f-b60d-63ade2206fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "befcea7f-e2da-449c-a362-0ae8ad3332d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "be453a40-5d96-496b-9b0b-93af18302841"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e51d85f7-3bbd-4b9c-b2fa-3204a67c3234",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebad96a7-6c38-4c45-b61a-8423c4aff0a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9e0e590-ccd2-4bce-8ac8-53b98f5d591f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3934ee3a-c7a3-448f-bc04-f06ae2f27b24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "64513d52-2571-4c60-a423-4a137b398656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9cceb9-0b18-4f91-84e3-8fd1f98cd8ff",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b776b5-aed2-4079-a989-c4b3b50a4a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2239db53-256e-433b-b473-ad8172913626"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4711f8b1-4778-4d12-b767-ce10a0aa6818",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0575226-8083-411e-9bd1-eb2bf14e3866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5186022-48df-4fff-9e73-c75110af9926",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e161e721-a38f-447c-8bd7-345a79bbf6a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e1f8e0-8dcf-4db4-afc4-cd7898b4cae7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6db4f946-9c96-4224-b088-b362d9abe4e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c9297d23-d2f6-44f6-be3d-1bf67b866b7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0866cac7-6c3c-4dfc-9099-a18dc5ca4e8c",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc3be64c-af29-4a28-9064-0ae0f50793d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "064eb06f-eea9-4a9d-8e47-194226868e9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5eeb2677-294a-4d79-b468-772f078a6bef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7682dd0-c5ae-4299-8b5d-8942a6ba6c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "028bca8c-575b-42f1-8569-f3b2012ba91f",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9adb465-a38b-4537-9e40-35d262d2d5e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "27b73d5a-62c1-46ab-af7e-9c18aa44bd9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba0dfbd7-b350-47d6-ae6a-eb6e671205c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3f30dca8-a054-464f-a156-f68b55220a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a6d4165-269a-4b91-ba15-5927080bdf70",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6e7b854-d383-4b9b-9255-c5a93596d119",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e51c43fc-feb0-4603-be97-70f242b2e2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3fe71bcc-30b3-45a8-b64b-1341ccd9342e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c3244c47-7dcc-4792-90c0-2c4745ab8ba0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eeaed19b-de66-43a4-bcc8-53fdea0ba12f",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eef5839f-f50c-40a4-8a8d-7049db0b7e1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a1a733e-c6f9-45f5-b333-3dc7713a6ad8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "021182f3-61a3-4236-80aa-f69ce578e6cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "83748f63-b745-455b-9903-09b332ae8b11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6770cf17-efcf-4923-a398-ade739271be1",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a08bc9c9-4352-430d-a3b0-223d4e3a17c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4afd6b5f-9ff0-4030-9c3a-b16890891292"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24d2b45b-e419-4939-92d8-56be5ebbbee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "95353018-fa34-40b3-b6d2-5249ab60c97f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d8fa371-5d88-42be-9b3a-a7797fa158e4",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6da71db5-4340-475e-8fa2-7b2550a226c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3afe59f-4607-4435-8407-70467dd3e743"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b08335d-a8b2-4801-9771-cf3db7f2b6d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "53ae27af-c477-4df1-95ec-0a2f527ab731"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e77a88-2959-44aa-8475-4f551c5f116a",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a98885a-81c4-406d-8062-14a67bba1e24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f958395-e614-40cb-aa18-b12dde7ca984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3973fd79-e4b3-4dc7-abd5-f6ffa1852e4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1badf060-0eb9-4d31-bd45-3bbd6eb11b32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83804f85-625b-4b20-b1bc-069c040853ed",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3749eca1-608c-487f-bc4e-2717dc34cf77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22bff901-0ffb-4976-b247-569fbd6b6ba3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa2fea83-68ca-467d-8b3a-1c4d5fefc96d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9345a36-400f-42ee-97c2-1ea6fc96e38d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28603ab-a69c-4f13-820d-6c2010849ea8",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc37b24a-811c-421d-bfe8-7c9725ebf54f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6cc9aaf-3049-4e7a-9cce-0290187602b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "458b73bf-a0bc-4e64-92ff-314ad22f229f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "6801a297-b90c-4ba8-8860-71199074c5b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8bcea6e-3588-4128-8074-3da82aee0eb1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98f04b6-163a-48b7-8330-e273d250947b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5cfbddd-1466-4cfc-be3c-8714fb7f52d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e25fc2b5-bd96-46b2-b562-b947417e6384",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea33fd7a-ca8d-4d2e-b0d2-b4744f28c631"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47c3268-893b-4aea-8e49-9a1cfb5c8dc5",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26bab989-ad7f-460b-af74-24062500e12c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a807e0a-58c5-4d76-b5d0-5727422e98c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46df4c2f-57b3-4354-a05d-c5e5480d4222",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ffb05241-af40-462b-8f76-c06ddc69c0cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df478fd3-176e-41ce-b866-e0fff2e102ee",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e822952-6961-4957-9030-3f01693c3a53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192c0a3c-335c-4e30-ab85-204f97501a32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4ebc445-ca8f-4a26-abb8-7aa0ef0f6c01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "359d4e3f-dd6f-4d04-8ae5-b6e1fee9cf23"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77545c23-e70c-4107-9dcd-122cab0fedfe",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b73df9fb-7941-4396-bf88-13caa76c1dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c49c77c3-974a-49c4-bce1-20c89f92440a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19952812-5f0f-48cf-a0c3-07136f1817c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "572417b0-40f5-42e2-8ea6-7d695656f426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52fca97d-4107-49ab-8eb5-7365e0c820c6",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62bf57f3-55f0-421e-ad41-a62bcf396b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "adbcb3f1-39ba-4edb-a821-f1bd0153b6e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f706bbf7-052e-4939-963c-3be58fd0e627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1bd07f77-796a-4da9-91e4-3e44c6026ffd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5dc135-d7b9-4e25-98f4-58dfea3bde97",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aad7e6f7-5f98-4f84-85a3-5c0f1e312d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4c6a72-1138-48e7-9ee3-280693f3be43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e47056f-a404-401a-a7ee-a74fd7d9617f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b95503f1-5529-4bf3-ac4c-a7b93a08037f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0201780-ccc8-4cb1-8ea7-a46e4978ef56",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "619324de-7a08-4f0f-99b1-cae5a71ec5c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03cd2ca9-2456-42e7-a5a9-8bede0a326c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18466b14-4b35-4d8c-b814-2b30818248ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "2ab8c9b3-d1e6-4ff3-947f-fd2a13155b74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d92b3f6-a77d-4867-a487-fa0a98925d61",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "daefedc3-bc25-4001-91f7-69e27e06a307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78e5afd5-6b97-4705-9f67-1938cbad9f70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "341f3bb9-0a0c-401b-a19f-e76001d26a59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "68f1e578-dff9-4586-8474-ff94b342bcea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77baa09f-704d-442c-8953-7afee0192ad6",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8ece2ad-bff0-4d44-984c-c949afe33778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "411c9c4b-d7b0-4a7b-8303-47a9f8f533dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "850249ae-7dd6-4c03-8e40-7c8d3517b654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d3953da6-b556-4930-878f-58b683d9ed52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160a4d43-30b9-4494-8278-1b09cf8673f0",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "515689d9-953a-4659-a89a-c9d38bcd91e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82d5ffaa-c2d3-4b7d-a355-31b278a2c4a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2969c82f-aaf9-4539-9852-cadbf70d3ef3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ce6acbb-5133-4dc6-a1b1-eefe341a84a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ebd477-b636-4e9f-b85a-4c9c1269802a",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b5abc7-b4ee-4bb6-8746-c6078111542e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "34f81775-d9c9-45e8-9ad8-95904f3c66c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f96d3bb-4f0c-41bc-94be-e9eeedeb493a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "8cbab6af-13bc-4d14-8fb2-50e08b7db271"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ed5e18d-392a-47a4-9be1-02558a8b5f2b",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b7c0b0-cff0-47b9-a403-2571dbadb0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbd84f59-8adb-4d49-873b-fe6cd911e30f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a4177db-361f-4958-97c1-b05df0db0405",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "f74a56ee-019f-43b5-9c66-ad5ef6d05d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1a03b83-8382-45f3-b514-83447886689f",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "acd1dc79-e533-48b2-ba92-82eaecf973f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2a7dd41-cf2b-491a-bb16-66c469b5e930"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b49fe37f-28f9-4934-a99a-0661c22f70ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "e614d50c-19a8-4d05-a7a3-375ca3809ce8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8419a85b-32a4-4dc1-a4a0-63e51e9cbbb2",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26bad69b-2034-4405-bdec-fee0f8ccc32c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8ed7c82-f23a-4356-b440-461ccb843d56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0bd2cf85-791b-4c5c-8f5d-dfe6add2c98f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8354dcfe-abbc-429e-8e68-1e94972053b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64935a4f-3588-4410-9a31-d67de1ec5a85",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c09e0daa-2e6f-4f47-9a1c-e742036c66e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "732b7bbf-8c98-4c6a-aa86-11ef614cbfe0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa66ff54-2fec-4e3f-8cc4-49378c07617e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "393e70ca-a2b7-408d-b2f5-676075fee761"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29701d80-d851-47d1-b6c9-ac17b323b51c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd86fd2-fb28-44e2-933d-45ff67b6d63f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fc55da9-6de8-4d86-bf87-e184ff1a7e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11f7f88f-e8cd-4816-93dd-22a8353c1c11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0792206e-9866-49bf-9af9-be593c93619f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "605efff9-e35c-4603-921c-1555ee5f5177",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "718bd614-3dad-4bcd-8505-556ff3d5d939",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab926284-5d5d-41c2-a237-ec3cece9fe53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "820fe46f-b68f-4642-bb4d-003ace1f098a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "700062c2-fae7-4c63-b8f5-070aea3405e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cf54f7-2f77-4794-8053-b4666b053243",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4a1733-cccc-4e71-9a90-e1452e76103b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54bd9a48-bb05-4362-8798-e8b4bc973fd4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0256d967-b263-449b-befa-f26be0b8b209",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22af28cb-feda-4552-a7fe-ce5a3a9754ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6226fedb-23bb-4873-abde-31c6ad24a4a6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e11dc28-491c-4995-931c-e490a769864e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33fb32d1-bde4-401c-9170-8fdacc299660"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6b3857c-f5d1-4c4d-a4d2-aa6031cb4470",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8a1d10da-3436-402e-ae84-a77570898637"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98614f14-a505-4fd9-9d65-a944afb49021",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1b9778-bd86-41f6-a50d-4c316c94748d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "761309a9-7908-4ead-8bd3-be0a713ac3ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d7464dd-8e2d-46e9-a999-148f99128074",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "9365cd22-defa-4ddd-ac31-06c2d16f92d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b231d3e-b525-4af7-8b5d-075a28ac90d2",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613eb024-e945-4518-933b-d232b948eeab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "632a80cf-fe12-4fa4-a096-e0513f4c395a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fbdc216-e72b-445e-ae53-77d70b573e27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a7df0a6a-6dcf-4cdc-9f74-971e0e2d7dbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0654f459-1a5d-4753-9187-706154dde192",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac50aeba-c49d-465e-9193-16ba1244c1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23b1bb84-34fd-4859-9c6e-2a363f92e8b6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31d48415-306e-407b-906a-7472093f17ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "38f11aa7-d1ec-4090-8e62-a3f9b6054fd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b78e54c-e101-4455-8ec4-cf9f94995562",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1768dbcb-ac77-4b52-8dca-4d3454ac952c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85947cff-a143-4b5e-b87d-bf9822800ab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dcd7c3ac-02ab-4fca-bd50-9954fd532bc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e43050b-64a1-4794-bf33-268c86a68753"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b49e9631-2a21-492c-8701-88a5c550d0bb",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f15a1b-0835-4f74-9996-5faa7d6332b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25d4e3b4-4eb1-4d60-8b9f-976853bcdcc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45d99591-1d71-4208-b15c-3b0b4a38cc90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "edf8630c-4daa-44be-a00c-ae7655b431ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d145c2f3-b0d5-4a10-a2fa-f2fcd6f350bf",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57b324ad-8945-464a-8ec8-ce24551eace5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d249c082-d4fd-4063-9a90-cc7dc0416238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7f2ffa0-e509-498c-9839-edd390b908a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "068ef132-df3e-4b92-b985-4b0b5cc1340a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8758ecf-da2a-4056-bafd-dac8c7d35d83",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91677a0-a174-41f2-bdbe-741ee568cad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89f8d2f8-dabe-4c1a-9e65-1a51f510dfcd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ea8cd56-effb-4d1f-add3-078988a0462b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "e4a20b07-12e7-49b0-ada9-a74071f1240e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a987a8a-0875-44ff-a7ee-03d31141f45d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e66e2b6-8343-4b3b-abb2-99f69f023efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b04f411b-be4b-4153-bbc7-fc3cc4610ce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cb94aaa-7f25-4721-96a3-7684a7635b61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "cc77b12a-a3d7-45e0-8f9d-a059f3e92daa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce50742c-0c22-40f9-8238-09c4fe4e7aa3",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15c9232a-0a7d-4453-9b41-e7f552bd0e49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64947034-42f0-48f2-903a-fa363f86a4ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa536b7-5073-4fa7-8610-131cf88d17a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "1598f276-d44b-4cce-a22e-ea69dec1c99f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be44c90e-80db-4268-9f1b-f5d9756d59a9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e82c9eb-9620-47c3-99b1-1ff0ffeffc4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "634215a4-5bf9-4bb5-94e7-4c7b30b243ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "968f2316-0861-43a0-84fe-9cff24c3db7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "bf93a2bf-37bc-476c-b4d1-ba454821e46d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767b0095-6290-462d-a3a6-97b6d43321f9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18461b91-c331-4bcf-b819-364a15ad1e35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41856268-c6b0-4e26-9ceb-cea52803cf07"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6af224f6-0c9e-4c83-bb64-577c7e7ee9db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "e709a510-b6b3-4ead-95f8-b6537ce4bc4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aa4613f-c954-43b0-bcde-8b1433773764",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfd015b0-57ae-4581-b94c-a5bcfc6170c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71c7c280-ae5f-4ff7-8064-3ca985886252"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff56fbbe-7826-46c7-b9e4-2a58e3d2e3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a876ff50-89f5-4c70-9146-0ec4283412a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7c28953-7a95-424e-8410-9baca3d3e487",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87851e1b-b572-4afd-9125-85b61c099772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba35f9b7-ab3c-4052-aa11-f8b1e5a56154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8161357a-0b0a-4ddc-9113-9cc4c7df8556",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "47bde1c8-cf26-4734-841e-648daa034ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5472fc2-9dac-42db-9420-a2e076d625e5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84fd3fb7-4a82-44e4-ad29-342d776c0d58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5a85e68-bfbd-48db-b16b-87a7971dc2b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a40bce38-1b1b-481d-b5ef-f5f0ff70185d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b93ffd6-615b-43f7-84ee-9248b9f4796e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d10325f-8560-43b6-8e3f-dca7bb3f7d49",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aeecacdb-eff0-4247-b157-ca2129784ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "156590a1-ecf2-432b-a284-90bf12d9d219"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fefa1d84-3e74-406f-88af-282d1a500e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a13687ca-d255-40b8-b4b0-798e5f640c53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2457e517-386b-4c04-abb8-de8e99945a6c",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0334a8de-22cd-4166-a055-83816c54845f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8a31126-199e-447d-9c60-beb2bcdee986"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59d74551-c164-4ef2-9183-c57c9cd80627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "05fc2fce-98ad-4413-b485-adb2e2875f08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "446fc3d3-1176-46c2-a67c-d687d4524087",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bfd5cf7-34ba-4b98-ad87-040d80675f5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "371d1102-04c8-4b51-86e4-efeff1c1e1af"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a900ad2-91c6-4bc2-a741-051eab6889c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "909699a8-d810-44a7-bab3-1f82013ff851"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09840f35-32f2-4306-abc3-7e9e78a357fd",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7a8c0e-655d-4af1-a8e0-aeec4b0fca26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46cac3b-5484-4f7b-bc61-8422b34837f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e40f1abe-5c8a-4d65-8081-9360dacfd1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "e918e52d-be84-4be9-adfd-b6892ef8f53c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad7cbac4-fe59-4509-8304-e2a2aa8eca33",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6041848f-9393-4fa2-b215-d9e1fd90a769",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dd6b58f-7dc8-4343-a874-0d5a0872ffbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8ef853e-42e1-473f-8043-852830d6f5f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "890b871d-19a6-43a2-b9dc-8ceec6c44ca9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da355598-ecf9-4810-8e2c-d6c7adc543c6",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caea4d78-c270-4bbc-b22a-2bdbe46fd8b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9825e80a-08cb-4dc8-bf5f-c7605e6313ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f3ef21a-732e-469b-a628-f5e7f90c4702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e57a53ad-c029-40cb-a83c-a703a271db99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41bd08e-b2d6-4565-8079-93de29c7c875",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92d720a5-7a4c-4976-a22f-07a326f5350c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70091819-d250-4f7f-bd4a-843373c70944"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7de423-cc66-438a-b590-b56aa58c70e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8004a806-63d5-45a3-b906-8b3e10d08f7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0aa19c7d-a78d-4e33-ad98-6c79e6683f4c",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c55ace62-e9fa-40f8-a849-710c68f0e400",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8485080c-fc28-44d8-8f6a-63d5ec03ba7b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603df3ba-8cc2-426c-bd45-6b0de5f2ee30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fd20455d-23d3-417f-8013-4653615e6fe9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6d0130c-ab9a-46af-b1ee-2cb939d89f1b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc5ca1c6-69b4-4806-b7fd-c9fffb1c076c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87effc70-632f-46ee-ae02-6b05ecd52138"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e37acc9-c190-4eaf-9759-b83dcc7f0c2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e8d56d98-30cf-47e0-a162-76ad4058318c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91be6fb1-ce35-43bd-9f38-90584e4bac78",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48b0c3ae-465b-40a6-a4ea-379bf6a1e124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca2b5aae-624d-4ff5-a996-f8da9af89bdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "485418ca-2780-44c1-a933-3880f73ead27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e0edb2d1-58bd-4887-b9ca-59c20ba29a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9a95d5b-8f62-4814-ba8c-613fb43001b5",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3e02436-c984-4d79-9332-9f1289bfce25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8556dcf1-b21e-4c9e-b832-d444c0c4dfb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "581e008e-573b-41d8-9ccc-9ebbd0076b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c2ca249-094e-4a74-9045-a8d481f9c862"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2159d28a-39ab-4cf0-86d1-367b1e86f8ab",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d9f3fe6-9ae9-47c5-9be6-c623ab6a0593",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a238689-a94b-4ba4-a9eb-bea4d8ee259d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e61e3601-e8d3-4499-bb56-ad4bdc9323d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc272b9-76bf-4918-91ef-c9f465c9e79a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d78eaf3-1ace-403a-80d5-fe578d6a7f1b",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7e1989-4137-49b5-88c0-f1c1fbf1887f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c26a7bae-b879-4a6e-a599-567d1045110a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0b8526-f707-470d-acd5-1182d0778e18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c780ccf-9ad1-4075-b851-c1c5f077971a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7132f232-b549-4838-a971-94f7cf1b4903",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31dccea5-427d-4e8d-842a-c6e202ec2c69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3f2e8a6-3466-4d8b-a65c-91cbb95307a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62a7b877-80ca-450f-9f73-0037d6cefab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "60492926-44b0-4aef-b5ef-98149b4e9fe6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d72b577-ee9c-4a52-9ba8-f969f4c8ccef",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09b2e441-d806-4a89-a75d-8b0c8f6f802a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e897922-1a41-4046-90ad-683d2d7ebd0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c90ce62-d7da-4a52-8de9-faa5cfa8f011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "41cbc620-5466-4bb7-8201-28b52769f2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32dd0ee-ac76-4f90-b370-c66850e1f18c",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38b105ed-9888-4090-9387-caf65e819306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d750075-e913-4571-9e88-c69ec6fff359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "980d6937-4dc3-4efb-9bae-f148a2716e3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a99ca9b7-1538-4cd3-b360-81f9f300cc8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77bc19f0-7a5e-4727-a481-22d7aaeb51a9",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60cddad-1d6e-4340-b948-b9d2d5d1c80c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "553ff500-a8c5-4343-9e77-6cccc87a102b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15a0fd1e-9290-47bc-ab64-80e07bd81b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8bf6c397-e238-40f8-abd0-e98e5c33eb48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbcb1ad6-d27a-4019-a318-76d7b7ea36b5",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33725bc9-d000-4f53-978b-bda9109c76c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33decc5f-86c1-4bcd-bc7c-928d63d57b2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "017a5896-39df-48e9-a5f1-8d86ce339be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5950787a-e092-464e-a2b9-06387dfd0f66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3ef41c4-5d30-4379-a083-96f77bba0c7b",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "615f4b23-7084-4bf0-bf9f-540375ee8a03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6aa6c3ab-79e6-4573-a360-dcd61fc20d79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05217f27-a554-4117-9bea-8a399b719d8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f98e3189-e986-43b4-8756-8ccb9e0e81aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f75703f-689d-45bd-bf7e-5f0ea736ca3f",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599ab79e-fec2-4fb0-bf4b-13807281f232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a93da813-c1ef-4ab9-99b4-c4eb7135cc53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d6f4c63-f009-4e2f-b6e5-7e1536514cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f6ece23a-62b0-48b2-a2ca-f1ab8d0ceb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c233c706-fefe-4e87-bfe5-40bc257176d5",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa6eec0-a4b6-4c5a-9dfb-7f7c51358e05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aaefc42d-1c55-4796-bd4c-cc0726efcb24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "355b0673-b1a5-4e2f-b3c5-2351644125e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "a7607b46-a10f-42e4-b3ba-a7a28ee664a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac323b32-398b-4df2-b54a-2ad44200c882",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f7ebc36-f8f4-41bd-8ebe-afa9750cbdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "993f8ca1-6d39-4ea4-8be0-5871669ef630"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dddf59d-599d-42b2-91dc-4478e3ac6055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a144d8fe-3f2b-498e-8ed2-8679349bb375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c626245-7edb-448e-9141-a7a0372e933e",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c5a38c3-827e-4f47-84a3-1be5ba0e523f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2d99f0f-eb1b-44e4-b5a2-46608fba3418"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "430e4b44-1a39-4c4f-8f0e-89c4fc56cdbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "5116ada0-adee-482f-bb95-4a0cf8b417cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2782b9a5-a559-4bfc-8a78-244efd88a91a",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ae64f1a-8acc-4406-9854-f0256617ad60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84976c30-f972-4057-b88f-e2fb1d0cf8dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dfd94d1-523d-4992-9e6e-3de4500c83db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0b33a049-2abe-459a-9743-db4f78933b42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4e31fe-3a97-4e13-a1cb-fbe3cfe14714",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f92e9582-c0dd-4877-84a7-05df4a316fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43c05119-0841-4321-845b-e2ab2534ca78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33a9acae-1642-4d68-8a2e-6f77ef9ed7b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "a02b0abd-a3a7-4e73-b00a-72e96b8c1e46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec4a4cb9-fdc8-495d-9941-9911b4b4308d",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696f40da-36f9-4e6d-b1ff-bde229f705e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05544415-0b5a-4ca9-a3dc-0951fa5a053f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64e9c299-b2f4-4750-850e-b354c395767c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "0df28f41-2e24-4c4c-90b9-68d605d4895e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a062e996-a41b-4358-98cc-79ee43134a74",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ffa07c8-3c1b-40cc-859e-109b58d456a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1606fe4-882e-437b-8982-2918ef3b7716"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e2369b6-c3b9-40fc-9913-802c5b0b0e8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e43eb61-3a17-4ff7-a711-420fac1a5184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760d2ce4-55d2-42ba-b78b-448c0c0150fc",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "08b27c23-5d3d-4848-9ca8-a7a875eae6b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "2c882b1f-a028-4547-b1ad-9e6995e48e5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a426a8-c8fb-4a7f-9ece-97a87a9df2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c38ee797-74a2-4daa-b6b1-ad272fe81545"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b2cb3d15-dd63-4761-9c05-0f88b46d0bd0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1375eb1e-ea4b-4493-b444-065bdf47290a",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57170299-dc57-4afb-9e6a-552c647580d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e599e613-23ee-4320-b07e-1735be0ee9fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98854e75-8b67-49e9-a08e-2fdfdc8befc3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "874a7476-bc42-4e6b-929d-79607b32b24f"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "889763fc-6044-448f-8db3-d6e3353a8aea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "59993f3c-04a3-4c35-a566-3fb880cf6a92"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b9ec2177-272f-4dcd-b415-fe0de8bfa3e4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7c79fa03-c56b-4633-87b8-d0bc18b7ad37"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3eded584-1839-4287-9cd8-0d27b1c1d395",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8726c146-5f23-48b4-96b6-9e769920fb3f"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7928993f-f979-40d1-90e0-0d38ade71f7b",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c339183c-f7c1-4521-baa1-9713ca8b44e3"
                }
              }
            ]
          },
          {
            "id": "d68400ef-c6e7-44fb-bc69-beb87787c38f",
            "name": "Positive Testing",
            "item": [
              {
                "id": "54e301e8-d914-4b4b-9aa5-bf31c2204adb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c7eb41e0-ec5b-4b00-a4d0-32b90ef2a854",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d01ec5ce-d88d-4ab1-a929-2cd419d62b7f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d03fea66-2937-482b-965f-f322c1a439b6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aafdbb69-30ee-4650-8b78-977845c03679"
                    }
                  }
                ]
              },
              {
                "id": "cc7a857e-45a5-4c45-b645-be63d3c9a695",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "cc8e8236-cc50-46dd-8cba-ecc4809864c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "15f30ef5-0e05-45e9-94f9-73bbccad3177"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "69bceeb2-2260-40a9-a981-8e05a34a59bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "44409993-42ca-43d9-9c24-ae14a6158df3"
                    }
                  }
                ]
              },
              {
                "id": "a919bb80-c5e0-4f5d-9233-0746f414729b",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1c3ee4ff-260b-423f-918b-51a121381861",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0ddfa90-2274-40c6-b4de-5066b4cf3149"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ec1e6ca9-37b5-45aa-93a7-6623d4266e9d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fe0c242a-fff5-4690-bd3d-b26d62b63f53"
                    }
                  }
                ]
              },
              {
                "id": "b8a9bb05-25b8-4f22-ae2f-9ce39975439a",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b4ad2722-32d2-438b-af4c-ef91cbea4d50",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c183234e-2df8-4450-a122-4e76a01693b1"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51328bc9-02e5-4ac0-adfb-7d8d2da8b73f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "5d654db7-df4c-493d-905a-ff1101ce12e1"
                    }
                  }
                ]
              },
              {
                "id": "98266ea0-8286-49c5-92c5-2da986ea9ee0",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17935200-e473-4e36-b102-f1665943906a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "55d234ee-4d76-4e4b-8b88-518dc79d9c1f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "42bb4298-43dd-4907-a441-5c3be7c60047",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "1553dfcd-1860-41ac-bc31-1240334e3074"
                    }
                  }
                ]
              },
              {
                "id": "dca5656f-0c6a-4547-a448-794e06a5f794",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "33d55b67-2750-4883-b9cc-daa16be6fcc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fd4111df-74c8-4df3-8c9b-e99384974176"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3106fbcc-4d52-4c9f-a0ea-df890d5f5737",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3282d19c-b862-432e-a823-76caa59fc678"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "ce66bcde-fcc4-4d10-bf95-239241ce6fd8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "65ac8499-4738-4412-8a57-f89e51d153d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "f1e53aa4-7c18-4f0d-ba97-f0e5d66d0eed",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "af1437be-fdef-4f90-be10-0b10fe26ccf3"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "157a54ac-13d5-459b-89ac-1ce4d8a6f06b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a3e10ac6-c78b-4408-835e-364371cfb9e0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ac1d0b3f-a438-4c46-961c-77d488d25431",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d2de994c-e800-4c62-a0fc-ebf92a44b172"
            }
          }
        ]
      },
      {
        "id": "b15222ab-8c3e-42cf-a850-cd6c8ba1dc13",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "a3d5f57c-34d0-46ed-b542-d05f7238b558",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1bf90f1f-37f9-47ca-af93-3714fe1cf342",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "ca3dd197-6edb-40e2-9e22-42499afe446f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5dd9e8-ead3-44ca-98a9-1347c59f4418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41b55510-0704-4f29-8644-90149b6a5650"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7af87523-2345-4482-9980-12256fd66df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "b54b56f0-3de2-41b4-b858-d8ae61f99594"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2492bb62-c212-45cf-b162-221c958e6547",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3b3439-5589-4629-af32-e7b9ec30aaeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "92c070f8-2864-4c4e-a21f-105e7dd53846"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e82d982a-b272-4073-a5e2-e2beb3dfecf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "59e52ea3-2a9a-40d7-9438-0f1c8ce0fa9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62d54804-a910-4237-bf15-2e01607f6891",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e253b522-e934-4287-85fc-791bc1d2de5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40b3c4f-2e93-4226-8afe-1c08124815a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4807bf09-3938-491f-9772-b36b0588257d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59ef51c4-7a4b-4359-98fb-48756cc1c7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3709fa72-8689-4a40-8a0c-d01c89d80579",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7626026-3005-47d9-b420-69e363e84c18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e8b6168-ad5c-4a4c-af2a-c26e6e3b770a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8181374b-e0f5-4eaf-8ad8-123333b55817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8674224d-69ca-4dbf-980a-b5dfab71f075"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6623cd5b-fa10-4ab0-8bd3-b21378b4272e",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7327ce4b-a749-4330-88bc-38f62d4186f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "075fe9f2-dd0a-466e-808c-68ada94b2874"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb8763e-bfdf-4e7f-8825-a3497950e3ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "28b997af-0096-4355-9ca9-9ed07861dd95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b82aa1-7208-4c4b-b32f-873cd71bb721",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed86033d-829c-498e-b68d-9b9829f0fd16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08e5d3dd-f07e-4678-a232-8882d27b9ff1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8bf4de7-7a99-434e-aee3-7682c690cbe9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a097ec47-36c0-4194-b737-d479f189c04a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf570d14-ad2b-4f68-8a9a-f7b9566f067c",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1a271d19-a372-4314-ab13-cd0885a523b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca912544-2acc-4e0c-ae78-7078b4ade8ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42d9cf23-c5b7-46b5-bb91-51f9e8dfa8a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "00049e32-daff-424f-b6c3-7fd128f489fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c53750eb-3795-4146-9b8d-d59878c17161",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c70d7fa-9a4b-4efe-a9e5-2598f7b65df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aac3795-d9bd-41d1-9fcb-6f6abac7f167"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d996ddbe-097e-445b-8f92-05b61b2a14f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb515b91-9db6-46cf-8825-cce2eb59bc3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c88843bc-9cfd-4868-b640-16537b9f2ab3",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d8b5386-8439-40b7-b5c6-a78670bdddc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22d8166a-412a-4704-9607-c8ed5eaaa1f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7fbf06c-83da-4b00-86a6-b538d058ae78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5a4e8795-7a52-4684-bdd3-d179e67aa9df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c50f8bcb-18a0-437f-8902-877aa0294085",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "895dc797-a10d-4652-a308-8daaac9918ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c76753a-ee10-43d2-9821-682f329b69e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e084f04-d8da-4f76-8131-d84b099242b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "34451820-f5ae-43e2-a7e6-94e3505baf81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea74c37-96d8-4225-9852-afb9944070d5",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30470235-528d-4ce2-b9e1-61497d36c1c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1764f32-183b-4e62-bde2-10654075f24c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c649376e-18c4-40d4-a901-d51d0c0aa35a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3558852e-2e70-4da4-90d3-44e78c3293c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6633e4a7-b2f8-462c-a6fa-d20863de91f6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d05ac4dc-7c87-4afa-bb84-fe4a9fa67da4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6c1dc8-5070-4cba-bd98-c0fcb02bf838"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fd32977-6e24-49ba-9168-1a5161508c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c3b83dd2-a30c-445d-99b3-7a4ccc057730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da946329-8fd3-43a3-b718-5a20422f327b",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ab7d99-805c-44e8-b596-3c50c43cda34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96d5112b-e99f-4417-99f1-91ed5ef2919b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf2fb614-b7f1-42bf-8448-fa28a4bcde7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c1236f2-92b1-4682-9f5c-380966b8c695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2e59c51-5227-403e-829d-1235d758cab6",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "625462d9-5f59-43ac-af90-95cda9a484f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a8fdd59-1238-4f1e-9ca2-78abb85a154f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "555d1c5a-47f1-409a-92e8-3ee7a3ca24b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5403754d-6fcc-4f64-8257-a44cd2dba448"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31933be9-b991-437d-893c-e50ed9488d1c",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d45f191-1dee-42d7-8e87-3656f4fded0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba47d218-f2c7-4965-8991-b2bfc96acc29"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ada8f3e-70f8-41ae-95f0-80c92aded093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "329e109e-90fa-4755-a5ab-2d59c492be9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "736c9bfe-fbfb-4e8d-aa97-c69685df6d5a",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672c25d2-c8a1-4400-b9f1-ba13d3eb1c5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fb70269-206f-44f6-ba06-7321e9a1c2a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74835fb4-6be8-4f8e-acfc-92df48714377",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "96b7932a-0075-46e4-91a5-e81dbf9ccd02"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ad0d372-8997-4428-ac6f-b9591e5fba6a",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da83f7fc-70a5-4726-b4ee-31ccbf897f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f000275-e8f4-48db-8ae5-67d305c150c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b51f35f-6639-4ba5-9266-e3dc1ad4ec5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "08c51f9b-f975-41be-b5f6-271a407ed38f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55197b6e-e745-4bb9-a5e9-ab60d7369630",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40a7214-8623-4b2b-b5d9-86cbcf2b708a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80d9a399-b029-40b2-942d-2d275bc13cf2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e455cbac-82dc-45d9-92a2-491443c1db5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "3473c870-ab02-476f-9dd0-c4ec3c562b71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69eb7542-3197-4a8d-b2a2-f85bc559bcf1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "252cb4fb-d67a-4165-be4d-6fa6d05a2821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b433b17-8298-441b-b9be-756265d6e0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37875f77-54a8-4039-9389-303d3ff6ee4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "11b894e4-b7f8-4113-9fd8-fba3c6f4ff60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32ea6fe1-dbc5-46fa-b597-f604c6c50b41",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2767f70-89cd-4fc6-8dbd-e52c1e27b804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a2bb72a-78a3-4ac8-95e9-9fdfd74e0b6c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da921584-5911-456d-bece-e6f0ffd5c933",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ba116a12-bb3d-4830-8b66-5092197729f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a6b6a0d-294c-4e0a-84eb-04fd3ac7c48e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8faffa0-efe3-42fe-81c5-2de85e8d5f88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63f6cd45-d41d-4980-a640-03cd236ba56c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc17ab37-444e-45d1-ae42-7fc9eac7eef2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99f9cd5a-f288-42be-b511-5c660b89dfb0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b7c53be-ac18-4a4d-b93b-96c6c2b3cae4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f24d169-2b09-4dab-9c84-a0ff8d56ade8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d6341a-8b50-46f9-b13c-b5efe82632d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e88bddc-dd4a-4232-a8f6-4bd277776c43",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ff463a53-9bfc-4dc9-b662-92f7d0855eaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32c1399a-9fca-4bca-9ea4-7898875e8e83",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47415ef4-f2ce-4078-a405-630aaf739415",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "addf463e-7414-45e4-9549-1ef4557ceed9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53730298-c72b-4ca2-92ae-02a637a3e92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9ac0f7aa-9ec2-4603-b4a2-bcda33699917"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d37289-0422-43d1-a06a-1bf9060fc5d3",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "228e71aa-2ae9-46e1-bd17-9c1465d1ee73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "816b94d6-98eb-433e-a3e1-90383413769d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea34f106-b45c-434e-b677-8589d9753668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3231dade-5e2c-4f0b-8730-9cbe5bdc3239"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4447d94-b012-4b14-819e-b5c02a74ef5c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ed0b55-8f36-4614-ba2e-4be0f2a82d9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7197774c-4332-462e-b675-db837973becf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053fdeda-e4b5-4071-ac4d-9375c3314278",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e39aab7-904d-4e7f-857e-5ecb05604845"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf90b10-4fe6-4a3a-9eaf-6457cb090ac5",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58f855f-8fd5-4537-8587-90aa9294ea03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec36d563-6a39-4385-b869-e3b086d46803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f0d3ae-4be4-4f0b-bf7d-1164f2ccfbba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4cb8baf-68f3-4d66-9dae-b0598f70ea51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e445a857-0a56-42f3-87cb-af9aaf877e3f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64c0df8-e74a-4b61-8676-5b00840b2d2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8b75077-542f-499f-8149-a9da8953a00c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b77342-3c11-4996-9f3f-8b241ff05cf3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af293134-b06c-4dc9-99e0-273b1c341a58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2d0b8b7-1445-40ef-9326-3583dca5e520",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1687bcde-90c7-4dfb-9983-23643d7d2cca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e43b93df-9aca-45fb-a227-b83169d3b2a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "188843fd-39cc-43c6-bc66-87eed6ff8b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e7e06a1d-339f-4707-963d-11e0985efa16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20d7f366-9e2d-4245-bb9f-c2e8b3d289cb",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c976e2d3-89ce-44bf-82cf-529e2474d4b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "810fb0b2-939e-4475-b47b-7864776f8348"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5251ed70-eace-4034-9065-e6ec1b26535b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9328960f-e2d8-48ca-a564-5b021a95d737"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d022379-ce5d-470e-9748-b1e812fc3fd1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0391b4f-4631-41f3-85d0-1b331bcb8c4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d34303d3-c318-482c-9af9-519883506693"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b1c1f63-57da-419f-9151-937f85e4f675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "791f226d-12be-435a-b702-8c783d7150df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79aa2b29-a9c2-4392-8929-64d0de09302e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1dafd314-e390-40c6-aead-f572fe00e60e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "212f89b3-119a-4601-8329-4028838f91b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4e1ccf0-263a-4bbb-9dc1-1990926001e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5a675c0f-1491-445c-93f3-933d042dd60c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f487ddf3-42cd-4bb9-bc3b-ace353cc5066",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68ad069e-04fb-4bde-a8c4-1d71a21c7a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40f0a0a2-8c0b-4d30-96f0-e0190ff2f88e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a04b02-5a6d-41b4-9b55-0c4619e7f034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51d3365c-39de-4659-b3a8-72cbce58676e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4a2a1274-48e0-4069-9642-0b2ebc940831",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b0113354-889f-4551-a7db-8007835d4c3f",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6352fbdf-898f-4e29-8766-d22772aeca9a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "e9051aeb-c3a6-4e56-99f2-9045e6fe68c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "84f9cc33-0775-4f18-9074-ec6407c6e64f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "59485d81-cc90-45a3-b4ce-cc082b33d91d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5fcd0f11-28fa-411d-9f16-499e9701ba80",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0a0aa758-9444-4ce5-a3f8-b03f0cd1d587"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9050c422-5753-457e-baa5-34362ffd41d6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fa221e57-ad4c-400a-85d0-8ce91e741918"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "66a83bb0-f99e-454b-a735-ffe85342d254",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "324803ee-7976-4944-9c4e-c21c923ac10a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "17dde1d2-87aa-417e-9ecb-e6e1f49b33a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "76f355e2-6ea2-4a47-a5bc-938ec7314ef8"
            }
          }
        ]
      },
      {
        "id": "dd0eddac-ad15-4073-a2e0-f4021444c663",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "3d90ac07-417f-408f-b7a0-bb2e92cb31ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4f30c7f4-fec4-4253-812b-c0c7173aeac2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c26d487c-c24d-4e4f-a9cd-bd5c2777d5cb",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b3ced2a-c02d-4c91-9f37-0de950a8ea04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1555a74-1f64-4130-aa91-32f11df7141b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac3a1d8-37ac-4df2-ae9f-d323bcdb25db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6ad2d02-2103-4da1-bbf0-b48270d69f52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad186641-210d-4298-919c-2ecb69feca9d",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac4418a-6c94-44d7-b3a4-17497dfd715e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c298ad2-a39f-4bb7-a876-eda2a8a6288b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "11161de2-0181-464a-b8dd-521b99bd1614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "766a88c6-8540-405b-871e-21681c044ed1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09e1ab35-ea73-43ef-add2-9c4ad58220f4",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40fe2d54-3a8e-463a-8e4e-5137628c08c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7708b06-3cd7-4b72-ba9a-1801ff7fca1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "528947ec-6841-4158-9711-127b7a7e3579",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed201290-3177-4886-b0c3-016b32481660"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a83499-af2c-4332-8e97-ad0221dcaf21",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f31151e-8028-4d8c-9e80-cfbe19aaa5e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a002966-c497-49cf-aea6-958eea34d152"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb45b764-9ad0-48d1-99bb-dc44ee880b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "43fe7645-6fc6-4156-9c0b-925f8c60d273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "887f89b0-74e7-4b0b-98a3-6daa9b30fb40",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2de8112b-8651-4620-a054-3785fd9d5a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37120eab-a12e-401a-a5bc-d3d425b48ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87d30ea-c8af-49b8-9742-9e71067e001c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8a0159bf-a588-47df-b682-e11728b5fc58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abbb2c83-f870-46a9-b594-dcbf9f022223",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "719c3967-267e-4589-b1d6-c8f6fb1f6755",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1defceae-321a-4707-8fb5-430807e3f5c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e552192-f967-456b-ac3e-73fb05e95d6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "125d61c3-5bff-404a-bdec-bda23aee21a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ea1ae44-e2d9-4ef2-a5c5-9751d3aedbba",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e43e40af-dfe4-4805-bdf0-e3fc9d555b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a317fe6-ffa1-4e6c-b017-c9437b346809"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6083d515-96c4-464e-bdb9-90dd20de3d9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4aba413-4b8c-4f9d-9d87-d99014d7e5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f6432dc-fa2d-4a73-b89c-b5f554ba13f6",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d4a90e4-dae7-4c30-be8f-a1f4f26779d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f61ed0f9-6154-4f2b-b9e1-698a9bc2fe0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc7d2a45-c581-4a94-b51c-b81e4e03fb1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "75abba02-2291-49e6-aec3-8b77ecc6bf82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7fed85b-ae2b-4ac0-9775-b3145d257b81",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96792615-bd73-4385-8d8a-15aedc0d42c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ae1644b-0d79-47fe-b106-d3c45a40b424"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40df36b5-574b-47fd-beab-77b026ab3eff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3beedd9a-b4ca-4d01-a050-93a592d096f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69ae3895-5a96-4d6d-8333-2e705506a382",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2550ff25-2077-4124-841e-730c99af587e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3cedef28-064c-4517-94e3-ba12244aa006"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "274e4958-13a2-4ed9-9ea5-60ee1248a1ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fccb55fb-7528-45a8-9c1d-2536ee2df2da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ce5c7f-ee6f-4f8a-8205-b8a422e57fae",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0874d7b-dbd8-4976-a5a3-b63bf7ea8e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66267f8-b8de-4107-ba0f-a33bb07a276c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7433b66c-0245-4de1-8d40-9cf951364875",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "baa59dfd-b262-4e5f-87b6-60a94088448c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67210a1d-4e0e-4d93-9c9d-c82e77a49577",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd92f5aa-c243-4522-a25d-d8cb8bc85055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bf85599-d79c-42c0-a2b6-4372bdbf8b9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50131da6-c9d7-4a3f-8ed6-1d0cc453f3d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "957c3067-086b-49ee-bd4d-66250f8baaa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10d8a8b3-e191-4008-980d-20b5f91ef6e6",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dda98696-65df-4b0a-b83e-c828162f2cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbc62ce6-0bc7-4c1a-94fd-06b44b7297ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b69eb3d9-fffc-46d3-8f00-d4e5d94db15d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c4a5aad-49a4-4e91-98ff-006375645fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4edb78fa-319a-49f8-a038-bd052171dade",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "991ab995-536f-4515-9fd6-4a410713dbe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30da2c94-5397-43da-b7cb-66435584b0c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3ea3e2c-02bc-4d34-ac70-83598902e93b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5aad2584-a44b-42f5-989e-20a1cca5c547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2d964af-151d-4282-8a96-47f22ac0f8db",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32ac3d73-0d76-4564-93c5-985249844b72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0d23314-1eb3-482a-b856-cf70eb3fda55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32cbe1ad-7791-49a4-99e3-358f8d062747",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffea9b30-b921-45d1-a875-bf99856c180c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0e521b0-15df-410c-ada6-ba60a598fc02",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b1d371e-ca54-497e-bb59-8c01436bc661",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04991e8f-20bf-4e15-97bc-7f281b5bdc73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e33a42a9-6adc-4c2c-aaf5-5abcaf14e497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "36eaa694-d2bd-4385-b460-baed809e3955"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a477a99a-813a-44ed-a7c0-b5a901d52a17",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40583c4e-beb8-49ee-8f6d-047a73e15622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9dca7fc-8a06-4a13-bb5b-b0a0887975c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf252e0d-f9a0-4202-803c-31fdcdf47654",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "044be350-3019-4572-bc5a-cf694fb512fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb2d6cd-02f0-457f-8e85-de127e80ddfb",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c3a2234-8152-41ea-810c-126028445905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b83da936-456f-4129-8b3f-8bd973ee1442"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4118bf7e-41f2-4f04-9c8d-4601f811cadc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a48caaa-af98-4a06-8dbe-c4d0beca8fef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "333139f6-dfd2-4ea4-8796-a2d51e8d4d13",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "72aadb87-fda4-46d6-b3a7-2ffb5dd2f37e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ab8ebf5-7d8d-4c6d-a116-b840d60445d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41d5dddd-bf98-4027-aa96-d645b4e049f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28fb3ad6-1c0b-4fae-8f44-09f1e0cbf85f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665e7c74-1924-4541-8fbc-23370e0fd90f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69aa1342-82a6-47ef-9db1-63398089ab02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bb7acbd-dd19-4b8d-a606-03d9e1780b84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fe0c8b8-df60-411c-ab66-2fbd680891ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07bb3c81-0daa-4713-8c72-a6e103ebad9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b82703be-d0c6-4ce7-ab67-9d3805a54a6b",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d479fe60-b7ac-470e-b373-e1ffb1211da1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013bf12f-6274-47a6-ab7c-1e4b923a75be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368d1ee6-9833-4024-a27c-1a94e0e2702d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "021e911f-1130-4e8e-af9c-25524ca3e250"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb9bda96-74ec-44e2-8f9e-b3e46918774d",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe37db40-369f-4218-9846-081fcead63fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3562180-f2ed-4e3c-8cb2-ae59da629790"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c7da34a-e83a-45b0-af27-4ed5f418f8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a90e727a-3012-4ebb-b051-37543800fcca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c441841-bf4f-48c3-890a-dfdd46ec75d4",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5134938c-01d3-44db-978a-2a5acc8f0bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e130f1f6-056e-4027-9f64-f64cc69dd92b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4be6aaf7-8b08-4ba1-8990-7fb793ba46b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "721b1660-b4ec-406b-8e1d-3b23d8abc24c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cba7b5b2-a582-4a2d-a6ca-23f1386c88f8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f99653ee-f2c2-48dc-8aa9-03484461359a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8ee3da6-24fc-414e-ac69-2f26bdc53e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10f45d32-bf75-45f4-b2d0-cfb4cb08014a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd87df1-3e8c-41a4-bd9a-38a1a86ec04e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b29c47e-c762-4df9-b1c5-47e6970b2049",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b045eba6-854c-427a-b788-609dbceb3d93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af225b1b-04fa-4a7e-a97c-48feb45c1303"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35afac7d-9d03-4b16-8475-a02b2740634d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ac8ab7fa-22fe-4b4e-b13c-06b5ddecf718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c59346ae-841d-4e6a-958b-e285f224fc2b",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89054bcf-afe6-4abf-8c6f-d2820253fb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d647a2e6-0b4d-4d2e-8f15-0b1f5b70653f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "560b351d-1861-4e82-a85f-d10acb5118a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "53be255c-94d3-48c4-bb14-efa1b468b7f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca4cf0a-9120-4940-8b0f-da6f871cc16a",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0870aa18-53b6-4278-9bbe-1ef71d17370c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8b113d5-4331-41a0-b8d5-ca0c348f9345"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f55867d-ce79-4278-b68b-79f4d8299096",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0ad8603-d1d1-46ec-b01e-2104201f591f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78497276-f876-4610-bb3e-b27c87080514",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b5e403-9a5a-4644-ae1e-a1ab6cfcc4c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75a58504-805b-4c42-a62d-afd10257b97e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d38a57cb-dfdb-4ef7-9773-ecfdbf723521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "48c63c4f-f211-4ab1-bbc1-f48393243587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "885ec856-0d62-4c2c-8383-c7ac856e589f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b337fb55-3f57-4e95-ba80-8b95a05f5f11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "424853fc-7b5b-4b05-ba63-731773346ba1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d9273de-62ea-4518-b18b-9ce354eee069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "32e04b17-c09a-46a9-89ca-9b83c6c80e28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "091e9c21-daee-438c-b4d1-26acec4ed7b4",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92c9dfbf-08ae-41f3-9ff1-1e0535df51b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64aaf41d-5c3d-4dfc-a6eb-c93a4426502a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "684a1fba-5329-40d7-90c3-9d47259d957d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6afdcb2c-1762-4137-86b6-ce76a207b9de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55890b4d-075b-413c-b703-66a72c9741f3",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03571f11-d5dc-4474-8433-11dfffca5e2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa649c69-ac67-40b0-a7fc-526f4ea37985"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21456f15-1b88-4b0b-8a1f-32d1f5233cd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "72321b18-a6cd-4153-bc8e-030b517b5f5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a97966c6-e6d7-467b-80c1-e8476a106979",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c2e5501c-fa50-467e-ba89-4039e6372bdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80c62c4d-76ea-422a-a86c-5aa307cfcfbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04ce755a-b7d0-47de-8c07-40a49f919d13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "552ad3ca-0518-491e-a44f-2589acae4c49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63132389-0a04-41c7-a768-9064b4f75400",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "467c4c12-7157-496f-b107-f5a2d546b440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9205241-0d8c-4e8e-94eb-cfde21746218"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5061ac67-0d10-41d4-8b45-d05db588cc1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9fd4c95c-c882-476a-8539-dea2cb9b3296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd67f360-4c3a-4c34-9a4e-7c79e63d3c75",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57a2773-6641-4413-9f2e-7289d7071b25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f53440c-bd59-41fd-bf23-6521411d2d6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8b0be20-f217-4a27-b4da-42c617d03b1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8532977a-7c45-4ec9-90ac-3d27e794afcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98f93dc6-e299-48e8-9d45-99ddb82cbbad",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bea7426c-3b63-46c4-ac41-f0de7eb993ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e514d838-bc95-4a6f-8433-7bf8290ea0d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbcbccb7-1538-406d-922a-0eaae980de01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2218273f-5cc3-47ab-b042-cf610200dedf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a607c3e-1ff4-433e-866b-c51c4e678bab",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcaf688f-b852-4720-ba6f-c148ea0f4f09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4e8ec8-ffde-4988-8683-7892a35088e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2124a421-e7a6-4272-ab32-72a4b85b5fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fac5b02c-984d-4041-9a4d-fa059bb0d3d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f800b55-cb3a-418c-8de5-ba4340d09f6d",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc967d7a-aea6-437a-ac37-0e017525178e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "269b73a6-f0a2-495d-852e-31f682dbe8c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "153d29ef-a9f7-4051-a2f4-8bb248558bbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa34689f-fd74-43c0-9eee-76d5b953d1cd"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3934ba12-0121-4c32-b138-eab5d7df5641",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5d495fc1-150c-422d-8b58-16c9dc9c6a29",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2097b20-bb91-4572-bb53-2b4cf40c20d2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "6dc7b866-38c9-49ac-9a19-d8183096c811"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ce29da1-0cfc-4944-820e-073318339975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "29401fca-fed4-4404-bf9c-c61b5fcc9876"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d691c476-c9c2-4278-bdf3-42635adc3014",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "47c52776-9bcb-4f8c-852f-b835f5e8f986"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "7261c810-6ad5-44d3-b40c-3a38ca17edc4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c8b09d68-1239-44b4-82a9-526accc1ad63"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40adb7df-19b3-4341-8497-d5a271ddbf61",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "a11acc6e-c050-4b9b-ae0f-98040ad1d242"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9311d316-8e52-4afe-8eb3-e70ccbda55c9",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fc2dc971-90f1-407c-9a44-8def893b61ca"
            }
          }
        ]
      },
      {
        "id": "b85b00a6-8663-4ae9-b16b-d5a7a48f383a",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "8988500b-8143-4f12-9224-fb16da81e8b3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5178385c-5e79-4f2c-9b73-193d79a89d83",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8b049ecf-f735-4efa-bc4e-8d3a770f1d1f",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9df779e-19e4-4cba-b9f5-fbcc0b85a8f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0600b53d-e962-48f1-8c11-1ad992071011"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5bdf893-f3e4-4e33-9dfa-f1fdfcd471e0",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4641e87c-8d5c-480d-a238-647200225151",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbd12f91-3319-4c22-b54d-4342798b8db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d78804d6-dbe8-4140-9750-f320b363a23f",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d43d0cc-57b4-42e4-993e-1e8499933c5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f802d1a0-ad4a-48c8-96ee-a98bc9433f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcbcc28f-01a7-425d-a816-68a27b535fb6",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82e62144-b8d8-4d1e-a041-a175b619cba1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1022e6e4-7cb9-4190-96ff-48180530225b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "462a2f04-2d31-44a7-bd7b-835a7e014a42",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdbddffa-347a-46e9-b4e6-94cc66dac2e3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29f62f72-6acf-41a2-9817-c6e93be9bc19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f31cce57-fb1f-42c5-bf92-956e1eff228d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "17e84f75-89bb-4c63-a959-abbe3cfee1a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d690a7b-110e-4079-a3ff-962c787337e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85a25279-acc1-49ab-aef1-2541ca8bac44",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a294cb6-aaa5-46ec-8698-bc122258cab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b1685f8-308e-4a0f-9368-26a7efef462c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea64315c-5e9f-4b7c-b8d1-f9cba9a36429",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12937f5d-23fd-413f-a12b-75eefb2cc6e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "662773f9-040b-4119-a2e8-fe6127698773",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de5448e0-6490-420b-970c-ee5ff4e4fc98",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7276ad7-9550-4729-bbef-de88b2f39da4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c19e49-a1b7-4c8e-b334-7c86d0c2793d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27d7bc82-784c-4f37-9f46-9c3dd0604d28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26198362-0eba-4752-8d18-459a5078ddf6",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b326fa67-06d2-451d-b7ec-892b149414e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24df2e39-bee0-4b96-892d-cdd6b09c79de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7d4498b-2d0f-4b64-9344-fcae4d09f97a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4f07309-6122-4714-a880-171a434b4e9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "983c3ccc-250a-4b1b-ad51-58602ebcffd1",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f57b9aa7-747a-450d-9a7b-5ba58ab0ebab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b907190-096f-425b-8c50-558eaae2d159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10df2187-2fae-4dfa-b533-92f706ff5d7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f9ad0bbb-2b9e-42ea-87da-8285668a8cff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb1955e8-bd9d-4caa-b003-c93de6ab7824",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08f34d89-22a1-4576-9dd8-e760b42a41de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53b49bb8-fbc0-4fbc-8e66-50f1afadacbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "579275fd-398d-49c4-a66c-1ee62be9b490",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4556ee9-873a-4c4b-8207-6f4d872bcee1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc5ff128-1268-4a26-bf79-1747a124970e",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ed3289a-0e36-436b-9afe-56944827086a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "402d9d75-3f24-49b1-89a0-36373d043995"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c3f923c-8f95-46e8-b2b4-b77b07e9d352",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dade5b8f-7915-4d72-adc5-5df32170495e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "857ec8f8-6a8a-4e20-abb8-e388024ab601",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "956cb069-170e-4562-9e79-70678de2385c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "01d34d74-f699-42c1-8b11-c1cb24fa329e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d35b7b6a-6cd5-4c66-b1d4-ec9c3477e452",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc254f16-f862-48f4-bc7f-804b980546ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac0ebd5b-9d80-4188-8899-b27f81c15e0e",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ccafda-39f9-424f-b40f-93299c19e9ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2ee89352-067e-4737-ae95-8d9defde5928"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2f6014-4bf3-482d-bf92-fa088b6c5685",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77f31207-32ac-4ceb-9621-60f8d5c553d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95c44057-629f-4e29-a3a2-46f0a8c47147",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cce97403-e9b6-4317-8f8b-7d7e1f59bef7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4901ecf-a0cd-40a8-b3a8-67ddaf39bbc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d698da33-15d2-4489-b30e-e9eadf71b35c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fd418de-61e1-46d0-a44f-23bb3c533c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17beed4-937a-401e-8eb8-dc2e446d0f1c",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa221219-0e8b-40ca-af60-1a5c41ee7e49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e19dbfd9-9172-42a7-89a5-136efe5fd694"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61aa5b8-99ba-40b9-a9be-a6492a361d3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45a83854-ce0d-4ad8-b435-d94bacbdd24d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8dab5c0-f91e-4a60-99b4-f75cb04007c3",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a509d44-4668-4f8b-bddb-997075d255a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f1b4950-b849-4348-adf1-a0fb609f4ba7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df606a79-8b1c-4070-8846-3cc08733f0db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25021968-13a0-44bc-a16f-fe3419100ceb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2912392-110e-4a19-b7d0-0c730a22bbba",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dceada18-ebd7-4e4e-9f9a-14b665b175fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcf2b7bf-ba52-4c86-92ea-f62384736a22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5681f7e9-9a8c-464d-b3ae-c5a2a87ed043",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "35307871-a696-42a0-ad3d-8bec7f68cf21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaa8a9ce-eb1c-4535-956f-da4bed46742e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "536b173b-528e-4573-a2d8-ddeae7d0c976",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eab88c64-00d0-4b54-bdfe-1157047b6707"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "662baf4f-df48-4b52-b668-1e9b8fe9d959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b997700e-fc92-46b0-856d-4c55dea8e897"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f3a77e-4ab4-44ca-b4a9-1b81bc162d23",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f778c4f-dc4b-4fca-b012-d8fd2a6f76a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e8a54fe-d6b8-46d4-820a-9f7f0ebb7706"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f63bcb9f-92f1-4e8e-bdcc-fd563700cf25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc98b700-7e94-45bf-82cd-ced6e33e0e80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7b6736-e8ff-41fd-a7c8-fa4a1a6c136a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a718cbc9-c1a8-4193-9498-86cf5ae4eb09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26992c1b-9c4d-4d70-8a05-86f2de625b0f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e91b45fe-5518-48d4-8212-cef7b8c05755",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86a72c35-36df-4543-8df9-8b047b4b8bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbf80df8-3dff-4aeb-bb21-fe2395467e02",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "305b795d-9a37-4f4f-9505-a8ce0c07c0bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e3506ba3-e0bb-4e4c-a8f4-a0df72bc7b26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f93cb6ea-a54a-4d19-a257-38f07eb8d9f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ae24e37-79c3-4bf9-ba47-ab00a007db1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34935c0a-a65f-4312-a2a3-ad430c54f3a4",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4ec164a-249a-409a-9071-cc64f3bc0b4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e608a694-36e4-4e34-9f20-9ad4725823be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4884760f-457b-4075-aa73-bdb9c6469a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6713bef-d70e-47a8-a883-cc15522c9189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b98cb8-ddc7-4f41-92fd-d6fe0d9115a7",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9dbfa00-6a5f-4920-828f-5c5eb27faadf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4cc18bd-fb0b-4c6a-8fc2-bdce5cc67d55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bd5c0bb-721f-4f98-b3c2-69bd76bdd71a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c67080b3-bbbd-4793-9cc8-542486eba8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe9ff945-cfb6-46fc-8992-8e8c4da92503",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2846a0aa-1c34-4078-89fa-7ac44757b7cc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e13924f-fbfa-456b-97a3-72ca57dbe686"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "119c1703-4b06-4e50-aca7-a5309a0650c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce6cd8d9-1463-493f-8f90-2b5edfeac9c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a986267f-8311-4779-8ccb-fdc1a159f5cf",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46e35c81-efaa-4261-a7a5-f739a4e5816e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32aa86e1-8331-44d5-9170-74ed1232ca80"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80cda96b-b5e1-4b48-96bf-19a887b5b7a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eddfc222-805e-4b44-8133-7c22d96f2da5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896f5879-9db2-4703-9d32-71bd2480a897",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d16f2fb-34ef-4eb4-a958-605ff2ec6f18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e3f34d4-36ae-49d3-b2bf-1383da87351e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5f55ec5-ebc4-4acc-8465-4e285b226258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "195533e8-9b05-488b-9ffd-faec6eb1c9a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2c350c9-cd76-44c2-ae4d-142f3ea68971",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6be2d62-bab7-4704-9dfc-c6fbedc95eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "693e2ca3-6b28-4a28-bebf-e007b8c87fda"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f2b54a8-e6c3-4366-a451-d69ceda80174",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9880f9f8-1faa-4ff5-90b9-38ba589ab916"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2def4191-51b2-4606-b0e4-32922cc775e4",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "961afe5f-16b6-443b-98fc-876bf4c0f2d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4a3eec2-05d2-4e96-9f59-c4b31957c77e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6761624-33f6-4817-945c-686f7f101e90",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdea28be-4708-472a-b069-03c2fcba47af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b29c505-d1b7-4ed3-ad64-21ec4bf177af",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8630f467-5d6d-44cb-b6b6-b942b141ee4c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a2754f0b-6529-4fb8-9333-2acf205c42e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4682f3-b9e5-4787-9913-9ff218d0e11f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be05c073-6791-4e64-a453-470a409964ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5361ae44-70f7-4d81-8448-0ad9500fcfff",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "762e87bc-2dd6-4707-9831-467b8a0a9291",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cf92f750-cf61-4833-8c6b-058b92bdd7c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44fb9bb2-242c-4dd3-94b0-b63c13330439",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05e515f-bf7a-4c93-9125-290cdf0ff623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e8f760f-bc37-41a7-b653-df28a7b15b24",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "995ca0c1-08b1-4976-a48a-a6a3f82ba7f7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4d034c4c-1490-42af-8a0f-a36a5a92c336"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54452759-1f0b-452a-b65a-50d080a6ecbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2553586f-b47a-4f3e-83ee-03c2216c1a31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2637d6f-45ea-4f70-bb05-3d35ee0a4b5f",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3e6e78c-78cb-4f12-99b6-25b732c2c655",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9f7497e-98ac-4e8d-b582-28f083441d64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6134e3b-5316-4523-8b94-7eff916482f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbb3cc95-caa5-4ce9-9a30-d62280c94791"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0273c9-1145-49df-a7f3-5788ef445bbe",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "461b3ee9-aaea-4c67-96f8-bc1fc2ddfd86",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1d77e0a-6063-46db-9026-4e6a4bd35120"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e23097f3-4aad-4e3a-8720-ca87a366c343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "227e8ca3-f967-4d7c-9352-6aa257ae0e9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cc96116-c477-453c-9f02-cf5e7732c311",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff78fc80-2b20-44e6-b828-dad5dc280800",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "706eeeb6-1a99-42ea-b9c1-ec74b4adba56"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20de04c2-ab97-4253-96f0-75c8c780eb01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c4e0b27c-f265-454c-ad52-7e19a82d526a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f30b8d71-fc3f-4b91-b2d6-6789a0615ff6",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81ac1162-c1fb-4689-8ca9-e57aec8fc504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fef6c326-6819-4319-8561-5e640907dd05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa15f0c0-43ca-4c7b-982f-37baefef311b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4943971d-7d44-4fde-9a15-d8f211c2735b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03d6e800-9a6b-43b2-9a7e-a4ea0f684a59",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea724a4e-6c56-4b62-bc52-926b638feb6c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ace438e0-dc4e-4f8d-b055-14e2cbc5b42a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "865c3bd1-05c4-4acd-a63d-bae0c7430f2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45591c1b-6990-4c21-b77a-b85d7d29b605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b66b6c35-d5db-4724-8e71-72b852ac8d30",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7cb9955b-8cad-4432-997d-74d5a393d21b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c94b2a31-94be-4ad4-8eb9-cb4885dad28c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0ecb71-defb-4180-acc9-eea561748813",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8731e258-a48d-4035-96c2-da6aa843f7bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb380814-b626-4eb5-9309-dc939a5632b5",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0e22ccc-c1ee-4284-92f4-b8608a90ffeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93e91926-0483-4e99-b22f-f69a2579d437"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4a0a11b-3e66-4741-8035-24dac6c55b86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0e1b09e-b671-4d52-8f4d-c8ce51c4339e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9968bd33-c695-41e6-9293-439879793240",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c33c62fb-297d-4791-88e6-3989cd9253cf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61a3a398-5868-4aaf-a846-d48b3b6be33d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d508a60-c9b9-4566-b557-e8bcdb2eb7ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "feee8c6a-2db0-432b-a797-03aadaf8aae3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d51ee04a-5488-4342-b376-49f7f67453c8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45307fa9-db51-42fe-81c9-fdfc6bd6690f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98a4d685-8a76-4311-8e98-45e71a26b043"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4048fe25-234f-4de1-9493-1416516e9b11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c478806f-be42-44f1-8cc7-0475a3c8dbb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e610c6b-2ef0-48d9-a213-d19365b301fb",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87246049-aff2-46bd-96f1-8b37688eed6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76487e79-ed41-4394-b2c4-8fc41f8124b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ede54ea-eaed-429c-a0d9-a2a72c83b0c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e02688e-413d-4a5d-9939-7c99c09d8822"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e687277-087d-4ce7-990d-ede5ac5da803",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30fcb28d-7e3c-4917-bb4e-68918036012d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29cf62ae-a202-4a15-8efe-6b452ead298d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71cb91e1-6d50-4833-9238-dacb1ced5d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1dbc963c-4c47-439f-a828-dc12e7f0c664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23137ee-6e9e-4e94-a221-d1365b95b0e1",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c7e827c-f241-4ecc-b881-47ffad3f2982",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06c1396b-1b8a-4156-8e79-c5588b243d76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890f5365-a4d2-45ee-a861-0e41bf75a99f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15b4c650-7217-4927-8f5b-7e9685d3ed76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28d163cf-b840-4cb4-852f-865863dda8a9",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e8aacf6-4b88-47d8-86e5-17a4daa1415c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f81d7a0e-a869-40bb-8612-9b6e36e294f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95358778-ee95-4e3d-8764-acce2ffa3628",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "876ecb37-06c6-4f56-8883-92473e557138"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c66a03a-21d0-4312-b7ef-ab16cf7fc651",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f791f39-3851-495f-9803-5d75cb6224eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "097ba0df-fe4e-4732-b8ca-730af0d47aa0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e8af3f8-3156-48d5-b6ec-c22242777221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c2203be-7fe2-4c3b-9650-8245fe64ab73"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f53211a-39d9-4a51-a9a5-08d0f31d3adc",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8e84c23-f89f-4365-98be-e343623cf73b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f93e77a-5ec6-4bdc-bda3-3b614c793104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea1356de-b061-479a-9a35-7351fa847780",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b4efb6-3de2-46ed-8b0d-f86e019f4246"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75ae40ca-3142-4dfa-b627-b11c2a08f904",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9854d3c9-4252-406b-953b-9dd83c53dc5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3402a056-1972-4ad9-b95c-44e70518f05c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "943496f7-b3df-44ad-a53f-330690e604a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a115b860-1e87-427b-bf13-33910fd0399e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be71c206-f593-4086-a8d7-a0fc82179807",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "053b72cf-5309-4def-bda8-bac8ffbaaf26",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ed60b98-af73-41ed-9f0c-9626782fe0c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55837423-81ea-4dc1-9f49-3982021baafd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435e19c5-f44d-47c0-a843-077996d1b133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e20fb41d-4f08-4c06-b884-f9363075a7ee",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d7b3af0-6536-4518-bfaa-5773f2f9cd2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50b43ddf-2b18-41a7-809e-0e8bb2fa8e35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eedc2a8-f8aa-4d98-8c5d-686b3d267a83",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f930d5bd-2073-4554-8a11-196ef4daaa2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0b0702-e1ab-4974-b416-1f3a10bc39ca",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77b427eb-bf1a-44c3-8bea-79610ce297bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464cf5e8-8a61-4eb6-aa76-e87fe84b8985"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a187ccd-ba57-4927-9f6a-e6074430f6c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46b34355-a3a9-4735-9417-8f9513289a71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97b28af9-b5ee-4306-bc75-495b899bbfbc",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae11877f-9458-4644-9508-071b6ad6fee5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23ff4c7d-7466-4e56-aa4b-f7086623daef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6699cdb2-979b-46b4-8762-8e11d812392d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65b0485f-65fa-47c2-8e73-1f10aee37e8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53c00871-cf29-4c6e-8997-3cf824a8ae93",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c2ff9f-d408-4a9e-95f9-bee82092b65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "415cb08d-c1bf-41cd-aeb4-28408d8af648"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "578be726-d2e7-4067-95f9-6e9ecc4b1784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d70bd825-1464-4fbd-9ae8-48404fa1d024"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ca00d4-4117-4df3-ae45-a6f089679bfc",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e023138-927a-47f4-9e5b-b40f0cd8f566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f19f4c1-e302-461b-9dc2-9f4d4c339918"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a51f581a-6209-4266-9d89-d806fabd8861",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "228200dd-ac38-4651-a87f-fd3df5b5e25f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f2431c-28df-4a42-803d-afa3fd2db64a",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc56560a-7521-42a1-ae93-96259b68ad94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a42bc05a-b7d5-4b76-9b9b-a8a826b3b740"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6f255a7-683b-4349-ba3d-ecc2a0e8946c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9ecbbc-4324-434c-92d6-7327669d9ee7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffb0389d-3d1a-4de4-8e72-072735aee007",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c66792f1-0f8c-43ad-831f-ba945ac4f390",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "614053dd-9b7b-4cbf-836d-e8d81b0caa25"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c92173f9-80bb-44d9-99e8-ae0038e515d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "965ac9aa-e165-44fa-8462-08ac0f35ceb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da299303-855c-49d6-b518-540fec9cc690",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a76df4-3a43-40ad-ad5e-45b83ab617fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d24631b-1ad6-437a-8949-803896370fdc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "890c530d-3cb1-4170-b863-5d38cf25a9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d79747fc-84d1-4736-8de3-d0fa6a3e84b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343c0c0d-b57b-4096-925e-adf537e1a3f0",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f4673a1-86f4-49f7-bd50-0ef88456b905",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec595a37-8004-4419-8bdc-d0a4d507ba24"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "263f41d4-9839-41c9-9903-84795fd1b5ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "497ddcd2-97aa-47e2-afa4-5601c53ec424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54416d2d-95eb-45cc-8c12-971fdbb62ffa",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9f1e53e-c377-4a5e-8d54-bf5eedce429e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fd8d5063-c3fd-42bf-834c-28e3405781ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80c28ea6-b90f-4d6b-a2eb-eaa19a75d6c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a281554b-8731-4be0-a9dd-ea71ff75be2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed93d528-f087-48be-a55d-4feb29580db7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56178324-0dd7-491f-a72c-2347b048907c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c41ea68e-8dbb-44e5-b2e3-aecb97779cf4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca3ce699-5c17-49d5-bb3a-cb4422664747",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df9ad1f6-b64d-4345-9532-46c745f4c3bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee4c9f1-cdf7-4a3d-85ab-b4600dd1aba6",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91a8b869-95ea-416f-8e4f-8817fd951656",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09fb2b90-2ac5-4af6-a234-d5e5e7031ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02c0d7ef-1894-4580-83ed-cead4961f64d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eea9f0f-449f-4214-8a4f-67e501d0eeaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7f00ad8-d146-4cf4-a3fa-037416f32bff",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62167ab9-2a8f-4103-853a-12b044a35619",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b559e12-f58b-4229-a8da-07182acea71f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f00b019-3a8d-41ed-86f9-b09635212b78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e8c18a-57f8-4949-b233-9f40e72892f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfccdf96-1ec1-4e2f-b3f0-ed669dec2a6d",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b54a591f-0ec6-4026-9d7d-7ecfce4a4d96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6376cec-5914-466c-9be4-8454f5b39631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc05147d-f997-4466-826d-6782065a4b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad09203b-6a9f-40f9-bf89-219c83ea0296"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41a3b27-485d-4102-8e92-0665bbfd7050",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82b4641f-0515-4c99-a9ed-effeead7d771",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "013af1ba-380d-41cb-b963-61147af632da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "782605dd-7dd6-4b86-8016-6d0a7d590350",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "176f3ee7-e673-4f8d-82ed-fe73faed911c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210963ce-c002-41ca-b5b6-abf2bd37c1ee",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4561bc8-4f05-48f4-9dba-bd27cb3ce0fb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c887d97e-a289-4be3-8020-4188b07b26b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fde76854-c671-45af-b239-1047691c1fd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ef5e41c-00b7-4197-9bbd-b114ec4da28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e847050b-ee46-4dfb-a643-04b83c1e65fe",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ec09df-5c19-4883-ab31-50795b576d3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "70b04ce1-6fb4-4342-a556-448894dd71ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b074eb3-c8c4-4df3-8856-d1f941db67fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd8f6b6f-3be0-46c4-8ebf-7c539418e7ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "033e1800-17a6-4651-a507-5e1d3c6fb53c",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76212974-c05b-4ab2-ad6d-445d9b51f247",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b383dad9-eb5a-4134-b35b-0fa1b0fa92d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a8fb1a9-92e7-485c-8004-145fb735350b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b19ea6d-338b-449b-8131-5be077b3f249"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d44045e8-abb0-4261-9849-01b253ada1ce",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed06a310-3f4b-45a2-af6f-2b9a34fbe6e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "95f4b73b-c19b-4c63-b634-c2b19bae58bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "265dcfc3-cfb3-41ac-acd0-bdc6c228ee03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e78f4ec2-93ed-4cbc-b904-2efb4ce1418e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e5e36b9-80d2-4ceb-8fbd-25996dc74483",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd79c73a-7db9-479a-9858-1b3d790e2447",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "56f0e4d0-47c0-4558-8252-3170a3540b6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c64c2d32-a2d2-40a5-a722-663bcfc38441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76a398aa-e710-4fe5-9c44-2aa0dc5ccd59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9090851d-b325-4fd3-a644-6e71aba08d39",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ded66fd4-0f19-41db-a796-22819e732ecf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "045044f5-af54-4ba1-81fa-6ec61e730231"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f034f4f-cd50-4407-8c72-6daacb1c8c54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3403071b-618c-43af-804b-6a5f2a0eda0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17e2c9c3-3221-4f1d-b1f5-30f625c0abce",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b087246-173b-4f83-8fb2-3071bd8a6a20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c94f31da-8ebf-43f0-a818-28dd75d95e1f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "110b8750-fdc1-485e-bb2b-d78fc6de6cbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "453f17b2-2d3e-4093-a4fe-f23f703b456d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7ca450-691a-41b1-beb7-135926b4cbc9",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3597287-9ddc-4776-8812-36f583672daa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "422d939b-030d-4228-b737-84b56d856f7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "63a1b9f1-e3c0-4f74-b42e-bda45434bc3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f1507666-7d9c-49cb-83cc-20cddd5a0c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8411bd5d-92f2-44f7-91f1-6a2b58e4f226",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e429f68b-1862-4254-8bcc-e3339a691218",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "34348778-45c6-4c9c-8eff-312916f64398"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9773910e-2981-44fe-a35b-8fd4a0ea99e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c9e4f26-6083-45d1-a900-7d79b77ad655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61bc9d4f-6985-413a-9bbb-1c152258dd29",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c62a1b77-0330-4ef2-ae76-9916690d0fbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4133fdaf-4bef-4ce0-abad-e638c79e7334"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d5eacf0-13c2-4ba5-8483-e575ca0bc0d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a68145-428a-433f-947b-ec96483194fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f4e2466-8562-4d82-a742-8dc926c990d5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2db72a6-dc12-4cc5-808c-d10340d1b832",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4dea2c1c-c4bd-45b1-ae91-7b36e2587a27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b602124-b86c-47ec-98f0-180c163c9dec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94011ca1-45d3-4870-8b85-51fbee104eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4861f98c-205e-4564-b178-c3c5772c7124",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "617910e2-6cab-427a-85a1-74ff969c9f2e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c669da8-925a-445c-a5ac-efe3d5e13d06"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb43a8e-163f-428f-822b-f238c765b74b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7585d37e-ce60-4ea1-a4cc-37f9a702e87f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc58bd09-f718-4086-a9d2-7183783fd721",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57148986-b47f-4bee-963c-313ca7ea8a0c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd5325a9-5e23-4ced-a850-d95a39871c32"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19d3efcd-b8db-4a15-84e0-03c815456525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90e8d158-26f0-4197-8b91-679108239798"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30d3601f-2102-4a44-8057-f62659d167ab",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ce4c8b3-9097-4a9d-94ad-7c1bc736d5bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc217e28-f893-4323-b378-79f96b331200"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22ef125e-8aa1-4925-a4b9-5deca8c6c9f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc46fcc2-11ba-4722-a892-1c5c831dcca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9366b1b-db6a-4af4-a38f-59afc411947b",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83e73641-9a82-4eb9-a727-dc74fe7f43d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "097e88f1-50a7-454b-837e-47382ef84db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f804ac6-99c3-4d69-845b-b2b8bcc3b161",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a11d473a-d3d4-4b73-9c1e-a2601d25a6e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "799a1be4-b5bb-4f81-911e-e4e265975a64",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "660995db-f0fe-4ff1-8779-f9b15a2d8ccd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b6ee899d-5ed4-4df9-9941-35098a910c89"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd28c02a-e1f1-4425-b294-a593d498aae9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c5052fe-a1e3-4141-9822-ceffbd0ad83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "969e3088-cab9-4b3b-980f-7c44c4cafe7d",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b99d713b-58dc-4b97-bc4a-85a368227b50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab880f84-a73f-4100-9b38-641e011865f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8ed1e40-33a0-4c84-917f-b5afe5597b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d7acbc1-5aa2-411d-8001-c85e6b739a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dccc1a3-0f6f-42f8-9116-6fcc53559dc0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24bd27d3-eda4-4ee4-a6b4-5aacdb1c6176",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "47620159-0c44-4943-bb89-d24b2388bc54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200c2807-25d7-4c7d-a728-c8ed66ce90b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f5964623-1a20-4f46-bbdd-4832007d6bb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "627a3a70-1322-49fe-b808-78a6e83ab664",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6846dcb2-4e2a-4640-9751-54838696ddf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e2e6d47c-77d6-44dc-baf5-2be5ec26e366"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f97aaacf-e516-4929-b7ef-65912d7b4046",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "052d7db0-061c-45f0-845c-e34562115efd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51b83838-76e8-407a-bc57-36b32a6053c0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52f5f8f4-2c68-4b3e-bcc2-c75ae4184ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8aa71d50-46e2-46c0-8d82-dad324e99435"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e0c98f1-ac49-41d4-b494-1bf044a556b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64e37ae5-b281-4310-a349-cd476cf30bae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0deed51-b8c6-436b-9d12-c7b25911b800",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75f47e6d-a801-4112-8cff-c641d1fb912c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f8b37e9-45ed-4231-b653-89912624409b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d22e0b8-10df-49ed-86b7-1c26dfcfd7c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e60ad6f-6ce3-4d24-949d-ebb4cf9e8dbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ba0ea6-7e38-4781-bb0a-6a9d36e6f4f9",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e2c5186-2866-4abb-9a80-cdd81e385a3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3f3135c-20ad-4768-9365-6b363c7ebc09"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc28127e-ec25-4f63-8376-e6440e020177",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36ec364a-fdb9-4a73-974e-04649f24ca17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d113856-05e0-4870-9869-3595e79ec1de",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd550e97-f5c2-4024-92b1-d53b572dd176",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8d0d8d05-838a-4f8b-a6c0-cf272f872ec5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7194b69b-278d-4cb9-93fe-fb8d1b889c3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ca63394-0ee8-4f84-883c-15ff3b82c16b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ba000a3-de1f-49c3-b096-0a46b3e772ef",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baca75ec-9b07-4dbd-a02b-5cffda23e98e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "888e539d-3df2-409a-b77d-8afacff2ee2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d375b42-2562-4076-aa15-b63c778d5173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3536455c-b95b-4c1d-a58e-c2853579912b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8248359-6aee-470d-8875-9c089d104907",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3158a00-b1ad-4c16-925f-fc548a41ebdd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "894336d0-5380-4c73-a68c-6efcb56028af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "295f7560-e29b-454d-bf8e-8683f310e0cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18e69f25-9b48-479f-909b-aa01caa62c66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da6ec75c-5a69-48da-b8bd-d7928f3c98fe",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ededac5f-0875-4587-ae4c-5b6f0cec1692",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8557d41b-688b-426d-9baa-9b149659e096"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9adea2e8-2608-4605-8f1f-807bbcf3491a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2badb14a-e8d5-48e0-898c-fea4429657db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c21eba6f-f66d-4ad5-8387-b6fc856af442",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fbb4c53-128a-489b-b3a0-90a42a19d705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d287e30-796e-41b4-8dd3-48286759d376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42ed1cb1-359d-48f3-a070-70f9765a87c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fdb4aa06-b7b4-49dc-b78a-6ff1bad667bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b8d2f71-d9b2-40d1-ba52-a62c0cfc7d7a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cca81001-5f03-4bbe-8d55-5cc4510cd7de",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f50d438e-b431-4393-860b-413f60412338"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b398aa-08c6-4cd2-8238-f40364a06175",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7bbb92f-030c-4503-9898-b59dac3773d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eaecb99-7564-4b78-a884-40ee0d76dd75",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "279da5c4-cfe4-48a8-8cc8-796c9818dc71",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2c12aac-9807-4663-af78-dc03563df7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f44a5f-8168-4691-9202-237a1cbb2806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66be0c3c-93b5-4077-9bb1-b4816e2599e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8c5bbdd-8082-44a0-bf00-4d1af50e083f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3acc6c3c-ceef-4554-9b6f-a61608cf8bfa",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abdd67ad-e543-4d16-ae0a-8846efc88d90"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3560df40-311a-4006-b2bd-353053103686",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c811fd68-744f-47f8-bff2-90bc591216d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12ef780-1717-43d7-a1de-e2d3d75f4d44",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a3aecac-10f4-4f06-92fa-c2ac54a379d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd10d84a-0dd7-4533-9a47-9eccc6396654"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "898fa7aa-17e6-49e1-b65a-7ce3dc473fbd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e6d5c3a8-7eb4-46a0-9a1f-73d13de26773"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4db6bd51-aa5f-4232-8bdd-1c2f275c4444",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cafc0457-d62d-493c-838f-3c4c8a105bb4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5549a9a0-563b-4688-a59b-b1b8144f63d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dee812d-0510-4b76-bd7f-829e2299ad5d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b891efc-b048-401d-94d7-ccd133b52ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d80893-a9b9-4e41-a1d9-eea5d928a42e",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ea1cf0d-eaa3-41ef-bd56-3614b0544515",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f121fd5-57b3-4b1e-b082-cf4aae55df8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "40efdcc9-6543-41f0-9945-c59189e8a0d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38244206-4194-4a1f-822d-f82ec19bfe11"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "948adf8d-60c3-43b6-af31-704144709b55",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0973a99e-2254-4e3a-a5f1-b1137e1667c1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "34117494-6d97-49bc-9ae2-90ebbd9c1a3d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2d5f698e-0b97-462d-a1f4-945b6ee39f94"
                    }
                  }
                ]
              },
              {
                "id": "4a7889d8-962e-40f1-a001-7789144ed89b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d4811fe6-bfc3-4ed8-ba9a-9793004ae3ba",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f360c49a-83dc-48ae-9c63-ab9aa9e408e7",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "a75fd13a-d87a-4966-b443-5dbefb369722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43f927c-ec5f-4c65-8862-eadd1950b1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d4eaec63-4a3b-4b62-8f39-ef60dd9c0872"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4dd3d9e4-537d-46a5-a4aa-b58e1b60da0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0e2c7121-659f-4024-9298-8304d818ab24"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e8c24854-59af-4438-989e-edc36efebe1a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ca2c1904-0e53-4e9e-ace1-032c116523cc"
                    }
                  }
                ]
              },
              {
                "id": "895ce428-7ed1-4d97-b109-2565da20a7fc",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "cb7d12cb-5214-420e-a5b1-1cf2d7db19ab",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "696c7326-afa3-4eb2-afd9-81aabe76fc02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "221d0eb1-8751-4919-9691-7b97ff997ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825ee651-5863-4e8f-a6fa-59e7f5814c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d60e2555-6ab9-467f-94e0-859b87263f7f"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "9d0458c5-373e-4d1a-9456-3897e3cc3976",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d89bd761-0139-48de-8d82-5faa184f3a82",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0649a047-854d-4e8c-b40a-17bb51cc31ed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "70d1af18-2bc6-4e97-9628-3e8e04ea9075"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6eaed4fa-c79d-410b-a479-c4da5e928354",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4db4f70c-644b-4aec-9dd5-276030998a88"
                    }
                  }
                ]
              },
              {
                "id": "b4d3e81c-5774-48d9-9627-99abb4bcccb1",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "84d4a9dd-0456-45cb-a2f7-4863a836bc80",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "50e04a29-81fd-40a4-849d-4104ba0a14e5"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "613efc7a-0a1b-44de-833e-b1ecfc8c1551",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9cc53cb7-9c2a-440a-8ac6-501acb5c2c62"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61914d2c-5b52-4c6d-83d0-29c9d187f7ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "97b00c99-7c54-4b97-9af6-c4ea0483e4fa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6f26c8f-bd38-4799-aa93-648a88168d7f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81e2dcfb-6428-4955-a97d-c96c071d72d0"
            }
          }
        ]
      },
      {
        "id": "d84a5d12-59e2-42ab-aadd-c1660dbb6b08",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "ed88daf2-e6ac-41f0-9012-5c617a892c5e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5adf1ce9-dfda-4473-a9d0-fafb0832b3f2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e0517ba-612b-4491-8854-7b6c04d54e14",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8493e402-fe58-43c7-b9ca-28664b0f69f7",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "63bcaf66-47dc-4c4c-8d52-48fdcdffc496"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b77f13e2-2bac-4bb0-8c47-3b3315488e87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4474e31e-f722-473b-9f00-ba35a1601b58"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d572594d-0dbc-475b-85fa-b5befbe2639c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2e6ab3cd-807e-4952-a927-7fc47162f6be"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "02635324-a338-4a06-acc1-2565626ab3f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6cfbaba2-601a-4b1c-9e44-7ef2243b4e97"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e92ca7c3-299a-4e9a-9c73-53a8ccfd0f46",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2350a5a8-7eea-4865-850c-f0e1d5a06546"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ba6cf4fa-21b9-4623-b8fb-82cccb0d5553",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eed2c7fe-d812-4d3e-90c6-f8bf2a278485"
            }
          }
        ]
      },
      {
        "id": "a3480f1a-c081-45c2-911d-20477003bd87",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "49d7e951-de10-4b02-b05c-29f61c07b6ba",
            "name": "Negative Testing",
            "item": [
              {
                "id": "36ac7828-08b9-439d-89c2-c256e4ebff2d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "de2646c3-39c7-4f5e-972a-827322853b2c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df4bb4c-6d4a-4047-bb85-a0ed7160ed8e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68f8eb6e-08e2-45a3-819e-7b0b910bdc71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3b1b66-7384-4ee9-bf85-e922a02a01d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2067444c-36c1-465d-977a-93e4f0f297b7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "97da3a19-6648-4c45-8fce-1d127f4ea0ea",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4108a71-faa7-4342-9bec-14e18545833d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e7939937-77dc-4b8a-b847-87697d4a6071",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9aad6f1e-4f8d-481b-8b3a-f1ded550f538"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bc3ac805-375b-484b-a106-6b4ce2e83315",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "1591151a-1fdb-4864-8680-d4b340231849"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "85d8f719-acef-4b52-9270-6c6f8346d0a6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "618c80e7-7359-4935-be9c-cb7554e84344"
            }
          }
        ]
      },
      {
        "id": "e222bf28-08c8-437e-898a-90c54aa854a6",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "3e0f5e38-946e-406f-a343-6ea8798d1efb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8efd75b4-d201-451f-92e7-8e308330e830",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4d3a6db1-104b-4467-a7f9-54ebf71089cb",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6baf5f23-3055-455b-8d1e-7c6628c20e1b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3ada26a5-d686-4427-a4dd-1add178d00be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a02413ef-e43e-4323-92e0-0c87efdbd045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38af029f-7af6-4c45-a97c-f473f4b6055a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1079b797-3a5d-4ee7-a758-e83a7b3bdc05",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9ee4d60-53c8-4729-b744-0c978893bebb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "33c93344-040c-436b-91b5-9763c987b41e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b28eb568-4335-4f72-a26e-17fe1585ce2e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7efde7fe-793b-48ad-868f-351b9ac6ffb4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "03965510-7ad3-4fd8-ba62-0530b490ad94"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c542681-9c51-49b0-bae3-850dd8d9f721",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b03d19ae-ab03-4b27-983d-cc245d334785"
            }
          }
        ]
      },
      {
        "id": "edcffc2e-6379-4c2e-b485-674b9a235fad",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72a5a9d1-1295-428c-87d6-7b15aa6f69b7",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c839c704-566b-402b-8465-ecbcc41bb4ca",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "dcca463e-e750-4932-bfef-a3c8c908ea6b",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b44fbe50-7df3-41f8-b2d9-464d7dbd1638",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "def2cf22-5acf-4bdb-a908-e04ca0ed5132",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 33
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 296.588028169014,
      "responseMin": 14,
      "responseMax": 16615,
      "responseSd": 1313.0827114236852,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1688777222594,
      "completed": 1688777319481
    },
    "executions": [
      {
        "id": "99af03af-e919-460b-93eb-7e3974cfaf10",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1c80ebb4-09e3-4d3d-af7b-09f59d6f1828",
          "httpRequestId": "8163b5c9-0176-487d-8764-c958aae71a2f"
        },
        "item": {
          "id": "99af03af-e919-460b-93eb-7e3974cfaf10",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "19a5a734-5c73-4936-beb1-6721911a0f7c",
          "status": "OK",
          "code": 200,
          "responseTime": 102,
          "responseSize": 0
        }
      },
      {
        "id": "ac97a6e2-fbbf-450c-9343-44b121fcba0f",
        "cursor": {
          "ref": "5e743628-7fb5-4307-b301-72c67aeefa0b",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "311d0c19-f572-46fa-b049-8b1ece0ca3f5"
        },
        "item": {
          "id": "ac97a6e2-fbbf-450c-9343-44b121fcba0f",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "24d61ff6-e6a7-441a-b08f-7aa7cb94eca9",
          "status": "OK",
          "code": 200,
          "responseTime": 14,
          "responseSize": 0
        }
      },
      {
        "id": "ea033941-4ca4-4a55-ac37-48431736f282",
        "cursor": {
          "ref": "922537bf-24eb-4095-809d-1d6be08a4354",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b441b0e1-ff3e-4c20-a927-b33fafbc7636"
        },
        "item": {
          "id": "ea033941-4ca4-4a55-ac37-48431736f282",
          "name": "did_json"
        },
        "response": {
          "id": "c7a2e293-75f2-4fd2-8ac0-3a7d44328481",
          "status": "OK",
          "code": 200,
          "responseTime": 485,
          "responseSize": 2778
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10304407-7895-4f2c-9f3d-9b02e761defd",
        "cursor": {
          "ref": "d01694bd-70bf-48b3-941d-8e8e31048ab8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ab2a3ff2-83d3-4fab-827b-479d5b80db62"
        },
        "item": {
          "id": "10304407-7895-4f2c-9f3d-9b02e761defd",
          "name": "did:invalid"
        },
        "response": {
          "id": "004e14f7-97c8-450b-9c9d-6d4def7f2bd0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 851,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "10304407-7895-4f2c-9f3d-9b02e761defd",
        "cursor": {
          "ref": "d01694bd-70bf-48b3-941d-8e8e31048ab8",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ab2a3ff2-83d3-4fab-827b-479d5b80db62"
        },
        "item": {
          "id": "10304407-7895-4f2c-9f3d-9b02e761defd",
          "name": "did:invalid"
        },
        "response": {
          "id": "004e14f7-97c8-450b-9c9d-6d4def7f2bd0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 851,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 404",
              "stack": "AssertionError: expected response to have status code 400 but got 404\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "1784790a-4303-4cf5-95c3-4755a0a4de89",
        "cursor": {
          "ref": "3bea6b9d-8f4b-4d0b-9a40-9c59e967861f",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "1c6b2eb2-6665-4bbc-ba6b-5fdba46eb592"
        },
        "item": {
          "id": "1784790a-4303-4cf5-95c3-4755a0a4de89",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "85734330-b724-422b-9ed9-be48ed91b05c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 88,
          "responseSize": 127
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecb38639-63b7-4b18-b648-ce9117044355",
        "cursor": {
          "ref": "8a6f6f8a-6f24-46fe-8894-419d93f72c9f",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "964f2186-40a7-48c9-8b68-071274bdbf32"
        },
        "item": {
          "id": "ecb38639-63b7-4b18-b648-ce9117044355",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "bea209af-c9b4-4cb4-bad4-4313738b5894",
          "status": "Not Found",
          "code": 404,
          "responseTime": 49,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "798135f5-864f-4e70-bda1-746888ec2b24",
        "cursor": {
          "ref": "c8f3b3e9-fcb6-4ca4-9170-5589861b259c",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "da4be43d-054f-4fec-962c-3af6b6f1f5d9"
        },
        "item": {
          "id": "798135f5-864f-4e70-bda1-746888ec2b24",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "71f1bbd0-142c-46ab-8d3d-1fc1c103cc7d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:7)"
            }
          }
        ]
      },
      {
        "id": "1598d79e-f77a-4abd-b6ac-94d37a34ba6d",
        "cursor": {
          "ref": "dfbdd8d5-4779-4246-a4b6-4459883725dd",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f66e571f-69a4-492c-8780-45edb7313165"
        },
        "item": {
          "id": "1598d79e-f77a-4abd-b6ac-94d37a34ba6d",
          "name": "identifiers"
        },
        "response": {
          "id": "9d4f6f02-6480-4022-9b2d-dab0541c7aa2",
          "status": "OK",
          "code": 200,
          "responseTime": 61,
          "responseSize": 2450
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a90218c-d4aa-43a6-bc33-79a8f4371751",
        "cursor": {
          "ref": "96e11c59-922c-45ab-a8de-52b29af02453",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "83249267-a51b-47be-bb77-d2c9f5bdfbf9"
        },
        "item": {
          "id": "5a90218c-d4aa-43a6-bc33-79a8f4371751",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "339bf9c6-ff0e-4369-b635-ef6118eac53a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ad20ed-14f6-439e-9c9f-8184a90c0200",
        "cursor": {
          "ref": "5bc0461d-18d5-4449-a1ef-7b3627daec5a",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "21324de5-678e-4768-8e44-a3156bf69a9f"
        },
        "item": {
          "id": "d8ad20ed-14f6-439e-9c9f-8184a90c0200",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "69d7f7da-9c32-427e-83cc-b8f2aefc9d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 223,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d41c1d0-9455-4c0a-97bb-7e697a7c6751",
        "cursor": {
          "ref": "a7d90149-349d-45de-893f-f75b92bada2b",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "08da0b5d-4662-4a86-a802-ce258e617b06"
        },
        "item": {
          "id": "5d41c1d0-9455-4c0a-97bb-7e697a7c6751",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "108c5e53-9c36-424c-ace4-cff961dd3e01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58eaaf37-1ce1-405f-a4d7-fddbd0488c75",
        "cursor": {
          "ref": "f8f2eb77-c42c-4f42-8ad0-901be1619fbe",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "c6fd77bd-fa4c-4972-802b-2b38e5dbf9eb"
        },
        "item": {
          "id": "58eaaf37-1ce1-405f-a4d7-fddbd0488c75",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "92192b14-dbaf-4f87-8770-2adbc2fc7c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33addee-7769-4a8e-aa49-b57c2cac7628",
        "cursor": {
          "ref": "8319e6b9-030f-42bb-b65b-50e32ff9a732",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "62f1d1a1-c95f-4ab2-918f-5702e127d9c7"
        },
        "item": {
          "id": "b33addee-7769-4a8e-aa49-b57c2cac7628",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "81214860-b63f-4a4f-bfa0-d93c05e57e69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caa08ac9-e8a5-4c4a-a404-c36140548d7c",
        "cursor": {
          "ref": "bbc7967c-07fd-4fcd-b480-990f88988d92",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8b61f423-1b10-4fe2-9971-154df447e092"
        },
        "item": {
          "id": "caa08ac9-e8a5-4c4a-a404-c36140548d7c",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b8ffb8dd-e7f9-4f3d-be6f-b247991e2928",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af091d8b-2a4c-401c-9416-a9cee59114aa",
        "cursor": {
          "ref": "1b19af9a-2d4b-473d-a987-1bc53d262b46",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "f8a5c46c-723e-4f7c-8d80-231c53de5f38"
        },
        "item": {
          "id": "af091d8b-2a4c-401c-9416-a9cee59114aa",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5d0f4dee-d363-443d-94a9-9b75a9198be4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e6cbda-9593-413b-b481-a7fde96fd130",
        "cursor": {
          "ref": "44efc46b-d015-4ab3-98a0-d25581507cd1",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "ab1bb460-5adb-4270-8fce-cbac73b5f48d"
        },
        "item": {
          "id": "a0e6cbda-9593-413b-b481-a7fde96fd130",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "de4ecc22-a7ef-43b9-aea4-e580eed78c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49b35423-ac2d-4a42-9268-76ad29058c7f",
        "cursor": {
          "ref": "28361d7f-d86d-4531-b4a8-8f3999dff156",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f8c29ebd-4dff-4a76-a091-2c17f38b9299"
        },
        "item": {
          "id": "49b35423-ac2d-4a42-9268-76ad29058c7f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "d87cc8e0-7b7f-4b3f-84f0-a4382eae6a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e3b7b0f-4985-45fd-a50e-a205f82aad1e",
        "cursor": {
          "ref": "29731f08-f111-47e2-82a2-bf3d0677a3e7",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "10077865-71dd-4ff9-a586-8b5b2dae52f9"
        },
        "item": {
          "id": "2e3b7b0f-4985-45fd-a50e-a205f82aad1e",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "0ef71640-89d2-46c0-8613-09d80d054503",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7103e523-285e-4ba4-8a51-ee434a86898b",
        "cursor": {
          "ref": "45d1acfe-9273-4938-961f-96caf00fa03e",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "a223ce11-ee15-442e-9154-bb804ea5794a"
        },
        "item": {
          "id": "7103e523-285e-4ba4-8a51-ee434a86898b",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "451f8134-357f-4038-8180-b83abd4c210f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7af3fd1e-4429-415d-b33e-3445ce07b9b2",
        "cursor": {
          "ref": "aac2c608-c574-4fd3-a373-9d8d13793d09",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "0f34eb9d-a986-458a-9bac-7a65f1264a8c"
        },
        "item": {
          "id": "7af3fd1e-4429-415d-b33e-3445ce07b9b2",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "1ffd2fdf-1c56-4751-bc45-21437513a6af",
          "status": "Created",
          "code": 201,
          "responseTime": 16615,
          "responseSize": 982
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "78adf6b1-af3a-4b36-a2ae-8e6ca6cfae9b",
        "cursor": {
          "ref": "6300f1b3-de41-4895-8971-3656505a512a",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "0f4daf2f-309a-48df-b18c-386522ff51bf"
        },
        "item": {
          "id": "78adf6b1-af3a-4b36-a2ae-8e6ca6cfae9b",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "35d5fc72-f7db-4f73-a79e-83047acbe6dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf36f33f-e59f-44fe-b4e7-fda134c14d45",
        "cursor": {
          "ref": "eb30dc8a-8a0c-47be-8d0c-29431e3a9887",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ec423904-c397-48fa-a2b9-08cdaa688dad"
        },
        "item": {
          "id": "bf36f33f-e59f-44fe-b4e7-fda134c14d45",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "fe0dcb75-db45-45a3-b1bc-e3b4549650e0",
          "status": "Created",
          "code": 201,
          "responseTime": 11181,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "8b665af7-1d13-4a52-99e0-c008d2f89806",
        "cursor": {
          "ref": "5a4f65c8-508f-4872-98d8-a524f3e6da58",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fa1dc0e9-0bc1-44a2-9f30-81876c9b48d8"
        },
        "item": {
          "id": "8b665af7-1d13-4a52-99e0-c008d2f89806",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "a43c9f9f-37b6-45eb-b483-ee1449f6a6f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16358f5d-3f7e-47d9-a777-99cee8231f44",
        "cursor": {
          "ref": "6133695f-2907-4d82-acdd-990bdba85dcf",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "68ab2f79-8725-4de3-bed5-7427f64b84f1"
        },
        "item": {
          "id": "16358f5d-3f7e-47d9-a777-99cee8231f44",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c8cc3df8-be82-434e-bf05-36dd46074a7b",
          "status": "Created",
          "code": 201,
          "responseTime": 3114,
          "responseSize": 969
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "54688bf9-f9a7-4410-a471-2ef947709cf1",
        "cursor": {
          "ref": "43c4985b-8b0c-47f1-8bc5-72bda69ecbdc",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "97ed7036-c608-4c36-9a8c-821f714fd89d"
        },
        "item": {
          "id": "54688bf9-f9a7-4410-a471-2ef947709cf1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "8f0de5ba-0972-443a-a494-5c26ec8c0832",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e32e6add-2978-4544-a647-4101ab9ed8ba",
        "cursor": {
          "ref": "4d483526-13e0-4f9b-aed4-0bce9bfa7b8d",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d12708ee-4174-4f07-8e4e-77d494b5f00d"
        },
        "item": {
          "id": "e32e6add-2978-4544-a647-4101ab9ed8ba",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "fc7d98f4-c4a4-442a-83e4-920820c55cf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a530f0ed-2cde-4130-8d8a-d9f7a819d883",
        "cursor": {
          "ref": "a232da45-1bac-4920-a830-683fc799c87f",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "f4eb4241-8299-48a5-9207-5e2110e74b95"
        },
        "item": {
          "id": "a530f0ed-2cde-4130-8d8a-d9f7a819d883",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "117ce828-cf0a-4737-be45-53093692890a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e51d85f7-3bbd-4b9c-b2fa-3204a67c3234",
        "cursor": {
          "ref": "85f24ea7-6a17-4dba-a889-130fc5aa520d",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "ace2e328-f70e-4a49-8c86-25ab51560a02"
        },
        "item": {
          "id": "e51d85f7-3bbd-4b9c-b2fa-3204a67c3234",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "4a5d693d-cc4d-4118-9e6b-5b4684fb90cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9cceb9-0b18-4f91-84e3-8fd1f98cd8ff",
        "cursor": {
          "ref": "bc967a83-4f52-401f-a2e3-c8a1abc4e37f",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "287fa44c-4691-4636-8ac9-a748710e5423"
        },
        "item": {
          "id": "bb9cceb9-0b18-4f91-84e3-8fd1f98cd8ff",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "aafc531d-49cf-4703-a4ce-0eb152df090b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5186022-48df-4fff-9e73-c75110af9926",
        "cursor": {
          "ref": "7c4205a7-bd9e-48f0-bd06-fe28b88c4826",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "2643aca2-37d2-469f-8309-8ac43710a3b7"
        },
        "item": {
          "id": "d5186022-48df-4fff-9e73-c75110af9926",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "ca54c51f-ca1b-41d5-a139-073791e30550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0866cac7-6c3c-4dfc-9099-a18dc5ca4e8c",
        "cursor": {
          "ref": "44d01ea7-bbd3-4173-afa8-4bc4aebbec57",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "5d238be7-e816-478d-8d2e-f814a75fb619"
        },
        "item": {
          "id": "0866cac7-6c3c-4dfc-9099-a18dc5ca4e8c",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "a76fffad-d71e-4e53-88f8-1d351137eae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "028bca8c-575b-42f1-8569-f3b2012ba91f",
        "cursor": {
          "ref": "856e9666-6112-4e84-a8bb-0829f92df845",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "62577e7f-7209-4d86-afe4-379134b16391"
        },
        "item": {
          "id": "028bca8c-575b-42f1-8569-f3b2012ba91f",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "9f80eb23-bcda-4735-98b3-3c487cd881c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a6d4165-269a-4b91-ba15-5927080bdf70",
        "cursor": {
          "ref": "285d9ce1-6948-468e-a651-f26a578335b5",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "cb44d060-94ed-4dee-95c7-b8c31db2edf9"
        },
        "item": {
          "id": "9a6d4165-269a-4b91-ba15-5927080bdf70",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2e688211-8d1a-47e7-b176-e647906e6052",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeaed19b-de66-43a4-bcc8-53fdea0ba12f",
        "cursor": {
          "ref": "091531d4-ff69-4f79-8109-a1cbd115cea8",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "10b66a2f-0cdd-44c6-939b-2e21977d8ab5"
        },
        "item": {
          "id": "eeaed19b-de66-43a4-bcc8-53fdea0ba12f",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e28f7509-a25b-41ba-81cc-61ee5cf7663c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6770cf17-efcf-4923-a398-ade739271be1",
        "cursor": {
          "ref": "92ad099b-1e01-408d-bbd7-1e26a8b7804a",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2bb5e92d-7da9-4853-9242-1b3a77b3ff31"
        },
        "item": {
          "id": "6770cf17-efcf-4923-a398-ade739271be1",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "61a8f934-92e0-4a73-9b3c-933ede5fc41d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d8fa371-5d88-42be-9b3a-a7797fa158e4",
        "cursor": {
          "ref": "b89a997d-3d9a-4321-966f-e0af0a9a24fd",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "4fef4f20-b29f-41c3-a41b-585bfed5bf2a"
        },
        "item": {
          "id": "1d8fa371-5d88-42be-9b3a-a7797fa158e4",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "0bd4a733-24d6-4ecb-937e-fd0b6bc98242",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e77a88-2959-44aa-8475-4f551c5f116a",
        "cursor": {
          "ref": "79073d17-75b3-4b77-9504-b118dd36765d",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "0a2bdef4-3391-465f-b224-eb717d5a0820"
        },
        "item": {
          "id": "f0e77a88-2959-44aa-8475-4f551c5f116a",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "0f941a7a-878f-4031-9c5a-3afee7832e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83804f85-625b-4b20-b1bc-069c040853ed",
        "cursor": {
          "ref": "eac0ef16-6b03-4449-9359-81a9358f108f",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "e765b55b-9a4e-4fc2-8d18-ca0fce103f70"
        },
        "item": {
          "id": "83804f85-625b-4b20-b1bc-069c040853ed",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "bbcf8222-da87-4c70-8525-4c4a2f8ab660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28603ab-a69c-4f13-820d-6c2010849ea8",
        "cursor": {
          "ref": "1d0fc116-b22d-43a3-a49a-b02f98ed59f4",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "409cb8dd-3eec-4154-9430-6b9890097836"
        },
        "item": {
          "id": "e28603ab-a69c-4f13-820d-6c2010849ea8",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "75eb774a-c2aa-4b28-a28d-48d9a6e2398d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8bcea6e-3588-4128-8074-3da82aee0eb1",
        "cursor": {
          "ref": "8f47eaa2-0dcb-4e4b-86ca-b9b935c5bc98",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "a6f28e3b-a081-42b9-89d1-5244be900ea2"
        },
        "item": {
          "id": "a8bcea6e-3588-4128-8074-3da82aee0eb1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "7c3f14e8-2dd6-4b65-962e-1992683dc27b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47c3268-893b-4aea-8e49-9a1cfb5c8dc5",
        "cursor": {
          "ref": "81ccc594-508f-4b58-a0af-5e13b374b9ea",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "cbdd7800-440f-460c-8fd0-bb09b72fd894"
        },
        "item": {
          "id": "c47c3268-893b-4aea-8e49-9a1cfb5c8dc5",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "13efe5c5-6580-4cc9-a086-775aace1945b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df478fd3-176e-41ce-b866-e0fff2e102ee",
        "cursor": {
          "ref": "e20a6721-1ee4-4b78-9b12-8fb359189fe7",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "c5b2de1b-7af4-4def-8627-5b799f3525a8"
        },
        "item": {
          "id": "df478fd3-176e-41ce-b866-e0fff2e102ee",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b0fc1280-d7a5-49cf-b0bc-d9d680b9ca6e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77545c23-e70c-4107-9dcd-122cab0fedfe",
        "cursor": {
          "ref": "6d8df0e3-afb2-4694-9fa0-32e5b8ca30ed",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "a39f4393-a92a-4f09-bd6b-fb603a1ca1fa"
        },
        "item": {
          "id": "77545c23-e70c-4107-9dcd-122cab0fedfe",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "13c620d4-8768-4573-9769-c17050903ce2",
          "status": "Created",
          "code": 201,
          "responseTime": 3030,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "52fca97d-4107-49ab-8eb5-7365e0c820c6",
        "cursor": {
          "ref": "73b3f0c8-c861-4f01-9541-2545eabf29ce",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "96d68995-1cdc-4f1e-9104-1acc25317886"
        },
        "item": {
          "id": "52fca97d-4107-49ab-8eb5-7365e0c820c6",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "d6b3f987-7d89-4345-befc-4fdcf717cc5b",
          "status": "Created",
          "code": 201,
          "responseTime": 3259,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "8f5dc135-d7b9-4e25-98f4-58dfea3bde97",
        "cursor": {
          "ref": "a9038294-f79b-4167-8f9a-eba6a9061e75",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f755e0c6-b24d-4992-b2ed-a07033159c9d"
        },
        "item": {
          "id": "8f5dc135-d7b9-4e25-98f4-58dfea3bde97",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "413d4482-5cd0-4c55-be4c-3f47dc88cd55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0201780-ccc8-4cb1-8ea7-a46e4978ef56",
        "cursor": {
          "ref": "a50a116d-df59-4b70-b63b-0536df90906c",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "5a9cb052-8f06-4b3c-a42c-db2e8b4b9c63"
        },
        "item": {
          "id": "d0201780-ccc8-4cb1-8ea7-a46e4978ef56",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "1bce5e86-60b3-468b-9c19-021e168cd42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d92b3f6-a77d-4867-a487-fa0a98925d61",
        "cursor": {
          "ref": "b3f8b05c-1b51-469f-9882-9f34711989a5",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "be28525e-efb8-4446-bea1-953bb3b8693a"
        },
        "item": {
          "id": "2d92b3f6-a77d-4867-a487-fa0a98925d61",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "dbec471d-fcad-4d4f-bc6d-0a4cd7b50793",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77baa09f-704d-442c-8953-7afee0192ad6",
        "cursor": {
          "ref": "364435d6-0d9a-4fd5-90a6-f2ba11fd5044",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "3c816f0a-efff-4146-b5cb-d7f9afb94cb6"
        },
        "item": {
          "id": "77baa09f-704d-442c-8953-7afee0192ad6",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "46e32b05-5678-4c2d-9cc0-a330d498a9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160a4d43-30b9-4494-8278-1b09cf8673f0",
        "cursor": {
          "ref": "da24191e-3f99-481e-adca-e16e7c2a10cc",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "7030f4eb-4b38-43c2-a1f7-868c5613ec03"
        },
        "item": {
          "id": "160a4d43-30b9-4494-8278-1b09cf8673f0",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "3b22117b-e580-4bf1-b123-df57530e69e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ebd477-b636-4e9f-b85a-4c9c1269802a",
        "cursor": {
          "ref": "3f532f0a-dc1c-4b56-9f0b-4147ea97ecf2",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "3ea23665-e426-40bd-96ee-b4a745fa8034"
        },
        "item": {
          "id": "35ebd477-b636-4e9f-b85a-4c9c1269802a",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "620c9d0a-8677-4b0b-ba6f-ac852d453a99",
          "status": "Created",
          "code": 201,
          "responseTime": 3282,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "7ed5e18d-392a-47a4-9be1-02558a8b5f2b",
        "cursor": {
          "ref": "f8871a38-bff2-4c3c-b3a9-69a229d5d8ff",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "e42de5f1-f6e4-4a87-ba72-ef24e03794a9"
        },
        "item": {
          "id": "7ed5e18d-392a-47a4-9be1-02558a8b5f2b",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "46f38ba3-db5b-4fb6-bddb-02348c3d8f63",
          "status": "Created",
          "code": 201,
          "responseTime": 2299,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d1a03b83-8382-45f3-b514-83447886689f",
        "cursor": {
          "ref": "b216baf9-8ca1-48ba-a824-93ee5d41d7de",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "6c12506b-1680-4d48-9ceb-1d8fb156d946"
        },
        "item": {
          "id": "d1a03b83-8382-45f3-b514-83447886689f",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "77d5f1a4-8937-43b2-9086-4987654368d9",
          "status": "Created",
          "code": 201,
          "responseTime": 3525,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8419a85b-32a4-4dc1-a4a0-63e51e9cbbb2",
        "cursor": {
          "ref": "08ca392e-35e7-4b8a-9fbb-f84aaf16b4b1",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "96238b57-3c42-40c9-9e37-4fc15a932c35"
        },
        "item": {
          "id": "8419a85b-32a4-4dc1-a4a0-63e51e9cbbb2",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "64fd577b-c3c9-4926-81a6-56a7ed4e7e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64935a4f-3588-4410-9a31-d67de1ec5a85",
        "cursor": {
          "ref": "6dc6cf37-0bd2-43a0-bac9-02d72c64c3a7",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "9f99e6d6-2f3b-4d2a-a219-608e1eb8bc5a"
        },
        "item": {
          "id": "64935a4f-3588-4410-9a31-d67de1ec5a85",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "89d3c6c4-8b67-45fd-b8ff-d79439aec69a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29701d80-d851-47d1-b6c9-ac17b323b51c",
        "cursor": {
          "ref": "3967d11a-5dec-4ed8-be10-0a660d51b787",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "8c219b88-76c1-469b-8285-a3c6979663c9"
        },
        "item": {
          "id": "29701d80-d851-47d1-b6c9-ac17b323b51c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "ee12ab86-cac6-418b-9f8e-dc8bd255c5b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "605efff9-e35c-4603-921c-1555ee5f5177",
        "cursor": {
          "ref": "b568e195-9308-4862-a266-8f282a433a68",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "4e8b1ec8-70df-46d2-8693-df6cbafe22b4"
        },
        "item": {
          "id": "605efff9-e35c-4603-921c-1555ee5f5177",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "a6458a38-4b66-4fb9-8d7b-47efffd4de71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cf54f7-2f77-4794-8053-b4666b053243",
        "cursor": {
          "ref": "d1c83be5-41fa-4e6d-96f8-8302c48c28d2",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d1466e26-b078-4700-bd88-ca23820b5d06"
        },
        "item": {
          "id": "e2cf54f7-2f77-4794-8053-b4666b053243",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "e8537b3e-ac88-49c0-8162-e6e58d47612a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6226fedb-23bb-4873-abde-31c6ad24a4a6",
        "cursor": {
          "ref": "f9fff2ba-bffc-4977-98be-c7d4510075a5",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "a6009ad3-39a2-4eed-b443-0efe2d7fbe6d"
        },
        "item": {
          "id": "6226fedb-23bb-4873-abde-31c6ad24a4a6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "e3c2ba69-8ddc-4e5a-aab0-bf881fabf9bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98614f14-a505-4fd9-9d65-a944afb49021",
        "cursor": {
          "ref": "c8f99b3a-a34e-4f6e-9042-504de69ec592",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "405ee722-dbf0-4af7-8f05-e7e78f2bd0d3"
        },
        "item": {
          "id": "98614f14-a505-4fd9-9d65-a944afb49021",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "c705c38f-80e1-4b20-8415-939a4f362bbf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b231d3e-b525-4af7-8b5d-075a28ac90d2",
        "cursor": {
          "ref": "b1bc03f9-d3b3-4828-a9f5-9033198b67e6",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "181b2fa7-47f3-4e29-b86b-a005f7034f3d"
        },
        "item": {
          "id": "2b231d3e-b525-4af7-8b5d-075a28ac90d2",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "96f48794-2350-4554-bee8-7d216a0eb5f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0654f459-1a5d-4753-9187-706154dde192",
        "cursor": {
          "ref": "5b3c2951-cd26-43ea-828b-22b60dada7e5",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7f73b56e-23f6-4c15-a497-f71d55358e9a"
        },
        "item": {
          "id": "0654f459-1a5d-4753-9187-706154dde192",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "bbc8cab4-149f-42ca-9823-feed0f8edc4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b78e54c-e101-4455-8ec4-cf9f94995562",
        "cursor": {
          "ref": "ce4abeee-670a-4753-a1df-16f555c7b160",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c29a14c7-cd68-40e9-b7c3-e9cc35506163"
        },
        "item": {
          "id": "1b78e54c-e101-4455-8ec4-cf9f94995562",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "7600ae88-c6bd-48ec-9d3c-500911ab9a36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b49e9631-2a21-492c-8701-88a5c550d0bb",
        "cursor": {
          "ref": "794691e1-bb46-44a5-bf01-f91295331a45",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "60261609-63d2-4cca-a27b-6ef087786456"
        },
        "item": {
          "id": "b49e9631-2a21-492c-8701-88a5c550d0bb",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "3669adb1-dd1b-40b3-bf67-7a2802092d00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d145c2f3-b0d5-4a10-a2fa-f2fcd6f350bf",
        "cursor": {
          "ref": "39aa8136-0ca4-4200-a14b-0c50e8e7fd39",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "708539b5-59a2-45dc-b467-60bf38a3d38e"
        },
        "item": {
          "id": "d145c2f3-b0d5-4a10-a2fa-f2fcd6f350bf",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "6b8fb19c-3995-4290-98c6-2d29a627d28a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8758ecf-da2a-4056-bafd-dac8c7d35d83",
        "cursor": {
          "ref": "26d9f807-9a29-422a-9b8b-404e05f271d3",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "46020c16-47ee-4f66-9c46-554c42dd8268"
        },
        "item": {
          "id": "b8758ecf-da2a-4056-bafd-dac8c7d35d83",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "082a6a2c-ba24-4360-8f68-249df137fa49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a987a8a-0875-44ff-a7ee-03d31141f45d",
        "cursor": {
          "ref": "22995de9-50e4-4c3c-807a-2b8224b36b98",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "7bf237f9-dfc5-40d5-a370-9dadd2ea7b9d"
        },
        "item": {
          "id": "2a987a8a-0875-44ff-a7ee-03d31141f45d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "a8fa0a56-787b-4ee4-a144-121b6e04685c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce50742c-0c22-40f9-8238-09c4fe4e7aa3",
        "cursor": {
          "ref": "73d573bf-52ff-4732-8680-210f7a681cef",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "f4bac461-de6b-48fb-82cd-c8d5ef68c1b6"
        },
        "item": {
          "id": "ce50742c-0c22-40f9-8238-09c4fe4e7aa3",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "840bb999-8d34-4d6c-8a62-c306336c51e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be44c90e-80db-4268-9f1b-f5d9756d59a9",
        "cursor": {
          "ref": "87bab666-74a0-42cb-bb7c-65870ab24250",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "a34c4779-2bc5-4be3-8195-a0264d0ba6bb"
        },
        "item": {
          "id": "be44c90e-80db-4268-9f1b-f5d9756d59a9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "6fdc5ab2-7177-4981-9e38-a7db8d91c296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "767b0095-6290-462d-a3a6-97b6d43321f9",
        "cursor": {
          "ref": "03075188-3c26-49ee-bda6-bbda64801a49",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "fbe301cb-64b2-49ca-9708-a6e24d4b92b4"
        },
        "item": {
          "id": "767b0095-6290-462d-a3a6-97b6d43321f9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "4a3b4182-5232-4ce5-82ae-0051e1496c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aa4613f-c954-43b0-bcde-8b1433773764",
        "cursor": {
          "ref": "22e4639b-acc4-4475-92c2-e1ac8dc77b8b",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "55f608a0-2fac-4b1a-8841-de1f79d2581c"
        },
        "item": {
          "id": "5aa4613f-c954-43b0-bcde-8b1433773764",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "b1a563da-432d-40c7-a362-e7e8e872ecbe",
          "status": "Created",
          "code": 201,
          "responseTime": 2847,
          "responseSize": 977
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:70)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "f7c28953-7a95-424e-8410-9baca3d3e487",
        "cursor": {
          "ref": "e84eab16-1673-4feb-a8bc-fa4727fb1563",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "ab345de3-f432-4cd0-be5d-4a5702c08a50"
        },
        "item": {
          "id": "f7c28953-7a95-424e-8410-9baca3d3e487",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "f8a0321b-aee7-4301-9a49-52af3e241670",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5472fc2-9dac-42db-9420-a2e076d625e5",
        "cursor": {
          "ref": "15f1934f-f02a-4989-97b5-6f087fc8c261",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "1affc344-c201-4c6b-833b-48e4e4bddce1"
        },
        "item": {
          "id": "c5472fc2-9dac-42db-9420-a2e076d625e5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "fcc09ad9-84bd-44ae-8fd9-a4548d9dd729",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d10325f-8560-43b6-8e3f-dca7bb3f7d49",
        "cursor": {
          "ref": "5e0410ad-3d74-463c-8187-51ca0c143023",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "470a2dca-bfad-4097-9659-c79cadbf444c"
        },
        "item": {
          "id": "1d10325f-8560-43b6-8e3f-dca7bb3f7d49",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "082d3689-d3aa-4e01-8fdc-1b1f33be43b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2457e517-386b-4c04-abb8-de8e99945a6c",
        "cursor": {
          "ref": "fd5e5f00-d6da-492f-b0ff-59f553ad7094",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "54d1346f-e281-41f6-ac61-6462219990d3"
        },
        "item": {
          "id": "2457e517-386b-4c04-abb8-de8e99945a6c",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "1aed8c5f-0b59-4ca6-a7dc-c460bc05d0c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 200,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "446fc3d3-1176-46c2-a67c-d687d4524087",
        "cursor": {
          "ref": "2b549db9-2092-4ea4-87a1-846119afd0f7",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "2737bdca-abe9-40bc-a495-71c4a4b2993c"
        },
        "item": {
          "id": "446fc3d3-1176-46c2-a67c-d687d4524087",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "64254216-b5a6-4500-9f67-13df8953b084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09840f35-32f2-4306-abc3-7e9e78a357fd",
        "cursor": {
          "ref": "fddae4b3-b246-47d5-9eb6-c16d7ee91573",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "04ebfe8b-2a24-44d3-ab6c-4776e8175dd8"
        },
        "item": {
          "id": "09840f35-32f2-4306-abc3-7e9e78a357fd",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "83f7401a-06be-4ee3-b7c4-51d5d62d2789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad7cbac4-fe59-4509-8304-e2a2aa8eca33",
        "cursor": {
          "ref": "23827f65-495f-4f4d-87c7-c0e84837347e",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "a7174b10-2c2a-4845-bda8-e2299915047b"
        },
        "item": {
          "id": "ad7cbac4-fe59-4509-8304-e2a2aa8eca33",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "10b69cf3-d928-4c27-b0a9-fbcb39ff9a51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da355598-ecf9-4810-8e2c-d6c7adc543c6",
        "cursor": {
          "ref": "0be3a317-ed40-4db7-86e7-f71b622f93b8",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "8efb7b5c-230e-445f-b613-840772379609"
        },
        "item": {
          "id": "da355598-ecf9-4810-8e2c-d6c7adc543c6",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8c717c4c-1365-4451-8133-2ab71a2b8ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41bd08e-b2d6-4565-8079-93de29c7c875",
        "cursor": {
          "ref": "a11b9152-ba2e-41ab-b249-f9820e8e99fa",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "bb3b406c-8c67-46d6-8cf5-85d897b73e1f"
        },
        "item": {
          "id": "d41bd08e-b2d6-4565-8079-93de29c7c875",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "34e52c2c-53c1-4686-b4aa-751e26aaab5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aa19c7d-a78d-4e33-ad98-6c79e6683f4c",
        "cursor": {
          "ref": "71a19bd4-52bb-4190-8e7c-c0d8c2096204",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fdab10ef-4819-4990-b586-94aa74514f80"
        },
        "item": {
          "id": "0aa19c7d-a78d-4e33-ad98-6c79e6683f4c",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f9e9fc96-d399-4aa3-857d-d27a1aa81387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6d0130c-ab9a-46af-b1ee-2cb939d89f1b",
        "cursor": {
          "ref": "fbd2b876-876d-42df-bd36-89e6265ec72e",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "3f2d9338-9c17-46d1-85c4-73ae38ad5ee4"
        },
        "item": {
          "id": "b6d0130c-ab9a-46af-b1ee-2cb939d89f1b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "321bfc92-a607-4330-81e8-2f37fa1e0c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91be6fb1-ce35-43bd-9f38-90584e4bac78",
        "cursor": {
          "ref": "2fb5ae75-b61c-46b6-bf97-af4cf699db77",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "96dcbe78-4903-4bf6-9079-657b58a3398a"
        },
        "item": {
          "id": "91be6fb1-ce35-43bd-9f38-90584e4bac78",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "d247650b-7c42-406c-a1e4-e068cc44f218",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9a95d5b-8f62-4814-ba8c-613fb43001b5",
        "cursor": {
          "ref": "9e7f2b70-8ff8-4106-a6fb-085e12f96848",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "65a0495e-5bd2-417c-aa2b-e144d034fb18"
        },
        "item": {
          "id": "b9a95d5b-8f62-4814-ba8c-613fb43001b5",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "be01de17-bd2c-4b57-a75a-d51986770eb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 127,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2159d28a-39ab-4cf0-86d1-367b1e86f8ab",
        "cursor": {
          "ref": "bfb35681-818d-40f5-8cfe-0bbdd03d89ff",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "6089bcd2-9965-4b34-8e0e-1513212c9655"
        },
        "item": {
          "id": "2159d28a-39ab-4cf0-86d1-367b1e86f8ab",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "1634387a-99da-4ef2-a08e-2cc944d741d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d78eaf3-1ace-403a-80d5-fe578d6a7f1b",
        "cursor": {
          "ref": "db1bb831-9c77-4522-9939-540378e1fd1a",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "390c6422-7df9-43f1-b9ec-9d4d523abf4a"
        },
        "item": {
          "id": "3d78eaf3-1ace-403a-80d5-fe578d6a7f1b",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "f5402a04-a95d-45e8-b476-1e0142d02314",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7132f232-b549-4838-a971-94f7cf1b4903",
        "cursor": {
          "ref": "63e62eaa-4941-4c8c-b7fe-79074ad2b067",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "261a2252-3fda-49dc-8fd8-cdab7b519d30"
        },
        "item": {
          "id": "7132f232-b549-4838-a971-94f7cf1b4903",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3521adb6-1477-416f-b421-b6970b4c464e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d72b577-ee9c-4a52-9ba8-f969f4c8ccef",
        "cursor": {
          "ref": "2bcfefb4-b991-4544-b869-e0ae4c1e4020",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "0e646fb8-4634-430b-b2a4-7637d0771569"
        },
        "item": {
          "id": "9d72b577-ee9c-4a52-9ba8-f969f4c8ccef",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cf79a7f5-64b3-4ebb-b3c7-c460b3fbd99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32dd0ee-ac76-4f90-b370-c66850e1f18c",
        "cursor": {
          "ref": "5467486d-ebb9-457f-b535-9a8518c8051b",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "4322bc88-cebb-40b8-98ef-6f5dc5c29da5"
        },
        "item": {
          "id": "f32dd0ee-ac76-4f90-b370-c66850e1f18c",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "acf31796-2bed-44eb-bf08-a35945c8e2cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77bc19f0-7a5e-4727-a481-22d7aaeb51a9",
        "cursor": {
          "ref": "33544b5c-be72-43ed-9c4e-39915a162d71",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f71e8fa9-f99f-4c02-960b-cbecb55be95a"
        },
        "item": {
          "id": "77bc19f0-7a5e-4727-a481-22d7aaeb51a9",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "2bc204eb-ce09-4a65-9890-3fba4295bb12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbcb1ad6-d27a-4019-a318-76d7b7ea36b5",
        "cursor": {
          "ref": "8ce095f1-7204-4b1b-8c74-b7fdf63d4c85",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "0b97254a-c802-4a6b-8982-dc7945c5e0ea"
        },
        "item": {
          "id": "cbcb1ad6-d27a-4019-a318-76d7b7ea36b5",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "7aa3bba0-3bff-4f23-959b-48f3002797e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3ef41c4-5d30-4379-a083-96f77bba0c7b",
        "cursor": {
          "ref": "1ac5d90b-761d-4909-ab2b-12691fa45344",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "95b0d8f6-a8a4-4a16-8172-1c79cbc9aa26"
        },
        "item": {
          "id": "d3ef41c4-5d30-4379-a083-96f77bba0c7b",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "129a1299-9c07-48d4-9d42-5a1d4d1a6905",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f75703f-689d-45bd-bf7e-5f0ea736ca3f",
        "cursor": {
          "ref": "395732aa-84e7-4973-a07b-efb5b7cbcf10",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "5fab6878-6b30-44f7-9621-e6589ee6dbb2"
        },
        "item": {
          "id": "8f75703f-689d-45bd-bf7e-5f0ea736ca3f",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "e796dc94-8c39-4198-aeae-084a1ca6db8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c233c706-fefe-4e87-bfe5-40bc257176d5",
        "cursor": {
          "ref": "04f2d0af-a2ba-4870-a90f-ebbae1c5401d",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "e4a6d15e-b746-4459-8790-0b347915cea9"
        },
        "item": {
          "id": "c233c706-fefe-4e87-bfe5-40bc257176d5",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "5ec166c2-f14c-4319-bc77-dac12db7c38c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac323b32-398b-4df2-b54a-2ad44200c882",
        "cursor": {
          "ref": "7a197191-0988-41a5-8c8a-bf9d74b62d4e",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "cd3fafb2-74f8-4d73-a460-292488487aae"
        },
        "item": {
          "id": "ac323b32-398b-4df2-b54a-2ad44200c882",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "7ef2ca6f-9c19-4f76-9b95-b841e3714334",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5c626245-7edb-448e-9141-a7a0372e933e",
        "cursor": {
          "ref": "cb1ec989-21b7-450b-8598-2e9fc3ce3b7d",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "630bd243-4fe4-4af3-9307-a21f0603db68"
        },
        "item": {
          "id": "5c626245-7edb-448e-9141-a7a0372e933e",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "1625e180-4466-4975-a12d-79ff3fe6dc4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2782b9a5-a559-4bfc-8a78-244efd88a91a",
        "cursor": {
          "ref": "17feee7d-e0a8-4b20-9022-5f9ba3853112",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "ce3fa2f9-184d-4306-9bc6-b75037c587e4"
        },
        "item": {
          "id": "2782b9a5-a559-4bfc-8a78-244efd88a91a",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "bfc1d8cc-214a-4d35-ae98-080610e2b001",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4e31fe-3a97-4e13-a1cb-fbe3cfe14714",
        "cursor": {
          "ref": "9259b958-903a-475d-aa2b-38a654aca3c1",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "0d36c600-4e1e-49ce-9024-9a7c19d7b33a"
        },
        "item": {
          "id": "ac4e31fe-3a97-4e13-a1cb-fbe3cfe14714",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "696ece07-c8af-4537-873e-3da3a22f0322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec4a4cb9-fdc8-495d-9941-9911b4b4308d",
        "cursor": {
          "ref": "5a0a49d2-0546-4068-bdbb-a592513b7b2c",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "69c8235d-3d33-4466-a0fd-f9c32781b414"
        },
        "item": {
          "id": "ec4a4cb9-fdc8-495d-9941-9911b4b4308d",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "75de6911-a761-4e45-8af5-59cbf262ccbe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a062e996-a41b-4358-98cc-79ee43134a74",
        "cursor": {
          "ref": "a34fe4fd-03da-4ed5-a75a-5ef8763fb769",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "201c9f14-fc5b-4a68-8054-d77f82c548cd"
        },
        "item": {
          "id": "a062e996-a41b-4358-98cc-79ee43134a74",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "3272e435-b9d9-4255-bed5-3f70effe4c10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760d2ce4-55d2-42ba-b78b-448c0c0150fc",
        "cursor": {
          "ref": "a93bc481-fa44-4fcf-94bf-c825724a27e1",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "10a3bb63-9864-4991-a337-0f2b8ab54423"
        },
        "item": {
          "id": "760d2ce4-55d2-42ba-b78b-448c0c0150fc",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "a6984c31-806c-43ec-aec4-89eeb5b8196b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1375eb1e-ea4b-4493-b444-065bdf47290a",
        "cursor": {
          "ref": "6cbd411e-0945-479f-b049-a6c53b50f73d",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "70a6207f-1deb-4511-9370-c9f389c6bb66"
        },
        "item": {
          "id": "1375eb1e-ea4b-4493-b444-065bdf47290a",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "efabc25c-8d82-40bc-b4e5-b4e1d19ba236",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 38,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "54e301e8-d914-4b4b-9aa5-bf31c2204adb",
        "cursor": {
          "ref": "1b011649-b0b2-4fdd-92e4-bf07a8652400",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "61d1cd42-ec3c-4fa4-9a31-f700cb66748b"
        },
        "item": {
          "id": "54e301e8-d914-4b4b-9aa5-bf31c2204adb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "788164a4-42f6-44b2-a17b-241031543b8d",
          "status": "Created",
          "code": 201,
          "responseTime": 2178,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc7a857e-45a5-4c45-b645-be63d3c9a695",
        "cursor": {
          "ref": "6e2443a0-7ca8-44f9-93e2-67c868a6fdad",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "491b3cbe-8c1e-46cc-a6ed-83f05e45ccce"
        },
        "item": {
          "id": "cc7a857e-45a5-4c45-b645-be63d3c9a695",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "e703d65a-01e6-497a-acfc-831387b97be3",
          "status": "Created",
          "code": 201,
          "responseTime": 2500,
          "responseSize": 985
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "a919bb80-c5e0-4f5d-9233-0746f414729b",
        "cursor": {
          "ref": "da6695d3-abad-4f64-a753-0470cb787a7b",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "b7a7bb30-3645-4424-b3d4-5e917508f9ef"
        },
        "item": {
          "id": "a919bb80-c5e0-4f5d-9233-0746f414729b",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "320734ec-b9ec-4d3e-88e1-88d334024f9a",
          "status": "Created",
          "code": 201,
          "responseTime": 2751,
          "responseSize": 971
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8a9bb05-25b8-4f22-ae2f-9ce39975439a",
        "cursor": {
          "ref": "63a3368a-eeef-40e1-8bf6-4953df401cc9",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "68a7679e-cd08-448a-b4bb-bba985f55198"
        },
        "item": {
          "id": "b8a9bb05-25b8-4f22-ae2f-9ce39975439a",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "b46a8058-48ad-4fbb-8394-2a30aff72b38",
          "status": "Created",
          "code": 201,
          "responseTime": 2553,
          "responseSize": 991
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "98266ea0-8286-49c5-92c5-2da986ea9ee0",
        "cursor": {
          "ref": "08d52748-2cc4-4c43-8496-e9dfadbbc754",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "ac285076-48de-4f5f-80f6-50ce74986dc0"
        },
        "item": {
          "id": "98266ea0-8286-49c5-92c5-2da986ea9ee0",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "984b4bdb-bc35-489e-98f2-11c29e43eb6c",
          "status": "Created",
          "code": 201,
          "responseTime": 2598,
          "responseSize": 970
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-07-08T00:48:15Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-07-08T00:48:15Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:106)"
            }
          }
        ]
      },
      {
        "id": "dca5656f-0c6a-4547-a448-794e06a5f794",
        "cursor": {
          "ref": "72b1cbba-f14e-4483-bbbc-2aa0bdbe1756",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "1897f147-a4bf-47fe-8882-3bd5acc80702"
        },
        "item": {
          "id": "dca5656f-0c6a-4547-a448-794e06a5f794",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9ce033af-bb3f-4be4-b1a9-b4ca848a36bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:107)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          }
        ]
      },
      {
        "id": "ca3dd197-6edb-40e2-9e22-42499afe446f",
        "cursor": {
          "ref": "ab58c302-6840-4571-8d27-97df9e4f570e",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b6e2db10-05bf-43cd-93ad-e73a92004a44"
        },
        "item": {
          "id": "ca3dd197-6edb-40e2-9e22-42499afe446f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "d57b9008-be67-41c8-a9d9-3878cbaa921f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 207,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2492bb62-c212-45cf-b162-221c958e6547",
        "cursor": {
          "ref": "c78138f5-d282-47d5-9622-91e4aada1255",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "46fb1bba-5c4e-4fda-a8d9-a4e2838fb988"
        },
        "item": {
          "id": "2492bb62-c212-45cf-b162-221c958e6547",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "49205aa6-8112-402a-879d-75a47928369c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62d54804-a910-4237-bf15-2e01607f6891",
        "cursor": {
          "ref": "620566c1-1abc-400f-8a94-ed624f80c510",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "7474e12c-f14e-4249-b1c9-bd4b2845e42c"
        },
        "item": {
          "id": "62d54804-a910-4237-bf15-2e01607f6891",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5b48a8ae-ef38-455f-b1f6-0a91ac270998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3709fa72-8689-4a40-8a0c-d01c89d80579",
        "cursor": {
          "ref": "24bc5ceb-66a5-49b4-abce-f88b215e4586",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "23f82608-45cb-400a-9748-ba66c7518e68"
        },
        "item": {
          "id": "3709fa72-8689-4a40-8a0c-d01c89d80579",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "53c54988-3323-4ef6-bdf5-5d461ec5a046",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6623cd5b-fa10-4ab0-8bd3-b21378b4272e",
        "cursor": {
          "ref": "963870ea-577f-4212-8d8f-574fa829cfb4",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "3a3fdbce-caab-46af-826c-2a633262db65"
        },
        "item": {
          "id": "6623cd5b-fa10-4ab0-8bd3-b21378b4272e",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "ba920159-64f1-41ce-8b11-e546d635c166",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b82aa1-7208-4c4b-b32f-873cd71bb721",
        "cursor": {
          "ref": "5c62f8e0-7954-46d4-982e-561b6b4f8512",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "9b5aeb5b-840a-472b-92ab-96cfee5bedf0"
        },
        "item": {
          "id": "c5b82aa1-7208-4c4b-b32f-873cd71bb721",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "1578a5a9-ee57-4e0c-840a-9b9f4a1e36cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 269,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf570d14-ad2b-4f68-8a9a-f7b9566f067c",
        "cursor": {
          "ref": "d2fbff89-540a-4d30-a488-5115299f6610",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "c6aaae09-ab86-46a2-a35a-15c68382224c"
        },
        "item": {
          "id": "cf570d14-ad2b-4f68-8a9a-f7b9566f067c",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "1114aab6-20e4-494f-8683-6382a241aa4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c53750eb-3795-4146-9b8d-d59878c17161",
        "cursor": {
          "ref": "341d8a49-d105-4c00-ace3-3c30f9999dc7",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "32d11819-47ba-4c33-af35-098885824391"
        },
        "item": {
          "id": "c53750eb-3795-4146-9b8d-d59878c17161",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "c66d385d-2cec-4227-b156-de0fa32a30c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c88843bc-9cfd-4868-b640-16537b9f2ab3",
        "cursor": {
          "ref": "2fac81aa-cdcd-438f-971f-f708d462fbab",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b5f6ac6f-35cf-4ebb-ad59-80bf404159cf"
        },
        "item": {
          "id": "c88843bc-9cfd-4868-b640-16537b9f2ab3",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "47e1e8a4-869b-4e80-b6db-521e634bec0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c50f8bcb-18a0-437f-8902-877aa0294085",
        "cursor": {
          "ref": "f4dbd3bc-a738-457e-8237-0bf333998974",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0d984555-babd-4dd2-bc29-24dc7d37f69e"
        },
        "item": {
          "id": "c50f8bcb-18a0-437f-8902-877aa0294085",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8564bc60-f906-4113-842d-52ea0493980f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fea74c37-96d8-4225-9852-afb9944070d5",
        "cursor": {
          "ref": "84f80b2b-2154-4ec0-9924-6cb589ba3c44",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3c2be1e3-972a-49d8-a336-e8c1651ee8a0"
        },
        "item": {
          "id": "fea74c37-96d8-4225-9852-afb9944070d5",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "12e5dc4f-685d-4ce1-a4f3-d6fe2d209a87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6633e4a7-b2f8-462c-a6fa-d20863de91f6",
        "cursor": {
          "ref": "d342cd00-ed1b-41d7-8b76-bb1e35dbf318",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "736614fc-69b0-449a-8af8-3e0c2de3b031"
        },
        "item": {
          "id": "6633e4a7-b2f8-462c-a6fa-d20863de91f6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "861b3395-b781-4c2c-b780-a9831b3c1a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da946329-8fd3-43a3-b718-5a20422f327b",
        "cursor": {
          "ref": "bee038e5-5b68-4c87-a5cf-05c4c90d5f9f",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3c4f007a-3973-4465-af0e-952d701c2845"
        },
        "item": {
          "id": "da946329-8fd3-43a3-b718-5a20422f327b",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "39c195d0-49ab-469f-bd0c-bfe47c66f138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2e59c51-5227-403e-829d-1235d758cab6",
        "cursor": {
          "ref": "7d22f62f-8c69-463b-a0a4-143ceadb02be",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "8e3366c2-7a2d-4759-ba75-a9562aebed23"
        },
        "item": {
          "id": "d2e59c51-5227-403e-829d-1235d758cab6",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "52438c46-215d-4c64-85b0-56182bf70169",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31933be9-b991-437d-893c-e50ed9488d1c",
        "cursor": {
          "ref": "142965fe-2f14-46e4-8fc0-34831f82d61c",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "45008e72-f543-4b9c-bfa2-e01c84d6389d"
        },
        "item": {
          "id": "31933be9-b991-437d-893c-e50ed9488d1c",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "6a17fc54-0faf-46fd-a332-767246c95213",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "736c9bfe-fbfb-4e8d-aa97-c69685df6d5a",
        "cursor": {
          "ref": "9365447f-db64-40cf-9126-d69a936a47ab",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "41fb1ead-6e37-4cf9-8073-ac2bc3c17677"
        },
        "item": {
          "id": "736c9bfe-fbfb-4e8d-aa97-c69685df6d5a",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "bc9442d9-01e5-4972-b368-b1a67f2b03db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ad0d372-8997-4428-ac6f-b9591e5fba6a",
        "cursor": {
          "ref": "9e5113ed-0368-48d1-9d91-e2146d2661cf",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "4b9a75c1-e278-4a36-9838-b2db253d5074"
        },
        "item": {
          "id": "7ad0d372-8997-4428-ac6f-b9591e5fba6a",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "59035e53-060b-48a9-9d56-6a24a006100e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55197b6e-e745-4bb9-a5e9-ab60d7369630",
        "cursor": {
          "ref": "3d35f38c-b849-440d-a148-9f0b92a973c0",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "f0d7b38b-f3a5-4525-9580-13cab2d9b000"
        },
        "item": {
          "id": "55197b6e-e745-4bb9-a5e9-ab60d7369630",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "00932419-7ba4-4039-8ba2-1be078da966e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69eb7542-3197-4a8d-b2a2-f85bc559bcf1",
        "cursor": {
          "ref": "0f8d33f8-ce65-4d1c-888a-91b1758536e2",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1ff67e54-8271-426f-abda-9ab443c53bcd"
        },
        "item": {
          "id": "69eb7542-3197-4a8d-b2a2-f85bc559bcf1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "3733c370-091f-4847-b94b-fca6377a1c8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32ea6fe1-dbc5-46fa-b597-f604c6c50b41",
        "cursor": {
          "ref": "ff4d4b17-f595-486d-8601-8af9f3c40a64",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5ed8922d-b9fb-4990-8420-698a58386491"
        },
        "item": {
          "id": "32ea6fe1-dbc5-46fa-b597-f604c6c50b41",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "55d2a588-c08a-4521-94f7-d52deccd44cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a6b6a0d-294c-4e0a-84eb-04fd3ac7c48e",
        "cursor": {
          "ref": "3fcc24b5-5b34-4158-87c8-760f83515f26",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "4da94736-b784-47e0-8976-556a67caaac1"
        },
        "item": {
          "id": "2a6b6a0d-294c-4e0a-84eb-04fd3ac7c48e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "43d049a1-4898-42de-83ce-21c37f1b56aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b7c53be-ac18-4a4d-b93b-96c6c2b3cae4",
        "cursor": {
          "ref": "0e7fcfb9-6efe-432c-99c6-d08359ecfb61",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ffafc600-f868-4e79-96da-f9491deb2528"
        },
        "item": {
          "id": "8b7c53be-ac18-4a4d-b93b-96c6c2b3cae4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "06d004ab-0db6-44d6-b046-5cf0a9b3acf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32c1399a-9fca-4bca-9ea4-7898875e8e83",
        "cursor": {
          "ref": "ed97e83e-b4ff-4511-bfae-50e1fc1e7b9e",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ea23d37a-7066-4115-b1de-95bf33339983"
        },
        "item": {
          "id": "32c1399a-9fca-4bca-9ea4-7898875e8e83",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "523eb78e-8283-43d4-aec5-10be7206087b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d37289-0422-43d1-a06a-1bf9060fc5d3",
        "cursor": {
          "ref": "e2a9c9ab-0c03-4aba-9bce-a5e1fedef4ab",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "08f51bdd-fc09-42dd-8a78-6e3bd9a44fc0"
        },
        "item": {
          "id": "e4d37289-0422-43d1-a06a-1bf9060fc5d3",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c545987e-24d7-4b89-bcd9-ebdffcc86c8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4447d94-b012-4b14-819e-b5c02a74ef5c",
        "cursor": {
          "ref": "a569322f-c098-4e98-9599-53bf72df8a5a",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "59a8944b-1011-48f5-a0a6-2a11c7c3ab0e"
        },
        "item": {
          "id": "e4447d94-b012-4b14-819e-b5c02a74ef5c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "9a3493ce-9edc-4154-805e-fd52f2f05ac6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf90b10-4fe6-4a3a-9eaf-6457cb090ac5",
        "cursor": {
          "ref": "7f05820f-8928-4ded-a90d-ce5189308590",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "c279726c-adb9-4443-95d2-f9c962c94f5a"
        },
        "item": {
          "id": "2cf90b10-4fe6-4a3a-9eaf-6457cb090ac5",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "e65249d2-0a0d-410f-a66f-e5bf159710da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e445a857-0a56-42f3-87cb-af9aaf877e3f",
        "cursor": {
          "ref": "4c9c283b-130d-4b9b-9d22-7f82af361410",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "a045c036-9f07-473e-8a14-275d344fa932"
        },
        "item": {
          "id": "e445a857-0a56-42f3-87cb-af9aaf877e3f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "9eedaf7a-90e3-4a58-891e-93bfcea837ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2d0b8b7-1445-40ef-9326-3583dca5e520",
        "cursor": {
          "ref": "57a0e5f3-c173-4f70-898a-6af639600160",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "33d352f9-331b-4828-900f-1420315e7d27"
        },
        "item": {
          "id": "f2d0b8b7-1445-40ef-9326-3583dca5e520",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "bb6d87fc-a2b0-44e1-9ab2-df0eba7d5e9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20d7f366-9e2d-4245-bb9f-c2e8b3d289cb",
        "cursor": {
          "ref": "7cb0558a-c528-4d3e-8ba3-53dbf50f3efb",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "bd338ac9-0c77-4713-8732-b2d9e83efa23"
        },
        "item": {
          "id": "20d7f366-9e2d-4245-bb9f-c2e8b3d289cb",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "561c2b69-8973-4399-97f2-ec4a028da894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d022379-ce5d-470e-9748-b1e812fc3fd1",
        "cursor": {
          "ref": "bbbc5fd4-ea1c-47ca-bfe0-f7943638405a",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9a94a52b-b4c9-495d-a5cb-9a45553b8e8c"
        },
        "item": {
          "id": "2d022379-ce5d-470e-9748-b1e812fc3fd1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a7557f78-d7e1-4372-8922-8cde6ce8ed14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79aa2b29-a9c2-4392-8929-64d0de09302e",
        "cursor": {
          "ref": "b760ec9c-3000-4337-b96a-43c65b151c05",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "9b866c7d-12ec-433b-8aad-ad0389f3853d"
        },
        "item": {
          "id": "79aa2b29-a9c2-4392-8929-64d0de09302e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "162ee0e2-578d-4293-a816-9b473f4354e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f487ddf3-42cd-4bb9-bc3b-ace353cc5066",
        "cursor": {
          "ref": "0b332259-8ae1-42cf-82f5-57e4ded0e6cb",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b3babd24-5ae0-435d-af06-337b19da716b"
        },
        "item": {
          "id": "f487ddf3-42cd-4bb9-bc3b-ace353cc5066",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "56a5f692-d9ad-4cc0-8ba3-7012f4fabdf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0113354-889f-4551-a7db-8007835d4c3f",
        "cursor": {
          "ref": "c13fd104-28a9-42e1-a995-eabe552ad68b",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "39c002c9-35cd-4ba6-ae00-e9028f11898c"
        },
        "item": {
          "id": "b0113354-889f-4551-a7db-8007835d4c3f",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "e363de78-0c46-48f7-a015-caea0eeef007",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "c26d487c-c24d-4e4f-a9cd-bd5c2777d5cb",
        "cursor": {
          "ref": "24184912-3565-4652-add5-197c79f9f699",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "a79134d6-c50e-4ede-a040-ac2553bbfbd6"
        },
        "item": {
          "id": "c26d487c-c24d-4e4f-a9cd-bd5c2777d5cb",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9de2fa2d-6e3e-4f99-ae4d-8b7d2b3f5f65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ad186641-210d-4298-919c-2ecb69feca9d",
        "cursor": {
          "ref": "adcd776b-02dd-494d-9daa-f32471ce6e44",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "cf5b8125-d1dd-4362-8477-4e8a0383f8bf"
        },
        "item": {
          "id": "ad186641-210d-4298-919c-2ecb69feca9d",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d179457e-438c-45b7-91f7-fed96c8fc307",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09e1ab35-ea73-43ef-add2-9c4ad58220f4",
        "cursor": {
          "ref": "4177dd59-2c68-4cae-9db1-a5d789ac0c76",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0a46ad2d-c825-4128-ae8d-b2640c1a4a2d"
        },
        "item": {
          "id": "09e1ab35-ea73-43ef-add2-9c4ad58220f4",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "4e0570d8-e5ae-427e-b1f3-c6a5bacd099c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a83499-af2c-4332-8e97-ad0221dcaf21",
        "cursor": {
          "ref": "d442788a-1bf3-4689-a7c3-f146456679a9",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "9efa868c-7258-489d-842c-13c33ce5fa18"
        },
        "item": {
          "id": "29a83499-af2c-4332-8e97-ad0221dcaf21",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "e620733d-6646-4d9e-aad0-05c8fc15b7b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "887f89b0-74e7-4b0b-98a3-6daa9b30fb40",
        "cursor": {
          "ref": "f31a2ee2-41fb-4a29-a528-d97d88950ce8",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "8ace8d72-218a-4856-b3b6-a74f92d85647"
        },
        "item": {
          "id": "887f89b0-74e7-4b0b-98a3-6daa9b30fb40",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3399bf7c-435c-41a2-9ef2-3f96ab963751",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abbb2c83-f870-46a9-b594-dcbf9f022223",
        "cursor": {
          "ref": "6a8d4bb5-0f97-4afe-9b3a-6eb8da665feb",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0275d487-59c2-42cc-84af-9c33784f145a"
        },
        "item": {
          "id": "abbb2c83-f870-46a9-b594-dcbf9f022223",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "e1f728f1-2d70-499e-8755-68838be59ae8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ea1ae44-e2d9-4ef2-a5c5-9751d3aedbba",
        "cursor": {
          "ref": "c04dc3d3-9aab-4864-9ea3-a8918a1937c1",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "115e2013-a677-46ac-9408-4005d7e085a1"
        },
        "item": {
          "id": "7ea1ae44-e2d9-4ef2-a5c5-9751d3aedbba",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "022fe6d1-da19-4e16-9ca3-2441c5ff7c53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f6432dc-fa2d-4a73-b89c-b5f554ba13f6",
        "cursor": {
          "ref": "c5f066ab-c014-4ee9-9f52-943dc0297567",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "9b8d7d8f-8724-4111-8cde-022951d8c53f"
        },
        "item": {
          "id": "5f6432dc-fa2d-4a73-b89c-b5f554ba13f6",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "98d82d9e-ab4c-4e4b-a1d7-5302757999f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7fed85b-ae2b-4ac0-9775-b3145d257b81",
        "cursor": {
          "ref": "aa2981f8-502b-4b10-a738-a2cb906d1bc3",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "ec3d0e5c-b9ce-4c9e-82aa-8755b9601f19"
        },
        "item": {
          "id": "d7fed85b-ae2b-4ac0-9775-b3145d257b81",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "624b44d7-85c0-4981-9e23-db2460393e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69ae3895-5a96-4d6d-8333-2e705506a382",
        "cursor": {
          "ref": "ecb991f1-b4ec-421f-9821-962f09be9630",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "45324cea-4703-4622-aa1a-47f60da188e5"
        },
        "item": {
          "id": "69ae3895-5a96-4d6d-8333-2e705506a382",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b3c81a0c-2f67-4141-b6c7-09af42ef6c25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "99ce5c7f-ee6f-4f8a-8205-b8a422e57fae",
        "cursor": {
          "ref": "a67b7d9a-4909-455a-88c0-4d4bb76d6ab9",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "fd8c4734-3ae1-48ae-9bfc-29a91c7f41d7"
        },
        "item": {
          "id": "99ce5c7f-ee6f-4f8a-8205-b8a422e57fae",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "3e0e8ce0-67ea-43a7-9793-4779591e3750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67210a1d-4e0e-4d93-9c9d-c82e77a49577",
        "cursor": {
          "ref": "71118ab7-4ea8-4cab-b99c-31ea2c049dc4",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "df979b6f-5f68-4b68-9794-99c52af4f26b"
        },
        "item": {
          "id": "67210a1d-4e0e-4d93-9c9d-c82e77a49577",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "041328cc-38c0-48c1-9490-068f678b4a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "10d8a8b3-e191-4008-980d-20b5f91ef6e6",
        "cursor": {
          "ref": "99afacb6-20d4-4396-835f-6c75207269e5",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6bdd7866-239c-472d-9e96-0d1417f49649"
        },
        "item": {
          "id": "10d8a8b3-e191-4008-980d-20b5f91ef6e6",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "b734df79-1dff-4d19-89f8-c638fc2f65a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4edb78fa-319a-49f8-a038-bd052171dade",
        "cursor": {
          "ref": "5e575ca5-7982-4d21-88cb-1e93fe9fecea",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "bcf41e56-09db-4d0a-8b34-2d4654f7fbca"
        },
        "item": {
          "id": "4edb78fa-319a-49f8-a038-bd052171dade",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "2f4522ea-f93d-4c74-bbd6-9cc6a8172243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2d964af-151d-4282-8a96-47f22ac0f8db",
        "cursor": {
          "ref": "13140346-b89f-4105-8782-d9f25cd2676b",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "cf565cae-a0a6-43a3-9904-f5dbe2acd7eb"
        },
        "item": {
          "id": "c2d964af-151d-4282-8a96-47f22ac0f8db",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "451e93f0-fc9e-4f2e-b069-f990803d6409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0e521b0-15df-410c-ada6-ba60a598fc02",
        "cursor": {
          "ref": "3a920ee4-8a96-4fa4-9337-ee51bf992e56",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "6f3308f2-98ef-4317-9bc0-739eea2035c5"
        },
        "item": {
          "id": "a0e521b0-15df-410c-ada6-ba60a598fc02",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "950d2f6c-a19c-402b-88f0-2eec16d5bda3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a477a99a-813a-44ed-a7c0-b5a901d52a17",
        "cursor": {
          "ref": "52133200-5e14-4147-a57e-838b5ffe022c",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "b468b325-b23e-4867-812e-8695e07f4c1a"
        },
        "item": {
          "id": "a477a99a-813a-44ed-a7c0-b5a901d52a17",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "de1128a3-e1da-4c73-af2d-d7158a9284da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb2d6cd-02f0-457f-8e85-de127e80ddfb",
        "cursor": {
          "ref": "79955b6d-433b-4967-af6d-fbcc21835c71",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "0598ea0f-350e-425c-811b-344bd4ed795e"
        },
        "item": {
          "id": "bfb2d6cd-02f0-457f-8e85-de127e80ddfb",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "3f274861-af3c-45f3-a307-9d10d8620aac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "333139f6-dfd2-4ea4-8796-a2d51e8d4d13",
        "cursor": {
          "ref": "dc7ff262-4081-4c9a-aad5-0732a1676fd3",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "23310963-942e-4adb-9c49-eaedeed42fc5"
        },
        "item": {
          "id": "333139f6-dfd2-4ea4-8796-a2d51e8d4d13",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "038751fd-81db-4ffc-9961-f8463349b1d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "665e7c74-1924-4541-8fbc-23370e0fd90f",
        "cursor": {
          "ref": "ddff999a-0590-498e-bcc6-d4c72a7fb632",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "c4140e00-cbab-40bb-9431-e0e3ed561413"
        },
        "item": {
          "id": "665e7c74-1924-4541-8fbc-23370e0fd90f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "138bef56-f931-4e8d-8032-edc0508a7cae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b82703be-d0c6-4ce7-ab67-9d3805a54a6b",
        "cursor": {
          "ref": "3c8e49c3-47ed-4ecf-b284-66b415e2964f",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "e35eec34-c44a-4403-b378-7e0100f5402b"
        },
        "item": {
          "id": "b82703be-d0c6-4ce7-ab67-9d3805a54a6b",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bc32cf09-3188-4582-ba42-51f38b7abb7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb9bda96-74ec-44e2-8f9e-b3e46918774d",
        "cursor": {
          "ref": "f7086ef4-9a1f-4f7a-9054-f4227536b417",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "220688fc-b0cf-44ba-8215-1943c8a7c2b2"
        },
        "item": {
          "id": "fb9bda96-74ec-44e2-8f9e-b3e46918774d",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c2273371-94de-4c85-b04d-b8a08c68a4ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c441841-bf4f-48c3-890a-dfdd46ec75d4",
        "cursor": {
          "ref": "a24b9418-d393-41b3-bc79-ca030654f0c1",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "ef5139e9-9b72-4b60-bcf1-a317d20ae8af"
        },
        "item": {
          "id": "9c441841-bf4f-48c3-890a-dfdd46ec75d4",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0ba2ac7c-73ec-4eea-b089-cb31fc46877b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cba7b5b2-a582-4a2d-a6ca-23f1386c88f8",
        "cursor": {
          "ref": "78a193f6-fdce-45bb-9c86-0a3e21a3abaf",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "2910e7fd-c9ca-4fba-9e23-d0fc067d028f"
        },
        "item": {
          "id": "cba7b5b2-a582-4a2d-a6ca-23f1386c88f8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ac25ea1d-f82c-4461-8417-bf92093253fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b29c47e-c762-4df9-b1c5-47e6970b2049",
        "cursor": {
          "ref": "016c5ec7-f3d8-4575-ba2f-bf83c67067c2",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "10460150-0ef1-4233-ab11-d54f5b0aa049"
        },
        "item": {
          "id": "7b29c47e-c762-4df9-b1c5-47e6970b2049",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e4f5bc48-8257-4a4c-aa47-daf9225d14fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c59346ae-841d-4e6a-958b-e285f224fc2b",
        "cursor": {
          "ref": "380a243d-915d-4486-a754-447854030479",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "83c81215-b7be-4beb-94f3-844b307ef553"
        },
        "item": {
          "id": "c59346ae-841d-4e6a-958b-e285f224fc2b",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fb6a1e91-ee6e-4b07-8423-ec409486b62b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca4cf0a-9120-4940-8b0f-da6f871cc16a",
        "cursor": {
          "ref": "f6d7beb6-5623-4613-a1c9-a8fbcb3391ca",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "59f97981-588e-4281-83a1-fe4e5bd15a91"
        },
        "item": {
          "id": "3ca4cf0a-9120-4940-8b0f-da6f871cc16a",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "3609e8fc-9dd8-4fcc-a895-f6a20b274dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78497276-f876-4610-bb3e-b27c87080514",
        "cursor": {
          "ref": "8014ef2d-0c58-4394-8768-52066467adab",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "6b95cd20-4e67-4834-810e-c472bb01d8b5"
        },
        "item": {
          "id": "78497276-f876-4610-bb3e-b27c87080514",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "f7162f19-9586-4f5f-a3c5-1fcc8a63073c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "885ec856-0d62-4c2c-8383-c7ac856e589f",
        "cursor": {
          "ref": "53955d67-6d68-45d7-976c-5e3bf1865708",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b5c6c0f9-cb95-498a-8fad-cd290e4fa30c"
        },
        "item": {
          "id": "885ec856-0d62-4c2c-8383-c7ac856e589f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1b92450b-9b07-4092-aafe-178c2496c652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "091e9c21-daee-438c-b4d1-26acec4ed7b4",
        "cursor": {
          "ref": "9dc0509c-7ed0-464a-896f-82ea078a138f",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3c7de4e3-853f-4249-b356-6527b4c6ab03"
        },
        "item": {
          "id": "091e9c21-daee-438c-b4d1-26acec4ed7b4",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "6547626f-ef60-4e28-ab0f-e49834d779b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55890b4d-075b-413c-b703-66a72c9741f3",
        "cursor": {
          "ref": "a9cfc1e2-a1d3-42d8-931f-cb93cab93103",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "9a7b10e8-99d9-4495-9eee-fb86e65ddee7"
        },
        "item": {
          "id": "55890b4d-075b-413c-b703-66a72c9741f3",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "11bbce11-931f-4529-81f0-ff15e3980828",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a97966c6-e6d7-467b-80c1-e8476a106979",
        "cursor": {
          "ref": "fe1b62a5-f0c5-47d9-a256-0a503fbd1b15",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "fa40528f-159c-4fa8-95c5-3b853a3ec721"
        },
        "item": {
          "id": "a97966c6-e6d7-467b-80c1-e8476a106979",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "93924619-ff84-4a39-a199-45d35878ae05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63132389-0a04-41c7-a768-9064b4f75400",
        "cursor": {
          "ref": "f66d06b3-769d-48a6-b5d8-79f91fe3353f",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "a4a45391-d068-496f-b815-987357f31d23"
        },
        "item": {
          "id": "63132389-0a04-41c7-a768-9064b4f75400",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "5cf07fe6-90fa-4b16-9404-f60971049930",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dd67f360-4c3a-4c34-9a4e-7c79e63d3c75",
        "cursor": {
          "ref": "89fd26cb-32c8-4b2d-9663-aa110d655d8c",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "c842f100-1a2a-4fe2-a45d-6b472bb5f1d3"
        },
        "item": {
          "id": "dd67f360-4c3a-4c34-9a4e-7c79e63d3c75",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "114aa4c3-f921-4228-9a7e-3b6f6763b474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98f93dc6-e299-48e8-9d45-99ddb82cbbad",
        "cursor": {
          "ref": "75a5a8d7-e5b8-448f-86ae-f6934e0ba48c",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "20f0549b-306e-4c17-8b73-5d2a32055223"
        },
        "item": {
          "id": "98f93dc6-e299-48e8-9d45-99ddb82cbbad",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "6810078f-f225-4f4e-bf73-ecfdc6d65df7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a607c3e-1ff4-433e-866b-c51c4e678bab",
        "cursor": {
          "ref": "331938ec-d10d-425b-acd3-d6433235b90b",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "da2345f2-3e70-4e84-91e4-4434f861cfb9"
        },
        "item": {
          "id": "7a607c3e-1ff4-433e-866b-c51c4e678bab",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "c6838249-17d4-4b46-aba6-dd68f4d82243",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f800b55-cb3a-418c-8de5-ba4340d09f6d",
        "cursor": {
          "ref": "c4080f4c-574c-4dcd-a1bf-2dc624eecb80",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "33eb10d9-7b14-4ad1-8c54-fde5a0ca1fd8"
        },
        "item": {
          "id": "4f800b55-cb3a-418c-8de5-ba4340d09f6d",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "58b21f4f-e318-407e-86f2-dfd30462437e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d495fc1-150c-422d-8b58-16c9dc9c6a29",
        "cursor": {
          "ref": "b7cf3eaa-826a-473e-8731-c96d21ffeb0e",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "7ec0d0fb-7210-45ba-99a1-798d7b0ac4ba"
        },
        "item": {
          "id": "5d495fc1-150c-422d-8b58-16c9dc9c6a29",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8087c965-e58b-492a-883d-d1ab98b05bd9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "8b049ecf-f735-4efa-bc4e-8d3a770f1d1f",
        "cursor": {
          "ref": "698ee3b3-24af-414d-ad37-c0f36d857d24",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "ebdce9c1-7348-4921-8963-04cfb9da8717"
        },
        "item": {
          "id": "8b049ecf-f735-4efa-bc4e-8d3a770f1d1f",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "5cf09c10-f056-44f0-acd1-c62350286d77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5bdf893-f3e4-4e33-9dfa-f1fdfcd471e0",
        "cursor": {
          "ref": "72f775da-3eed-4cf9-8bb1-6a7c08b2fdc9",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "ea1194ae-bc7a-4443-bcc3-670fdbd4f4c4"
        },
        "item": {
          "id": "c5bdf893-f3e4-4e33-9dfa-f1fdfcd471e0",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "ecb610a4-28e9-44aa-8139-4311bd540cce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d78804d6-dbe8-4140-9750-f320b363a23f",
        "cursor": {
          "ref": "f0db6fb5-100d-483a-b6c6-2bc16b608164",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bc01f897-6364-41b3-b6e8-99e91d6eb90a"
        },
        "item": {
          "id": "d78804d6-dbe8-4140-9750-f320b363a23f",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6eb8ff5e-3b5b-4f4a-b647-90b5f0feb4b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcbcc28f-01a7-425d-a816-68a27b535fb6",
        "cursor": {
          "ref": "bd00fde5-8b7d-4ea7-93e8-6340790a598f",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "6004cd34-0720-4a91-9d48-6cb8437a42f4"
        },
        "item": {
          "id": "fcbcc28f-01a7-425d-a816-68a27b535fb6",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "4c85c934-7f05-44cb-b105-d5b03995cff8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "462a2f04-2d31-44a7-bd7b-835a7e014a42",
        "cursor": {
          "ref": "7fbf06a2-0cd7-41bb-b74f-36a328617fc4",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "18f402fc-b2b3-430f-a3f7-5908cfb339a9"
        },
        "item": {
          "id": "462a2f04-2d31-44a7-bd7b-835a7e014a42",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "84cb5161-7cff-429f-ba2a-0ebf50a07761",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f31cce57-fb1f-42c5-bf92-956e1eff228d",
        "cursor": {
          "ref": "f31afdbc-f8cc-4198-875c-585a521cb9e2",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5b439188-1597-43b4-8b6e-32188ef082cc"
        },
        "item": {
          "id": "f31cce57-fb1f-42c5-bf92-956e1eff228d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "9fa8c893-2204-4df7-9e3b-0964034a1cbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85a25279-acc1-49ab-aef1-2541ca8bac44",
        "cursor": {
          "ref": "94efd5a4-08ee-4894-9eb1-71997f344741",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "ec169228-6ded-435e-8a2d-3c6cdfaf218e"
        },
        "item": {
          "id": "85a25279-acc1-49ab-aef1-2541ca8bac44",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "a39c37b1-9fdb-4378-9aec-1d168c21e750",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "662773f9-040b-4119-a2e8-fe6127698773",
        "cursor": {
          "ref": "76086d49-f18b-448b-94c0-af8eefcb985b",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "32ce10dd-c901-4654-8716-a65babf7442b"
        },
        "item": {
          "id": "662773f9-040b-4119-a2e8-fe6127698773",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "4f18a3fb-6f0f-43e0-8bf5-a5f9f45a0ba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26198362-0eba-4752-8d18-459a5078ddf6",
        "cursor": {
          "ref": "2f0bf088-b3a5-41f7-aad1-71bc1687b09f",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "cec9a3d2-7354-40ef-aa16-8e501f325cf7"
        },
        "item": {
          "id": "26198362-0eba-4752-8d18-459a5078ddf6",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "771dbd59-cb14-4240-954a-2f5149d10aa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "983c3ccc-250a-4b1b-ad51-58602ebcffd1",
        "cursor": {
          "ref": "392deca9-61fe-4191-8a26-2b717580e560",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bb2174cc-a7eb-4dd2-9342-10c34fcc5cbc"
        },
        "item": {
          "id": "983c3ccc-250a-4b1b-ad51-58602ebcffd1",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "0c705367-8e64-4a11-b68b-f8eb390baea0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb1955e8-bd9d-4caa-b003-c93de6ab7824",
        "cursor": {
          "ref": "ee7e3947-15c2-4d2f-989c-2b4838baadfd",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "975c8044-1089-4bbe-bdda-0535563f9e71"
        },
        "item": {
          "id": "bb1955e8-bd9d-4caa-b003-c93de6ab7824",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "865731e9-ecfa-4709-b255-0a15da5f36fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc5ff128-1268-4a26-bf79-1747a124970e",
        "cursor": {
          "ref": "1225be07-c883-40a3-b6ad-ff6904c3fac5",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "69ff17fb-2918-45ac-acf8-92173bba5fd2"
        },
        "item": {
          "id": "dc5ff128-1268-4a26-bf79-1747a124970e",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "f8b42678-cb8b-4239-ab7c-ee7454acf36e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "857ec8f8-6a8a-4e20-abb8-e388024ab601",
        "cursor": {
          "ref": "d66eec28-485c-4e03-9921-16b0a9d1b79d",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "9d2afdec-b6b9-4f7b-ba5c-2ffb1092f4e0"
        },
        "item": {
          "id": "857ec8f8-6a8a-4e20-abb8-e388024ab601",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "41e7db10-6fad-4fcc-9900-055fcf0bbb43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac0ebd5b-9d80-4188-8899-b27f81c15e0e",
        "cursor": {
          "ref": "2f0af6b5-77ad-4725-92e7-46315246fc46",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "47dface7-38b3-42a6-b632-288a971b05c6"
        },
        "item": {
          "id": "ac0ebd5b-9d80-4188-8899-b27f81c15e0e",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "4930e5f0-5a56-44a2-9a4f-f27536096772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95c44057-629f-4e29-a3a2-46f0a8c47147",
        "cursor": {
          "ref": "f68df58e-2201-4ba1-af0d-839fcc7627e7",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "2bfb6e38-3666-41b7-82ab-2857944bd07b"
        },
        "item": {
          "id": "95c44057-629f-4e29-a3a2-46f0a8c47147",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "6b58aa21-758e-4683-9934-d56be5e84d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17beed4-937a-401e-8eb8-dc2e446d0f1c",
        "cursor": {
          "ref": "13d98f4e-28ef-43ad-b81c-2909c49cfcc6",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "f86ed987-f364-472e-bd11-8de60458c86d"
        },
        "item": {
          "id": "e17beed4-937a-401e-8eb8-dc2e446d0f1c",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "18e21625-dec2-4b3d-8292-e70507046f33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8dab5c0-f91e-4a60-99b4-f75cb04007c3",
        "cursor": {
          "ref": "bff0b003-8850-4477-8ce8-982af7c9a0a8",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "75264db6-f00d-45a9-9e5d-431857c506b0"
        },
        "item": {
          "id": "d8dab5c0-f91e-4a60-99b4-f75cb04007c3",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "a6e50fff-11ba-41a7-ab4c-52dfe9326d9c",
          "status": "OK",
          "code": 200,
          "responseTime": 259,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "f2912392-110e-4a19-b7d0-0c730a22bbba",
        "cursor": {
          "ref": "e3b06548-ecf6-43e9-b81f-13ef7a351c7a",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "3a854f73-8fc4-4e7a-a14f-f5545c2e9134"
        },
        "item": {
          "id": "f2912392-110e-4a19-b7d0-0c730a22bbba",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "89b77bff-0c99-4acb-b25e-4baa19c6ea9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaa8a9ce-eb1c-4535-956f-da4bed46742e",
        "cursor": {
          "ref": "a6a52b55-ddbb-41c8-a416-2be782aca199",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "abad59fd-3d03-407e-bfba-040ce8dec2f8"
        },
        "item": {
          "id": "aaa8a9ce-eb1c-4535-956f-da4bed46742e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "e78d6709-01f9-4a42-8706-93334d5f37f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f3a77e-4ab4-44ca-b4a9-1b81bc162d23",
        "cursor": {
          "ref": "ff149dad-c9b8-47bc-9ef0-3049a8c67c14",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "72367078-0b3f-4e88-8466-722025ea344d"
        },
        "item": {
          "id": "e9f3a77e-4ab4-44ca-b4a9-1b81bc162d23",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "e5273307-8c71-46d8-93b9-9a140e7932f2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7b6736-e8ff-41fd-a7c8-fa4a1a6c136a",
        "cursor": {
          "ref": "c8ab707e-9bbf-4a7a-b8ef-5b8f5b47ec9e",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "b3f1c7b6-0b75-4e44-a906-940ec56d569e"
        },
        "item": {
          "id": "ef7b6736-e8ff-41fd-a7c8-fa4a1a6c136a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "05a07f17-571f-4a25-9164-6bfd78a08189",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbf80df8-3dff-4aeb-bb21-fe2395467e02",
        "cursor": {
          "ref": "fac4cb62-2b5b-4854-a78a-8d453d2713ae",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "69d093f8-804f-4760-824f-06fd624610d8"
        },
        "item": {
          "id": "dbf80df8-3dff-4aeb-bb21-fe2395467e02",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "c749f76b-5d21-48b5-a766-bc8d6e2631ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 141
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34935c0a-a65f-4312-a2a3-ad430c54f3a4",
        "cursor": {
          "ref": "68f527b3-f87e-4c9f-940a-103579f5ac18",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "01582722-edd7-4041-b6b3-f337e9fe7dce"
        },
        "item": {
          "id": "34935c0a-a65f-4312-a2a3-ad430c54f3a4",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "e8a78969-6777-4543-a4c9-72fad3dd39ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25b98cb8-ddc7-4f41-92fd-d6fe0d9115a7",
        "cursor": {
          "ref": "b46ea5d6-f67d-4769-a643-6ae79455ee36",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "26cec5f9-2b83-44ed-a6da-8e69df15cb9c"
        },
        "item": {
          "id": "25b98cb8-ddc7-4f41-92fd-d6fe0d9115a7",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "71c56f46-1618-436c-8a6f-c993bb63987a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe9ff945-cfb6-46fc-8992-8e8c4da92503",
        "cursor": {
          "ref": "c5348a59-dd24-4341-9bff-a1aab73ad785",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "dffc0602-db58-46b4-b6b8-14190e8dcbb0"
        },
        "item": {
          "id": "fe9ff945-cfb6-46fc-8992-8e8c4da92503",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "e7c3e58f-3402-4298-b4b4-261500c6c39d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a986267f-8311-4779-8ccb-fdc1a159f5cf",
        "cursor": {
          "ref": "a2f5daad-8c8d-4dab-b07a-094b29889a04",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "12b3b12a-8cb8-4899-aedd-73a85a515937"
        },
        "item": {
          "id": "a986267f-8311-4779-8ccb-fdc1a159f5cf",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "cb188c5f-fd78-434e-a56b-af3f4d64e325",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896f5879-9db2-4703-9d32-71bd2480a897",
        "cursor": {
          "ref": "57bd6a17-30cc-4e65-8a6c-35a7ed5c58b3",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "9f55b76e-364b-4e0b-ad85-c277915a7874"
        },
        "item": {
          "id": "896f5879-9db2-4703-9d32-71bd2480a897",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "5ff09d86-ab95-4307-89d8-84827f39209e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2c350c9-cd76-44c2-ae4d-142f3ea68971",
        "cursor": {
          "ref": "80bc1c14-2233-49fe-bca3-f3e964dcb32a",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2d877984-284f-4749-8cc4-22d8f10572b5"
        },
        "item": {
          "id": "d2c350c9-cd76-44c2-ae4d-142f3ea68971",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "be3b5ea9-dda9-4be3-a3ff-fb4237774097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2def4191-51b2-4606-b0e4-32922cc775e4",
        "cursor": {
          "ref": "fbb1b938-50ae-44d7-be5c-5be474e134e4",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "6a09802a-77b1-49f8-b088-e08bfca5db3b"
        },
        "item": {
          "id": "2def4191-51b2-4606-b0e4-32922cc775e4",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "5d24c2ba-2274-4062-870b-e2bed4b91289",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b29c505-d1b7-4ed3-ad64-21ec4bf177af",
        "cursor": {
          "ref": "d704c6d5-6656-4131-a842-bf78db0b48f8",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "688db910-8997-4ad0-8634-fce4b3434b09"
        },
        "item": {
          "id": "5b29c505-d1b7-4ed3-ad64-21ec4bf177af",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "ac7b07e7-f7c0-4ae8-b84b-8d64ff785e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5361ae44-70f7-4d81-8448-0ad9500fcfff",
        "cursor": {
          "ref": "848d23ab-a45c-44ca-a7ea-b7ad9f0fc23b",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "5a251707-bc62-41ef-83c7-d04f81185976"
        },
        "item": {
          "id": "5361ae44-70f7-4d81-8448-0ad9500fcfff",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "1e7f7bca-72ad-42c6-8a29-3936bfe3895e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e8f760f-bc37-41a7-b653-df28a7b15b24",
        "cursor": {
          "ref": "c72979f0-23ac-438a-9d6d-56762d5ab46f",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "68b733d5-815e-4739-a7b4-62615b274471"
        },
        "item": {
          "id": "4e8f760f-bc37-41a7-b653-df28a7b15b24",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "7433af92-62ee-4058-8b5d-95b328b7a5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2637d6f-45ea-4f70-bb05-3d35ee0a4b5f",
        "cursor": {
          "ref": "0bd33cab-1b57-4c99-958b-1856eccfb521",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "3f7d32a1-df52-4afc-a24d-10bc043766e3"
        },
        "item": {
          "id": "e2637d6f-45ea-4f70-bb05-3d35ee0a4b5f",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "968ba25d-7354-41a9-a0be-01d198078276",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0273c9-1145-49df-a7f3-5788ef445bbe",
        "cursor": {
          "ref": "49a361e7-1a94-470a-83cf-91c2ab9d9818",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "efc10109-bd89-4650-88e3-80774f44d972"
        },
        "item": {
          "id": "ce0273c9-1145-49df-a7f3-5788ef445bbe",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "67bcce5a-7980-4109-b2c0-ae90dfe95a17",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cc96116-c477-453c-9f02-cf5e7732c311",
        "cursor": {
          "ref": "0979a5f2-96d4-4ae6-adb5-342b75308651",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "90b3a958-01e2-4bd8-93c5-6be993820044"
        },
        "item": {
          "id": "2cc96116-c477-453c-9f02-cf5e7732c311",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "fd6cf6c2-134e-41c8-acb7-14c095358155",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f30b8d71-fc3f-4b91-b2d6-6789a0615ff6",
        "cursor": {
          "ref": "f2fb59b7-e159-4e10-8b55-68b877a181d5",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "352da963-5b6f-49f8-b484-7d627029b175"
        },
        "item": {
          "id": "f30b8d71-fc3f-4b91-b2d6-6789a0615ff6",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "d22aecb1-1a84-438d-b1af-40826e2eb802",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03d6e800-9a6b-43b2-9a7e-a4ea0f684a59",
        "cursor": {
          "ref": "1496e754-11f7-4b69-b44c-40a5a277ec00",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c3299b3f-a89b-40cc-88a3-7d1b8a535142"
        },
        "item": {
          "id": "03d6e800-9a6b-43b2-9a7e-a4ea0f684a59",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "c8bc67eb-e6c1-4500-9938-525962a5be5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b66b6c35-d5db-4724-8e71-72b852ac8d30",
        "cursor": {
          "ref": "42ec7f5c-66b9-472b-b1f1-7921fe1277f0",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "4101722e-0b94-4808-9a89-3beb2c9fd518"
        },
        "item": {
          "id": "b66b6c35-d5db-4724-8e71-72b852ac8d30",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "14f9d825-6c40-40de-8bc7-6bd1c8b1a616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb380814-b626-4eb5-9309-dc939a5632b5",
        "cursor": {
          "ref": "226e5eb6-4acf-4e36-81c0-814fe08a77aa",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "bf1239d0-2ec6-4494-b1c2-380e16b9f903"
        },
        "item": {
          "id": "fb380814-b626-4eb5-9309-dc939a5632b5",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a702e0ac-f6b2-4312-9cf8-0f8a93d932aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9968bd33-c695-41e6-9293-439879793240",
        "cursor": {
          "ref": "ace1c2c1-9915-475b-a590-d077476c9472",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "bba4fecb-0bc2-4be2-8cbe-919519c38201"
        },
        "item": {
          "id": "9968bd33-c695-41e6-9293-439879793240",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "7ed6f979-49f4-4232-8091-c3da986e7d27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d51ee04a-5488-4342-b376-49f7f67453c8",
        "cursor": {
          "ref": "5ed0015a-12ac-426e-96c8-196e91401e2d",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "7f52b5b3-4135-4b47-90ff-00dc79d89173"
        },
        "item": {
          "id": "d51ee04a-5488-4342-b376-49f7f67453c8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "32a2511a-8743-4523-a9f6-32f76dd3ae3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e610c6b-2ef0-48d9-a213-d19365b301fb",
        "cursor": {
          "ref": "27e08462-8b19-4e40-a39d-1ad38fe88528",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dbb6846f-556d-4757-b709-7ad66146123f"
        },
        "item": {
          "id": "8e610c6b-2ef0-48d9-a213-d19365b301fb",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f06d29ba-e48f-4ab2-b8ed-275f8fe66115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e687277-087d-4ce7-990d-ede5ac5da803",
        "cursor": {
          "ref": "8777bae7-f740-471d-aaf9-4ab5836b251d",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "63047e4c-8904-413c-9d30-36526f23ab15"
        },
        "item": {
          "id": "7e687277-087d-4ce7-990d-ede5ac5da803",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "5a81c393-118c-4a28-8209-a9a92d205124",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23137ee-6e9e-4e94-a221-d1365b95b0e1",
        "cursor": {
          "ref": "9819805b-9df9-4f9c-9740-2dc24e76fe47",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "b48eac12-bd99-46eb-ae83-ec89aa2687fd"
        },
        "item": {
          "id": "f23137ee-6e9e-4e94-a221-d1365b95b0e1",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4de0ff8e-bd2a-4f36-b4fb-26bb8d980c50",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d163cf-b840-4cb4-852f-865863dda8a9",
        "cursor": {
          "ref": "a9c57265-2a0e-4be9-ba49-20ad41cda841",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "d11053e6-f344-4f46-be6d-7d2499a2da23"
        },
        "item": {
          "id": "28d163cf-b840-4cb4-852f-865863dda8a9",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "a7ffee16-0806-4517-99d0-ac79f1e372a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c66a03a-21d0-4312-b7ef-ab16cf7fc651",
        "cursor": {
          "ref": "20342807-3c2c-4c66-830d-3b497aec97c4",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "fdfdac32-24ea-49e6-9c74-d7c66770d9ce"
        },
        "item": {
          "id": "1c66a03a-21d0-4312-b7ef-ab16cf7fc651",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "01baeb42-a909-49a8-a7f4-74aac107c444",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f53211a-39d9-4a51-a9a5-08d0f31d3adc",
        "cursor": {
          "ref": "298c177c-6dd0-4b2c-86f6-504c430ceb8d",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "98af5578-f059-4621-8e17-c76bde2654f5"
        },
        "item": {
          "id": "4f53211a-39d9-4a51-a9a5-08d0f31d3adc",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "04f7ac66-032a-4308-8f27-3d87202adc2e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75ae40ca-3142-4dfa-b627-b11c2a08f904",
        "cursor": {
          "ref": "d3ac55ba-c844-4f54-ba89-f62c7a8cae1c",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "2ad57386-40e7-49d9-8da0-b395245c6667"
        },
        "item": {
          "id": "75ae40ca-3142-4dfa-b627-b11c2a08f904",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "7a87d383-11c1-4a30-b971-17d015fb986d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be71c206-f593-4086-a8d7-a0fc82179807",
        "cursor": {
          "ref": "91649d7b-3a8c-4957-9ef4-125d4bbfcd07",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "1aec9701-965e-44d8-bdb3-e5c3dca34a7f"
        },
        "item": {
          "id": "be71c206-f593-4086-a8d7-a0fc82179807",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "b8945d9f-f315-4883-ac22-57f9c6dde504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e20fb41d-4f08-4c06-b884-f9363075a7ee",
        "cursor": {
          "ref": "b1dbd3b5-ea0f-4cc1-8929-5c487ea4943c",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "67672d7b-196b-4a09-84f9-4d29e0dcfe4f"
        },
        "item": {
          "id": "e20fb41d-4f08-4c06-b884-f9363075a7ee",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "eaa9299e-d263-492d-89f9-79bd3e894c94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a0b0702-e1ab-4974-b416-1f3a10bc39ca",
        "cursor": {
          "ref": "21574d31-d164-46e7-8266-673de419c903",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c190deb8-506b-4187-a8d3-22bb917a6a8f"
        },
        "item": {
          "id": "1a0b0702-e1ab-4974-b416-1f3a10bc39ca",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "14437185-a741-4f1b-a756-3965068aa903",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97b28af9-b5ee-4306-bc75-495b899bbfbc",
        "cursor": {
          "ref": "99e3a8ac-74a4-4b17-bd5d-f9518e58998f",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8e40d4dd-b957-4089-b76d-93a97daa8c36"
        },
        "item": {
          "id": "97b28af9-b5ee-4306-bc75-495b899bbfbc",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "80e9a733-601b-40be-bd85-2a0353d54f09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53c00871-cf29-4c6e-8997-3cf824a8ae93",
        "cursor": {
          "ref": "e9a761cb-a0d4-408c-931d-2825388f9cf2",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "99f70b9f-2e42-4e0c-8cb8-69a250d5c649"
        },
        "item": {
          "id": "53c00871-cf29-4c6e-8997-3cf824a8ae93",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a828b8a9-4849-4d1d-9f24-cf2f4a38bad9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ca00d4-4117-4df3-ae45-a6f089679bfc",
        "cursor": {
          "ref": "60a95310-6622-47e8-be27-68c9de563035",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "362b0d7f-063a-4d55-a938-c93e51333b4d"
        },
        "item": {
          "id": "d8ca00d4-4117-4df3-ae45-a6f089679bfc",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "4988cb7e-f3de-44f8-8f40-cfe3c029fe64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f2431c-28df-4a42-803d-afa3fd2db64a",
        "cursor": {
          "ref": "8dfcf2cc-053e-47dd-8e12-409e00227990",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "02431054-d302-4035-ad92-584defe0b4f0"
        },
        "item": {
          "id": "a4f2431c-28df-4a42-803d-afa3fd2db64a",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "d9b29495-0941-453b-9200-5f64f28c4a45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ffb0389d-3d1a-4de4-8e72-072735aee007",
        "cursor": {
          "ref": "b4c4a7ef-f87f-4246-99e8-78040d204601",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "f6cbaa6e-21e2-43f3-9eb2-f63538fd8beb"
        },
        "item": {
          "id": "ffb0389d-3d1a-4de4-8e72-072735aee007",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "a6e99245-197a-47c6-8775-44c50d559f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da299303-855c-49d6-b518-540fec9cc690",
        "cursor": {
          "ref": "0e83b0f2-4c77-44c0-907f-cf614ba6fc65",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "74b9e777-f01c-49f8-a2de-dd52150429f7"
        },
        "item": {
          "id": "da299303-855c-49d6-b518-540fec9cc690",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c02e9df6-7207-4bb3-80f2-ae0817341f78",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "343c0c0d-b57b-4096-925e-adf537e1a3f0",
        "cursor": {
          "ref": "a6a444e1-82ea-4238-832a-40b84fd67a1d",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "5573ed18-60e2-46a2-8536-a1535bc7f32c"
        },
        "item": {
          "id": "343c0c0d-b57b-4096-925e-adf537e1a3f0",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "9da15052-4847-4db5-b4ee-41345c4fa0ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54416d2d-95eb-45cc-8c12-971fdbb62ffa",
        "cursor": {
          "ref": "ec789a96-3474-42a9-a0d6-2db99bb282d5",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "fae481cc-a890-4519-8cc5-6cb125a0f567"
        },
        "item": {
          "id": "54416d2d-95eb-45cc-8c12-971fdbb62ffa",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "44c8dab3-74c4-419d-bacb-9f65bb1697a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed93d528-f087-48be-a55d-4feb29580db7",
        "cursor": {
          "ref": "eed7fea8-93a8-44d8-91c7-34ca8b94cc8b",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e9a2a2f2-a15d-40fd-8917-66d6062e2cb2"
        },
        "item": {
          "id": "ed93d528-f087-48be-a55d-4feb29580db7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f2298d75-4b83-41a0-844b-4972cdac628e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee4c9f1-cdf7-4a3d-85ab-b4600dd1aba6",
        "cursor": {
          "ref": "1e0a64c0-05b2-43b1-b095-700b340ea6f9",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "23cad7ac-981a-4166-9f9a-13b568329f33"
        },
        "item": {
          "id": "6ee4c9f1-cdf7-4a3d-85ab-b4600dd1aba6",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "83a2e3d8-80b0-40d8-bde4-5e0253a055b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7f00ad8-d146-4cf4-a3fa-037416f32bff",
        "cursor": {
          "ref": "47b667d3-72a6-4f00-bd29-8cc3aad3cf17",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "47b884c6-fb9f-4f00-a51a-725f67b71479"
        },
        "item": {
          "id": "b7f00ad8-d146-4cf4-a3fa-037416f32bff",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "55d3b77e-c6cb-4d8d-ba01-1a822b487e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfccdf96-1ec1-4e2f-b3f0-ed669dec2a6d",
        "cursor": {
          "ref": "6566da2f-979d-4819-913e-44b27b9e688a",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "79c67f88-ac37-4845-9f41-a4690ccc6a41"
        },
        "item": {
          "id": "dfccdf96-1ec1-4e2f-b3f0-ed669dec2a6d",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "3c029c1f-e486-44fe-9653-eb311b68faf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41a3b27-485d-4102-8e92-0665bbfd7050",
        "cursor": {
          "ref": "a2044d4f-cb7c-40cf-bacf-be6391a34d0a",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "f742faab-6459-462e-90ed-fa595ce8d0a4"
        },
        "item": {
          "id": "d41a3b27-485d-4102-8e92-0665bbfd7050",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "fb68fb7d-ff50-4473-a0e2-afb961be5ce9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210963ce-c002-41ca-b5b6-abf2bd37c1ee",
        "cursor": {
          "ref": "4181140b-b02c-4368-87cb-02b066fa814e",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2f129eef-7c34-469e-b2a7-da0a29df1ddf"
        },
        "item": {
          "id": "210963ce-c002-41ca-b5b6-abf2bd37c1ee",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d40d0871-51c6-4b37-ad61-d22314011ca5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e847050b-ee46-4dfb-a643-04b83c1e65fe",
        "cursor": {
          "ref": "aaf2b130-1551-4de7-85c2-278f151d4976",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ed234189-641e-4a15-889c-c9251d0a5cff"
        },
        "item": {
          "id": "e847050b-ee46-4dfb-a643-04b83c1e65fe",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "70fa285a-87da-49c7-bddb-6706f3fff0b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "033e1800-17a6-4651-a507-5e1d3c6fb53c",
        "cursor": {
          "ref": "bf17f1f4-9928-4555-a02a-c916fde811d5",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "43251984-201b-4b30-9be6-47cc39a5872f"
        },
        "item": {
          "id": "033e1800-17a6-4651-a507-5e1d3c6fb53c",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "efdad76b-a45e-4556-845b-4c28a7d34161",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d44045e8-abb0-4261-9849-01b253ada1ce",
        "cursor": {
          "ref": "ad974383-cda9-42cf-ac4e-15b917bc0cad",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "727ebd2c-fc48-4327-8d2e-911ccdfc8914"
        },
        "item": {
          "id": "d44045e8-abb0-4261-9849-01b253ada1ce",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "0c589af2-15d2-466d-936a-d7502940137b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e5e36b9-80d2-4ceb-8fbd-25996dc74483",
        "cursor": {
          "ref": "9424c8be-7dd0-4c19-ba8b-dcce9f14f072",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "21132200-f780-439c-a3c1-c7843d8ad6bb"
        },
        "item": {
          "id": "2e5e36b9-80d2-4ceb-8fbd-25996dc74483",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1cc3c313-47ac-47fe-a7aa-3cb4875bb3ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9090851d-b325-4fd3-a644-6e71aba08d39",
        "cursor": {
          "ref": "bd820957-de84-4ba4-9357-fab2976c7bbc",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "47a5fca4-bba5-43d4-b073-5811616a64b5"
        },
        "item": {
          "id": "9090851d-b325-4fd3-a644-6e71aba08d39",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "c7e79545-ef84-4535-9cc6-da64d2e6870d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17e2c9c3-3221-4f1d-b1f5-30f625c0abce",
        "cursor": {
          "ref": "bba7c6a5-a87c-49d4-98a2-7892f5ab4ffd",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ee39d0d8-3550-4dcc-81c5-7c455e6439c2"
        },
        "item": {
          "id": "17e2c9c3-3221-4f1d-b1f5-30f625c0abce",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "f174d3cb-4719-403a-b004-9c1d1ed2c79f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc7ca450-691a-41b1-beb7-135926b4cbc9",
        "cursor": {
          "ref": "768e28b1-d700-4543-ac47-27c5ddb60fda",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "b2d59a7a-98df-45ce-afb6-3febedfd2dd6"
        },
        "item": {
          "id": "dc7ca450-691a-41b1-beb7-135926b4cbc9",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "4ea462b8-ad94-44b3-a77b-4e46707f60d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8411bd5d-92f2-44f7-91f1-6a2b58e4f226",
        "cursor": {
          "ref": "66397774-b924-4cfa-b8b3-16c2b60d871b",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "8c30177e-21bc-41a6-bc52-a52a236d6087"
        },
        "item": {
          "id": "8411bd5d-92f2-44f7-91f1-6a2b58e4f226",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2864c8ad-34aa-46f5-9674-0e0b7e43fee2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61bc9d4f-6985-413a-9bbb-1c152258dd29",
        "cursor": {
          "ref": "3230bc02-207e-4f7b-8303-270efe440b78",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b8e8cfdb-f83b-4d2a-a3ad-6bb6e60665b3"
        },
        "item": {
          "id": "61bc9d4f-6985-413a-9bbb-1c152258dd29",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6be5b633-00f3-438d-a4e0-611158d906a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f4e2466-8562-4d82-a742-8dc926c990d5",
        "cursor": {
          "ref": "7353c6c3-b3b8-4d45-88fc-f7d3e03724b3",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "e3e271eb-fa27-422e-9cf4-95cd8ae34514"
        },
        "item": {
          "id": "9f4e2466-8562-4d82-a742-8dc926c990d5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "bb9879fb-cdb7-4efa-b5c3-ceef3a5beae1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4861f98c-205e-4564-b178-c3c5772c7124",
        "cursor": {
          "ref": "7c5d2833-b776-484a-a7bf-5b1bbf3ad777",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "11304914-737c-4201-8e1d-267245f11fdf"
        },
        "item": {
          "id": "4861f98c-205e-4564-b178-c3c5772c7124",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "9635e63d-3a76-48c7-b76b-8103d40c6ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc58bd09-f718-4086-a9d2-7183783fd721",
        "cursor": {
          "ref": "ec787627-4953-4cd6-a549-e922f599a0ca",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "46439348-614d-467b-8cdb-ac6c27bd699a"
        },
        "item": {
          "id": "cc58bd09-f718-4086-a9d2-7183783fd721",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "8e84bcb0-a350-4a51-91dc-b69a23b6b13b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30d3601f-2102-4a44-8057-f62659d167ab",
        "cursor": {
          "ref": "c09c2885-42fd-4870-b946-824a8dc0cbb8",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "afd90076-f4b1-48ce-a7cf-997efc2cd531"
        },
        "item": {
          "id": "30d3601f-2102-4a44-8057-f62659d167ab",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "dcec579e-0e0a-46d3-a8d9-1e44d3e14f31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9366b1b-db6a-4af4-a38f-59afc411947b",
        "cursor": {
          "ref": "a14e27f6-caf4-4f07-a245-ad87ea5bc5ae",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "0a6de653-c82a-4625-a76a-07b047c92a80"
        },
        "item": {
          "id": "e9366b1b-db6a-4af4-a38f-59afc411947b",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "9d1717fc-0cb5-4fcb-aa12-6e7f76c46f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "799a1be4-b5bb-4f81-911e-e4e265975a64",
        "cursor": {
          "ref": "82c94ac0-b69e-4611-8596-2e8f6680b9c1",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "552fb7fa-63e6-4952-9619-5e448fe34150"
        },
        "item": {
          "id": "799a1be4-b5bb-4f81-911e-e4e265975a64",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "bb8247ae-6b1f-4133-a85e-fd04c7e4cf6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "969e3088-cab9-4b3b-980f-7c44c4cafe7d",
        "cursor": {
          "ref": "5b6bfc5e-3f3a-4cd5-97d6-60d2193ab27f",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "b1a629b5-abb5-46b1-8a27-29125054bf85"
        },
        "item": {
          "id": "969e3088-cab9-4b3b-980f-7c44c4cafe7d",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "646a1116-2c50-4c25-b0f2-76449767b2a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3dccc1a3-0f6f-42f8-9116-6fcc53559dc0",
        "cursor": {
          "ref": "639da1d9-f35a-4054-a98d-c35503deeb07",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "b65be77a-b12a-4d6b-af1f-3d52bf579ba8"
        },
        "item": {
          "id": "3dccc1a3-0f6f-42f8-9116-6fcc53559dc0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "053ac8f0-0af1-4895-9ba5-14e6d43b79d4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "627a3a70-1322-49fe-b808-78a6e83ab664",
        "cursor": {
          "ref": "670914ce-e379-4b7a-b5f4-8076b6f87c20",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "30e90fe4-8f7c-4c8a-8e5d-56519533aea0"
        },
        "item": {
          "id": "627a3a70-1322-49fe-b808-78a6e83ab664",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "acd504ea-0bb2-41ec-8af5-399509110356",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51b83838-76e8-407a-bc57-36b32a6053c0",
        "cursor": {
          "ref": "e6b08dcb-490f-4f76-a248-49cc0eaf1ebf",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "75b54187-64c0-48b5-acf0-0606a5a773e7"
        },
        "item": {
          "id": "51b83838-76e8-407a-bc57-36b32a6053c0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "04a6f955-1481-4abc-b384-f51ff7084c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0deed51-b8c6-436b-9d12-c7b25911b800",
        "cursor": {
          "ref": "5b8b2b37-8522-4e95-827e-ea4f7197f013",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "4e3598bf-e3bd-4d07-8e0c-1b2e8b76c086"
        },
        "item": {
          "id": "e0deed51-b8c6-436b-9d12-c7b25911b800",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ded82fc9-4256-488f-95cc-ca58abe78877",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ba0ea6-7e38-4781-bb0a-6a9d36e6f4f9",
        "cursor": {
          "ref": "0c8b7372-9272-434d-af60-77a5450740bd",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "c27434d4-b6e4-4490-baff-bf362c9f040b"
        },
        "item": {
          "id": "59ba0ea6-7e38-4781-bb0a-6a9d36e6f4f9",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d3e0ecd0-95e6-4a95-9f4d-3e7ba9c8f6bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d113856-05e0-4870-9869-3595e79ec1de",
        "cursor": {
          "ref": "59237aa6-9828-438e-9dbf-a6f54fe991f3",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1cf45a13-7a1c-44f2-8b9d-a16d04446432"
        },
        "item": {
          "id": "5d113856-05e0-4870-9869-3595e79ec1de",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "b46ef0c9-604f-4800-8eaa-ae4c13165128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ba000a3-de1f-49c3-b096-0a46b3e772ef",
        "cursor": {
          "ref": "0d73d4e7-da8d-4e11-b977-fda991925a73",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "cf0c6127-7e83-46ce-a000-9bb8b9ca69bc"
        },
        "item": {
          "id": "0ba000a3-de1f-49c3-b096-0a46b3e772ef",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "096f3d4e-78ed-407a-bb1b-67d845b2ae77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 54,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e8248359-6aee-470d-8875-9c089d104907",
        "cursor": {
          "ref": "0721dcfc-d4b9-41b9-ba2f-ca9c33ca5447",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "5f99706f-f6db-44d2-b5ab-b92ab980aa08"
        },
        "item": {
          "id": "e8248359-6aee-470d-8875-9c089d104907",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "f0950d82-a03e-402c-a09a-829ba5180d90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da6ec75c-5a69-48da-b8bd-d7928f3c98fe",
        "cursor": {
          "ref": "64dac63e-6d01-451f-a901-391a472daa1d",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "2054a662-c19b-4e0b-845b-b9d0f371221d"
        },
        "item": {
          "id": "da6ec75c-5a69-48da-b8bd-d7928f3c98fe",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "c2995eb4-6861-428d-9fa9-06c7c77778e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c21eba6f-f66d-4ad5-8387-b6fc856af442",
        "cursor": {
          "ref": "084162e5-3178-4473-9c6e-dae76934d4f7",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "d792c2c5-e351-4988-85b4-e29eeafd0caf"
        },
        "item": {
          "id": "c21eba6f-f66d-4ad5-8387-b6fc856af442",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "7cd9e8b6-2128-41c4-88af-0af845e3bca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b8d2f71-d9b2-40d1-ba52-a62c0cfc7d7a",
        "cursor": {
          "ref": "218daaca-3c5f-4946-abfa-b246261a8481",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "a1aff867-b762-4863-8ac3-8e5e37092e23"
        },
        "item": {
          "id": "7b8d2f71-d9b2-40d1-ba52-a62c0cfc7d7a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "7b80c3f7-d0d8-47f0-b086-0ca4f3bbfaf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eaecb99-7564-4b78-a884-40ee0d76dd75",
        "cursor": {
          "ref": "4f9532c4-31e5-4f44-b427-4e624256e6af",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "73afb393-a1d1-41da-b284-60acd7e6e662"
        },
        "item": {
          "id": "1eaecb99-7564-4b78-a884-40ee0d76dd75",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3dc6ca9f-493d-4950-9271-1a71c90de251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8c5bbdd-8082-44a0-bf00-4d1af50e083f",
        "cursor": {
          "ref": "6131a1a3-dd7d-4cf5-80ec-47e17747ab2b",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "5a728646-ad47-4ed2-bf5f-d344cf94e8aa"
        },
        "item": {
          "id": "b8c5bbdd-8082-44a0-bf00-4d1af50e083f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "4d361160-9df9-436d-a275-69ffe0c16ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f12ef780-1717-43d7-a1de-e2d3d75f4d44",
        "cursor": {
          "ref": "aeb58781-3fa9-4d8c-9503-1f714d27fd18",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "be32c527-7e29-4e3a-a640-f8b5e14da730"
        },
        "item": {
          "id": "f12ef780-1717-43d7-a1de-e2d3d75f4d44",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "58de6bff-5e3b-4b01-93d6-46437edf9af7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4db6bd51-aa5f-4232-8bdd-1c2f275c4444",
        "cursor": {
          "ref": "03230771-7c83-4cee-b3b6-b3c27610d1f3",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "7f51d456-0f4b-44a5-a56b-ced11d2a7dcf"
        },
        "item": {
          "id": "4db6bd51-aa5f-4232-8bdd-1c2f275c4444",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "e2eb098a-6469-46f5-95be-3b0bdd8b15a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d80893-a9b9-4e41-a1d9-eea5d928a42e",
        "cursor": {
          "ref": "d6391f63-4de4-4b50-a747-c26bac0088ae",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "80eb32da-c2d7-4f63-8480-9a019a0b555a"
        },
        "item": {
          "id": "69d80893-a9b9-4e41-a1d9-eea5d928a42e",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "726da7d5-2d35-45a9-b699-22a6912e5a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 154
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4811fe6-bfc3-4ed8-ba9a-9793004ae3ba",
        "cursor": {
          "ref": "cd0e05f9-5d47-4302-952b-949b0729235b",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "eb4df0eb-5435-4407-9b22-f598f2922a95"
        },
        "item": {
          "id": "d4811fe6-bfc3-4ed8-ba9a-9793004ae3ba",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e0ddb538-c446-4bb8-9786-4825f697efd8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:276)"
            }
          }
        ]
      },
      {
        "id": "cb7d12cb-5214-420e-a5b1-1cf2d7db19ab",
        "cursor": {
          "ref": "ef417e1f-e097-402f-80a4-6ceb70db2191",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "4774f8ac-91fb-47a7-a1e2-807b413f0dea"
        },
        "item": {
          "id": "cb7d12cb-5214-420e-a5b1-1cf2d7db19ab",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "ce77d02a-9b28-4900-8df7-38b429980ce7",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "d89bd761-0139-48de-8d82-5faa184f3a82",
        "cursor": {
          "ref": "f67b9ec3-55d8-43ee-8809-ef1bed89c58f",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "40524c21-749d-43c9-a445-a25d57f8a927"
        },
        "item": {
          "id": "d89bd761-0139-48de-8d82-5faa184f3a82",
          "name": "credentials_verify"
        },
        "response": {
          "id": "23878703-b010-4917-93e1-218c9f2b942b",
          "status": "OK",
          "code": 200,
          "responseTime": 2441,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d3e81c-5774-48d9-9627-99abb4bcccb1",
        "cursor": {
          "ref": "87423c8a-7394-4717-b5ed-163ad3f32139",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "6db1c1cf-be75-4cf7-94ba-60a648835796"
        },
        "item": {
          "id": "b4d3e81c-5774-48d9-9627-99abb4bcccb1",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "10be9cf4-4e46-4579-9063-030ccfea3796",
          "status": "OK",
          "code": 200,
          "responseTime": 2404,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e0517ba-612b-4491-8854-7b6c04d54e14",
        "cursor": {
          "ref": "ab59a07b-c056-40f8-abcd-8acf75e703fc",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "85936355-d241-496e-bd5f-6502837e3f60"
        },
        "item": {
          "id": "1e0517ba-612b-4491-8854-7b6c04d54e14",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a86e49f9-c175-4d42-a6b7-4b2cbb6baafe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "1e0517ba-612b-4491-8854-7b6c04d54e14",
        "cursor": {
          "ref": "ab59a07b-c056-40f8-abcd-8acf75e703fc",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "85936355-d241-496e-bd5f-6502837e3f60"
        },
        "item": {
          "id": "1e0517ba-612b-4491-8854-7b6c04d54e14",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "a86e49f9-c175-4d42-a6b7-4b2cbb6baafe",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:280)"
            }
          }
        ]
      },
      {
        "id": "de2646c3-39c7-4f5e-972a-827322853b2c",
        "cursor": {
          "ref": "c57250ce-fb7c-4b80-a8c9-5d35978815f4",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "02792e4a-274e-4fd0-b3b1-0b84ba30f02c"
        },
        "item": {
          "id": "de2646c3-39c7-4f5e-972a-827322853b2c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "8eaae97c-f4ad-4183-9707-4e821fad77b5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:281)"
            }
          }
        ]
      },
      {
        "id": "4d3a6db1-104b-4467-a7f9-54ebf71089cb",
        "cursor": {
          "ref": "c2ea3978-dbcc-43fb-9615-b0124a3ee989",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "dd71fd4d-a82b-4585-98f0-c547f8a11b0d"
        },
        "item": {
          "id": "4d3a6db1-104b-4467-a7f9-54ebf71089cb",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "64f91c08-eab0-4abf-85db-104ceb63322b",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:282)"
            }
          }
        ]
      }
    ]
  }
}